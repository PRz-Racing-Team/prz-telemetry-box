
prz-telemetry-box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004568  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08004718  08004718  00005718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048b4  080048b4  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  080048b4  080048b4  000058b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048bc  080048bc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048bc  080048bc  000058bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048c0  080048c0  000058c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080048c4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          0000070c  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000768  20000768  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000938b  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b61  00000000  00000000  0000f417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  00010f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ce  00000000  00000000  00011710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002356e  00000000  00000000  00011cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b0d0  00000000  00000000  0003524c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1e15  00000000  00000000  0004031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112131  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000022d4  00000000  00000000  00112174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00114448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004700 	.word	0x08004700

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08004700 	.word	0x08004700

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <MX_DMA_Init+0x4c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a0f      	ldr	r2, [pc, #60]	@ (80005dc <MX_DMA_Init+0x4c>)
 80005a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <MX_DMA_Init+0x4c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <MX_DMA_Init+0x4c>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a08      	ldr	r2, [pc, #32]	@ (80005dc <MX_DMA_Init+0x4c>)
 80005bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <MX_DMA_Init+0x4c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	683b      	ldr	r3, [r7, #0]

}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	40023800 	.word	0x40023800

080005e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	4b10      	ldr	r3, [pc, #64]	@ (800062c <MX_GPIO_Init+0x4c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <MX_GPIO_Init+0x4c>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <MX_GPIO_Init+0x4c>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	4b09      	ldr	r3, [pc, #36]	@ (800062c <MX_GPIO_Init+0x4c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a08      	ldr	r2, [pc, #32]	@ (800062c <MX_GPIO_Init+0x4c>)
 800060c:	f043 0308 	orr.w	r3, r3, #8
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
 8000612:	4b06      	ldr	r3, [pc, #24]	@ (800062c <MX_GPIO_Init+0x4c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000616:	f003 0308 	and.w	r3, r3, #8
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	683b      	ldr	r3, [r7, #0]

}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fd7e 	bl	8001138 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f8c6 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f7ff ffce 	bl	80005e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000644:	f7ff ffa4 	bl	8000590 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000648:	f000 fa1e 	bl	8000a88 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800064c:	f000 fa6a 	bl	8000b24 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000650:	f000 f928 	bl	80008a4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  prints("PRz Telemetry Box 4.0\r\n");
 8000654:	4855      	ldr	r0, [pc, #340]	@ (80007ac <main+0x17c>)
 8000656:	f000 fcf7 	bl	8001048 <prints>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

#define RX_BUF_SIZE 255
  	uint8_t rx_buf[RX_BUF_SIZE];
  	uint16_t rx_index = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206

	uint8_t str[255];
	uint16_t len;

	uart1_cfg.trim_newlines = 1;
 8000660:	4b53      	ldr	r3, [pc, #332]	@ (80007b0 <main+0x180>)
 8000662:	2201      	movs	r2, #1
 8000664:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

	while (1)
	{
		if(uart_available(&huart1))
 8000668:	4852      	ldr	r0, [pc, #328]	@ (80007b4 <main+0x184>)
 800066a:	f000 fba3 	bl	8000db4 <uart_available>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d075      	beq.n	8000760 <main+0x130>
		{
			len = uart_get_input(&huart1, rx_buf + rx_index, RX_BUF_SIZE - rx_index - 1);
 8000674:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8000678:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 800067c:	18d1      	adds	r1, r2, r3
 800067e:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 8000682:	b2da      	uxtb	r2, r3
 8000684:	f06f 0301 	mvn.w	r3, #1
 8000688:	1a9b      	subs	r3, r3, r2
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	4849      	ldr	r0, [pc, #292]	@ (80007b4 <main+0x184>)
 8000690:	f000 fbd0 	bl	8000e34 <uart_get_input>
 8000694:	4603      	mov	r3, r0
 8000696:	f8a7 3204 	strh.w	r3, [r7, #516]	@ 0x204
			if(len == 0) continue;
 800069a:	f8b7 3204 	ldrh.w	r3, [r7, #516]	@ 0x204
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d07d      	beq.n	800079e <main+0x16e>
			rx_index += len;
 80006a2:	f8b7 2206 	ldrh.w	r2, [r7, #518]	@ 0x206
 80006a6:	f8b7 3204 	ldrh.w	r3, [r7, #516]	@ 0x204
 80006aa:	4413      	add	r3, r2
 80006ac:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
			if (rx_buf[rx_index - 1] == '\n' || rx_buf[rx_index - 1] == '\r') {
 80006b0:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 80006b4:	3b01      	subs	r3, #1
 80006b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80006ba:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80006be:	5cd3      	ldrb	r3, [r2, r3]
 80006c0:	2b0a      	cmp	r3, #10
 80006c2:	d009      	beq.n	80006d8 <main+0xa8>
 80006c4:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 80006c8:	3b01      	subs	r3, #1
 80006ca:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80006ce:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80006d2:	5cd3      	ldrb	r3, [r2, r3]
 80006d4:	2b0d      	cmp	r3, #13
 80006d6:	d164      	bne.n	80007a2 <main+0x172>
				rx_buf[rx_index - 1] = 0;
 80006d8:	f8b7 3206 	ldrh.w	r3, [r7, #518]	@ 0x206
 80006dc:	3b01      	subs	r3, #1
 80006de:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80006e2:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80006e6:	2100      	movs	r1, #0
 80006e8:	54d1      	strb	r1, [r2, r3]
				rx_index = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8a7 3206 	strh.w	r3, [r7, #518]	@ 0x206
			}
			else continue;

			prints("U1: ");
 80006f0:	4831      	ldr	r0, [pc, #196]	@ (80007b8 <main+0x188>)
 80006f2:	f000 fca9 	bl	8001048 <prints>
			prints((char*) rx_buf);
 80006f6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fca4 	bl	8001048 <prints>
			prints("\r\n");
 8000700:	482e      	ldr	r0, [pc, #184]	@ (80007bc <main+0x18c>)
 8000702:	f000 fca1 	bl	8001048 <prints>

			uint32_t baud_rate = atoi((char*) rx_buf);
 8000706:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 800070a:	4618      	mov	r0, r3
 800070c:	f003 fabc 	bl	8003c88 <atoi>
 8000710:	4603      	mov	r3, r0
 8000712:	f8c7 3200 	str.w	r3, [r7, #512]	@ 0x200
			if (baud_rate == 115200 || baud_rate == 921600)
 8000716:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800071a:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800071e:	d004      	beq.n	800072a <main+0xfa>
 8000720:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000724:	f5b3 2f61 	cmp.w	r3, #921600	@ 0xe1000
 8000728:	d110      	bne.n	800074c <main+0x11c>
			{
				snprintf((char*) str, 255, "Changing baud rate to %ld\r\n", baud_rate);
 800072a:	4638      	mov	r0, r7
 800072c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8000730:	4a23      	ldr	r2, [pc, #140]	@ (80007c0 <main+0x190>)
 8000732:	21ff      	movs	r1, #255	@ 0xff
 8000734:	f003 fb30 	bl	8003d98 <sniprintf>
				prints((char*) str);
 8000738:	463b      	mov	r3, r7
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fc84 	bl	8001048 <prints>
				uart_set_baudrate(&huart2, baud_rate);
 8000740:	f8d7 1200 	ldr.w	r1, [r7, #512]	@ 0x200
 8000744:	481f      	ldr	r0, [pc, #124]	@ (80007c4 <main+0x194>)
 8000746:	f000 fbd1 	bl	8000eec <uart_set_baudrate>
 800074a:	e009      	b.n	8000760 <main+0x130>
			}
			else
			{
				uart_print(&huart2, (char*) rx_buf);
 800074c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000750:	4619      	mov	r1, r3
 8000752:	481c      	ldr	r0, [pc, #112]	@ (80007c4 <main+0x194>)
 8000754:	f000 fb1a 	bl	8000d8c <uart_print>
				uart_print(&huart2, "\r\n");
 8000758:	4918      	ldr	r1, [pc, #96]	@ (80007bc <main+0x18c>)
 800075a:	481a      	ldr	r0, [pc, #104]	@ (80007c4 <main+0x194>)
 800075c:	f000 fb16 	bl	8000d8c <uart_print>
			}

		}
		if(uart_available(&huart2))
 8000760:	4818      	ldr	r0, [pc, #96]	@ (80007c4 <main+0x194>)
 8000762:	f000 fb27 	bl	8000db4 <uart_available>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	f43f af7d 	beq.w	8000668 <main+0x38>
		{
			len = uart_get_input(&huart2, str, 255);
 800076e:	463b      	mov	r3, r7
 8000770:	22ff      	movs	r2, #255	@ 0xff
 8000772:	4619      	mov	r1, r3
 8000774:	4813      	ldr	r0, [pc, #76]	@ (80007c4 <main+0x194>)
 8000776:	f000 fb5d 	bl	8000e34 <uart_get_input>
 800077a:	4603      	mov	r3, r0
 800077c:	f8a7 3204 	strh.w	r3, [r7, #516]	@ 0x204
			if(!len) continue;
 8000780:	f8b7 3204 	ldrh.w	r3, [r7, #516]	@ 0x204
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00e      	beq.n	80007a6 <main+0x176>
			prints("GSM: ");
 8000788:	480f      	ldr	r0, [pc, #60]	@ (80007c8 <main+0x198>)
 800078a:	f000 fc5d 	bl	8001048 <prints>
			prints((char*) str);
 800078e:	463b      	mov	r3, r7
 8000790:	4618      	mov	r0, r3
 8000792:	f000 fc59 	bl	8001048 <prints>
			prints("\r\n");
 8000796:	4809      	ldr	r0, [pc, #36]	@ (80007bc <main+0x18c>)
 8000798:	f000 fc56 	bl	8001048 <prints>
 800079c:	e764      	b.n	8000668 <main+0x38>
			if(len == 0) continue;
 800079e:	bf00      	nop
 80007a0:	e762      	b.n	8000668 <main+0x38>
			else continue;
 80007a2:	bf00      	nop
 80007a4:	e760      	b.n	8000668 <main+0x38>
			if(!len) continue;
 80007a6:	bf00      	nop
		if(uart_available(&huart1))
 80007a8:	e75e      	b.n	8000668 <main+0x38>
 80007aa:	bf00      	nop
 80007ac:	08004718 	.word	0x08004718
 80007b0:	2000007c 	.word	0x2000007c
 80007b4:	200004cc 	.word	0x200004cc
 80007b8:	08004730 	.word	0x08004730
 80007bc:	08004738 	.word	0x08004738
 80007c0:	0800473c 	.word	0x0800473c
 80007c4:	20000514 	.word	0x20000514
 80007c8:	08004758 	.word	0x08004758

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	@ 0x50
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	2230      	movs	r2, #48	@ 0x30
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fb10 	bl	8003e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	4b29      	ldr	r3, [pc, #164]	@ (800089c <SystemClock_Config+0xd0>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	4a28      	ldr	r2, [pc, #160]	@ (800089c <SystemClock_Config+0xd0>)
 80007fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000800:	4b26      	ldr	r3, [pc, #152]	@ (800089c <SystemClock_Config+0xd0>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	4b23      	ldr	r3, [pc, #140]	@ (80008a0 <SystemClock_Config+0xd4>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000818:	4a21      	ldr	r2, [pc, #132]	@ (80008a0 <SystemClock_Config+0xd4>)
 800081a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b1f      	ldr	r3, [pc, #124]	@ (80008a0 <SystemClock_Config+0xd4>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082c:	2302      	movs	r3, #2
 800082e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000834:	2310      	movs	r3, #16
 8000836:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000838:	2302      	movs	r3, #2
 800083a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083c:	2300      	movs	r3, #0
 800083e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000840:	2308      	movs	r3, #8
 8000842:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000844:	2378      	movs	r3, #120	@ 0x78
 8000846:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800084c:	2304      	movs	r3, #4
 800084e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fba1 	bl	8001f9c <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000860:	f000 f844 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000868:	2302      	movs	r3, #2
 800086a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000870:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000876:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800087a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2103      	movs	r1, #3
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fe02 	bl	800248c <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800088e:	f000 f82d 	bl	80008ec <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3750      	adds	r7, #80	@ 0x50
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800
 80008a0:	40007000 	.word	0x40007000

080008a4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2025      	movs	r0, #37	@ 0x25
 80008ae:	f000 fd90 	bl	80013d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008b2:	2025      	movs	r0, #37	@ 0x25
 80008b4:	f000 fda9 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	2026      	movs	r0, #38	@ 0x26
 80008be:	f000 fd88 	bl	80013d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008c2:	2026      	movs	r0, #38	@ 0x26
 80008c4:	f000 fda1 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	2010      	movs	r0, #16
 80008ce:	f000 fd80 	bl	80013d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008d2:	2010      	movs	r0, #16
 80008d4:	f000 fd99 	bl	800140a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	203a      	movs	r0, #58	@ 0x3a
 80008de:	f000 fd78 	bl	80013d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008e2:	203a      	movs	r0, #58	@ 0x3a
 80008e4:	f000 fd91 	bl	800140a <HAL_NVIC_EnableIRQ>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <Error_Handler+0x8>

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	4a0f      	ldr	r2, [pc, #60]	@ (8000944 <HAL_MspInit+0x4c>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800090c:	6453      	str	r3, [r2, #68]	@ 0x44
 800090e:	4b0d      	ldr	r3, [pc, #52]	@ (8000944 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a08      	ldr	r2, [pc, #32]	@ (8000944 <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <NMI_Handler+0x4>

08000950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <HardFault_Handler+0x4>

08000958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <MemManage_Handler+0x4>

08000960 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <UsageFault_Handler+0x4>

08000970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099e:	f000 fc1d 	bl	80011dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009ac:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <DMA1_Stream5_IRQHandler+0x10>)
 80009ae:	f000 fedf 	bl	8001770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200005bc 	.word	0x200005bc

080009bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009c0:	4802      	ldr	r0, [pc, #8]	@ (80009cc <USART1_IRQHandler+0x10>)
 80009c2:	f002 f87b 	bl	8002abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	200004cc 	.word	0x200004cc

080009d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009d4:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <USART2_IRQHandler+0x10>)
 80009d6:	f002 f871 	bl	8002abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000514 	.word	0x20000514

080009e4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009e8:	4802      	ldr	r0, [pc, #8]	@ (80009f4 <DMA2_Stream2_IRQHandler+0x10>)
 80009ea:	f000 fec1 	bl	8001770 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000055c 	.word	0x2000055c

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	@ (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f003 f9f2 	bl	8003e10 <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	@ (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20030000 	.word	0x20030000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	20000078 	.word	0x20000078
 8000a60:	20000768 	.word	0x20000768

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	@ (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a8e:	4b22      	ldr	r3, [pc, #136]	@ (8000b18 <MX_USART1_UART_Init+0x90>)
 8000a90:	4a22      	ldr	r2, [pc, #136]	@ (8000b1c <MX_USART1_UART_Init+0x94>)
 8000a92:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000a94:	4b20      	ldr	r3, [pc, #128]	@ (8000b18 <MX_USART1_UART_Init+0x90>)
 8000a96:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000a9a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b18 <MX_USART1_UART_Init+0x90>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <MX_USART1_UART_Init+0x90>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b18 <MX_USART1_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <MX_USART1_UART_Init+0x90>)
 8000ab0:	220c      	movs	r2, #12
 8000ab2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <MX_USART1_UART_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aba:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <MX_USART1_UART_Init+0x90>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac0:	4815      	ldr	r0, [pc, #84]	@ (8000b18 <MX_USART1_UART_Init+0x90>)
 8000ac2:	f001 fec3 	bl	800284c <HAL_UART_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000acc:	f7ff ff0e 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	memset(&uart1_cfg, 0, sizeof(uart_data_t));
 8000ad0:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4812      	ldr	r0, [pc, #72]	@ (8000b20 <MX_USART1_UART_Init+0x98>)
 8000ad8:	f003 f992 	bl	8003e00 <memset>
	uart1_cfg.huart = &huart1;
 8000adc:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <MX_USART1_UART_Init+0x98>)
 8000ade:	4a0e      	ldr	r2, [pc, #56]	@ (8000b18 <MX_USART1_UART_Init+0x90>)
 8000ae0:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	uart1_cfg.trim_newlines = 1;
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_USART1_UART_Init+0x98>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

	uart_line_buffer_t* line = uart1_cfg.lines + uart1_cfg.active_line;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_USART1_UART_Init+0x98>)
 8000aee:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 8000af2:	461a      	mov	r2, r3
 8000af4:	4613      	mov	r3, r2
 8000af6:	011b      	lsls	r3, r3, #4
 8000af8:	4413      	add	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <MX_USART1_UART_Init+0x98>)
 8000b00:	4413      	add	r3, r2
 8000b02:	607b      	str	r3, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, line->data, UART_RX_LINE_BUFFER_SIZE);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2240      	movs	r2, #64	@ 0x40
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4803      	ldr	r0, [pc, #12]	@ (8000b18 <MX_USART1_UART_Init+0x90>)
 8000b0c:	f001 ff79 	bl	8002a02 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END USART1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200004cc 	.word	0x200004cc
 8000b1c:	40011000 	.word	0x40011000
 8000b20:	2000007c 	.word	0x2000007c

08000b24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b2a:	4b22      	ldr	r3, [pc, #136]	@ (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b2c:	4a22      	ldr	r2, [pc, #136]	@ (8000bb8 <MX_USART2_UART_Init+0x94>)
 8000b2e:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b30:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b32:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b36:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b38:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b4c:	220c      	movs	r2, #12
 8000b4e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b50:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b56:	4b17      	ldr	r3, [pc, #92]	@ (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5c:	4815      	ldr	r0, [pc, #84]	@ (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000b5e:	f001 fe75 	bl	800284c <HAL_UART_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000b68:	f7ff fec0 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
	memset(&uart2_cfg, 0, sizeof(uart_data_t));
 8000b6c:	f44f 720a 	mov.w	r2, #552	@ 0x228
 8000b70:	2100      	movs	r1, #0
 8000b72:	4812      	ldr	r0, [pc, #72]	@ (8000bbc <MX_USART2_UART_Init+0x98>)
 8000b74:	f003 f944 	bl	8003e00 <memset>
	uart2_cfg.huart = &huart1;
 8000b78:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <MX_USART2_UART_Init+0x98>)
 8000b7a:	4a11      	ldr	r2, [pc, #68]	@ (8000bc0 <MX_USART2_UART_Init+0x9c>)
 8000b7c:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	uart2_cfg.trim_newlines = 1;
 8000b80:	4b0e      	ldr	r3, [pc, #56]	@ (8000bbc <MX_USART2_UART_Init+0x98>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	f883 2222 	strb.w	r2, [r3, #546]	@ 0x222

	uart_line_buffer_t* line = uart2_cfg.lines + uart2_cfg.active_line;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <MX_USART2_UART_Init+0x98>)
 8000b8a:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 8000b8e:	461a      	mov	r2, r3
 8000b90:	4613      	mov	r3, r2
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	4413      	add	r3, r2
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <MX_USART2_UART_Init+0x98>)
 8000b9c:	4413      	add	r3, r2
 8000b9e:	607b      	str	r3, [r7, #4]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, line->data, UART_RX_LINE_BUFFER_SIZE);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2240      	movs	r2, #64	@ 0x40
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4803      	ldr	r0, [pc, #12]	@ (8000bb4 <MX_USART2_UART_Init+0x90>)
 8000ba8:	f001 ff2b 	bl	8002a02 <HAL_UARTEx_ReceiveToIdle_DMA>
  /* USER CODE END USART2_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000514 	.word	0x20000514
 8000bb8:	40004400 	.word	0x40004400
 8000bbc:	200002a4 	.word	0x200002a4
 8000bc0:	200004cc 	.word	0x200004cc

08000bc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08c      	sub	sp, #48	@ 0x30
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 031c 	add.w	r3, r7, #28
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a61      	ldr	r2, [pc, #388]	@ (8000d68 <HAL_UART_MspInit+0x1a4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d15c      	bne.n	8000ca0 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	4b60      	ldr	r3, [pc, #384]	@ (8000d6c <HAL_UART_MspInit+0x1a8>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bee:	4a5f      	ldr	r2, [pc, #380]	@ (8000d6c <HAL_UART_MspInit+0x1a8>)
 8000bf0:	f043 0310 	orr.w	r3, r3, #16
 8000bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bf6:	4b5d      	ldr	r3, [pc, #372]	@ (8000d6c <HAL_UART_MspInit+0x1a8>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	f003 0310 	and.w	r3, r3, #16
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	4b59      	ldr	r3, [pc, #356]	@ (8000d6c <HAL_UART_MspInit+0x1a8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a58      	ldr	r2, [pc, #352]	@ (8000d6c <HAL_UART_MspInit+0x1a8>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b56      	ldr	r3, [pc, #344]	@ (8000d6c <HAL_UART_MspInit+0x1a8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c1e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c30:	2307      	movs	r3, #7
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	484d      	ldr	r0, [pc, #308]	@ (8000d70 <HAL_UART_MspInit+0x1ac>)
 8000c3c:	f001 f802 	bl	8001c44 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000c40:	4b4c      	ldr	r3, [pc, #304]	@ (8000d74 <HAL_UART_MspInit+0x1b0>)
 8000c42:	4a4d      	ldr	r2, [pc, #308]	@ (8000d78 <HAL_UART_MspInit+0x1b4>)
 8000c44:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000c46:	4b4b      	ldr	r3, [pc, #300]	@ (8000d74 <HAL_UART_MspInit+0x1b0>)
 8000c48:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c4c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4e:	4b49      	ldr	r3, [pc, #292]	@ (8000d74 <HAL_UART_MspInit+0x1b0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c54:	4b47      	ldr	r3, [pc, #284]	@ (8000d74 <HAL_UART_MspInit+0x1b0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c5a:	4b46      	ldr	r3, [pc, #280]	@ (8000d74 <HAL_UART_MspInit+0x1b0>)
 8000c5c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c60:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c62:	4b44      	ldr	r3, [pc, #272]	@ (8000d74 <HAL_UART_MspInit+0x1b0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c68:	4b42      	ldr	r3, [pc, #264]	@ (8000d74 <HAL_UART_MspInit+0x1b0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000c6e:	4b41      	ldr	r3, [pc, #260]	@ (8000d74 <HAL_UART_MspInit+0x1b0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000c74:	4b3f      	ldr	r3, [pc, #252]	@ (8000d74 <HAL_UART_MspInit+0x1b0>)
 8000c76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c7a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c7c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d74 <HAL_UART_MspInit+0x1b0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c82:	483c      	ldr	r0, [pc, #240]	@ (8000d74 <HAL_UART_MspInit+0x1b0>)
 8000c84:	f000 fbdc 	bl	8001440 <HAL_DMA_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000c8e:	f7ff fe2d 	bl	80008ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a37      	ldr	r2, [pc, #220]	@ (8000d74 <HAL_UART_MspInit+0x1b0>)
 8000c96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c98:	4a36      	ldr	r2, [pc, #216]	@ (8000d74 <HAL_UART_MspInit+0x1b0>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c9e:	e05f      	b.n	8000d60 <HAL_UART_MspInit+0x19c>
  else if(uartHandle->Instance==USART2)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a35      	ldr	r2, [pc, #212]	@ (8000d7c <HAL_UART_MspInit+0x1b8>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d15a      	bne.n	8000d60 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
 8000cae:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <HAL_UART_MspInit+0x1a8>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	4a2e      	ldr	r2, [pc, #184]	@ (8000d6c <HAL_UART_MspInit+0x1a8>)
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cba:	4b2c      	ldr	r3, [pc, #176]	@ (8000d6c <HAL_UART_MspInit+0x1a8>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc2:	613b      	str	r3, [r7, #16]
 8000cc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b28      	ldr	r3, [pc, #160]	@ (8000d6c <HAL_UART_MspInit+0x1a8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a27      	ldr	r2, [pc, #156]	@ (8000d6c <HAL_UART_MspInit+0x1a8>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b25      	ldr	r3, [pc, #148]	@ (8000d6c <HAL_UART_MspInit+0x1a8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0308 	and.w	r3, r3, #8
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ce2:	2360      	movs	r3, #96	@ 0x60
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf2:	2307      	movs	r3, #7
 8000cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4820      	ldr	r0, [pc, #128]	@ (8000d80 <HAL_UART_MspInit+0x1bc>)
 8000cfe:	f000 ffa1 	bl	8001c44 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d02:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <HAL_UART_MspInit+0x1c0>)
 8000d04:	4a20      	ldr	r2, [pc, #128]	@ (8000d88 <HAL_UART_MspInit+0x1c4>)
 8000d06:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d08:	4b1e      	ldr	r3, [pc, #120]	@ (8000d84 <HAL_UART_MspInit+0x1c0>)
 8000d0a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d0e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d10:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <HAL_UART_MspInit+0x1c0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d16:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <HAL_UART_MspInit+0x1c0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <HAL_UART_MspInit+0x1c0>)
 8000d1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d22:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d24:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <HAL_UART_MspInit+0x1c0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <HAL_UART_MspInit+0x1c0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <HAL_UART_MspInit+0x1c0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <HAL_UART_MspInit+0x1c0>)
 8000d38:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d3c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <HAL_UART_MspInit+0x1c0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d44:	480f      	ldr	r0, [pc, #60]	@ (8000d84 <HAL_UART_MspInit+0x1c0>)
 8000d46:	f000 fb7b 	bl	8001440 <HAL_DMA_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8000d50:	f7ff fdcc 	bl	80008ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a0b      	ldr	r2, [pc, #44]	@ (8000d84 <HAL_UART_MspInit+0x1c0>)
 8000d58:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <HAL_UART_MspInit+0x1c0>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000d60:	bf00      	nop
 8000d62:	3730      	adds	r7, #48	@ 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40011000 	.word	0x40011000
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000
 8000d74:	2000055c 	.word	0x2000055c
 8000d78:	40026440 	.word	0x40026440
 8000d7c:	40004400 	.word	0x40004400
 8000d80:	40020c00 	.word	0x40020c00
 8000d84:	200005bc 	.word	0x200005bc
 8000d88:	40026088 	.word	0x40026088

08000d8c <uart_print>:
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef uart_print(UART_HandleTypeDef* p_huart, const char* str)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(p_huart, (uint8_t*)str, strlen(str), UART_TX_TIMEOUT);
 8000d96:	6838      	ldr	r0, [r7, #0]
 8000d98:	f7ff fa2a 	bl	80001f0 <strlen>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	2364      	movs	r3, #100	@ 0x64
 8000da2:	6839      	ldr	r1, [r7, #0]
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f001 fda1 	bl	80028ec <HAL_UART_Transmit>
 8000daa:	4603      	mov	r3, r0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <uart_available>:

uint16_t uart_available(UART_HandleTypeDef* p_huart)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
	uart_data_t* uart_rx = NULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
	if (p_huart->Instance == USART1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a17      	ldr	r2, [pc, #92]	@ (8000e24 <uart_available+0x70>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d102      	bne.n	8000dd0 <uart_available+0x1c>
	{
		uart_rx = &uart1_cfg;
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <uart_available+0x74>)
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	e006      	b.n	8000dde <uart_available+0x2a>
	} else if (p_huart->Instance == USART2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a15      	ldr	r2, [pc, #84]	@ (8000e2c <uart_available+0x78>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d101      	bne.n	8000dde <uart_available+0x2a>
	{
		uart_rx = &uart2_cfg;
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <uart_available+0x7c>)
 8000ddc:	60fb      	str	r3, [r7, #12]
	}
	if (uart_rx == NULL) return 0;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <uart_available+0x34>
 8000de4:	2300      	movs	r3, #0
 8000de6:	e016      	b.n	8000e16 <uart_available+0x62>

	for (uint8_t i = 0; i < UART_RX_BUFFER_LINES; i++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	72fb      	strb	r3, [r7, #11]
 8000dec:	e00f      	b.n	8000e0e <uart_available+0x5a>
	{
		if (uart_rx->lines[i].available)
 8000dee:	7afa      	ldrb	r2, [r7, #11]
 8000df0:	68f9      	ldr	r1, [r7, #12]
 8000df2:	4613      	mov	r3, r2
 8000df4:	011b      	lsls	r3, r3, #4
 8000df6:	4413      	add	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	3342      	adds	r3, #66	@ 0x42
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <uart_available+0x54>
		{
			return 1;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e006      	b.n	8000e16 <uart_available+0x62>
	for (uint8_t i = 0; i < UART_RX_BUFFER_LINES; i++)
 8000e08:	7afb      	ldrb	r3, [r7, #11]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	72fb      	strb	r3, [r7, #11]
 8000e0e:	7afb      	ldrb	r3, [r7, #11]
 8000e10:	2b07      	cmp	r3, #7
 8000e12:	d9ec      	bls.n	8000dee <uart_available+0x3a>
		}
	}

	return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40011000 	.word	0x40011000
 8000e28:	2000007c 	.word	0x2000007c
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	200002a4 	.word	0x200002a4

08000e34 <uart_get_input>:

uint16_t uart_get_input(UART_HandleTypeDef* p_huart, uint8_t* str, uint8_t max_len)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	71fb      	strb	r3, [r7, #7]
	uart_data_t *uart_rx = NULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
	if (p_huart->Instance == USART1)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a24      	ldr	r2, [pc, #144]	@ (8000edc <uart_get_input+0xa8>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d102      	bne.n	8000e56 <uart_get_input+0x22>
	{
		uart_rx = &uart1_cfg;
 8000e50:	4b23      	ldr	r3, [pc, #140]	@ (8000ee0 <uart_get_input+0xac>)
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	e006      	b.n	8000e64 <uart_get_input+0x30>
	} else if (p_huart->Instance == USART2)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a22      	ldr	r2, [pc, #136]	@ (8000ee4 <uart_get_input+0xb0>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d101      	bne.n	8000e64 <uart_get_input+0x30>
	{
		uart_rx = &uart2_cfg;
 8000e60:	4b21      	ldr	r3, [pc, #132]	@ (8000ee8 <uart_get_input+0xb4>)
 8000e62:	61fb      	str	r3, [r7, #28]
	}
	if (uart_rx == NULL) return 0;
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <uart_get_input+0x3a>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e031      	b.n	8000ed2 <uart_get_input+0x9e>


	for (uart_line_buffer_t *line = uart_rx->lines; line < uart_rx->lines + UART_RX_BUFFER_LINES; line++)
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	e027      	b.n	8000ec4 <uart_get_input+0x90>
	{
		if (line->available)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d01f      	beq.n	8000ebe <uart_get_input+0x8a>
		{
			uint16_t len = line->index;
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000e84:	82fb      	strh	r3, [r7, #22]
			if (len > max_len) len = max_len;
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	8afa      	ldrh	r2, [r7, #22]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d901      	bls.n	8000e94 <uart_get_input+0x60>
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	82fb      	strh	r3, [r7, #22]
			memcpy(str, line->data, len);
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	8afa      	ldrh	r2, [r7, #22]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	68b8      	ldr	r0, [r7, #8]
 8000e9c:	f002 ffe4 	bl	8003e68 <memcpy>
			str[len] = '\0';
 8000ea0:	8afb      	ldrh	r3, [r7, #22]
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
			line->available = 0;
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
			line->index = 0;
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			return len;
 8000eba:	8afb      	ldrh	r3, [r7, #22]
 8000ebc:	e009      	b.n	8000ed2 <uart_get_input+0x9e>
	for (uart_line_buffer_t *line = uart_rx->lines; line < uart_rx->lines + UART_RX_BUFFER_LINES; line++)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	3344      	adds	r3, #68	@ 0x44
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d3d1      	bcc.n	8000e74 <uart_get_input+0x40>
		}
	}

	return 0;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3720      	adds	r7, #32
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40011000 	.word	0x40011000
 8000ee0:	2000007c 	.word	0x2000007c
 8000ee4:	40004400 	.word	0x40004400
 8000ee8:	200002a4 	.word	0x200002a4

08000eec <uart_set_baudrate>:

void uart_set_baudrate(UART_HandleTypeDef* huart, uint32_t baud_rate)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
	uint32_t pclk;
	if (huart->Instance == USART1 || huart->Instance == USART6) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a25      	ldr	r2, [pc, #148]	@ (8000f90 <uart_set_baudrate+0xa4>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d004      	beq.n	8000f0a <uart_set_baudrate+0x1e>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a23      	ldr	r2, [pc, #140]	@ (8000f94 <uart_set_baudrate+0xa8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d103      	bne.n	8000f12 <uart_set_baudrate+0x26>
		// USART1 and USART6 are on APB2
		pclk = HAL_RCC_GetPCLK2Freq();
 8000f0a:	f001 fc8b 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	e002      	b.n	8000f18 <uart_set_baudrate+0x2c>
	} else {
		// USART2, USART3, UART4, UART5 are on APB1
		pclk = HAL_RCC_GetPCLK1Freq();
 8000f12:	f001 fc73 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 8000f16:	60f8      	str	r0, [r7, #12]
	}
    uint32_t usartdiv = (pclk + (baud_rate / 2)) / baud_rate;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	085a      	lsrs	r2, r3, #1
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	441a      	add	r2, r3
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	60bb      	str	r3, [r7, #8]

    huart->Instance->CR1 &= ~(USART_CR1_UE);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000f36:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
	__DSB(); // barrier
	(void)(huart->Instance->CR1); // read-back
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8000f44:	f3bf 8f5f 	dmb	sy
}
 8000f48:	bf00      	nop
	__DMB();

    huart->Instance->BRR = usartdiv;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f52:	f3bf 8f4f 	dsb	sy
}
 8000f56:	bf00      	nop
    __DSB();
    (void)(huart->Instance->BRR);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	689b      	ldr	r3, [r3, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8000f5e:	f3bf 8f5f 	dmb	sy
}
 8000f62:	bf00      	nop
    __DMB();

    huart->Instance->CR1 |= USART_CR1_UE;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000f72:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f74:	f3bf 8f4f 	dsb	sy
}
 8000f78:	bf00      	nop
	__DSB();
	(void)(huart->Instance->CR1);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8000f80:	f3bf 8f5f 	dmb	sy
}
 8000f84:	bf00      	nop
	__DMB();
}
 8000f86:	bf00      	nop
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40011000 	.word	0x40011000
 8000f94:	40011400 	.word	0x40011400

08000f98 <uart_it_complete>:
		line->available = 0;
	}
}

void uart_it_complete(uart_data_t* uart_rx, uint16_t size)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
	if(size == 0) return;
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d047      	beq.n	800103a <uart_it_complete+0xa2>

	uart_line_buffer_t* line = uart_rx->lines + uart_rx->active_line;
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	440b      	add	r3, r1
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

	line->index = size;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

	uart_rx->last_char = line->data[line->index];
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000fce:	461a      	mov	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	5c9a      	ldrb	r2, [r3, r2]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f883 2221 	strb.w	r2, [r3, #545]	@ 0x221

	line->data[line->index] = '\0';
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	5499      	strb	r1, [r3, r2]
	line->available = 1;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	if (++uart_rx->active_line >= UART_RX_BUFFER_LINES)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 8001006:	2b07      	cmp	r3, #7
 8001008:	d918      	bls.n	800103c <uart_it_complete+0xa4>
	{
		uart_rx->active_line = 0;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2220 	strb.w	r2, [r3, #544]	@ 0x220
		line = uart_rx->lines + uart_rx->active_line;
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 800101a:	4619      	mov	r1, r3
 800101c:	460b      	mov	r3, r1
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	440b      	add	r3, r1
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	60fb      	str	r3, [r7, #12]
		line->index = 0;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2200      	movs	r2, #0
 800102c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
		line->available = 0;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001038:	e000      	b.n	800103c <uart_it_complete+0xa4>
	if(size == 0) return;
 800103a:	bf00      	nop
	}
}
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <prints>:

HAL_StatusTypeDef prints(const char* str)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	return uart_print(&huart1, str);
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	4804      	ldr	r0, [pc, #16]	@ (8001064 <prints+0x1c>)
 8001054:	f7ff fe9a 	bl	8000d8c <uart_print>
 8001058:	4603      	mov	r3, r0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200004cc 	.word	0x200004cc

08001068 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	807b      	strh	r3, [r7, #2]
	uart_data_t* uart_rx = NULL;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
    if(huart->Instance == USART1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a15      	ldr	r2, [pc, #84]	@ (80010d4 <HAL_UARTEx_RxEventCallback+0x6c>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d102      	bne.n	8001088 <HAL_UARTEx_RxEventCallback+0x20>
    {
    	uart_rx = &uart1_cfg;
 8001082:	4b15      	ldr	r3, [pc, #84]	@ (80010d8 <HAL_UARTEx_RxEventCallback+0x70>)
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e006      	b.n	8001096 <HAL_UARTEx_RxEventCallback+0x2e>
    }
    else if (huart->Instance == USART2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a13      	ldr	r2, [pc, #76]	@ (80010dc <HAL_UARTEx_RxEventCallback+0x74>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_UARTEx_RxEventCallback+0x2e>
    {
		uart_rx = &uart2_cfg;
 8001092:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <HAL_UARTEx_RxEventCallback+0x78>)
 8001094:	60fb      	str	r3, [r7, #12]
	}
    if (uart_rx == NULL) return;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d016      	beq.n	80010ca <HAL_UARTEx_RxEventCallback+0x62>

    uart_it_complete(uart_rx, size);
 800109c:	887b      	ldrh	r3, [r7, #2]
 800109e:	4619      	mov	r1, r3
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff ff79 	bl	8000f98 <uart_it_complete>

    uart_line_buffer_t* line = uart_rx->lines + uart_rx->active_line;
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f893 3220 	ldrb.w	r3, [r3, #544]	@ 0x220
 80010ae:	4619      	mov	r1, r3
 80010b0:	460b      	mov	r3, r1
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	440b      	add	r3, r1
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
    HAL_UARTEx_ReceiveToIdle_DMA(huart, line->data, UART_RX_LINE_BUFFER_SIZE);
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2240      	movs	r2, #64	@ 0x40
 80010c0:	4619      	mov	r1, r3
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f001 fc9d 	bl	8002a02 <HAL_UARTEx_ReceiveToIdle_DMA>
 80010c8:	e000      	b.n	80010cc <HAL_UARTEx_RxEventCallback+0x64>
    if (uart_rx == NULL) return;
 80010ca:	bf00      	nop
}
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40011000 	.word	0x40011000
 80010d8:	2000007c 	.word	0x2000007c
 80010dc:	40004400 	.word	0x40004400
 80010e0:	200002a4 	.word	0x200002a4

080010e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800111c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010e8:	f7ff fcbc 	bl	8000a64 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ec:	480c      	ldr	r0, [pc, #48]	@ (8001120 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ee:	490d      	ldr	r1, [pc, #52]	@ (8001124 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001128 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0a      	ldr	r2, [pc, #40]	@ (800112c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001104:	4c0a      	ldr	r4, [pc, #40]	@ (8001130 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001112:	f002 fe83 	bl	8003e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001116:	f7ff fa8b 	bl	8000630 <main>
  bx  lr    
 800111a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800111c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001128:	080048c4 	.word	0x080048c4
  ldr r2, =_sbss
 800112c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001130:	20000768 	.word	0x20000768

08001134 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC_IRQHandler>
	...

08001138 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800113c:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <HAL_Init+0x40>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <HAL_Init+0x40>)
 8001142:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001146:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <HAL_Init+0x40>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a0a      	ldr	r2, [pc, #40]	@ (8001178 <HAL_Init+0x40>)
 800114e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001152:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001154:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <HAL_Init+0x40>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a07      	ldr	r2, [pc, #28]	@ (8001178 <HAL_Init+0x40>)
 800115a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800115e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001160:	2003      	movs	r0, #3
 8001162:	f000 f92b 	bl	80013bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001166:	200f      	movs	r0, #15
 8001168:	f000 f808 	bl	800117c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800116c:	f7ff fbc4 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023c00 	.word	0x40023c00

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b12      	ldr	r3, [pc, #72]	@ (80011d0 <HAL_InitTick+0x54>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <HAL_InitTick+0x58>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4619      	mov	r1, r3
 800118e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001192:	fbb3 f3f1 	udiv	r3, r3, r1
 8001196:	fbb2 f3f3 	udiv	r3, r2, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f943 	bl	8001426 <HAL_SYSTICK_Config>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00e      	b.n	80011c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d80a      	bhi.n	80011c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f000 f90b 	bl	80013d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011bc:	4a06      	ldr	r2, [pc, #24]	@ (80011d8 <HAL_InitTick+0x5c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
 80011c4:	e000      	b.n	80011c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <HAL_IncTick+0x20>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	461a      	mov	r2, r3
 80011e6:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <HAL_IncTick+0x24>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	4a04      	ldr	r2, [pc, #16]	@ (8001200 <HAL_IncTick+0x24>)
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000008 	.word	0x20000008
 8001200:	2000061c 	.word	0x2000061c

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b03      	ldr	r3, [pc, #12]	@ (8001218 <HAL_GetTick+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	4618      	mov	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	2000061c 	.word	0x2000061c

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001244:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	@ (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	6039      	str	r1, [r7, #0]
 80012c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	db0a      	blt.n	80012e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	490c      	ldr	r1, [pc, #48]	@ (8001308 <__NVIC_SetPriority+0x4c>)
 80012d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012da:	0112      	lsls	r2, r2, #4
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	440b      	add	r3, r1
 80012e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e4:	e00a      	b.n	80012fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	4908      	ldr	r1, [pc, #32]	@ (800130c <__NVIC_SetPriority+0x50>)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	3b04      	subs	r3, #4
 80012f4:	0112      	lsls	r2, r2, #4
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	761a      	strb	r2, [r3, #24]
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr
 8001308:	e000e100 	.word	0xe000e100
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001310:	b480      	push	{r7}
 8001312:	b089      	sub	sp, #36	@ 0x24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	f1c3 0307 	rsb	r3, r3, #7
 800132a:	2b04      	cmp	r3, #4
 800132c:	bf28      	it	cs
 800132e:	2304      	movcs	r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3304      	adds	r3, #4
 8001336:	2b06      	cmp	r3, #6
 8001338:	d902      	bls.n	8001340 <NVIC_EncodePriority+0x30>
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3b03      	subs	r3, #3
 800133e:	e000      	b.n	8001342 <NVIC_EncodePriority+0x32>
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	f04f 32ff 	mov.w	r2, #4294967295
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43da      	mvns	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa01 f303 	lsl.w	r3, r1, r3
 8001362:	43d9      	mvns	r1, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001368:	4313      	orrs	r3, r2
         );
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	@ 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3b01      	subs	r3, #1
 8001384:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001388:	d301      	bcc.n	800138e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138a:	2301      	movs	r3, #1
 800138c:	e00f      	b.n	80013ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800138e:	4a0a      	ldr	r2, [pc, #40]	@ (80013b8 <SysTick_Config+0x40>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001396:	210f      	movs	r1, #15
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f7ff ff8e 	bl	80012bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <SysTick_Config+0x40>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013a6:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <SysTick_Config+0x40>)
 80013a8:	2207      	movs	r2, #7
 80013aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	e000e010 	.word	0xe000e010

080013bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ff29 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4603      	mov	r3, r0
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
 80013de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e4:	f7ff ff3e 	bl	8001264 <__NVIC_GetPriorityGrouping>
 80013e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68b9      	ldr	r1, [r7, #8]
 80013ee:	6978      	ldr	r0, [r7, #20]
 80013f0:	f7ff ff8e 	bl	8001310 <NVIC_EncodePriority>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff ff5d 	bl	80012bc <__NVIC_SetPriority>
}
 8001402:	bf00      	nop
 8001404:	3718      	adds	r7, #24
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b082      	sub	sp, #8
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff31 	bl	8001280 <__NVIC_EnableIRQ>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffa2 	bl	8001378 <SysTick_Config>
 8001434:	4603      	mov	r3, r0
}
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800144c:	f7ff feda 	bl	8001204 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e099      	b.n	8001590 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147c:	e00f      	b.n	800149e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800147e:	f7ff fec1 	bl	8001204 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b05      	cmp	r3, #5
 800148a:	d908      	bls.n	800149e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2220      	movs	r2, #32
 8001490:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2203      	movs	r2, #3
 8001496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e078      	b.n	8001590 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e8      	bne.n	800147e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	4b38      	ldr	r3, [pc, #224]	@ (8001598 <HAL_DMA_Init+0x158>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d107      	bne.n	8001508 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001500:	4313      	orrs	r3, r2
 8001502:	697a      	ldr	r2, [r7, #20]
 8001504:	4313      	orrs	r3, r2
 8001506:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f023 0307 	bic.w	r3, r3, #7
 800151e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	4313      	orrs	r3, r2
 8001528:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	2b04      	cmp	r3, #4
 8001530:	d117      	bne.n	8001562 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	4313      	orrs	r3, r2
 800153a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00e      	beq.n	8001562 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 fb01 	bl	8001b4c <DMA_CheckFifoParam>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2240      	movs	r2, #64	@ 0x40
 8001554:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800155e:	2301      	movs	r3, #1
 8001560:	e016      	b.n	8001590 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fab8 	bl	8001ae0 <DMA_CalcBaseAndBitshift>
 8001570:	4603      	mov	r3, r0
 8001572:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001578:	223f      	movs	r2, #63	@ 0x3f
 800157a:	409a      	lsls	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	f010803f 	.word	0xf010803f

0800159c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d101      	bne.n	80015c2 <HAL_DMA_Start_IT+0x26>
 80015be:	2302      	movs	r3, #2
 80015c0:	e040      	b.n	8001644 <HAL_DMA_Start_IT+0xa8>
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d12f      	bne.n	8001636 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2202      	movs	r2, #2
 80015da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 fa4a 	bl	8001a84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f4:	223f      	movs	r2, #63	@ 0x3f
 80015f6:	409a      	lsls	r2, r3
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0216 	orr.w	r2, r2, #22
 800160a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f042 0208 	orr.w	r2, r2, #8
 8001622:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	e005      	b.n	8001642 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800163e:	2302      	movs	r3, #2
 8001640:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001642:	7dfb      	ldrb	r3, [r7, #23]
}
 8001644:	4618      	mov	r0, r3
 8001646:	3718      	adds	r7, #24
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001658:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800165a:	f7ff fdd3 	bl	8001204 <HAL_GetTick>
 800165e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d008      	beq.n	800167e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2280      	movs	r2, #128	@ 0x80
 8001670:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e052      	b.n	8001724 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f022 0216 	bic.w	r2, r2, #22
 800168c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	695a      	ldr	r2, [r3, #20]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800169c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d103      	bne.n	80016ae <HAL_DMA_Abort+0x62>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d007      	beq.n	80016be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0208 	bic.w	r2, r2, #8
 80016bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0201 	bic.w	r2, r2, #1
 80016cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016ce:	e013      	b.n	80016f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016d0:	f7ff fd98 	bl	8001204 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d90c      	bls.n	80016f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2220      	movs	r2, #32
 80016e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e015      	b.n	8001724 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1e4      	bne.n	80016d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170a:	223f      	movs	r2, #63	@ 0x3f
 800170c:	409a      	lsls	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800173a:	b2db      	uxtb	r3, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d004      	beq.n	800174a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2280      	movs	r2, #128	@ 0x80
 8001744:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00c      	b.n	8001764 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2205      	movs	r2, #5
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800177c:	4b8e      	ldr	r3, [pc, #568]	@ (80019b8 <HAL_DMA_IRQHandler+0x248>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a8e      	ldr	r2, [pc, #568]	@ (80019bc <HAL_DMA_IRQHandler+0x24c>)
 8001782:	fba2 2303 	umull	r2, r3, r2, r3
 8001786:	0a9b      	lsrs	r3, r3, #10
 8001788:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800178e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800179a:	2208      	movs	r2, #8
 800179c:	409a      	lsls	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01a      	beq.n	80017dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0204 	bic.w	r2, r2, #4
 80017c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c8:	2208      	movs	r2, #8
 80017ca:	409a      	lsls	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017d4:	f043 0201 	orr.w	r2, r3, #1
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e0:	2201      	movs	r2, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d012      	beq.n	8001812 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00b      	beq.n	8001812 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017fe:	2201      	movs	r2, #1
 8001800:	409a      	lsls	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800180a:	f043 0202 	orr.w	r2, r3, #2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001816:	2204      	movs	r2, #4
 8001818:	409a      	lsls	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d012      	beq.n	8001848 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00b      	beq.n	8001848 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001834:	2204      	movs	r2, #4
 8001836:	409a      	lsls	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001840:	f043 0204 	orr.w	r2, r3, #4
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184c:	2210      	movs	r2, #16
 800184e:	409a      	lsls	r2, r3
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d043      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d03c      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800186a:	2210      	movs	r2, #16
 800186c:	409a      	lsls	r2, r3
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d018      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d108      	bne.n	80018a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d024      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	4798      	blx	r3
 800189e:	e01f      	b.n	80018e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01b      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	4798      	blx	r3
 80018b0:	e016      	b.n	80018e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d107      	bne.n	80018d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0208 	bic.w	r2, r2, #8
 80018ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e4:	2220      	movs	r2, #32
 80018e6:	409a      	lsls	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 808f 	beq.w	8001a10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 8087 	beq.w	8001a10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001906:	2220      	movs	r2, #32
 8001908:	409a      	lsls	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b05      	cmp	r3, #5
 8001918:	d136      	bne.n	8001988 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0216 	bic.w	r2, r2, #22
 8001928:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	695a      	ldr	r2, [r3, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001938:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	2b00      	cmp	r3, #0
 8001940:	d103      	bne.n	800194a <HAL_DMA_IRQHandler+0x1da>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001946:	2b00      	cmp	r3, #0
 8001948:	d007      	beq.n	800195a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0208 	bic.w	r2, r2, #8
 8001958:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800195e:	223f      	movs	r2, #63	@ 0x3f
 8001960:	409a      	lsls	r2, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800197a:	2b00      	cmp	r3, #0
 800197c:	d07e      	beq.n	8001a7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	4798      	blx	r3
        }
        return;
 8001986:	e079      	b.n	8001a7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d01d      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10d      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d031      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	4798      	blx	r3
 80019b4:	e02c      	b.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
 80019b6:	bf00      	nop
 80019b8:	20000000 	.word	0x20000000
 80019bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d023      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	4798      	blx	r3
 80019d0:	e01e      	b.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10f      	bne.n	8001a00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0210 	bic.w	r2, r2, #16
 80019ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d032      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d022      	beq.n	8001a6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2205      	movs	r2, #5
 8001a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	697a      	ldr	r2, [r7, #20]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d307      	bcc.n	8001a58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f2      	bne.n	8001a3c <HAL_DMA_IRQHandler+0x2cc>
 8001a56:	e000      	b.n	8001a5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d005      	beq.n	8001a7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
 8001a7a:	e000      	b.n	8001a7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a7c:	bf00      	nop
    }
  }
}
 8001a7e:	3718      	adds	r7, #24
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001aa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b40      	cmp	r3, #64	@ 0x40
 8001ab0:	d108      	bne.n	8001ac4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ac2:	e007      	b.n	8001ad4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	60da      	str	r2, [r3, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	3b10      	subs	r3, #16
 8001af0:	4a14      	ldr	r2, [pc, #80]	@ (8001b44 <DMA_CalcBaseAndBitshift+0x64>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001afa:	4a13      	ldr	r2, [pc, #76]	@ (8001b48 <DMA_CalcBaseAndBitshift+0x68>)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d909      	bls.n	8001b22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b16:	f023 0303 	bic.w	r3, r3, #3
 8001b1a:	1d1a      	adds	r2, r3, #4
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b20:	e007      	b.n	8001b32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001b2a:	f023 0303 	bic.w	r3, r3, #3
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	aaaaaaab 	.word	0xaaaaaaab
 8001b48:	08004778 	.word	0x08004778

08001b4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d11f      	bne.n	8001ba6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d856      	bhi.n	8001c1a <DMA_CheckFifoParam+0xce>
 8001b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b74 <DMA_CheckFifoParam+0x28>)
 8001b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b72:	bf00      	nop
 8001b74:	08001b85 	.word	0x08001b85
 8001b78:	08001b97 	.word	0x08001b97
 8001b7c:	08001b85 	.word	0x08001b85
 8001b80:	08001c1b 	.word	0x08001c1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d046      	beq.n	8001c1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b94:	e043      	b.n	8001c1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b9e:	d140      	bne.n	8001c22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba4:	e03d      	b.n	8001c22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bae:	d121      	bne.n	8001bf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d837      	bhi.n	8001c26 <DMA_CheckFifoParam+0xda>
 8001bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bbc <DMA_CheckFifoParam+0x70>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001bd3 	.word	0x08001bd3
 8001bc4:	08001bcd 	.word	0x08001bcd
 8001bc8:	08001be5 	.word	0x08001be5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd0:	e030      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d025      	beq.n	8001c2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001be2:	e022      	b.n	8001c2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bec:	d11f      	bne.n	8001c2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bf2:	e01c      	b.n	8001c2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d903      	bls.n	8001c02 <DMA_CheckFifoParam+0xb6>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b03      	cmp	r3, #3
 8001bfe:	d003      	beq.n	8001c08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c00:	e018      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	73fb      	strb	r3, [r7, #15]
      break;
 8001c06:	e015      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00e      	beq.n	8001c32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	73fb      	strb	r3, [r7, #15]
      break;
 8001c18:	e00b      	b.n	8001c32 <DMA_CheckFifoParam+0xe6>
      break;
 8001c1a:	bf00      	nop
 8001c1c:	e00a      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c1e:	bf00      	nop
 8001c20:	e008      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c22:	bf00      	nop
 8001c24:	e006      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c26:	bf00      	nop
 8001c28:	e004      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c2a:	bf00      	nop
 8001c2c:	e002      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c2e:	bf00      	nop
 8001c30:	e000      	b.n	8001c34 <DMA_CheckFifoParam+0xe8>
      break;
 8001c32:	bf00      	nop
    }
  } 
  
  return status; 
 8001c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop

08001c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	@ 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	e177      	b.n	8001f50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c60:	2201      	movs	r2, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f040 8166 	bne.w	8001f4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d005      	beq.n	8001c96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d130      	bne.n	8001cf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ccc:	2201      	movs	r2, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 0201 	and.w	r2, r3, #1
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d017      	beq.n	8001d34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d123      	bne.n	8001d88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	08da      	lsrs	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3208      	adds	r2, #8
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	69b9      	ldr	r1, [r7, #24]
 8001d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0203 	and.w	r2, r3, #3
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80c0 	beq.w	8001f4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b66      	ldr	r3, [pc, #408]	@ (8001f68 <HAL_GPIO_Init+0x324>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	4a65      	ldr	r2, [pc, #404]	@ (8001f68 <HAL_GPIO_Init+0x324>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dda:	4b63      	ldr	r3, [pc, #396]	@ (8001f68 <HAL_GPIO_Init+0x324>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de6:	4a61      	ldr	r2, [pc, #388]	@ (8001f6c <HAL_GPIO_Init+0x328>)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	220f      	movs	r2, #15
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a58      	ldr	r2, [pc, #352]	@ (8001f70 <HAL_GPIO_Init+0x32c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d037      	beq.n	8001e82 <HAL_GPIO_Init+0x23e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a57      	ldr	r2, [pc, #348]	@ (8001f74 <HAL_GPIO_Init+0x330>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d031      	beq.n	8001e7e <HAL_GPIO_Init+0x23a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a56      	ldr	r2, [pc, #344]	@ (8001f78 <HAL_GPIO_Init+0x334>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d02b      	beq.n	8001e7a <HAL_GPIO_Init+0x236>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a55      	ldr	r2, [pc, #340]	@ (8001f7c <HAL_GPIO_Init+0x338>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d025      	beq.n	8001e76 <HAL_GPIO_Init+0x232>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a54      	ldr	r2, [pc, #336]	@ (8001f80 <HAL_GPIO_Init+0x33c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d01f      	beq.n	8001e72 <HAL_GPIO_Init+0x22e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a53      	ldr	r2, [pc, #332]	@ (8001f84 <HAL_GPIO_Init+0x340>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d019      	beq.n	8001e6e <HAL_GPIO_Init+0x22a>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	@ (8001f88 <HAL_GPIO_Init+0x344>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <HAL_GPIO_Init+0x226>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a51      	ldr	r2, [pc, #324]	@ (8001f8c <HAL_GPIO_Init+0x348>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00d      	beq.n	8001e66 <HAL_GPIO_Init+0x222>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a50      	ldr	r2, [pc, #320]	@ (8001f90 <HAL_GPIO_Init+0x34c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d007      	beq.n	8001e62 <HAL_GPIO_Init+0x21e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4f      	ldr	r2, [pc, #316]	@ (8001f94 <HAL_GPIO_Init+0x350>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d101      	bne.n	8001e5e <HAL_GPIO_Init+0x21a>
 8001e5a:	2309      	movs	r3, #9
 8001e5c:	e012      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e5e:	230a      	movs	r3, #10
 8001e60:	e010      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e62:	2308      	movs	r3, #8
 8001e64:	e00e      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e66:	2307      	movs	r3, #7
 8001e68:	e00c      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e6a:	2306      	movs	r3, #6
 8001e6c:	e00a      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e6e:	2305      	movs	r3, #5
 8001e70:	e008      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e72:	2304      	movs	r3, #4
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e76:	2303      	movs	r3, #3
 8001e78:	e004      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x240>
 8001e82:	2300      	movs	r3, #0
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	f002 0203 	and.w	r2, r2, #3
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	4093      	lsls	r3, r2
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e94:	4935      	ldr	r1, [pc, #212]	@ (8001f6c <HAL_GPIO_Init+0x328>)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8001f98 <HAL_GPIO_Init+0x354>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec6:	4a34      	ldr	r2, [pc, #208]	@ (8001f98 <HAL_GPIO_Init+0x354>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ecc:	4b32      	ldr	r3, [pc, #200]	@ (8001f98 <HAL_GPIO_Init+0x354>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef0:	4a29      	ldr	r2, [pc, #164]	@ (8001f98 <HAL_GPIO_Init+0x354>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ef6:	4b28      	ldr	r3, [pc, #160]	@ (8001f98 <HAL_GPIO_Init+0x354>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f98 <HAL_GPIO_Init+0x354>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f20:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <HAL_GPIO_Init+0x354>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f44:	4a14      	ldr	r2, [pc, #80]	@ (8001f98 <HAL_GPIO_Init+0x354>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b0f      	cmp	r3, #15
 8001f54:	f67f ae84 	bls.w	8001c60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3724      	adds	r7, #36	@ 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40013800 	.word	0x40013800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40021400 	.word	0x40021400
 8001f88:	40021800 	.word	0x40021800
 8001f8c:	40021c00 	.word	0x40021c00
 8001f90:	40022000 	.word	0x40022000
 8001f94:	40022400 	.word	0x40022400
 8001f98:	40013c00 	.word	0x40013c00

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e267      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d075      	beq.n	80020a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fba:	4b88      	ldr	r3, [pc, #544]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d00c      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fc6:	4b85      	ldr	r3, [pc, #532]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d112      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fd2:	4b82      	ldr	r3, [pc, #520]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fde:	d10b      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe0:	4b7e      	ldr	r3, [pc, #504]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d05b      	beq.n	80020a4 <HAL_RCC_OscConfig+0x108>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d157      	bne.n	80020a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e242      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002000:	d106      	bne.n	8002010 <HAL_RCC_OscConfig+0x74>
 8002002:	4b76      	ldr	r3, [pc, #472]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a75      	ldr	r2, [pc, #468]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8002008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e01d      	b.n	800204c <HAL_RCC_OscConfig+0xb0>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0x98>
 800201a:	4b70      	ldr	r3, [pc, #448]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6f      	ldr	r2, [pc, #444]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b6d      	ldr	r3, [pc, #436]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a6c      	ldr	r2, [pc, #432]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0xb0>
 8002034:	4b69      	ldr	r3, [pc, #420]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a68      	ldr	r2, [pc, #416]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 800203a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b66      	ldr	r3, [pc, #408]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a65      	ldr	r2, [pc, #404]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8002046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800204a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff f8d6 	bl	8001204 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff f8d2 	bl	8001204 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	@ 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e207      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b5b      	ldr	r3, [pc, #364]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0xc0>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207c:	f7ff f8c2 	bl	8001204 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff f8be 	bl	8001204 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	@ 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1f3      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002096:	4b51      	ldr	r3, [pc, #324]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0xe8>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d063      	beq.n	800217a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020b2:	4b4a      	ldr	r3, [pc, #296]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020be:	4b47      	ldr	r3, [pc, #284]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d11c      	bne.n	8002104 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ca:	4b44      	ldr	r3, [pc, #272]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d116      	bne.n	8002104 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	4b41      	ldr	r3, [pc, #260]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d005      	beq.n	80020ee <HAL_RCC_OscConfig+0x152>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e1c7      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ee:	4b3b      	ldr	r3, [pc, #236]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4937      	ldr	r1, [pc, #220]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	e03a      	b.n	800217a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d020      	beq.n	800214e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800210c:	4b34      	ldr	r3, [pc, #208]	@ (80021e0 <HAL_RCC_OscConfig+0x244>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002112:	f7ff f877 	bl	8001204 <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211a:	f7ff f873 	bl	8001204 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e1a8      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212c:	4b2b      	ldr	r3, [pc, #172]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002138:	4b28      	ldr	r3, [pc, #160]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	4925      	ldr	r1, [pc, #148]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214e:	4b24      	ldr	r3, [pc, #144]	@ (80021e0 <HAL_RCC_OscConfig+0x244>)
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002154:	f7ff f856 	bl	8001204 <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215c:	f7ff f852 	bl	8001204 <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e187      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216e:	4b1b      	ldr	r3, [pc, #108]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f0      	bne.n	800215c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d036      	beq.n	80021f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d016      	beq.n	80021bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218e:	4b15      	ldr	r3, [pc, #84]	@ (80021e4 <HAL_RCC_OscConfig+0x248>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff f836 	bl	8001204 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219c:	f7ff f832 	bl	8001204 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e167      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	4b0b      	ldr	r3, [pc, #44]	@ (80021dc <HAL_RCC_OscConfig+0x240>)
 80021b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x200>
 80021ba:	e01b      	b.n	80021f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021bc:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <HAL_RCC_OscConfig+0x248>)
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7ff f81f 	bl	8001204 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c8:	e00e      	b.n	80021e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ca:	f7ff f81b 	bl	8001204 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d907      	bls.n	80021e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e150      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
 80021dc:	40023800 	.word	0x40023800
 80021e0:	42470000 	.word	0x42470000
 80021e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	4b88      	ldr	r3, [pc, #544]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 80021ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1ea      	bne.n	80021ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8097 	beq.w	8002330 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002206:	4b81      	ldr	r3, [pc, #516]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10f      	bne.n	8002232 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	4b7d      	ldr	r3, [pc, #500]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221a:	4a7c      	ldr	r2, [pc, #496]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002220:	6413      	str	r3, [r2, #64]	@ 0x40
 8002222:	4b7a      	ldr	r3, [pc, #488]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b77      	ldr	r3, [pc, #476]	@ (8002410 <HAL_RCC_OscConfig+0x474>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223e:	4b74      	ldr	r3, [pc, #464]	@ (8002410 <HAL_RCC_OscConfig+0x474>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a73      	ldr	r2, [pc, #460]	@ (8002410 <HAL_RCC_OscConfig+0x474>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7fe ffdb 	bl	8001204 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7fe ffd7 	bl	8001204 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b02      	cmp	r3, #2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e10c      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	4b6a      	ldr	r3, [pc, #424]	@ (8002410 <HAL_RCC_OscConfig+0x474>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x2ea>
 8002278:	4b64      	ldr	r3, [pc, #400]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 800227a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227c:	4a63      	ldr	r2, [pc, #396]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6713      	str	r3, [r2, #112]	@ 0x70
 8002284:	e01c      	b.n	80022c0 <HAL_RCC_OscConfig+0x324>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b05      	cmp	r3, #5
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x30c>
 800228e:	4b5f      	ldr	r3, [pc, #380]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 8002290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002292:	4a5e      	ldr	r2, [pc, #376]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6713      	str	r3, [r2, #112]	@ 0x70
 800229a:	4b5c      	ldr	r3, [pc, #368]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229e:	4a5b      	ldr	r2, [pc, #364]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0x324>
 80022a8:	4b58      	ldr	r3, [pc, #352]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ac:	4a57      	ldr	r2, [pc, #348]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 80022ae:	f023 0301 	bic.w	r3, r3, #1
 80022b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022b4:	4b55      	ldr	r3, [pc, #340]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b8:	4a54      	ldr	r2, [pc, #336]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 80022ba:	f023 0304 	bic.w	r3, r3, #4
 80022be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d015      	beq.n	80022f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7fe ff9c 	bl	8001204 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7fe ff98 	bl	8001204 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e0cb      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e6:	4b49      	ldr	r3, [pc, #292]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0ee      	beq.n	80022d0 <HAL_RCC_OscConfig+0x334>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f4:	f7fe ff86 	bl	8001204 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7fe ff82 	bl	8001204 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e0b5      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002312:	4b3e      	ldr	r3, [pc, #248]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1ee      	bne.n	80022fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d105      	bne.n	8002330 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002324:	4b39      	ldr	r3, [pc, #228]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	4a38      	ldr	r2, [pc, #224]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 800232a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800232e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a1 	beq.w	800247c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800233a:	4b34      	ldr	r3, [pc, #208]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b08      	cmp	r3, #8
 8002344:	d05c      	beq.n	8002400 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d141      	bne.n	80023d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234e:	4b31      	ldr	r3, [pc, #196]	@ (8002414 <HAL_RCC_OscConfig+0x478>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe ff56 	bl	8001204 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235c:	f7fe ff52 	bl	8001204 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e087      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800236e:	4b27      	ldr	r3, [pc, #156]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69da      	ldr	r2, [r3, #28]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	3b01      	subs	r3, #1
 8002394:	041b      	lsls	r3, r3, #16
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239c:	061b      	lsls	r3, r3, #24
 800239e:	491b      	ldr	r1, [pc, #108]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HAL_RCC_OscConfig+0x478>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe ff2b 	bl	8001204 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b2:	f7fe ff27 	bl	8001204 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e05c      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c4:	4b11      	ldr	r3, [pc, #68]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x416>
 80023d0:	e054      	b.n	800247c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b10      	ldr	r3, [pc, #64]	@ (8002414 <HAL_RCC_OscConfig+0x478>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe ff14 	bl	8001204 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023e0:	f7fe ff10 	bl	8001204 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e045      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_RCC_OscConfig+0x470>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x444>
 80023fe:	e03d      	b.n	800247c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d107      	bne.n	8002418 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e038      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
 800240c:	40023800 	.word	0x40023800
 8002410:	40007000 	.word	0x40007000
 8002414:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002418:	4b1b      	ldr	r3, [pc, #108]	@ (8002488 <HAL_RCC_OscConfig+0x4ec>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d028      	beq.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002430:	429a      	cmp	r2, r3
 8002432:	d121      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d11a      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002448:	4013      	ands	r3, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800244e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002450:	4293      	cmp	r3, r2
 8002452:	d111      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245e:	085b      	lsrs	r3, r3, #1
 8002460:	3b01      	subs	r3, #1
 8002462:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002464:	429a      	cmp	r2, r3
 8002466:	d107      	bne.n	8002478 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002472:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800

0800248c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0cc      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a0:	4b68      	ldr	r3, [pc, #416]	@ (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d90c      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	4b65      	ldr	r3, [pc, #404]	@ (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b63      	ldr	r3, [pc, #396]	@ (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0b8      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d020      	beq.n	8002516 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e0:	4b59      	ldr	r3, [pc, #356]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	4a58      	ldr	r2, [pc, #352]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f8:	4b53      	ldr	r3, [pc, #332]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a52      	ldr	r2, [pc, #328]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002502:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002504:	4b50      	ldr	r3, [pc, #320]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	494d      	ldr	r1, [pc, #308]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d044      	beq.n	80025ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252a:	4b47      	ldr	r3, [pc, #284]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d119      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e07f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d003      	beq.n	800254a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002546:	2b03      	cmp	r3, #3
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800254a:	4b3f      	ldr	r3, [pc, #252]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e06f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255a:	4b3b      	ldr	r3, [pc, #236]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e067      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800256a:	4b37      	ldr	r3, [pc, #220]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f023 0203 	bic.w	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4934      	ldr	r1, [pc, #208]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800257c:	f7fe fe42 	bl	8001204 <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002582:	e00a      	b.n	800259a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002584:	f7fe fe3e 	bl	8001204 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e04f      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259a:	4b2b      	ldr	r3, [pc, #172]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 020c 	and.w	r2, r3, #12
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d1eb      	bne.n	8002584 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ac:	4b25      	ldr	r3, [pc, #148]	@ (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d20c      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b22      	ldr	r3, [pc, #136]	@ (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b20      	ldr	r3, [pc, #128]	@ (8002644 <HAL_RCC_ClockConfig+0x1b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e032      	b.n	800263a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d008      	beq.n	80025f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e0:	4b19      	ldr	r3, [pc, #100]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	4916      	ldr	r1, [pc, #88]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025fe:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	490e      	ldr	r1, [pc, #56]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002612:	f000 f821 	bl	8002658 <HAL_RCC_GetSysClockFreq>
 8002616:	4602      	mov	r2, r0
 8002618:	4b0b      	ldr	r3, [pc, #44]	@ (8002648 <HAL_RCC_ClockConfig+0x1bc>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	490a      	ldr	r1, [pc, #40]	@ (800264c <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	5ccb      	ldrb	r3, [r1, r3]
 8002626:	fa22 f303 	lsr.w	r3, r2, r3
 800262a:	4a09      	ldr	r2, [pc, #36]	@ (8002650 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800262e:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <HAL_RCC_ClockConfig+0x1c8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fda2 	bl	800117c <HAL_InitTick>

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40023c00 	.word	0x40023c00
 8002648:	40023800 	.word	0x40023800
 800264c:	08004760 	.word	0x08004760
 8002650:	20000000 	.word	0x20000000
 8002654:	20000004 	.word	0x20000004

08002658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800265c:	b090      	sub	sp, #64	@ 0x40
 800265e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	637b      	str	r3, [r7, #52]	@ 0x34
 8002664:	2300      	movs	r3, #0
 8002666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002668:	2300      	movs	r3, #0
 800266a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002670:	4b59      	ldr	r3, [pc, #356]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
 8002678:	2b08      	cmp	r3, #8
 800267a:	d00d      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x40>
 800267c:	2b08      	cmp	r3, #8
 800267e:	f200 80a1 	bhi.w	80027c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x34>
 8002686:	2b04      	cmp	r3, #4
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x3a>
 800268a:	e09b      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b53      	ldr	r3, [pc, #332]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x184>)
 800268e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002690:	e09b      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002692:	4b53      	ldr	r3, [pc, #332]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002694:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002696:	e098      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002698:	4b4f      	ldr	r3, [pc, #316]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026a2:	4b4d      	ldr	r3, [pc, #308]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d028      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ae:	4b4a      	ldr	r3, [pc, #296]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	099b      	lsrs	r3, r3, #6
 80026b4:	2200      	movs	r2, #0
 80026b6:	623b      	str	r3, [r7, #32]
 80026b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026c0:	2100      	movs	r1, #0
 80026c2:	4b47      	ldr	r3, [pc, #284]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026c4:	fb03 f201 	mul.w	r2, r3, r1
 80026c8:	2300      	movs	r3, #0
 80026ca:	fb00 f303 	mul.w	r3, r0, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	4a43      	ldr	r2, [pc, #268]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80026d2:	fba0 1202 	umull	r1, r2, r0, r2
 80026d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026d8:	460a      	mov	r2, r1
 80026da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80026dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026de:	4413      	add	r3, r2
 80026e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026e4:	2200      	movs	r2, #0
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	61fa      	str	r2, [r7, #28]
 80026ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80026f2:	f7fd fdd5 	bl	80002a0 <__aeabi_uldivmod>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4613      	mov	r3, r2
 80026fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026fe:	e053      	b.n	80027a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002700:	4b35      	ldr	r3, [pc, #212]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	2200      	movs	r2, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	617a      	str	r2, [r7, #20]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002712:	f04f 0b00 	mov.w	fp, #0
 8002716:	4652      	mov	r2, sl
 8002718:	465b      	mov	r3, fp
 800271a:	f04f 0000 	mov.w	r0, #0
 800271e:	f04f 0100 	mov.w	r1, #0
 8002722:	0159      	lsls	r1, r3, #5
 8002724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002728:	0150      	lsls	r0, r2, #5
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	ebb2 080a 	subs.w	r8, r2, sl
 8002732:	eb63 090b 	sbc.w	r9, r3, fp
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002742:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002746:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800274a:	ebb2 0408 	subs.w	r4, r2, r8
 800274e:	eb63 0509 	sbc.w	r5, r3, r9
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	00eb      	lsls	r3, r5, #3
 800275c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002760:	00e2      	lsls	r2, r4, #3
 8002762:	4614      	mov	r4, r2
 8002764:	461d      	mov	r5, r3
 8002766:	eb14 030a 	adds.w	r3, r4, sl
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	eb45 030b 	adc.w	r3, r5, fp
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800277e:	4629      	mov	r1, r5
 8002780:	028b      	lsls	r3, r1, #10
 8002782:	4621      	mov	r1, r4
 8002784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002788:	4621      	mov	r1, r4
 800278a:	028a      	lsls	r2, r1, #10
 800278c:	4610      	mov	r0, r2
 800278e:	4619      	mov	r1, r3
 8002790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002792:	2200      	movs	r2, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	60fa      	str	r2, [r7, #12]
 8002798:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800279c:	f7fd fd80 	bl	80002a0 <__aeabi_uldivmod>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4613      	mov	r3, r2
 80027a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	0c1b      	lsrs	r3, r3, #16
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	3301      	adds	r3, #1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80027b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027c2:	e002      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027c4:	4b05      	ldr	r3, [pc, #20]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x184>)
 80027c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80027c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3740      	adds	r7, #64	@ 0x40
 80027d0:	46bd      	mov	sp, r7
 80027d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800
 80027dc:	00f42400 	.word	0x00f42400
 80027e0:	017d7840 	.word	0x017d7840

080027e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e8:	4b03      	ldr	r3, [pc, #12]	@ (80027f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ea:	681b      	ldr	r3, [r3, #0]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000000 	.word	0x20000000

080027fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002800:	f7ff fff0 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	0a9b      	lsrs	r3, r3, #10
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	@ (8002820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40023800 	.word	0x40023800
 8002820:	08004770 	.word	0x08004770

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002828:	f7ff ffdc 	bl	80027e4 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b05      	ldr	r3, [pc, #20]	@ (8002844 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0b5b      	lsrs	r3, r3, #13
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4903      	ldr	r1, [pc, #12]	@ (8002848 <HAL_RCC_GetPCLK2Freq+0x24>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40023800 	.word	0x40023800
 8002848:	08004770 	.word	0x08004770

0800284c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d106      	bne.n	8002878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fe f9a6 	bl	8000bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2224      	movs	r2, #36	@ 0x24
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800288e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 ff85 	bl	80037a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	@ 0x28
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b20      	cmp	r3, #32
 800290a:	d175      	bne.n	80029f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <HAL_UART_Transmit+0x2c>
 8002912:	88fb      	ldrh	r3, [r7, #6]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e06e      	b.n	80029fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2221      	movs	r2, #33	@ 0x21
 8002926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800292a:	f7fe fc6b 	bl	8001204 <HAL_GetTick>
 800292e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	88fa      	ldrh	r2, [r7, #6]
 8002934:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002944:	d108      	bne.n	8002958 <HAL_UART_Transmit+0x6c>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d104      	bne.n	8002958 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	e003      	b.n	8002960 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002960:	e02e      	b.n	80029c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2200      	movs	r2, #0
 800296a:	2180      	movs	r1, #128	@ 0x80
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fc5d 	bl	800322c <UART_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d005      	beq.n	8002984 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e03a      	b.n	80029fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10b      	bne.n	80029a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002998:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	3302      	adds	r3, #2
 800299e:	61bb      	str	r3, [r7, #24]
 80029a0:	e007      	b.n	80029b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	781a      	ldrb	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	3301      	adds	r3, #1
 80029b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1cb      	bne.n	8002962 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2200      	movs	r2, #0
 80029d2:	2140      	movs	r1, #64	@ 0x40
 80029d4:	68f8      	ldr	r0, [r7, #12]
 80029d6:	f000 fc29 	bl	800322c <UART_WaitOnFlagUntilTimeout>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e006      	b.n	80029fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80029f4:	2300      	movs	r3, #0
 80029f6:	e000      	b.n	80029fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80029f8:	2302      	movs	r3, #2
  }
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b08c      	sub	sp, #48	@ 0x30
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	d14a      	bne.n	8002ab2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e043      	b.n	8002ab4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fc4e 	bl	80032e0 <UART_Start_Receive_DMA>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d12c      	bne.n	8002aac <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d125      	bne.n	8002aa6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	613b      	str	r3, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	e853 3f00 	ldrex	r3, [r3]
 8002a7e:	617b      	str	r3, [r7, #20]
   return(result);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f043 0310 	orr.w	r3, r3, #16
 8002a86:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	330c      	adds	r3, #12
 8002a8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a90:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a94:	6a39      	ldr	r1, [r7, #32]
 8002a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a98:	e841 2300 	strex	r3, r2, [r1]
 8002a9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e5      	bne.n	8002a70 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8002aa4:	e002      	b.n	8002aac <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002aac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002ab0:	e000      	b.n	8002ab4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002ab2:	2302      	movs	r3, #2
  }
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3730      	adds	r7, #48	@ 0x30
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b0ba      	sub	sp, #232	@ 0xe8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_UART_IRQHandler+0x66>
 8002b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fd81 	bl	8003622 <UART_Receive_IT>
      return;
 8002b20:	e25b      	b.n	8002fda <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80de 	beq.w	8002ce8 <HAL_UART_IRQHandler+0x22c>
 8002b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d106      	bne.n	8002b46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80d1 	beq.w	8002ce8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00b      	beq.n	8002b6a <HAL_UART_IRQHandler+0xae>
 8002b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b6e:	f003 0304 	and.w	r3, r3, #4
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00b      	beq.n	8002b8e <HAL_UART_IRQHandler+0xd2>
 8002b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d005      	beq.n	8002b8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b86:	f043 0202 	orr.w	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <HAL_UART_IRQHandler+0xf6>
 8002b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	f043 0204 	orr.w	r2, r3, #4
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d011      	beq.n	8002be2 <HAL_UART_IRQHandler+0x126>
 8002bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d105      	bne.n	8002bd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	f043 0208 	orr.w	r2, r3, #8
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 81f2 	beq.w	8002fd0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_UART_IRQHandler+0x14e>
 8002bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fd0c 	bl	8003622 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c14:	2b40      	cmp	r3, #64	@ 0x40
 8002c16:	bf0c      	ite	eq
 8002c18:	2301      	moveq	r3, #1
 8002c1a:	2300      	movne	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <HAL_UART_IRQHandler+0x17a>
 8002c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d04f      	beq.n	8002cd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fc14 	bl	8003464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c46:	2b40      	cmp	r3, #64	@ 0x40
 8002c48:	d141      	bne.n	8002cce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3314      	adds	r3, #20
 8002c50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3314      	adds	r3, #20
 8002c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002c76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c86:	e841 2300 	strex	r3, r2, [r1]
 8002c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1d9      	bne.n	8002c4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d013      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca2:	4a7e      	ldr	r2, [pc, #504]	@ (8002e9c <HAL_UART_IRQHandler+0x3e0>)
 8002ca4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fe fd3e 	bl	800172c <HAL_DMA_Abort_IT>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d016      	beq.n	8002ce4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc4:	e00e      	b.n	8002ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f9a8 	bl	800301c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ccc:	e00a      	b.n	8002ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f9a4 	bl	800301c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd4:	e006      	b.n	8002ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f9a0 	bl	800301c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002ce2:	e175      	b.n	8002fd0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce4:	bf00      	nop
    return;
 8002ce6:	e173      	b.n	8002fd0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	f040 814f 	bne.w	8002f90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002cf6:	f003 0310 	and.w	r3, r3, #16
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8148 	beq.w	8002f90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d04:	f003 0310 	and.w	r3, r3, #16
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f000 8141 	beq.w	8002f90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	60bb      	str	r3, [r7, #8]
 8002d22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d2e:	2b40      	cmp	r3, #64	@ 0x40
 8002d30:	f040 80b6 	bne.w	8002ea0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8145 	beq.w	8002fd4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d52:	429a      	cmp	r2, r3
 8002d54:	f080 813e 	bcs.w	8002fd4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d6a:	f000 8088 	beq.w	8002e7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	330c      	adds	r3, #12
 8002d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	330c      	adds	r3, #12
 8002d96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002daa:	e841 2300 	strex	r3, r2, [r1]
 8002dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1d9      	bne.n	8002d6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3314      	adds	r3, #20
 8002dc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dc4:	e853 3f00 	ldrex	r3, [r3]
 8002dc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002dca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002dcc:	f023 0301 	bic.w	r3, r3, #1
 8002dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3314      	adds	r3, #20
 8002dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002de2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002de6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002df0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1e1      	bne.n	8002dba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3314      	adds	r3, #20
 8002dfc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3314      	adds	r3, #20
 8002e16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1e3      	bne.n	8002df6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002e4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e4e:	f023 0310 	bic.w	r3, r3, #16
 8002e52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	330c      	adds	r3, #12
 8002e5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002e60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002e62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002e68:	e841 2300 	strex	r3, r2, [r1]
 8002e6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e3      	bne.n	8002e3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fe fbe7 	bl	800164c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fe f8e7 	bl	8001068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e9a:	e09b      	b.n	8002fd4 <HAL_UART_IRQHandler+0x518>
 8002e9c:	0800352b 	.word	0x0800352b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 808e 	beq.w	8002fd8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ebc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8089 	beq.w	8002fd8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	330c      	adds	r3, #12
 8002ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed0:	e853 3f00 	ldrex	r3, [r3]
 8002ed4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002edc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	330c      	adds	r3, #12
 8002ee6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002eea:	647a      	str	r2, [r7, #68]	@ 0x44
 8002eec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002ef0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ef2:	e841 2300 	strex	r3, r2, [r1]
 8002ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1e3      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3314      	adds	r3, #20
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3314      	adds	r3, #20
 8002f1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f22:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f2a:	e841 2300 	strex	r3, r2, [r1]
 8002f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1e3      	bne.n	8002efe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	330c      	adds	r3, #12
 8002f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0310 	bic.w	r3, r3, #16
 8002f5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	330c      	adds	r3, #12
 8002f64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002f68:	61fa      	str	r2, [r7, #28]
 8002f6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	69b9      	ldr	r1, [r7, #24]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	617b      	str	r3, [r7, #20]
   return(result);
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e3      	bne.n	8002f44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f86:	4619      	mov	r1, r3
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7fe f86d 	bl	8001068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f8e:	e023      	b.n	8002fd8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x4f4>
 8002f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fad2 	bl	8003552 <UART_Transmit_IT>
    return;
 8002fae:	e014      	b.n	8002fda <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00e      	beq.n	8002fda <HAL_UART_IRQHandler+0x51e>
 8002fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fb12 	bl	80035f2 <UART_EndTransmit_IT>
    return;
 8002fce:	e004      	b.n	8002fda <HAL_UART_IRQHandler+0x51e>
    return;
 8002fd0:	bf00      	nop
 8002fd2:	e002      	b.n	8002fda <HAL_UART_IRQHandler+0x51e>
      return;
 8002fd4:	bf00      	nop
 8002fd6:	e000      	b.n	8002fda <HAL_UART_IRQHandler+0x51e>
      return;
 8002fd8:	bf00      	nop
  }
}
 8002fda:	37e8      	adds	r7, #232	@ 0xe8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b09c      	sub	sp, #112	@ 0x70
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800303c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d172      	bne.n	8003132 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800304c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800304e:	2200      	movs	r2, #0
 8003050:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	330c      	adds	r3, #12
 8003058:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800305c:	e853 3f00 	ldrex	r3, [r3]
 8003060:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800306a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	330c      	adds	r3, #12
 8003070:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003072:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003074:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003076:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003078:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800307a:	e841 2300 	strex	r3, r2, [r1]
 800307e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e5      	bne.n	8003052 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3314      	adds	r3, #20
 800308c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003090:	e853 3f00 	ldrex	r3, [r3]
 8003094:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003098:	f023 0301 	bic.w	r3, r3, #1
 800309c:	667b      	str	r3, [r7, #100]	@ 0x64
 800309e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3314      	adds	r3, #20
 80030a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80030a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80030a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030ae:	e841 2300 	strex	r3, r2, [r1]
 80030b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1e5      	bne.n	8003086 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3314      	adds	r3, #20
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c4:	e853 3f00 	ldrex	r3, [r3]
 80030c8:	623b      	str	r3, [r7, #32]
   return(result);
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80030d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3314      	adds	r3, #20
 80030d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80030da:	633a      	str	r2, [r7, #48]	@ 0x30
 80030dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030e2:	e841 2300 	strex	r3, r2, [r1]
 80030e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1e5      	bne.n	80030ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d119      	bne.n	8003132 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	330c      	adds	r3, #12
 8003104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	60fb      	str	r3, [r7, #12]
   return(result);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f023 0310 	bic.w	r3, r3, #16
 8003114:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003116:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	330c      	adds	r3, #12
 800311c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800311e:	61fa      	str	r2, [r7, #28]
 8003120:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	69b9      	ldr	r1, [r7, #24]
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	617b      	str	r3, [r7, #20]
   return(result);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e5      	bne.n	80030fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003134:	2200      	movs	r2, #0
 8003136:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313c:	2b01      	cmp	r3, #1
 800313e:	d106      	bne.n	800314e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003142:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003144:	4619      	mov	r1, r3
 8003146:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003148:	f7fd ff8e 	bl	8001068 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800314c:	e002      	b.n	8003154 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800314e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003150:	f7ff ff50 	bl	8002ff4 <HAL_UART_RxCpltCallback>
}
 8003154:	bf00      	nop
 8003156:	3770      	adds	r7, #112	@ 0x70
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003168:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003174:	2b01      	cmp	r3, #1
 8003176:	d108      	bne.n	800318a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	b29b      	uxth	r3, r3
 8003180:	4619      	mov	r1, r3
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f7fd ff70 	bl	8001068 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003188:	e002      	b.n	8003190 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f7ff ff3c 	bl	8003008 <HAL_UART_RxHalfCpltCallback>
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b4:	2b80      	cmp	r3, #128	@ 0x80
 80031b6:	bf0c      	ite	eq
 80031b8:	2301      	moveq	r3, #1
 80031ba:	2300      	movne	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b21      	cmp	r3, #33	@ 0x21
 80031ca:	d108      	bne.n	80031de <UART_DMAError+0x46>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2200      	movs	r2, #0
 80031d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80031d8:	68b8      	ldr	r0, [r7, #8]
 80031da:	f000 f91b 	bl	8003414 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e8:	2b40      	cmp	r3, #64	@ 0x40
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b22      	cmp	r3, #34	@ 0x22
 80031fe:	d108      	bne.n	8003212 <UART_DMAError+0x7a>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d005      	beq.n	8003212 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2200      	movs	r2, #0
 800320a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800320c:	68b8      	ldr	r0, [r7, #8]
 800320e:	f000 f929 	bl	8003464 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003216:	f043 0210 	orr.w	r2, r3, #16
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800321e:	68b8      	ldr	r0, [r7, #8]
 8003220:	f7ff fefc 	bl	800301c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	4613      	mov	r3, r2
 800323a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800323c:	e03b      	b.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003244:	d037      	beq.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003246:	f7fd ffdd 	bl	8001204 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	6a3a      	ldr	r2, [r7, #32]
 8003252:	429a      	cmp	r2, r3
 8003254:	d302      	bcc.n	800325c <UART_WaitOnFlagUntilTimeout+0x30>
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e03a      	b.n	80032d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d023      	beq.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b80      	cmp	r3, #128	@ 0x80
 8003272:	d020      	beq.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b40      	cmp	r3, #64	@ 0x40
 8003278:	d01d      	beq.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b08      	cmp	r3, #8
 8003286:	d116      	bne.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003288:	2300      	movs	r3, #0
 800328a:	617b      	str	r3, [r7, #20]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f8e0 	bl	8003464 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2208      	movs	r2, #8
 80032a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e00f      	b.n	80032d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4013      	ands	r3, r2
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	bf0c      	ite	eq
 80032c6:	2301      	moveq	r3, #1
 80032c8:	2300      	movne	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	79fb      	ldrb	r3, [r7, #7]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d0b4      	beq.n	800323e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b098      	sub	sp, #96	@ 0x60
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	88fa      	ldrh	r2, [r7, #6]
 80032f8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2222      	movs	r2, #34	@ 0x22
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330c:	4a3e      	ldr	r2, [pc, #248]	@ (8003408 <UART_Start_Receive_DMA+0x128>)
 800330e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003314:	4a3d      	ldr	r2, [pc, #244]	@ (800340c <UART_Start_Receive_DMA+0x12c>)
 8003316:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331c:	4a3c      	ldr	r2, [pc, #240]	@ (8003410 <UART_Start_Receive_DMA+0x130>)
 800331e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003324:	2200      	movs	r2, #0
 8003326:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003328:	f107 0308 	add.w	r3, r7, #8
 800332c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3304      	adds	r3, #4
 8003338:	4619      	mov	r1, r3
 800333a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	f7fe f92c 	bl	800159c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d019      	beq.n	8003396 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	330c      	adds	r3, #12
 8003368:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003378:	65bb      	str	r3, [r7, #88]	@ 0x58
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	330c      	adds	r3, #12
 8003380:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003382:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003384:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003386:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003388:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800338a:	e841 2300 	strex	r3, r2, [r1]
 800338e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1e5      	bne.n	8003362 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	3314      	adds	r3, #20
 800339c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a0:	e853 3f00 	ldrex	r3, [r3]
 80033a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3314      	adds	r3, #20
 80033b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80033b6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80033b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80033bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e5      	bne.n	8003396 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3314      	adds	r3, #20
 80033d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	617b      	str	r3, [r7, #20]
   return(result);
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3314      	adds	r3, #20
 80033e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80033ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80033ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ee:	6a39      	ldr	r1, [r7, #32]
 80033f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e5      	bne.n	80033ca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3760      	adds	r7, #96	@ 0x60
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	08003031 	.word	0x08003031
 800340c:	0800315d 	.word	0x0800315d
 8003410:	08003199 	.word	0x08003199

08003414 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003414:	b480      	push	{r7}
 8003416:	b089      	sub	sp, #36	@ 0x24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	60bb      	str	r3, [r7, #8]
   return(result);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	69fa      	ldr	r2, [r7, #28]
 800343c:	61ba      	str	r2, [r7, #24]
 800343e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6979      	ldr	r1, [r7, #20]
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	613b      	str	r3, [r7, #16]
   return(result);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e5      	bne.n	800341c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003458:	bf00      	nop
 800345a:	3724      	adds	r7, #36	@ 0x24
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003464:	b480      	push	{r7}
 8003466:	b095      	sub	sp, #84	@ 0x54
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800347c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800347e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800348c:	643a      	str	r2, [r7, #64]	@ 0x40
 800348e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003492:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800349a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e5      	bne.n	800346c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3314      	adds	r3, #20
 80034a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3314      	adds	r3, #20
 80034be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e5      	bne.n	80034a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d119      	bne.n	8003510 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f023 0310 	bic.w	r3, r3, #16
 80034f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034fc:	61ba      	str	r2, [r7, #24]
 80034fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	6979      	ldr	r1, [r7, #20]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	613b      	str	r3, [r7, #16]
   return(result);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e5      	bne.n	80034dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800351e:	bf00      	nop
 8003520:	3754      	adds	r7, #84	@ 0x54
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003536:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f7ff fd69 	bl	800301c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003552:	b480      	push	{r7}
 8003554:	b085      	sub	sp, #20
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003560:	b2db      	uxtb	r3, r3
 8003562:	2b21      	cmp	r3, #33	@ 0x21
 8003564:	d13e      	bne.n	80035e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356e:	d114      	bne.n	800359a <UART_Transmit_IT+0x48>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d110      	bne.n	800359a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800358c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	1c9a      	adds	r2, r3, #2
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	621a      	str	r2, [r3, #32]
 8003598:	e008      	b.n	80035ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	1c59      	adds	r1, r3, #1
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6211      	str	r1, [r2, #32]
 80035a4:	781a      	ldrb	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4619      	mov	r1, r3
 80035ba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10f      	bne.n	80035e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68da      	ldr	r2, [r3, #12]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	e000      	b.n	80035e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035e4:	2302      	movs	r3, #2
  }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3714      	adds	r7, #20
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003608:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff fce4 	bl	8002fe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b08c      	sub	sp, #48	@ 0x30
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b22      	cmp	r3, #34	@ 0x22
 8003634:	f040 80ae 	bne.w	8003794 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003640:	d117      	bne.n	8003672 <UART_Receive_IT+0x50>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d113      	bne.n	8003672 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800364a:	2300      	movs	r3, #0
 800364c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003652:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	b29b      	uxth	r3, r3
 800365c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003660:	b29a      	uxth	r2, r3
 8003662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003664:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	1c9a      	adds	r2, r3, #2
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003670:	e026      	b.n	80036c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003678:	2300      	movs	r3, #0
 800367a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003684:	d007      	beq.n	8003696 <UART_Receive_IT+0x74>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10a      	bne.n	80036a4 <UART_Receive_IT+0x82>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d106      	bne.n	80036a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	b2da      	uxtb	r2, r3
 800369e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	e008      	b.n	80036b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ba:	1c5a      	adds	r2, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4619      	mov	r1, r3
 80036ce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d15d      	bne.n	8003790 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0220 	bic.w	r2, r2, #32
 80036e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	695a      	ldr	r2, [r3, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	2b01      	cmp	r3, #1
 8003718:	d135      	bne.n	8003786 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	330c      	adds	r3, #12
 8003726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	e853 3f00 	ldrex	r3, [r3]
 800372e:	613b      	str	r3, [r7, #16]
   return(result);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f023 0310 	bic.w	r3, r3, #16
 8003736:	627b      	str	r3, [r7, #36]	@ 0x24
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	330c      	adds	r3, #12
 800373e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003740:	623a      	str	r2, [r7, #32]
 8003742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003744:	69f9      	ldr	r1, [r7, #28]
 8003746:	6a3a      	ldr	r2, [r7, #32]
 8003748:	e841 2300 	strex	r3, r2, [r1]
 800374c:	61bb      	str	r3, [r7, #24]
   return(result);
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e5      	bne.n	8003720 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b10      	cmp	r3, #16
 8003760:	d10a      	bne.n	8003778 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800377c:	4619      	mov	r1, r3
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fd fc72 	bl	8001068 <HAL_UARTEx_RxEventCallback>
 8003784:	e002      	b.n	800378c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fc34 	bl	8002ff4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e002      	b.n	8003796 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003790:	2300      	movs	r3, #0
 8003792:	e000      	b.n	8003796 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003794:	2302      	movs	r3, #2
  }
}
 8003796:	4618      	mov	r0, r3
 8003798:	3730      	adds	r7, #48	@ 0x30
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a4:	b0c0      	sub	sp, #256	@ 0x100
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037bc:	68d9      	ldr	r1, [r3, #12]
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	ea40 0301 	orr.w	r3, r0, r1
 80037c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	431a      	orrs	r2, r3
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	431a      	orrs	r2, r3
 80037e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037f8:	f021 010c 	bic.w	r1, r1, #12
 80037fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003806:	430b      	orrs	r3, r1
 8003808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381a:	6999      	ldr	r1, [r3, #24]
 800381c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	ea40 0301 	orr.w	r3, r0, r1
 8003826:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4b8f      	ldr	r3, [pc, #572]	@ (8003a6c <UART_SetConfig+0x2cc>)
 8003830:	429a      	cmp	r2, r3
 8003832:	d005      	beq.n	8003840 <UART_SetConfig+0xa0>
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	4b8d      	ldr	r3, [pc, #564]	@ (8003a70 <UART_SetConfig+0x2d0>)
 800383c:	429a      	cmp	r2, r3
 800383e:	d104      	bne.n	800384a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003840:	f7fe fff0 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8003844:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003848:	e003      	b.n	8003852 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800384a:	f7fe ffd7 	bl	80027fc <HAL_RCC_GetPCLK1Freq>
 800384e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800385c:	f040 810c 	bne.w	8003a78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003860:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003864:	2200      	movs	r2, #0
 8003866:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800386a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800386e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003872:	4622      	mov	r2, r4
 8003874:	462b      	mov	r3, r5
 8003876:	1891      	adds	r1, r2, r2
 8003878:	65b9      	str	r1, [r7, #88]	@ 0x58
 800387a:	415b      	adcs	r3, r3
 800387c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800387e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003882:	4621      	mov	r1, r4
 8003884:	eb12 0801 	adds.w	r8, r2, r1
 8003888:	4629      	mov	r1, r5
 800388a:	eb43 0901 	adc.w	r9, r3, r1
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	f04f 0300 	mov.w	r3, #0
 8003896:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800389a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800389e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038a2:	4690      	mov	r8, r2
 80038a4:	4699      	mov	r9, r3
 80038a6:	4623      	mov	r3, r4
 80038a8:	eb18 0303 	adds.w	r3, r8, r3
 80038ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038b0:	462b      	mov	r3, r5
 80038b2:	eb49 0303 	adc.w	r3, r9, r3
 80038b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038c6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80038ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038ce:	460b      	mov	r3, r1
 80038d0:	18db      	adds	r3, r3, r3
 80038d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80038d4:	4613      	mov	r3, r2
 80038d6:	eb42 0303 	adc.w	r3, r2, r3
 80038da:	657b      	str	r3, [r7, #84]	@ 0x54
 80038dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038e4:	f7fc fcdc 	bl	80002a0 <__aeabi_uldivmod>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4b61      	ldr	r3, [pc, #388]	@ (8003a74 <UART_SetConfig+0x2d4>)
 80038ee:	fba3 2302 	umull	r2, r3, r3, r2
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	011c      	lsls	r4, r3, #4
 80038f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038fa:	2200      	movs	r2, #0
 80038fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003900:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003904:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003908:	4642      	mov	r2, r8
 800390a:	464b      	mov	r3, r9
 800390c:	1891      	adds	r1, r2, r2
 800390e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003910:	415b      	adcs	r3, r3
 8003912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003918:	4641      	mov	r1, r8
 800391a:	eb12 0a01 	adds.w	sl, r2, r1
 800391e:	4649      	mov	r1, r9
 8003920:	eb43 0b01 	adc.w	fp, r3, r1
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003930:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003934:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003938:	4692      	mov	sl, r2
 800393a:	469b      	mov	fp, r3
 800393c:	4643      	mov	r3, r8
 800393e:	eb1a 0303 	adds.w	r3, sl, r3
 8003942:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003946:	464b      	mov	r3, r9
 8003948:	eb4b 0303 	adc.w	r3, fp, r3
 800394c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800395c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003960:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003964:	460b      	mov	r3, r1
 8003966:	18db      	adds	r3, r3, r3
 8003968:	643b      	str	r3, [r7, #64]	@ 0x40
 800396a:	4613      	mov	r3, r2
 800396c:	eb42 0303 	adc.w	r3, r2, r3
 8003970:	647b      	str	r3, [r7, #68]	@ 0x44
 8003972:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003976:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800397a:	f7fc fc91 	bl	80002a0 <__aeabi_uldivmod>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4611      	mov	r1, r2
 8003984:	4b3b      	ldr	r3, [pc, #236]	@ (8003a74 <UART_SetConfig+0x2d4>)
 8003986:	fba3 2301 	umull	r2, r3, r3, r1
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2264      	movs	r2, #100	@ 0x64
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	1acb      	subs	r3, r1, r3
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800399a:	4b36      	ldr	r3, [pc, #216]	@ (8003a74 <UART_SetConfig+0x2d4>)
 800399c:	fba3 2302 	umull	r2, r3, r3, r2
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80039a8:	441c      	add	r4, r3
 80039aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039b4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80039b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80039bc:	4642      	mov	r2, r8
 80039be:	464b      	mov	r3, r9
 80039c0:	1891      	adds	r1, r2, r2
 80039c2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80039c4:	415b      	adcs	r3, r3
 80039c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039cc:	4641      	mov	r1, r8
 80039ce:	1851      	adds	r1, r2, r1
 80039d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80039d2:	4649      	mov	r1, r9
 80039d4:	414b      	adcs	r3, r1
 80039d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80039d8:	f04f 0200 	mov.w	r2, #0
 80039dc:	f04f 0300 	mov.w	r3, #0
 80039e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039e4:	4659      	mov	r1, fp
 80039e6:	00cb      	lsls	r3, r1, #3
 80039e8:	4651      	mov	r1, sl
 80039ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ee:	4651      	mov	r1, sl
 80039f0:	00ca      	lsls	r2, r1, #3
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	4603      	mov	r3, r0
 80039f8:	4642      	mov	r2, r8
 80039fa:	189b      	adds	r3, r3, r2
 80039fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a00:	464b      	mov	r3, r9
 8003a02:	460a      	mov	r2, r1
 8003a04:	eb42 0303 	adc.w	r3, r2, r3
 8003a08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a20:	460b      	mov	r3, r1
 8003a22:	18db      	adds	r3, r3, r3
 8003a24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a26:	4613      	mov	r3, r2
 8003a28:	eb42 0303 	adc.w	r3, r2, r3
 8003a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a36:	f7fc fc33 	bl	80002a0 <__aeabi_uldivmod>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a74 <UART_SetConfig+0x2d4>)
 8003a40:	fba3 1302 	umull	r1, r3, r3, r2
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	2164      	movs	r1, #100	@ 0x64
 8003a48:	fb01 f303 	mul.w	r3, r1, r3
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	3332      	adds	r3, #50	@ 0x32
 8003a52:	4a08      	ldr	r2, [pc, #32]	@ (8003a74 <UART_SetConfig+0x2d4>)
 8003a54:	fba2 2303 	umull	r2, r3, r2, r3
 8003a58:	095b      	lsrs	r3, r3, #5
 8003a5a:	f003 0207 	and.w	r2, r3, #7
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4422      	add	r2, r4
 8003a66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a68:	e106      	b.n	8003c78 <UART_SetConfig+0x4d8>
 8003a6a:	bf00      	nop
 8003a6c:	40011000 	.word	0x40011000
 8003a70:	40011400 	.word	0x40011400
 8003a74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a8a:	4642      	mov	r2, r8
 8003a8c:	464b      	mov	r3, r9
 8003a8e:	1891      	adds	r1, r2, r2
 8003a90:	6239      	str	r1, [r7, #32]
 8003a92:	415b      	adcs	r3, r3
 8003a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a9a:	4641      	mov	r1, r8
 8003a9c:	1854      	adds	r4, r2, r1
 8003a9e:	4649      	mov	r1, r9
 8003aa0:	eb43 0501 	adc.w	r5, r3, r1
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	00eb      	lsls	r3, r5, #3
 8003aae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ab2:	00e2      	lsls	r2, r4, #3
 8003ab4:	4614      	mov	r4, r2
 8003ab6:	461d      	mov	r5, r3
 8003ab8:	4643      	mov	r3, r8
 8003aba:	18e3      	adds	r3, r4, r3
 8003abc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ac0:	464b      	mov	r3, r9
 8003ac2:	eb45 0303 	adc.w	r3, r5, r3
 8003ac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ad6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ae6:	4629      	mov	r1, r5
 8003ae8:	008b      	lsls	r3, r1, #2
 8003aea:	4621      	mov	r1, r4
 8003aec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003af0:	4621      	mov	r1, r4
 8003af2:	008a      	lsls	r2, r1, #2
 8003af4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003af8:	f7fc fbd2 	bl	80002a0 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4b60      	ldr	r3, [pc, #384]	@ (8003c84 <UART_SetConfig+0x4e4>)
 8003b02:	fba3 2302 	umull	r2, r3, r3, r2
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	011c      	lsls	r4, r3, #4
 8003b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b18:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b1c:	4642      	mov	r2, r8
 8003b1e:	464b      	mov	r3, r9
 8003b20:	1891      	adds	r1, r2, r2
 8003b22:	61b9      	str	r1, [r7, #24]
 8003b24:	415b      	adcs	r3, r3
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	1851      	adds	r1, r2, r1
 8003b30:	6139      	str	r1, [r7, #16]
 8003b32:	4649      	mov	r1, r9
 8003b34:	414b      	adcs	r3, r1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b44:	4659      	mov	r1, fp
 8003b46:	00cb      	lsls	r3, r1, #3
 8003b48:	4651      	mov	r1, sl
 8003b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b4e:	4651      	mov	r1, sl
 8003b50:	00ca      	lsls	r2, r1, #3
 8003b52:	4610      	mov	r0, r2
 8003b54:	4619      	mov	r1, r3
 8003b56:	4603      	mov	r3, r0
 8003b58:	4642      	mov	r2, r8
 8003b5a:	189b      	adds	r3, r3, r2
 8003b5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b60:	464b      	mov	r3, r9
 8003b62:	460a      	mov	r2, r1
 8003b64:	eb42 0303 	adc.w	r3, r2, r3
 8003b68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b76:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b84:	4649      	mov	r1, r9
 8003b86:	008b      	lsls	r3, r1, #2
 8003b88:	4641      	mov	r1, r8
 8003b8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b8e:	4641      	mov	r1, r8
 8003b90:	008a      	lsls	r2, r1, #2
 8003b92:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b96:	f7fc fb83 	bl	80002a0 <__aeabi_uldivmod>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4b38      	ldr	r3, [pc, #224]	@ (8003c84 <UART_SetConfig+0x4e4>)
 8003ba2:	fba3 2301 	umull	r2, r3, r3, r1
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2264      	movs	r2, #100	@ 0x64
 8003baa:	fb02 f303 	mul.w	r3, r2, r3
 8003bae:	1acb      	subs	r3, r1, r3
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	3332      	adds	r3, #50	@ 0x32
 8003bb4:	4a33      	ldr	r2, [pc, #204]	@ (8003c84 <UART_SetConfig+0x4e4>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bc0:	441c      	add	r4, r3
 8003bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003bca:	677a      	str	r2, [r7, #116]	@ 0x74
 8003bcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	464b      	mov	r3, r9
 8003bd4:	1891      	adds	r1, r2, r2
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	415b      	adcs	r3, r3
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003be0:	4641      	mov	r1, r8
 8003be2:	1851      	adds	r1, r2, r1
 8003be4:	6039      	str	r1, [r7, #0]
 8003be6:	4649      	mov	r1, r9
 8003be8:	414b      	adcs	r3, r1
 8003bea:	607b      	str	r3, [r7, #4]
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	00cb      	lsls	r3, r1, #3
 8003bfc:	4651      	mov	r1, sl
 8003bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c02:	4651      	mov	r1, sl
 8003c04:	00ca      	lsls	r2, r1, #3
 8003c06:	4610      	mov	r0, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	189b      	adds	r3, r3, r2
 8003c10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c12:	464b      	mov	r3, r9
 8003c14:	460a      	mov	r2, r1
 8003c16:	eb42 0303 	adc.w	r3, r2, r3
 8003c1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c26:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c34:	4649      	mov	r1, r9
 8003c36:	008b      	lsls	r3, r1, #2
 8003c38:	4641      	mov	r1, r8
 8003c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c3e:	4641      	mov	r1, r8
 8003c40:	008a      	lsls	r2, r1, #2
 8003c42:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c46:	f7fc fb2b 	bl	80002a0 <__aeabi_uldivmod>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c84 <UART_SetConfig+0x4e4>)
 8003c50:	fba3 1302 	umull	r1, r3, r3, r2
 8003c54:	095b      	lsrs	r3, r3, #5
 8003c56:	2164      	movs	r1, #100	@ 0x64
 8003c58:	fb01 f303 	mul.w	r3, r1, r3
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	3332      	adds	r3, #50	@ 0x32
 8003c62:	4a08      	ldr	r2, [pc, #32]	@ (8003c84 <UART_SetConfig+0x4e4>)
 8003c64:	fba2 2303 	umull	r2, r3, r2, r3
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	f003 020f 	and.w	r2, r3, #15
 8003c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4422      	add	r2, r4
 8003c76:	609a      	str	r2, [r3, #8]
}
 8003c78:	bf00      	nop
 8003c7a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c84:	51eb851f 	.word	0x51eb851f

08003c88 <atoi>:
 8003c88:	220a      	movs	r2, #10
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f000 b87a 	b.w	8003d84 <strtol>

08003c90 <_strtol_l.constprop.0>:
 8003c90:	2b24      	cmp	r3, #36	@ 0x24
 8003c92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c96:	4686      	mov	lr, r0
 8003c98:	4690      	mov	r8, r2
 8003c9a:	d801      	bhi.n	8003ca0 <_strtol_l.constprop.0+0x10>
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d106      	bne.n	8003cae <_strtol_l.constprop.0+0x1e>
 8003ca0:	f000 f8b6 	bl	8003e10 <__errno>
 8003ca4:	2316      	movs	r3, #22
 8003ca6:	6003      	str	r3, [r0, #0]
 8003ca8:	2000      	movs	r0, #0
 8003caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cae:	4834      	ldr	r0, [pc, #208]	@ (8003d80 <_strtol_l.constprop.0+0xf0>)
 8003cb0:	460d      	mov	r5, r1
 8003cb2:	462a      	mov	r2, r5
 8003cb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003cb8:	5d06      	ldrb	r6, [r0, r4]
 8003cba:	f016 0608 	ands.w	r6, r6, #8
 8003cbe:	d1f8      	bne.n	8003cb2 <_strtol_l.constprop.0+0x22>
 8003cc0:	2c2d      	cmp	r4, #45	@ 0x2d
 8003cc2:	d12d      	bne.n	8003d20 <_strtol_l.constprop.0+0x90>
 8003cc4:	782c      	ldrb	r4, [r5, #0]
 8003cc6:	2601      	movs	r6, #1
 8003cc8:	1c95      	adds	r5, r2, #2
 8003cca:	f033 0210 	bics.w	r2, r3, #16
 8003cce:	d109      	bne.n	8003ce4 <_strtol_l.constprop.0+0x54>
 8003cd0:	2c30      	cmp	r4, #48	@ 0x30
 8003cd2:	d12a      	bne.n	8003d2a <_strtol_l.constprop.0+0x9a>
 8003cd4:	782a      	ldrb	r2, [r5, #0]
 8003cd6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003cda:	2a58      	cmp	r2, #88	@ 0x58
 8003cdc:	d125      	bne.n	8003d2a <_strtol_l.constprop.0+0x9a>
 8003cde:	786c      	ldrb	r4, [r5, #1]
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	3502      	adds	r5, #2
 8003ce4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003ce8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003cec:	2200      	movs	r2, #0
 8003cee:	fbbc f9f3 	udiv	r9, ip, r3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	fb03 ca19 	mls	sl, r3, r9, ip
 8003cf8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003cfc:	2f09      	cmp	r7, #9
 8003cfe:	d81b      	bhi.n	8003d38 <_strtol_l.constprop.0+0xa8>
 8003d00:	463c      	mov	r4, r7
 8003d02:	42a3      	cmp	r3, r4
 8003d04:	dd27      	ble.n	8003d56 <_strtol_l.constprop.0+0xc6>
 8003d06:	1c57      	adds	r7, r2, #1
 8003d08:	d007      	beq.n	8003d1a <_strtol_l.constprop.0+0x8a>
 8003d0a:	4581      	cmp	r9, r0
 8003d0c:	d320      	bcc.n	8003d50 <_strtol_l.constprop.0+0xc0>
 8003d0e:	d101      	bne.n	8003d14 <_strtol_l.constprop.0+0x84>
 8003d10:	45a2      	cmp	sl, r4
 8003d12:	db1d      	blt.n	8003d50 <_strtol_l.constprop.0+0xc0>
 8003d14:	fb00 4003 	mla	r0, r0, r3, r4
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d1e:	e7eb      	b.n	8003cf8 <_strtol_l.constprop.0+0x68>
 8003d20:	2c2b      	cmp	r4, #43	@ 0x2b
 8003d22:	bf04      	itt	eq
 8003d24:	782c      	ldrbeq	r4, [r5, #0]
 8003d26:	1c95      	addeq	r5, r2, #2
 8003d28:	e7cf      	b.n	8003cca <_strtol_l.constprop.0+0x3a>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1da      	bne.n	8003ce4 <_strtol_l.constprop.0+0x54>
 8003d2e:	2c30      	cmp	r4, #48	@ 0x30
 8003d30:	bf0c      	ite	eq
 8003d32:	2308      	moveq	r3, #8
 8003d34:	230a      	movne	r3, #10
 8003d36:	e7d5      	b.n	8003ce4 <_strtol_l.constprop.0+0x54>
 8003d38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003d3c:	2f19      	cmp	r7, #25
 8003d3e:	d801      	bhi.n	8003d44 <_strtol_l.constprop.0+0xb4>
 8003d40:	3c37      	subs	r4, #55	@ 0x37
 8003d42:	e7de      	b.n	8003d02 <_strtol_l.constprop.0+0x72>
 8003d44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003d48:	2f19      	cmp	r7, #25
 8003d4a:	d804      	bhi.n	8003d56 <_strtol_l.constprop.0+0xc6>
 8003d4c:	3c57      	subs	r4, #87	@ 0x57
 8003d4e:	e7d8      	b.n	8003d02 <_strtol_l.constprop.0+0x72>
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	e7e1      	b.n	8003d1a <_strtol_l.constprop.0+0x8a>
 8003d56:	1c53      	adds	r3, r2, #1
 8003d58:	d108      	bne.n	8003d6c <_strtol_l.constprop.0+0xdc>
 8003d5a:	2322      	movs	r3, #34	@ 0x22
 8003d5c:	f8ce 3000 	str.w	r3, [lr]
 8003d60:	4660      	mov	r0, ip
 8003d62:	f1b8 0f00 	cmp.w	r8, #0
 8003d66:	d0a0      	beq.n	8003caa <_strtol_l.constprop.0+0x1a>
 8003d68:	1e69      	subs	r1, r5, #1
 8003d6a:	e006      	b.n	8003d7a <_strtol_l.constprop.0+0xea>
 8003d6c:	b106      	cbz	r6, 8003d70 <_strtol_l.constprop.0+0xe0>
 8003d6e:	4240      	negs	r0, r0
 8003d70:	f1b8 0f00 	cmp.w	r8, #0
 8003d74:	d099      	beq.n	8003caa <_strtol_l.constprop.0+0x1a>
 8003d76:	2a00      	cmp	r2, #0
 8003d78:	d1f6      	bne.n	8003d68 <_strtol_l.constprop.0+0xd8>
 8003d7a:	f8c8 1000 	str.w	r1, [r8]
 8003d7e:	e794      	b.n	8003caa <_strtol_l.constprop.0+0x1a>
 8003d80:	08004781 	.word	0x08004781

08003d84 <strtol>:
 8003d84:	4613      	mov	r3, r2
 8003d86:	460a      	mov	r2, r1
 8003d88:	4601      	mov	r1, r0
 8003d8a:	4802      	ldr	r0, [pc, #8]	@ (8003d94 <strtol+0x10>)
 8003d8c:	6800      	ldr	r0, [r0, #0]
 8003d8e:	f7ff bf7f 	b.w	8003c90 <_strtol_l.constprop.0>
 8003d92:	bf00      	nop
 8003d94:	2000000c 	.word	0x2000000c

08003d98 <sniprintf>:
 8003d98:	b40c      	push	{r2, r3}
 8003d9a:	b530      	push	{r4, r5, lr}
 8003d9c:	4b17      	ldr	r3, [pc, #92]	@ (8003dfc <sniprintf+0x64>)
 8003d9e:	1e0c      	subs	r4, r1, #0
 8003da0:	681d      	ldr	r5, [r3, #0]
 8003da2:	b09d      	sub	sp, #116	@ 0x74
 8003da4:	da08      	bge.n	8003db8 <sniprintf+0x20>
 8003da6:	238b      	movs	r3, #139	@ 0x8b
 8003da8:	602b      	str	r3, [r5, #0]
 8003daa:	f04f 30ff 	mov.w	r0, #4294967295
 8003dae:	b01d      	add	sp, #116	@ 0x74
 8003db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003db4:	b002      	add	sp, #8
 8003db6:	4770      	bx	lr
 8003db8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003dbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003dc0:	bf14      	ite	ne
 8003dc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003dc6:	4623      	moveq	r3, r4
 8003dc8:	9304      	str	r3, [sp, #16]
 8003dca:	9307      	str	r3, [sp, #28]
 8003dcc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dd0:	9002      	str	r0, [sp, #8]
 8003dd2:	9006      	str	r0, [sp, #24]
 8003dd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003dd8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003dda:	ab21      	add	r3, sp, #132	@ 0x84
 8003ddc:	a902      	add	r1, sp, #8
 8003dde:	4628      	mov	r0, r5
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	f000 f9a3 	bl	800412c <_svfiprintf_r>
 8003de6:	1c43      	adds	r3, r0, #1
 8003de8:	bfbc      	itt	lt
 8003dea:	238b      	movlt	r3, #139	@ 0x8b
 8003dec:	602b      	strlt	r3, [r5, #0]
 8003dee:	2c00      	cmp	r4, #0
 8003df0:	d0dd      	beq.n	8003dae <sniprintf+0x16>
 8003df2:	9b02      	ldr	r3, [sp, #8]
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e7d9      	b.n	8003dae <sniprintf+0x16>
 8003dfa:	bf00      	nop
 8003dfc:	2000000c 	.word	0x2000000c

08003e00 <memset>:
 8003e00:	4402      	add	r2, r0
 8003e02:	4603      	mov	r3, r0
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d100      	bne.n	8003e0a <memset+0xa>
 8003e08:	4770      	bx	lr
 8003e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e0e:	e7f9      	b.n	8003e04 <memset+0x4>

08003e10 <__errno>:
 8003e10:	4b01      	ldr	r3, [pc, #4]	@ (8003e18 <__errno+0x8>)
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	2000000c 	.word	0x2000000c

08003e1c <__libc_init_array>:
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8003e54 <__libc_init_array+0x38>)
 8003e20:	4c0d      	ldr	r4, [pc, #52]	@ (8003e58 <__libc_init_array+0x3c>)
 8003e22:	1b64      	subs	r4, r4, r5
 8003e24:	10a4      	asrs	r4, r4, #2
 8003e26:	2600      	movs	r6, #0
 8003e28:	42a6      	cmp	r6, r4
 8003e2a:	d109      	bne.n	8003e40 <__libc_init_array+0x24>
 8003e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8003e5c <__libc_init_array+0x40>)
 8003e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8003e60 <__libc_init_array+0x44>)
 8003e30:	f000 fc66 	bl	8004700 <_init>
 8003e34:	1b64      	subs	r4, r4, r5
 8003e36:	10a4      	asrs	r4, r4, #2
 8003e38:	2600      	movs	r6, #0
 8003e3a:	42a6      	cmp	r6, r4
 8003e3c:	d105      	bne.n	8003e4a <__libc_init_array+0x2e>
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
 8003e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e44:	4798      	blx	r3
 8003e46:	3601      	adds	r6, #1
 8003e48:	e7ee      	b.n	8003e28 <__libc_init_array+0xc>
 8003e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e4e:	4798      	blx	r3
 8003e50:	3601      	adds	r6, #1
 8003e52:	e7f2      	b.n	8003e3a <__libc_init_array+0x1e>
 8003e54:	080048bc 	.word	0x080048bc
 8003e58:	080048bc 	.word	0x080048bc
 8003e5c:	080048bc 	.word	0x080048bc
 8003e60:	080048c0 	.word	0x080048c0

08003e64 <__retarget_lock_acquire_recursive>:
 8003e64:	4770      	bx	lr

08003e66 <__retarget_lock_release_recursive>:
 8003e66:	4770      	bx	lr

08003e68 <memcpy>:
 8003e68:	440a      	add	r2, r1
 8003e6a:	4291      	cmp	r1, r2
 8003e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e70:	d100      	bne.n	8003e74 <memcpy+0xc>
 8003e72:	4770      	bx	lr
 8003e74:	b510      	push	{r4, lr}
 8003e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e7e:	4291      	cmp	r1, r2
 8003e80:	d1f9      	bne.n	8003e76 <memcpy+0xe>
 8003e82:	bd10      	pop	{r4, pc}

08003e84 <_free_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4605      	mov	r5, r0
 8003e88:	2900      	cmp	r1, #0
 8003e8a:	d041      	beq.n	8003f10 <_free_r+0x8c>
 8003e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e90:	1f0c      	subs	r4, r1, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bfb8      	it	lt
 8003e96:	18e4      	addlt	r4, r4, r3
 8003e98:	f000 f8e0 	bl	800405c <__malloc_lock>
 8003e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f14 <_free_r+0x90>)
 8003e9e:	6813      	ldr	r3, [r2, #0]
 8003ea0:	b933      	cbnz	r3, 8003eb0 <_free_r+0x2c>
 8003ea2:	6063      	str	r3, [r4, #4]
 8003ea4:	6014      	str	r4, [r2, #0]
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eac:	f000 b8dc 	b.w	8004068 <__malloc_unlock>
 8003eb0:	42a3      	cmp	r3, r4
 8003eb2:	d908      	bls.n	8003ec6 <_free_r+0x42>
 8003eb4:	6820      	ldr	r0, [r4, #0]
 8003eb6:	1821      	adds	r1, r4, r0
 8003eb8:	428b      	cmp	r3, r1
 8003eba:	bf01      	itttt	eq
 8003ebc:	6819      	ldreq	r1, [r3, #0]
 8003ebe:	685b      	ldreq	r3, [r3, #4]
 8003ec0:	1809      	addeq	r1, r1, r0
 8003ec2:	6021      	streq	r1, [r4, #0]
 8003ec4:	e7ed      	b.n	8003ea2 <_free_r+0x1e>
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	b10b      	cbz	r3, 8003ed0 <_free_r+0x4c>
 8003ecc:	42a3      	cmp	r3, r4
 8003ece:	d9fa      	bls.n	8003ec6 <_free_r+0x42>
 8003ed0:	6811      	ldr	r1, [r2, #0]
 8003ed2:	1850      	adds	r0, r2, r1
 8003ed4:	42a0      	cmp	r0, r4
 8003ed6:	d10b      	bne.n	8003ef0 <_free_r+0x6c>
 8003ed8:	6820      	ldr	r0, [r4, #0]
 8003eda:	4401      	add	r1, r0
 8003edc:	1850      	adds	r0, r2, r1
 8003ede:	4283      	cmp	r3, r0
 8003ee0:	6011      	str	r1, [r2, #0]
 8003ee2:	d1e0      	bne.n	8003ea6 <_free_r+0x22>
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	6053      	str	r3, [r2, #4]
 8003eea:	4408      	add	r0, r1
 8003eec:	6010      	str	r0, [r2, #0]
 8003eee:	e7da      	b.n	8003ea6 <_free_r+0x22>
 8003ef0:	d902      	bls.n	8003ef8 <_free_r+0x74>
 8003ef2:	230c      	movs	r3, #12
 8003ef4:	602b      	str	r3, [r5, #0]
 8003ef6:	e7d6      	b.n	8003ea6 <_free_r+0x22>
 8003ef8:	6820      	ldr	r0, [r4, #0]
 8003efa:	1821      	adds	r1, r4, r0
 8003efc:	428b      	cmp	r3, r1
 8003efe:	bf04      	itt	eq
 8003f00:	6819      	ldreq	r1, [r3, #0]
 8003f02:	685b      	ldreq	r3, [r3, #4]
 8003f04:	6063      	str	r3, [r4, #4]
 8003f06:	bf04      	itt	eq
 8003f08:	1809      	addeq	r1, r1, r0
 8003f0a:	6021      	streq	r1, [r4, #0]
 8003f0c:	6054      	str	r4, [r2, #4]
 8003f0e:	e7ca      	b.n	8003ea6 <_free_r+0x22>
 8003f10:	bd38      	pop	{r3, r4, r5, pc}
 8003f12:	bf00      	nop
 8003f14:	20000764 	.word	0x20000764

08003f18 <sbrk_aligned>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	4e0f      	ldr	r6, [pc, #60]	@ (8003f58 <sbrk_aligned+0x40>)
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	6831      	ldr	r1, [r6, #0]
 8003f20:	4605      	mov	r5, r0
 8003f22:	b911      	cbnz	r1, 8003f2a <sbrk_aligned+0x12>
 8003f24:	f000 fba6 	bl	8004674 <_sbrk_r>
 8003f28:	6030      	str	r0, [r6, #0]
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	f000 fba1 	bl	8004674 <_sbrk_r>
 8003f32:	1c43      	adds	r3, r0, #1
 8003f34:	d103      	bne.n	8003f3e <sbrk_aligned+0x26>
 8003f36:	f04f 34ff 	mov.w	r4, #4294967295
 8003f3a:	4620      	mov	r0, r4
 8003f3c:	bd70      	pop	{r4, r5, r6, pc}
 8003f3e:	1cc4      	adds	r4, r0, #3
 8003f40:	f024 0403 	bic.w	r4, r4, #3
 8003f44:	42a0      	cmp	r0, r4
 8003f46:	d0f8      	beq.n	8003f3a <sbrk_aligned+0x22>
 8003f48:	1a21      	subs	r1, r4, r0
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	f000 fb92 	bl	8004674 <_sbrk_r>
 8003f50:	3001      	adds	r0, #1
 8003f52:	d1f2      	bne.n	8003f3a <sbrk_aligned+0x22>
 8003f54:	e7ef      	b.n	8003f36 <sbrk_aligned+0x1e>
 8003f56:	bf00      	nop
 8003f58:	20000760 	.word	0x20000760

08003f5c <_malloc_r>:
 8003f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f60:	1ccd      	adds	r5, r1, #3
 8003f62:	f025 0503 	bic.w	r5, r5, #3
 8003f66:	3508      	adds	r5, #8
 8003f68:	2d0c      	cmp	r5, #12
 8003f6a:	bf38      	it	cc
 8003f6c:	250c      	movcc	r5, #12
 8003f6e:	2d00      	cmp	r5, #0
 8003f70:	4606      	mov	r6, r0
 8003f72:	db01      	blt.n	8003f78 <_malloc_r+0x1c>
 8003f74:	42a9      	cmp	r1, r5
 8003f76:	d904      	bls.n	8003f82 <_malloc_r+0x26>
 8003f78:	230c      	movs	r3, #12
 8003f7a:	6033      	str	r3, [r6, #0]
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004058 <_malloc_r+0xfc>
 8003f86:	f000 f869 	bl	800405c <__malloc_lock>
 8003f8a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f8e:	461c      	mov	r4, r3
 8003f90:	bb44      	cbnz	r4, 8003fe4 <_malloc_r+0x88>
 8003f92:	4629      	mov	r1, r5
 8003f94:	4630      	mov	r0, r6
 8003f96:	f7ff ffbf 	bl	8003f18 <sbrk_aligned>
 8003f9a:	1c43      	adds	r3, r0, #1
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	d158      	bne.n	8004052 <_malloc_r+0xf6>
 8003fa0:	f8d8 4000 	ldr.w	r4, [r8]
 8003fa4:	4627      	mov	r7, r4
 8003fa6:	2f00      	cmp	r7, #0
 8003fa8:	d143      	bne.n	8004032 <_malloc_r+0xd6>
 8003faa:	2c00      	cmp	r4, #0
 8003fac:	d04b      	beq.n	8004046 <_malloc_r+0xea>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	4639      	mov	r1, r7
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	eb04 0903 	add.w	r9, r4, r3
 8003fb8:	f000 fb5c 	bl	8004674 <_sbrk_r>
 8003fbc:	4581      	cmp	r9, r0
 8003fbe:	d142      	bne.n	8004046 <_malloc_r+0xea>
 8003fc0:	6821      	ldr	r1, [r4, #0]
 8003fc2:	1a6d      	subs	r5, r5, r1
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	f7ff ffa6 	bl	8003f18 <sbrk_aligned>
 8003fcc:	3001      	adds	r0, #1
 8003fce:	d03a      	beq.n	8004046 <_malloc_r+0xea>
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	442b      	add	r3, r5
 8003fd4:	6023      	str	r3, [r4, #0]
 8003fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	bb62      	cbnz	r2, 8004038 <_malloc_r+0xdc>
 8003fde:	f8c8 7000 	str.w	r7, [r8]
 8003fe2:	e00f      	b.n	8004004 <_malloc_r+0xa8>
 8003fe4:	6822      	ldr	r2, [r4, #0]
 8003fe6:	1b52      	subs	r2, r2, r5
 8003fe8:	d420      	bmi.n	800402c <_malloc_r+0xd0>
 8003fea:	2a0b      	cmp	r2, #11
 8003fec:	d917      	bls.n	800401e <_malloc_r+0xc2>
 8003fee:	1961      	adds	r1, r4, r5
 8003ff0:	42a3      	cmp	r3, r4
 8003ff2:	6025      	str	r5, [r4, #0]
 8003ff4:	bf18      	it	ne
 8003ff6:	6059      	strne	r1, [r3, #4]
 8003ff8:	6863      	ldr	r3, [r4, #4]
 8003ffa:	bf08      	it	eq
 8003ffc:	f8c8 1000 	streq.w	r1, [r8]
 8004000:	5162      	str	r2, [r4, r5]
 8004002:	604b      	str	r3, [r1, #4]
 8004004:	4630      	mov	r0, r6
 8004006:	f000 f82f 	bl	8004068 <__malloc_unlock>
 800400a:	f104 000b 	add.w	r0, r4, #11
 800400e:	1d23      	adds	r3, r4, #4
 8004010:	f020 0007 	bic.w	r0, r0, #7
 8004014:	1ac2      	subs	r2, r0, r3
 8004016:	bf1c      	itt	ne
 8004018:	1a1b      	subne	r3, r3, r0
 800401a:	50a3      	strne	r3, [r4, r2]
 800401c:	e7af      	b.n	8003f7e <_malloc_r+0x22>
 800401e:	6862      	ldr	r2, [r4, #4]
 8004020:	42a3      	cmp	r3, r4
 8004022:	bf0c      	ite	eq
 8004024:	f8c8 2000 	streq.w	r2, [r8]
 8004028:	605a      	strne	r2, [r3, #4]
 800402a:	e7eb      	b.n	8004004 <_malloc_r+0xa8>
 800402c:	4623      	mov	r3, r4
 800402e:	6864      	ldr	r4, [r4, #4]
 8004030:	e7ae      	b.n	8003f90 <_malloc_r+0x34>
 8004032:	463c      	mov	r4, r7
 8004034:	687f      	ldr	r7, [r7, #4]
 8004036:	e7b6      	b.n	8003fa6 <_malloc_r+0x4a>
 8004038:	461a      	mov	r2, r3
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	42a3      	cmp	r3, r4
 800403e:	d1fb      	bne.n	8004038 <_malloc_r+0xdc>
 8004040:	2300      	movs	r3, #0
 8004042:	6053      	str	r3, [r2, #4]
 8004044:	e7de      	b.n	8004004 <_malloc_r+0xa8>
 8004046:	230c      	movs	r3, #12
 8004048:	6033      	str	r3, [r6, #0]
 800404a:	4630      	mov	r0, r6
 800404c:	f000 f80c 	bl	8004068 <__malloc_unlock>
 8004050:	e794      	b.n	8003f7c <_malloc_r+0x20>
 8004052:	6005      	str	r5, [r0, #0]
 8004054:	e7d6      	b.n	8004004 <_malloc_r+0xa8>
 8004056:	bf00      	nop
 8004058:	20000764 	.word	0x20000764

0800405c <__malloc_lock>:
 800405c:	4801      	ldr	r0, [pc, #4]	@ (8004064 <__malloc_lock+0x8>)
 800405e:	f7ff bf01 	b.w	8003e64 <__retarget_lock_acquire_recursive>
 8004062:	bf00      	nop
 8004064:	2000075c 	.word	0x2000075c

08004068 <__malloc_unlock>:
 8004068:	4801      	ldr	r0, [pc, #4]	@ (8004070 <__malloc_unlock+0x8>)
 800406a:	f7ff befc 	b.w	8003e66 <__retarget_lock_release_recursive>
 800406e:	bf00      	nop
 8004070:	2000075c 	.word	0x2000075c

08004074 <__ssputs_r>:
 8004074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004078:	688e      	ldr	r6, [r1, #8]
 800407a:	461f      	mov	r7, r3
 800407c:	42be      	cmp	r6, r7
 800407e:	680b      	ldr	r3, [r1, #0]
 8004080:	4682      	mov	sl, r0
 8004082:	460c      	mov	r4, r1
 8004084:	4690      	mov	r8, r2
 8004086:	d82d      	bhi.n	80040e4 <__ssputs_r+0x70>
 8004088:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800408c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004090:	d026      	beq.n	80040e0 <__ssputs_r+0x6c>
 8004092:	6965      	ldr	r5, [r4, #20]
 8004094:	6909      	ldr	r1, [r1, #16]
 8004096:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800409a:	eba3 0901 	sub.w	r9, r3, r1
 800409e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80040a2:	1c7b      	adds	r3, r7, #1
 80040a4:	444b      	add	r3, r9
 80040a6:	106d      	asrs	r5, r5, #1
 80040a8:	429d      	cmp	r5, r3
 80040aa:	bf38      	it	cc
 80040ac:	461d      	movcc	r5, r3
 80040ae:	0553      	lsls	r3, r2, #21
 80040b0:	d527      	bpl.n	8004102 <__ssputs_r+0x8e>
 80040b2:	4629      	mov	r1, r5
 80040b4:	f7ff ff52 	bl	8003f5c <_malloc_r>
 80040b8:	4606      	mov	r6, r0
 80040ba:	b360      	cbz	r0, 8004116 <__ssputs_r+0xa2>
 80040bc:	6921      	ldr	r1, [r4, #16]
 80040be:	464a      	mov	r2, r9
 80040c0:	f7ff fed2 	bl	8003e68 <memcpy>
 80040c4:	89a3      	ldrh	r3, [r4, #12]
 80040c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040ce:	81a3      	strh	r3, [r4, #12]
 80040d0:	6126      	str	r6, [r4, #16]
 80040d2:	6165      	str	r5, [r4, #20]
 80040d4:	444e      	add	r6, r9
 80040d6:	eba5 0509 	sub.w	r5, r5, r9
 80040da:	6026      	str	r6, [r4, #0]
 80040dc:	60a5      	str	r5, [r4, #8]
 80040de:	463e      	mov	r6, r7
 80040e0:	42be      	cmp	r6, r7
 80040e2:	d900      	bls.n	80040e6 <__ssputs_r+0x72>
 80040e4:	463e      	mov	r6, r7
 80040e6:	6820      	ldr	r0, [r4, #0]
 80040e8:	4632      	mov	r2, r6
 80040ea:	4641      	mov	r1, r8
 80040ec:	f000 faa8 	bl	8004640 <memmove>
 80040f0:	68a3      	ldr	r3, [r4, #8]
 80040f2:	1b9b      	subs	r3, r3, r6
 80040f4:	60a3      	str	r3, [r4, #8]
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	4433      	add	r3, r6
 80040fa:	6023      	str	r3, [r4, #0]
 80040fc:	2000      	movs	r0, #0
 80040fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004102:	462a      	mov	r2, r5
 8004104:	f000 fac6 	bl	8004694 <_realloc_r>
 8004108:	4606      	mov	r6, r0
 800410a:	2800      	cmp	r0, #0
 800410c:	d1e0      	bne.n	80040d0 <__ssputs_r+0x5c>
 800410e:	6921      	ldr	r1, [r4, #16]
 8004110:	4650      	mov	r0, sl
 8004112:	f7ff feb7 	bl	8003e84 <_free_r>
 8004116:	230c      	movs	r3, #12
 8004118:	f8ca 3000 	str.w	r3, [sl]
 800411c:	89a3      	ldrh	r3, [r4, #12]
 800411e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004122:	81a3      	strh	r3, [r4, #12]
 8004124:	f04f 30ff 	mov.w	r0, #4294967295
 8004128:	e7e9      	b.n	80040fe <__ssputs_r+0x8a>
	...

0800412c <_svfiprintf_r>:
 800412c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004130:	4698      	mov	r8, r3
 8004132:	898b      	ldrh	r3, [r1, #12]
 8004134:	061b      	lsls	r3, r3, #24
 8004136:	b09d      	sub	sp, #116	@ 0x74
 8004138:	4607      	mov	r7, r0
 800413a:	460d      	mov	r5, r1
 800413c:	4614      	mov	r4, r2
 800413e:	d510      	bpl.n	8004162 <_svfiprintf_r+0x36>
 8004140:	690b      	ldr	r3, [r1, #16]
 8004142:	b973      	cbnz	r3, 8004162 <_svfiprintf_r+0x36>
 8004144:	2140      	movs	r1, #64	@ 0x40
 8004146:	f7ff ff09 	bl	8003f5c <_malloc_r>
 800414a:	6028      	str	r0, [r5, #0]
 800414c:	6128      	str	r0, [r5, #16]
 800414e:	b930      	cbnz	r0, 800415e <_svfiprintf_r+0x32>
 8004150:	230c      	movs	r3, #12
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	f04f 30ff 	mov.w	r0, #4294967295
 8004158:	b01d      	add	sp, #116	@ 0x74
 800415a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800415e:	2340      	movs	r3, #64	@ 0x40
 8004160:	616b      	str	r3, [r5, #20]
 8004162:	2300      	movs	r3, #0
 8004164:	9309      	str	r3, [sp, #36]	@ 0x24
 8004166:	2320      	movs	r3, #32
 8004168:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800416c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004170:	2330      	movs	r3, #48	@ 0x30
 8004172:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004310 <_svfiprintf_r+0x1e4>
 8004176:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800417a:	f04f 0901 	mov.w	r9, #1
 800417e:	4623      	mov	r3, r4
 8004180:	469a      	mov	sl, r3
 8004182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004186:	b10a      	cbz	r2, 800418c <_svfiprintf_r+0x60>
 8004188:	2a25      	cmp	r2, #37	@ 0x25
 800418a:	d1f9      	bne.n	8004180 <_svfiprintf_r+0x54>
 800418c:	ebba 0b04 	subs.w	fp, sl, r4
 8004190:	d00b      	beq.n	80041aa <_svfiprintf_r+0x7e>
 8004192:	465b      	mov	r3, fp
 8004194:	4622      	mov	r2, r4
 8004196:	4629      	mov	r1, r5
 8004198:	4638      	mov	r0, r7
 800419a:	f7ff ff6b 	bl	8004074 <__ssputs_r>
 800419e:	3001      	adds	r0, #1
 80041a0:	f000 80a7 	beq.w	80042f2 <_svfiprintf_r+0x1c6>
 80041a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80041a6:	445a      	add	r2, fp
 80041a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80041aa:	f89a 3000 	ldrb.w	r3, [sl]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 809f 	beq.w	80042f2 <_svfiprintf_r+0x1c6>
 80041b4:	2300      	movs	r3, #0
 80041b6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041be:	f10a 0a01 	add.w	sl, sl, #1
 80041c2:	9304      	str	r3, [sp, #16]
 80041c4:	9307      	str	r3, [sp, #28]
 80041c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80041cc:	4654      	mov	r4, sl
 80041ce:	2205      	movs	r2, #5
 80041d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d4:	484e      	ldr	r0, [pc, #312]	@ (8004310 <_svfiprintf_r+0x1e4>)
 80041d6:	f7fc f813 	bl	8000200 <memchr>
 80041da:	9a04      	ldr	r2, [sp, #16]
 80041dc:	b9d8      	cbnz	r0, 8004216 <_svfiprintf_r+0xea>
 80041de:	06d0      	lsls	r0, r2, #27
 80041e0:	bf44      	itt	mi
 80041e2:	2320      	movmi	r3, #32
 80041e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041e8:	0711      	lsls	r1, r2, #28
 80041ea:	bf44      	itt	mi
 80041ec:	232b      	movmi	r3, #43	@ 0x2b
 80041ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041f2:	f89a 3000 	ldrb.w	r3, [sl]
 80041f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80041f8:	d015      	beq.n	8004226 <_svfiprintf_r+0xfa>
 80041fa:	9a07      	ldr	r2, [sp, #28]
 80041fc:	4654      	mov	r4, sl
 80041fe:	2000      	movs	r0, #0
 8004200:	f04f 0c0a 	mov.w	ip, #10
 8004204:	4621      	mov	r1, r4
 8004206:	f811 3b01 	ldrb.w	r3, [r1], #1
 800420a:	3b30      	subs	r3, #48	@ 0x30
 800420c:	2b09      	cmp	r3, #9
 800420e:	d94b      	bls.n	80042a8 <_svfiprintf_r+0x17c>
 8004210:	b1b0      	cbz	r0, 8004240 <_svfiprintf_r+0x114>
 8004212:	9207      	str	r2, [sp, #28]
 8004214:	e014      	b.n	8004240 <_svfiprintf_r+0x114>
 8004216:	eba0 0308 	sub.w	r3, r0, r8
 800421a:	fa09 f303 	lsl.w	r3, r9, r3
 800421e:	4313      	orrs	r3, r2
 8004220:	9304      	str	r3, [sp, #16]
 8004222:	46a2      	mov	sl, r4
 8004224:	e7d2      	b.n	80041cc <_svfiprintf_r+0xa0>
 8004226:	9b03      	ldr	r3, [sp, #12]
 8004228:	1d19      	adds	r1, r3, #4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	9103      	str	r1, [sp, #12]
 800422e:	2b00      	cmp	r3, #0
 8004230:	bfbb      	ittet	lt
 8004232:	425b      	neglt	r3, r3
 8004234:	f042 0202 	orrlt.w	r2, r2, #2
 8004238:	9307      	strge	r3, [sp, #28]
 800423a:	9307      	strlt	r3, [sp, #28]
 800423c:	bfb8      	it	lt
 800423e:	9204      	strlt	r2, [sp, #16]
 8004240:	7823      	ldrb	r3, [r4, #0]
 8004242:	2b2e      	cmp	r3, #46	@ 0x2e
 8004244:	d10a      	bne.n	800425c <_svfiprintf_r+0x130>
 8004246:	7863      	ldrb	r3, [r4, #1]
 8004248:	2b2a      	cmp	r3, #42	@ 0x2a
 800424a:	d132      	bne.n	80042b2 <_svfiprintf_r+0x186>
 800424c:	9b03      	ldr	r3, [sp, #12]
 800424e:	1d1a      	adds	r2, r3, #4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	9203      	str	r2, [sp, #12]
 8004254:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004258:	3402      	adds	r4, #2
 800425a:	9305      	str	r3, [sp, #20]
 800425c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004320 <_svfiprintf_r+0x1f4>
 8004260:	7821      	ldrb	r1, [r4, #0]
 8004262:	2203      	movs	r2, #3
 8004264:	4650      	mov	r0, sl
 8004266:	f7fb ffcb 	bl	8000200 <memchr>
 800426a:	b138      	cbz	r0, 800427c <_svfiprintf_r+0x150>
 800426c:	9b04      	ldr	r3, [sp, #16]
 800426e:	eba0 000a 	sub.w	r0, r0, sl
 8004272:	2240      	movs	r2, #64	@ 0x40
 8004274:	4082      	lsls	r2, r0
 8004276:	4313      	orrs	r3, r2
 8004278:	3401      	adds	r4, #1
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004280:	4824      	ldr	r0, [pc, #144]	@ (8004314 <_svfiprintf_r+0x1e8>)
 8004282:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004286:	2206      	movs	r2, #6
 8004288:	f7fb ffba 	bl	8000200 <memchr>
 800428c:	2800      	cmp	r0, #0
 800428e:	d036      	beq.n	80042fe <_svfiprintf_r+0x1d2>
 8004290:	4b21      	ldr	r3, [pc, #132]	@ (8004318 <_svfiprintf_r+0x1ec>)
 8004292:	bb1b      	cbnz	r3, 80042dc <_svfiprintf_r+0x1b0>
 8004294:	9b03      	ldr	r3, [sp, #12]
 8004296:	3307      	adds	r3, #7
 8004298:	f023 0307 	bic.w	r3, r3, #7
 800429c:	3308      	adds	r3, #8
 800429e:	9303      	str	r3, [sp, #12]
 80042a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042a2:	4433      	add	r3, r6
 80042a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80042a6:	e76a      	b.n	800417e <_svfiprintf_r+0x52>
 80042a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80042ac:	460c      	mov	r4, r1
 80042ae:	2001      	movs	r0, #1
 80042b0:	e7a8      	b.n	8004204 <_svfiprintf_r+0xd8>
 80042b2:	2300      	movs	r3, #0
 80042b4:	3401      	adds	r4, #1
 80042b6:	9305      	str	r3, [sp, #20]
 80042b8:	4619      	mov	r1, r3
 80042ba:	f04f 0c0a 	mov.w	ip, #10
 80042be:	4620      	mov	r0, r4
 80042c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042c4:	3a30      	subs	r2, #48	@ 0x30
 80042c6:	2a09      	cmp	r2, #9
 80042c8:	d903      	bls.n	80042d2 <_svfiprintf_r+0x1a6>
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0c6      	beq.n	800425c <_svfiprintf_r+0x130>
 80042ce:	9105      	str	r1, [sp, #20]
 80042d0:	e7c4      	b.n	800425c <_svfiprintf_r+0x130>
 80042d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80042d6:	4604      	mov	r4, r0
 80042d8:	2301      	movs	r3, #1
 80042da:	e7f0      	b.n	80042be <_svfiprintf_r+0x192>
 80042dc:	ab03      	add	r3, sp, #12
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	462a      	mov	r2, r5
 80042e2:	4b0e      	ldr	r3, [pc, #56]	@ (800431c <_svfiprintf_r+0x1f0>)
 80042e4:	a904      	add	r1, sp, #16
 80042e6:	4638      	mov	r0, r7
 80042e8:	f3af 8000 	nop.w
 80042ec:	1c42      	adds	r2, r0, #1
 80042ee:	4606      	mov	r6, r0
 80042f0:	d1d6      	bne.n	80042a0 <_svfiprintf_r+0x174>
 80042f2:	89ab      	ldrh	r3, [r5, #12]
 80042f4:	065b      	lsls	r3, r3, #25
 80042f6:	f53f af2d 	bmi.w	8004154 <_svfiprintf_r+0x28>
 80042fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042fc:	e72c      	b.n	8004158 <_svfiprintf_r+0x2c>
 80042fe:	ab03      	add	r3, sp, #12
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	462a      	mov	r2, r5
 8004304:	4b05      	ldr	r3, [pc, #20]	@ (800431c <_svfiprintf_r+0x1f0>)
 8004306:	a904      	add	r1, sp, #16
 8004308:	4638      	mov	r0, r7
 800430a:	f000 f879 	bl	8004400 <_printf_i>
 800430e:	e7ed      	b.n	80042ec <_svfiprintf_r+0x1c0>
 8004310:	08004881 	.word	0x08004881
 8004314:	0800488b 	.word	0x0800488b
 8004318:	00000000 	.word	0x00000000
 800431c:	08004075 	.word	0x08004075
 8004320:	08004887 	.word	0x08004887

08004324 <_printf_common>:
 8004324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004328:	4616      	mov	r6, r2
 800432a:	4698      	mov	r8, r3
 800432c:	688a      	ldr	r2, [r1, #8]
 800432e:	690b      	ldr	r3, [r1, #16]
 8004330:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004334:	4293      	cmp	r3, r2
 8004336:	bfb8      	it	lt
 8004338:	4613      	movlt	r3, r2
 800433a:	6033      	str	r3, [r6, #0]
 800433c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004340:	4607      	mov	r7, r0
 8004342:	460c      	mov	r4, r1
 8004344:	b10a      	cbz	r2, 800434a <_printf_common+0x26>
 8004346:	3301      	adds	r3, #1
 8004348:	6033      	str	r3, [r6, #0]
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	0699      	lsls	r1, r3, #26
 800434e:	bf42      	ittt	mi
 8004350:	6833      	ldrmi	r3, [r6, #0]
 8004352:	3302      	addmi	r3, #2
 8004354:	6033      	strmi	r3, [r6, #0]
 8004356:	6825      	ldr	r5, [r4, #0]
 8004358:	f015 0506 	ands.w	r5, r5, #6
 800435c:	d106      	bne.n	800436c <_printf_common+0x48>
 800435e:	f104 0a19 	add.w	sl, r4, #25
 8004362:	68e3      	ldr	r3, [r4, #12]
 8004364:	6832      	ldr	r2, [r6, #0]
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	42ab      	cmp	r3, r5
 800436a:	dc26      	bgt.n	80043ba <_printf_common+0x96>
 800436c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004370:	6822      	ldr	r2, [r4, #0]
 8004372:	3b00      	subs	r3, #0
 8004374:	bf18      	it	ne
 8004376:	2301      	movne	r3, #1
 8004378:	0692      	lsls	r2, r2, #26
 800437a:	d42b      	bmi.n	80043d4 <_printf_common+0xb0>
 800437c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004380:	4641      	mov	r1, r8
 8004382:	4638      	mov	r0, r7
 8004384:	47c8      	blx	r9
 8004386:	3001      	adds	r0, #1
 8004388:	d01e      	beq.n	80043c8 <_printf_common+0xa4>
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	6922      	ldr	r2, [r4, #16]
 800438e:	f003 0306 	and.w	r3, r3, #6
 8004392:	2b04      	cmp	r3, #4
 8004394:	bf02      	ittt	eq
 8004396:	68e5      	ldreq	r5, [r4, #12]
 8004398:	6833      	ldreq	r3, [r6, #0]
 800439a:	1aed      	subeq	r5, r5, r3
 800439c:	68a3      	ldr	r3, [r4, #8]
 800439e:	bf0c      	ite	eq
 80043a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043a4:	2500      	movne	r5, #0
 80043a6:	4293      	cmp	r3, r2
 80043a8:	bfc4      	itt	gt
 80043aa:	1a9b      	subgt	r3, r3, r2
 80043ac:	18ed      	addgt	r5, r5, r3
 80043ae:	2600      	movs	r6, #0
 80043b0:	341a      	adds	r4, #26
 80043b2:	42b5      	cmp	r5, r6
 80043b4:	d11a      	bne.n	80043ec <_printf_common+0xc8>
 80043b6:	2000      	movs	r0, #0
 80043b8:	e008      	b.n	80043cc <_printf_common+0xa8>
 80043ba:	2301      	movs	r3, #1
 80043bc:	4652      	mov	r2, sl
 80043be:	4641      	mov	r1, r8
 80043c0:	4638      	mov	r0, r7
 80043c2:	47c8      	blx	r9
 80043c4:	3001      	adds	r0, #1
 80043c6:	d103      	bne.n	80043d0 <_printf_common+0xac>
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295
 80043cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d0:	3501      	adds	r5, #1
 80043d2:	e7c6      	b.n	8004362 <_printf_common+0x3e>
 80043d4:	18e1      	adds	r1, r4, r3
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	2030      	movs	r0, #48	@ 0x30
 80043da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043de:	4422      	add	r2, r4
 80043e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043e8:	3302      	adds	r3, #2
 80043ea:	e7c7      	b.n	800437c <_printf_common+0x58>
 80043ec:	2301      	movs	r3, #1
 80043ee:	4622      	mov	r2, r4
 80043f0:	4641      	mov	r1, r8
 80043f2:	4638      	mov	r0, r7
 80043f4:	47c8      	blx	r9
 80043f6:	3001      	adds	r0, #1
 80043f8:	d0e6      	beq.n	80043c8 <_printf_common+0xa4>
 80043fa:	3601      	adds	r6, #1
 80043fc:	e7d9      	b.n	80043b2 <_printf_common+0x8e>
	...

08004400 <_printf_i>:
 8004400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004404:	7e0f      	ldrb	r7, [r1, #24]
 8004406:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004408:	2f78      	cmp	r7, #120	@ 0x78
 800440a:	4691      	mov	r9, r2
 800440c:	4680      	mov	r8, r0
 800440e:	460c      	mov	r4, r1
 8004410:	469a      	mov	sl, r3
 8004412:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004416:	d807      	bhi.n	8004428 <_printf_i+0x28>
 8004418:	2f62      	cmp	r7, #98	@ 0x62
 800441a:	d80a      	bhi.n	8004432 <_printf_i+0x32>
 800441c:	2f00      	cmp	r7, #0
 800441e:	f000 80d2 	beq.w	80045c6 <_printf_i+0x1c6>
 8004422:	2f58      	cmp	r7, #88	@ 0x58
 8004424:	f000 80b9 	beq.w	800459a <_printf_i+0x19a>
 8004428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800442c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004430:	e03a      	b.n	80044a8 <_printf_i+0xa8>
 8004432:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004436:	2b15      	cmp	r3, #21
 8004438:	d8f6      	bhi.n	8004428 <_printf_i+0x28>
 800443a:	a101      	add	r1, pc, #4	@ (adr r1, 8004440 <_printf_i+0x40>)
 800443c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004440:	08004499 	.word	0x08004499
 8004444:	080044ad 	.word	0x080044ad
 8004448:	08004429 	.word	0x08004429
 800444c:	08004429 	.word	0x08004429
 8004450:	08004429 	.word	0x08004429
 8004454:	08004429 	.word	0x08004429
 8004458:	080044ad 	.word	0x080044ad
 800445c:	08004429 	.word	0x08004429
 8004460:	08004429 	.word	0x08004429
 8004464:	08004429 	.word	0x08004429
 8004468:	08004429 	.word	0x08004429
 800446c:	080045ad 	.word	0x080045ad
 8004470:	080044d7 	.word	0x080044d7
 8004474:	08004567 	.word	0x08004567
 8004478:	08004429 	.word	0x08004429
 800447c:	08004429 	.word	0x08004429
 8004480:	080045cf 	.word	0x080045cf
 8004484:	08004429 	.word	0x08004429
 8004488:	080044d7 	.word	0x080044d7
 800448c:	08004429 	.word	0x08004429
 8004490:	08004429 	.word	0x08004429
 8004494:	0800456f 	.word	0x0800456f
 8004498:	6833      	ldr	r3, [r6, #0]
 800449a:	1d1a      	adds	r2, r3, #4
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6032      	str	r2, [r6, #0]
 80044a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044a8:	2301      	movs	r3, #1
 80044aa:	e09d      	b.n	80045e8 <_printf_i+0x1e8>
 80044ac:	6833      	ldr	r3, [r6, #0]
 80044ae:	6820      	ldr	r0, [r4, #0]
 80044b0:	1d19      	adds	r1, r3, #4
 80044b2:	6031      	str	r1, [r6, #0]
 80044b4:	0606      	lsls	r6, r0, #24
 80044b6:	d501      	bpl.n	80044bc <_printf_i+0xbc>
 80044b8:	681d      	ldr	r5, [r3, #0]
 80044ba:	e003      	b.n	80044c4 <_printf_i+0xc4>
 80044bc:	0645      	lsls	r5, r0, #25
 80044be:	d5fb      	bpl.n	80044b8 <_printf_i+0xb8>
 80044c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044c4:	2d00      	cmp	r5, #0
 80044c6:	da03      	bge.n	80044d0 <_printf_i+0xd0>
 80044c8:	232d      	movs	r3, #45	@ 0x2d
 80044ca:	426d      	negs	r5, r5
 80044cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044d0:	4859      	ldr	r0, [pc, #356]	@ (8004638 <_printf_i+0x238>)
 80044d2:	230a      	movs	r3, #10
 80044d4:	e011      	b.n	80044fa <_printf_i+0xfa>
 80044d6:	6821      	ldr	r1, [r4, #0]
 80044d8:	6833      	ldr	r3, [r6, #0]
 80044da:	0608      	lsls	r0, r1, #24
 80044dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80044e0:	d402      	bmi.n	80044e8 <_printf_i+0xe8>
 80044e2:	0649      	lsls	r1, r1, #25
 80044e4:	bf48      	it	mi
 80044e6:	b2ad      	uxthmi	r5, r5
 80044e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80044ea:	4853      	ldr	r0, [pc, #332]	@ (8004638 <_printf_i+0x238>)
 80044ec:	6033      	str	r3, [r6, #0]
 80044ee:	bf14      	ite	ne
 80044f0:	230a      	movne	r3, #10
 80044f2:	2308      	moveq	r3, #8
 80044f4:	2100      	movs	r1, #0
 80044f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044fa:	6866      	ldr	r6, [r4, #4]
 80044fc:	60a6      	str	r6, [r4, #8]
 80044fe:	2e00      	cmp	r6, #0
 8004500:	bfa2      	ittt	ge
 8004502:	6821      	ldrge	r1, [r4, #0]
 8004504:	f021 0104 	bicge.w	r1, r1, #4
 8004508:	6021      	strge	r1, [r4, #0]
 800450a:	b90d      	cbnz	r5, 8004510 <_printf_i+0x110>
 800450c:	2e00      	cmp	r6, #0
 800450e:	d04b      	beq.n	80045a8 <_printf_i+0x1a8>
 8004510:	4616      	mov	r6, r2
 8004512:	fbb5 f1f3 	udiv	r1, r5, r3
 8004516:	fb03 5711 	mls	r7, r3, r1, r5
 800451a:	5dc7      	ldrb	r7, [r0, r7]
 800451c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004520:	462f      	mov	r7, r5
 8004522:	42bb      	cmp	r3, r7
 8004524:	460d      	mov	r5, r1
 8004526:	d9f4      	bls.n	8004512 <_printf_i+0x112>
 8004528:	2b08      	cmp	r3, #8
 800452a:	d10b      	bne.n	8004544 <_printf_i+0x144>
 800452c:	6823      	ldr	r3, [r4, #0]
 800452e:	07df      	lsls	r7, r3, #31
 8004530:	d508      	bpl.n	8004544 <_printf_i+0x144>
 8004532:	6923      	ldr	r3, [r4, #16]
 8004534:	6861      	ldr	r1, [r4, #4]
 8004536:	4299      	cmp	r1, r3
 8004538:	bfde      	ittt	le
 800453a:	2330      	movle	r3, #48	@ 0x30
 800453c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004540:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004544:	1b92      	subs	r2, r2, r6
 8004546:	6122      	str	r2, [r4, #16]
 8004548:	f8cd a000 	str.w	sl, [sp]
 800454c:	464b      	mov	r3, r9
 800454e:	aa03      	add	r2, sp, #12
 8004550:	4621      	mov	r1, r4
 8004552:	4640      	mov	r0, r8
 8004554:	f7ff fee6 	bl	8004324 <_printf_common>
 8004558:	3001      	adds	r0, #1
 800455a:	d14a      	bne.n	80045f2 <_printf_i+0x1f2>
 800455c:	f04f 30ff 	mov.w	r0, #4294967295
 8004560:	b004      	add	sp, #16
 8004562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	f043 0320 	orr.w	r3, r3, #32
 800456c:	6023      	str	r3, [r4, #0]
 800456e:	4833      	ldr	r0, [pc, #204]	@ (800463c <_printf_i+0x23c>)
 8004570:	2778      	movs	r7, #120	@ 0x78
 8004572:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	6831      	ldr	r1, [r6, #0]
 800457a:	061f      	lsls	r7, r3, #24
 800457c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004580:	d402      	bmi.n	8004588 <_printf_i+0x188>
 8004582:	065f      	lsls	r7, r3, #25
 8004584:	bf48      	it	mi
 8004586:	b2ad      	uxthmi	r5, r5
 8004588:	6031      	str	r1, [r6, #0]
 800458a:	07d9      	lsls	r1, r3, #31
 800458c:	bf44      	itt	mi
 800458e:	f043 0320 	orrmi.w	r3, r3, #32
 8004592:	6023      	strmi	r3, [r4, #0]
 8004594:	b11d      	cbz	r5, 800459e <_printf_i+0x19e>
 8004596:	2310      	movs	r3, #16
 8004598:	e7ac      	b.n	80044f4 <_printf_i+0xf4>
 800459a:	4827      	ldr	r0, [pc, #156]	@ (8004638 <_printf_i+0x238>)
 800459c:	e7e9      	b.n	8004572 <_printf_i+0x172>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	f023 0320 	bic.w	r3, r3, #32
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	e7f6      	b.n	8004596 <_printf_i+0x196>
 80045a8:	4616      	mov	r6, r2
 80045aa:	e7bd      	b.n	8004528 <_printf_i+0x128>
 80045ac:	6833      	ldr	r3, [r6, #0]
 80045ae:	6825      	ldr	r5, [r4, #0]
 80045b0:	6961      	ldr	r1, [r4, #20]
 80045b2:	1d18      	adds	r0, r3, #4
 80045b4:	6030      	str	r0, [r6, #0]
 80045b6:	062e      	lsls	r6, r5, #24
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	d501      	bpl.n	80045c0 <_printf_i+0x1c0>
 80045bc:	6019      	str	r1, [r3, #0]
 80045be:	e002      	b.n	80045c6 <_printf_i+0x1c6>
 80045c0:	0668      	lsls	r0, r5, #25
 80045c2:	d5fb      	bpl.n	80045bc <_printf_i+0x1bc>
 80045c4:	8019      	strh	r1, [r3, #0]
 80045c6:	2300      	movs	r3, #0
 80045c8:	6123      	str	r3, [r4, #16]
 80045ca:	4616      	mov	r6, r2
 80045cc:	e7bc      	b.n	8004548 <_printf_i+0x148>
 80045ce:	6833      	ldr	r3, [r6, #0]
 80045d0:	1d1a      	adds	r2, r3, #4
 80045d2:	6032      	str	r2, [r6, #0]
 80045d4:	681e      	ldr	r6, [r3, #0]
 80045d6:	6862      	ldr	r2, [r4, #4]
 80045d8:	2100      	movs	r1, #0
 80045da:	4630      	mov	r0, r6
 80045dc:	f7fb fe10 	bl	8000200 <memchr>
 80045e0:	b108      	cbz	r0, 80045e6 <_printf_i+0x1e6>
 80045e2:	1b80      	subs	r0, r0, r6
 80045e4:	6060      	str	r0, [r4, #4]
 80045e6:	6863      	ldr	r3, [r4, #4]
 80045e8:	6123      	str	r3, [r4, #16]
 80045ea:	2300      	movs	r3, #0
 80045ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045f0:	e7aa      	b.n	8004548 <_printf_i+0x148>
 80045f2:	6923      	ldr	r3, [r4, #16]
 80045f4:	4632      	mov	r2, r6
 80045f6:	4649      	mov	r1, r9
 80045f8:	4640      	mov	r0, r8
 80045fa:	47d0      	blx	sl
 80045fc:	3001      	adds	r0, #1
 80045fe:	d0ad      	beq.n	800455c <_printf_i+0x15c>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	079b      	lsls	r3, r3, #30
 8004604:	d413      	bmi.n	800462e <_printf_i+0x22e>
 8004606:	68e0      	ldr	r0, [r4, #12]
 8004608:	9b03      	ldr	r3, [sp, #12]
 800460a:	4298      	cmp	r0, r3
 800460c:	bfb8      	it	lt
 800460e:	4618      	movlt	r0, r3
 8004610:	e7a6      	b.n	8004560 <_printf_i+0x160>
 8004612:	2301      	movs	r3, #1
 8004614:	4632      	mov	r2, r6
 8004616:	4649      	mov	r1, r9
 8004618:	4640      	mov	r0, r8
 800461a:	47d0      	blx	sl
 800461c:	3001      	adds	r0, #1
 800461e:	d09d      	beq.n	800455c <_printf_i+0x15c>
 8004620:	3501      	adds	r5, #1
 8004622:	68e3      	ldr	r3, [r4, #12]
 8004624:	9903      	ldr	r1, [sp, #12]
 8004626:	1a5b      	subs	r3, r3, r1
 8004628:	42ab      	cmp	r3, r5
 800462a:	dcf2      	bgt.n	8004612 <_printf_i+0x212>
 800462c:	e7eb      	b.n	8004606 <_printf_i+0x206>
 800462e:	2500      	movs	r5, #0
 8004630:	f104 0619 	add.w	r6, r4, #25
 8004634:	e7f5      	b.n	8004622 <_printf_i+0x222>
 8004636:	bf00      	nop
 8004638:	08004892 	.word	0x08004892
 800463c:	080048a3 	.word	0x080048a3

08004640 <memmove>:
 8004640:	4288      	cmp	r0, r1
 8004642:	b510      	push	{r4, lr}
 8004644:	eb01 0402 	add.w	r4, r1, r2
 8004648:	d902      	bls.n	8004650 <memmove+0x10>
 800464a:	4284      	cmp	r4, r0
 800464c:	4623      	mov	r3, r4
 800464e:	d807      	bhi.n	8004660 <memmove+0x20>
 8004650:	1e43      	subs	r3, r0, #1
 8004652:	42a1      	cmp	r1, r4
 8004654:	d008      	beq.n	8004668 <memmove+0x28>
 8004656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800465a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800465e:	e7f8      	b.n	8004652 <memmove+0x12>
 8004660:	4402      	add	r2, r0
 8004662:	4601      	mov	r1, r0
 8004664:	428a      	cmp	r2, r1
 8004666:	d100      	bne.n	800466a <memmove+0x2a>
 8004668:	bd10      	pop	{r4, pc}
 800466a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800466e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004672:	e7f7      	b.n	8004664 <memmove+0x24>

08004674 <_sbrk_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4d06      	ldr	r5, [pc, #24]	@ (8004690 <_sbrk_r+0x1c>)
 8004678:	2300      	movs	r3, #0
 800467a:	4604      	mov	r4, r0
 800467c:	4608      	mov	r0, r1
 800467e:	602b      	str	r3, [r5, #0]
 8004680:	f7fc f9ba 	bl	80009f8 <_sbrk>
 8004684:	1c43      	adds	r3, r0, #1
 8004686:	d102      	bne.n	800468e <_sbrk_r+0x1a>
 8004688:	682b      	ldr	r3, [r5, #0]
 800468a:	b103      	cbz	r3, 800468e <_sbrk_r+0x1a>
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	bd38      	pop	{r3, r4, r5, pc}
 8004690:	20000758 	.word	0x20000758

08004694 <_realloc_r>:
 8004694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004698:	4680      	mov	r8, r0
 800469a:	4615      	mov	r5, r2
 800469c:	460c      	mov	r4, r1
 800469e:	b921      	cbnz	r1, 80046aa <_realloc_r+0x16>
 80046a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046a4:	4611      	mov	r1, r2
 80046a6:	f7ff bc59 	b.w	8003f5c <_malloc_r>
 80046aa:	b92a      	cbnz	r2, 80046b8 <_realloc_r+0x24>
 80046ac:	f7ff fbea 	bl	8003e84 <_free_r>
 80046b0:	2400      	movs	r4, #0
 80046b2:	4620      	mov	r0, r4
 80046b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b8:	f000 f81a 	bl	80046f0 <_malloc_usable_size_r>
 80046bc:	4285      	cmp	r5, r0
 80046be:	4606      	mov	r6, r0
 80046c0:	d802      	bhi.n	80046c8 <_realloc_r+0x34>
 80046c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80046c6:	d8f4      	bhi.n	80046b2 <_realloc_r+0x1e>
 80046c8:	4629      	mov	r1, r5
 80046ca:	4640      	mov	r0, r8
 80046cc:	f7ff fc46 	bl	8003f5c <_malloc_r>
 80046d0:	4607      	mov	r7, r0
 80046d2:	2800      	cmp	r0, #0
 80046d4:	d0ec      	beq.n	80046b0 <_realloc_r+0x1c>
 80046d6:	42b5      	cmp	r5, r6
 80046d8:	462a      	mov	r2, r5
 80046da:	4621      	mov	r1, r4
 80046dc:	bf28      	it	cs
 80046de:	4632      	movcs	r2, r6
 80046e0:	f7ff fbc2 	bl	8003e68 <memcpy>
 80046e4:	4621      	mov	r1, r4
 80046e6:	4640      	mov	r0, r8
 80046e8:	f7ff fbcc 	bl	8003e84 <_free_r>
 80046ec:	463c      	mov	r4, r7
 80046ee:	e7e0      	b.n	80046b2 <_realloc_r+0x1e>

080046f0 <_malloc_usable_size_r>:
 80046f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046f4:	1f18      	subs	r0, r3, #4
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	bfbc      	itt	lt
 80046fa:	580b      	ldrlt	r3, [r1, r0]
 80046fc:	18c0      	addlt	r0, r0, r3
 80046fe:	4770      	bx	lr

08004700 <_init>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	bf00      	nop
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr

0800470c <_fini>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	bf00      	nop
 8004710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004712:	bc08      	pop	{r3}
 8004714:	469e      	mov	lr, r3
 8004716:	4770      	bx	lr
