
prz-telemetry-box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f9c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0800a150  0800a150  0000b150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a768  0800a768  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a768  0800a768  0000b768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a770  0800a770  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a770  0800a770  0000b770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a774  0800a774  0000b774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a778  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          00000ac0  200001d8  200001d8  0000c1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000c98  20000c98  0000c1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001306b  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c82  00000000  00000000  0001f26f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00021ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c6e  00000000  00000000  00022f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002648b  00000000  00000000  00023b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015638  00000000  00000000  0004a001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dddb8  00000000  00000000  0005f639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d3f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005490  00000000  00000000  0013d434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001428c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a134 	.word	0x0800a134

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	0800a134 	.word	0x0800a134

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <MX_DMA_Init+0x78>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8000f30 <MX_DMA_Init+0x78>)
 8000ec8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <MX_DMA_Init+0x78>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_DMA_Init+0x78>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <MX_DMA_Init+0x78>)
 8000ee4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_DMA_Init+0x78>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	200e      	movs	r0, #14
 8000efc:	f003 f8ef 	bl	80040de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f00:	200e      	movs	r0, #14
 8000f02:	f003 f908 	bl	8004116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2010      	movs	r0, #16
 8000f0c:	f003 f8e7 	bl	80040de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f10:	2010      	movs	r0, #16
 8000f12:	f003 f900 	bl	8004116 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	203a      	movs	r0, #58	@ 0x3a
 8000f1c:	f003 f8df 	bl	80040de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f20:	203a      	movs	r0, #58	@ 0x3a
 8000f22:	f003 f8f8 	bl	8004116 <HAL_NVIC_EnableIRQ>

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a16      	ldr	r2, [pc, #88]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f44:	f043 0320 	orr.w	r3, r3, #32
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a08      	ldr	r2, [pc, #32]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa4:	f3bf 8f4f 	dsb	sy
}
 8000fa8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <__NVIC_SystemReset+0x24>)
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fb2:	4904      	ldr	r1, [pc, #16]	@ (8000fc4 <__NVIC_SystemReset+0x24>)
 8000fb4:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <__NVIC_SystemReset+0x28>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fba:	f3bf 8f4f 	dsb	sy
}
 8000fbe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <__NVIC_SystemReset+0x20>
 8000fc4:	e000ed00 	.word	0xe000ed00
 8000fc8:	05fa0004 	.word	0x05fa0004

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd2:	f002 ff13 	bl	8003dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd6:	f000 f903 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fda:	f7ff ffab 	bl	8000f34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fde:	f7ff ff6b 	bl	8000eb8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000fe2:	f000 fc1b 	bl	800181c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fe6:	f000 fc43 	bl	8001870 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fea:	f000 fb7b 	bl	80016e4 <MX_TIM2_Init>
  MX_UART7_Init();
 8000fee:	f000 fbeb 	bl	80017c8 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

	UartRcvr_init(&usart1_rcvr, &huart1);
 8000ff2:	4966      	ldr	r1, [pc, #408]	@ (800118c <main+0x1c0>)
 8000ff4:	4866      	ldr	r0, [pc, #408]	@ (8001190 <main+0x1c4>)
 8000ff6:	f002 fbe2 	bl	80037be <UartRcvr_init>
	UartRcvr_init(&usart2_rcvr, &huart2);
 8000ffa:	4966      	ldr	r1, [pc, #408]	@ (8001194 <main+0x1c8>)
 8000ffc:	4866      	ldr	r0, [pc, #408]	@ (8001198 <main+0x1cc>)
 8000ffe:	f002 fbde 	bl	80037be <UartRcvr_init>
	UartRcvr_init(&uart7_rcvr, &huart7);
 8001002:	4966      	ldr	r1, [pc, #408]	@ (800119c <main+0x1d0>)
 8001004:	4866      	ldr	r0, [pc, #408]	@ (80011a0 <main+0x1d4>)
 8001006:	f002 fbda 	bl	80037be <UartRcvr_init>

	FT_ERR ft_err = FT_InitCustom(&ft, &huart1, &htim2, 10000);
 800100a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800100e:	4a65      	ldr	r2, [pc, #404]	@ (80011a4 <main+0x1d8>)
 8001010:	495e      	ldr	r1, [pc, #376]	@ (800118c <main+0x1c0>)
 8001012:	4865      	ldr	r0, [pc, #404]	@ (80011a8 <main+0x1dc>)
 8001014:	f000 fdfe 	bl	8001c14 <FT_InitCustom>
 8001018:	4603      	mov	r3, r0
 800101a:	80fb      	strh	r3, [r7, #6]
	if(ft_err != FT_OK)
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001022:	d004      	beq.n	800102e <main+0x62>
	{
		prints("FT_InitCustom failed\r\n");
 8001024:	4861      	ldr	r0, [pc, #388]	@ (80011ac <main+0x1e0>)
 8001026:	f000 f9c1 	bl	80013ac <prints>
		Error_Handler();
 800102a:	f000 f9cf 	bl	80013cc <Error_Handler>
	}

	prints("PRz Telemetry Box 4.0\r\n");
 800102e:	4860      	ldr	r0, [pc, #384]	@ (80011b0 <main+0x1e4>)
 8001030:	f000 f9bc 	bl	80013ac <prints>

	HAL_Delay(1000);
 8001034:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001038:	f002 ff52 	bl	8003ee0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	FT_PrintConfiguration(ft, (char*)str, 2048);
 800103c:	4b5a      	ldr	r3, [pc, #360]	@ (80011a8 <main+0x1dc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001044:	495b      	ldr	r1, [pc, #364]	@ (80011b4 <main+0x1e8>)
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fabc 	bl	80025c4 <FT_PrintConfiguration>
	prints((char*) str);
 800104c:	4859      	ldr	r0, [pc, #356]	@ (80011b4 <main+0x1e8>)
 800104e:	f000 f9ad 	bl	80013ac <prints>

	GSM_ERR gsm_err = GSM_Init(&gsm, ft, &usart2_rcvr, &usart1_rcvr);
 8001052:	4b55      	ldr	r3, [pc, #340]	@ (80011a8 <main+0x1dc>)
 8001054:	6819      	ldr	r1, [r3, #0]
 8001056:	4b4e      	ldr	r3, [pc, #312]	@ (8001190 <main+0x1c4>)
 8001058:	4a4f      	ldr	r2, [pc, #316]	@ (8001198 <main+0x1cc>)
 800105a:	4857      	ldr	r0, [pc, #348]	@ (80011b8 <main+0x1ec>)
 800105c:	f002 fa46 	bl	80034ec <GSM_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	80bb      	strh	r3, [r7, #4]
	if (gsm_err != GSM_OK) {
 8001064:	88bb      	ldrh	r3, [r7, #4]
 8001066:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 800106a:	d012      	beq.n	8001092 <main+0xc6>
		prints("GSM_Init failed\r\n");
 800106c:	4853      	ldr	r0, [pc, #332]	@ (80011bc <main+0x1f0>)
 800106e:	f000 f99d 	bl	80013ac <prints>
		Error_Handler();
 8001072:	f000 f9ab 	bl	80013cc <Error_Handler>
	}

	while (1)
	{
		while ((gsm_err = GSM_Feed(&gsm)) != GSM_IDLE) {
 8001076:	e00c      	b.n	8001092 <main+0xc6>
			if (gsm_err == GSM_NOT_INITIALIZED || gsm_err == GSM_INVALID_ARGUMENT) {
 8001078:	88bb      	ldrh	r3, [r7, #4]
 800107a:	f249 0201 	movw	r2, #36865	@ 0x9001
 800107e:	4293      	cmp	r3, r2
 8001080:	d004      	beq.n	800108c <main+0xc0>
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	f249 0203 	movw	r2, #36867	@ 0x9003
 8001088:	4293      	cmp	r3, r2
 800108a:	d102      	bne.n	8001092 <main+0xc6>
				prints("GSM_Feed failed\r\n");
 800108c:	484c      	ldr	r0, [pc, #304]	@ (80011c0 <main+0x1f4>)
 800108e:	f000 f98d 	bl	80013ac <prints>
		while ((gsm_err = GSM_Feed(&gsm)) != GSM_IDLE) {
 8001092:	4849      	ldr	r0, [pc, #292]	@ (80011b8 <main+0x1ec>)
 8001094:	f001 feba 	bl	8002e0c <GSM_Feed>
 8001098:	4603      	mov	r3, r0
 800109a:	80bb      	strh	r3, [r7, #4]
 800109c:	88bb      	ldrh	r3, [r7, #4]
 800109e:	f249 0204 	movw	r2, #36868	@ 0x9004
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d1e8      	bne.n	8001078 <main+0xac>
			}
		}

		if(UartRcvr_available(&usart1_rcvr))
 80010a6:	483a      	ldr	r0, [pc, #232]	@ (8001190 <main+0x1c4>)
 80010a8:	f002 fc0c 	bl	80038c4 <UartRcvr_available>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0ef      	beq.n	8001092 <main+0xc6>
		{
			len = UartRcvr_get_input(&usart1_rcvr, rx_buf + rx_index, RX_BUF_SIZE - rx_index - 1);
 80010b2:	4b44      	ldr	r3, [pc, #272]	@ (80011c4 <main+0x1f8>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	461a      	mov	r2, r3
 80010b8:	4b43      	ldr	r3, [pc, #268]	@ (80011c8 <main+0x1fc>)
 80010ba:	18d1      	adds	r1, r2, r3
 80010bc:	4b41      	ldr	r3, [pc, #260]	@ (80011c4 <main+0x1f8>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	f1c3 03fe 	rsb	r3, r3, #254	@ 0xfe
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	4831      	ldr	r0, [pc, #196]	@ (8001190 <main+0x1c4>)
 80010ca:	f002 fc41 	bl	8003950 <UartRcvr_get_input>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b3e      	ldr	r3, [pc, #248]	@ (80011cc <main+0x200>)
 80010d4:	801a      	strh	r2, [r3, #0]
			if(len == 0) continue;
 80010d6:	4b3d      	ldr	r3, [pc, #244]	@ (80011cc <main+0x200>)
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d052      	beq.n	8001184 <main+0x1b8>
			rx_index += len;
 80010de:	4b39      	ldr	r3, [pc, #228]	@ (80011c4 <main+0x1f8>)
 80010e0:	881a      	ldrh	r2, [r3, #0]
 80010e2:	4b3a      	ldr	r3, [pc, #232]	@ (80011cc <main+0x200>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4b36      	ldr	r3, [pc, #216]	@ (80011c4 <main+0x1f8>)
 80010ec:	801a      	strh	r2, [r3, #0]
			if (rx_buf[rx_index - 1] == '\n' || rx_buf[rx_index - 1] == '\r') {
 80010ee:	4b35      	ldr	r3, [pc, #212]	@ (80011c4 <main+0x1f8>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	4a34      	ldr	r2, [pc, #208]	@ (80011c8 <main+0x1fc>)
 80010f6:	5cd3      	ldrb	r3, [r2, r3]
 80010f8:	2b0a      	cmp	r3, #10
 80010fa:	d006      	beq.n	800110a <main+0x13e>
 80010fc:	4b31      	ldr	r3, [pc, #196]	@ (80011c4 <main+0x1f8>)
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	3b01      	subs	r3, #1
 8001102:	4a31      	ldr	r2, [pc, #196]	@ (80011c8 <main+0x1fc>)
 8001104:	5cd3      	ldrb	r3, [r2, r3]
 8001106:	2b0d      	cmp	r3, #13
 8001108:	d13e      	bne.n	8001188 <main+0x1bc>
				rx_buf[rx_index - 1] = 0;
 800110a:	4b2e      	ldr	r3, [pc, #184]	@ (80011c4 <main+0x1f8>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	3b01      	subs	r3, #1
 8001110:	4a2d      	ldr	r2, [pc, #180]	@ (80011c8 <main+0x1fc>)
 8001112:	2100      	movs	r1, #0
 8001114:	54d1      	strb	r1, [r2, r3]
				rx_index = 0;
 8001116:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <main+0x1f8>)
 8001118:	2200      	movs	r2, #0
 800111a:	801a      	strh	r2, [r3, #0]
			}
			else continue;

			prints("U1: ");
 800111c:	482c      	ldr	r0, [pc, #176]	@ (80011d0 <main+0x204>)
 800111e:	f000 f945 	bl	80013ac <prints>
			prints((char*) rx_buf);
 8001122:	4829      	ldr	r0, [pc, #164]	@ (80011c8 <main+0x1fc>)
 8001124:	f000 f942 	bl	80013ac <prints>
			prints("\r\n");
 8001128:	482a      	ldr	r0, [pc, #168]	@ (80011d4 <main+0x208>)
 800112a:	f000 f93f 	bl	80013ac <prints>

			uint32_t baud_rate = atoi((char*) rx_buf);
 800112e:	4826      	ldr	r0, [pc, #152]	@ (80011c8 <main+0x1fc>)
 8001130:	f006 f89e 	bl	8007270 <atoi>
 8001134:	4603      	mov	r3, r0
 8001136:	603b      	str	r3, [r7, #0]
			if (baud_rate == 115200 || baud_rate == 921600)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 800113e:	d003      	beq.n	8001148 <main+0x17c>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f5b3 2f61 	cmp.w	r3, #921600	@ 0xe1000
 8001146:	d10e      	bne.n	8001166 <main+0x19a>
			{
				snprintf((char*) str, STR_BUF_SIZE, "Changing baud rate to %ld\r\n", baud_rate);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	4a23      	ldr	r2, [pc, #140]	@ (80011d8 <main+0x20c>)
 800114c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001150:	4818      	ldr	r0, [pc, #96]	@ (80011b4 <main+0x1e8>)
 8001152:	f006 ff81 	bl	8008058 <sniprintf>
				prints((char*) str);
 8001156:	4817      	ldr	r0, [pc, #92]	@ (80011b4 <main+0x1e8>)
 8001158:	f000 f928 	bl	80013ac <prints>
				UartRcvr_set_baud_rate(&usart2_rcvr, baud_rate);
 800115c:	6839      	ldr	r1, [r7, #0]
 800115e:	480e      	ldr	r0, [pc, #56]	@ (8001198 <main+0x1cc>)
 8001160:	f002 fc94 	bl	8003a8c <UartRcvr_set_baud_rate>
 8001164:	e011      	b.n	800118a <main+0x1be>
			}
			else
			{
				snprintf((char*) str, STR_BUF_SIZE, "%s\r\n", rx_buf);
 8001166:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <main+0x1fc>)
 8001168:	4a1c      	ldr	r2, [pc, #112]	@ (80011dc <main+0x210>)
 800116a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800116e:	4811      	ldr	r0, [pc, #68]	@ (80011b4 <main+0x1e8>)
 8001170:	f006 ff72 	bl	8008058 <sniprintf>
				GSM_at(&gsm, (const char*)str, 1, 1000);
 8001174:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001178:	2201      	movs	r2, #1
 800117a:	490e      	ldr	r1, [pc, #56]	@ (80011b4 <main+0x1e8>)
 800117c:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <main+0x1ec>)
 800117e:	f001 fdef 	bl	8002d60 <GSM_at>
 8001182:	e786      	b.n	8001092 <main+0xc6>
			if(len == 0) continue;
 8001184:	bf00      	nop
 8001186:	e784      	b.n	8001092 <main+0xc6>
			else continue;
 8001188:	bf00      	nop
		while ((gsm_err = GSM_Feed(&gsm)) != GSM_IDLE) {
 800118a:	e782      	b.n	8001092 <main+0xc6>
 800118c:	20000994 	.word	0x20000994
 8001190:	200001f4 	.word	0x200001f4
 8001194:	200009dc 	.word	0x200009dc
 8001198:	20000260 	.word	0x20000260
 800119c:	2000094c 	.word	0x2000094c
 80011a0:	200002cc 	.word	0x200002cc
 80011a4:	20000904 	.word	0x20000904
 80011a8:	20000b44 	.word	0x20000b44
 80011ac:	0800a150 	.word	0x0800a150
 80011b0:	0800a168 	.word	0x0800a168
 80011b4:	200006fc 	.word	0x200006fc
 80011b8:	20000338 	.word	0x20000338
 80011bc:	0800a180 	.word	0x0800a180
 80011c0:	0800a194 	.word	0x0800a194
 80011c4:	200006f8 	.word	0x200006f8
 80011c8:	200005f8 	.word	0x200005f8
 80011cc:	200008fc 	.word	0x200008fc
 80011d0:	0800a1a8 	.word	0x0800a1a8
 80011d4:	0800a1b0 	.word	0x0800a1b0
 80011d8:	0800a1b4 	.word	0x0800a1b4
 80011dc:	0800a1d0 	.word	0x0800a1d0

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b094      	sub	sp, #80	@ 0x50
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0320 	add.w	r3, r7, #32
 80011ea:	2230      	movs	r2, #48	@ 0x30
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f007 f83e 	bl	8008270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	4b29      	ldr	r3, [pc, #164]	@ (80012b0 <SystemClock_Config+0xd0>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	4a28      	ldr	r2, [pc, #160]	@ (80012b0 <SystemClock_Config+0xd0>)
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001212:	6413      	str	r3, [r2, #64]	@ 0x40
 8001214:	4b26      	ldr	r3, [pc, #152]	@ (80012b0 <SystemClock_Config+0xd0>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	4b23      	ldr	r3, [pc, #140]	@ (80012b4 <SystemClock_Config+0xd4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800122c:	4a21      	ldr	r2, [pc, #132]	@ (80012b4 <SystemClock_Config+0xd4>)
 800122e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <SystemClock_Config+0xd4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001248:	2310      	movs	r3, #16
 800124a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124c:	2302      	movs	r3, #2
 800124e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001250:	2300      	movs	r3, #0
 8001252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001254:	2308      	movs	r3, #8
 8001256:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001258:	2378      	movs	r3, #120	@ 0x78
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001260:	2304      	movs	r3, #4
 8001262:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fd1d 	bl	8004ca8 <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001274:	f000 f8aa 	bl	80013cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001278:	230f      	movs	r3, #15
 800127a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2302      	movs	r3, #2
 800127e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001284:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800128a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	2103      	movs	r1, #3
 8001296:	4618      	mov	r0, r3
 8001298:	f003 ff7e 	bl	8005198 <HAL_RCC_ClockConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012a2:	f000 f893 	bl	80013cc <Error_Handler>
  }
}
 80012a6:	bf00      	nop
 80012a8:	3750      	adds	r7, #80	@ 0x50
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40007000 	.word	0x40007000

080012b8 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]
    if(huart->Instance == USART1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001338 <HAL_UARTEx_RxEventCallback+0x80>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10c      	bne.n	80012e8 <HAL_UARTEx_RxEventCallback+0x30>
    {
    	UartRcvr_it_trigger(&usart1_rcvr, size);
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	4619      	mov	r1, r3
 80012d2:	481a      	ldr	r0, [pc, #104]	@ (800133c <HAL_UARTEx_RxEventCallback+0x84>)
 80012d4:	f002 fd2e 	bl	8003d34 <UartRcvr_it_trigger>
    	if(huart->RxEventType == HAL_UART_RXEVENT_IDLE)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d126      	bne.n	800132e <HAL_UARTEx_RxEventCallback+0x76>
    	{
    		UartRcvr_it_swap(&usart1_rcvr);
 80012e0:	4816      	ldr	r0, [pc, #88]	@ (800133c <HAL_UARTEx_RxEventCallback+0x84>)
 80012e2:	f002 fc6b 	bl	8003bbc <UartRcvr_it_swap>
		if (huart->RxEventType == HAL_UART_RXEVENT_IDLE)
		{
			UartRcvr_it_swap(&uart7_rcvr);
		}
	}
}
 80012e6:	e022      	b.n	800132e <HAL_UARTEx_RxEventCallback+0x76>
    else if (huart->Instance == USART2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a14      	ldr	r2, [pc, #80]	@ (8001340 <HAL_UARTEx_RxEventCallback+0x88>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10c      	bne.n	800130c <HAL_UARTEx_RxEventCallback+0x54>
    	UartRcvr_it_trigger(&usart2_rcvr, size);
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	4619      	mov	r1, r3
 80012f6:	4813      	ldr	r0, [pc, #76]	@ (8001344 <HAL_UARTEx_RxEventCallback+0x8c>)
 80012f8:	f002 fd1c 	bl	8003d34 <UartRcvr_it_trigger>
    	if(huart->RxEventType == HAL_UART_RXEVENT_IDLE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001300:	2b02      	cmp	r3, #2
 8001302:	d114      	bne.n	800132e <HAL_UARTEx_RxEventCallback+0x76>
    		UartRcvr_it_swap(&usart2_rcvr);
 8001304:	480f      	ldr	r0, [pc, #60]	@ (8001344 <HAL_UARTEx_RxEventCallback+0x8c>)
 8001306:	f002 fc59 	bl	8003bbc <UartRcvr_it_swap>
}
 800130a:	e010      	b.n	800132e <HAL_UARTEx_RxEventCallback+0x76>
    else if (huart->Instance == UART7) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0d      	ldr	r2, [pc, #52]	@ (8001348 <HAL_UARTEx_RxEventCallback+0x90>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d10b      	bne.n	800132e <HAL_UARTEx_RxEventCallback+0x76>
		UartRcvr_it_trigger(&uart7_rcvr, size);
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	4619      	mov	r1, r3
 800131a:	480c      	ldr	r0, [pc, #48]	@ (800134c <HAL_UARTEx_RxEventCallback+0x94>)
 800131c:	f002 fd0a 	bl	8003d34 <UartRcvr_it_trigger>
		if (huart->RxEventType == HAL_UART_RXEVENT_IDLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001324:	2b02      	cmp	r3, #2
 8001326:	d102      	bne.n	800132e <HAL_UARTEx_RxEventCallback+0x76>
			UartRcvr_it_swap(&uart7_rcvr);
 8001328:	4808      	ldr	r0, [pc, #32]	@ (800134c <HAL_UARTEx_RxEventCallback+0x94>)
 800132a:	f002 fc47 	bl	8003bbc <UartRcvr_it_swap>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40011000 	.word	0x40011000
 800133c:	200001f4 	.word	0x200001f4
 8001340:	40004400 	.word	0x40004400
 8001344:	20000260 	.word	0x20000260
 8001348:	40007800 	.word	0x40007800
 800134c:	200002cc 	.word	0x200002cc

08001350 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <HAL_UART_ErrorCallback+0x44>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d103      	bne.n	800136a <HAL_UART_ErrorCallback+0x1a>
		UartRcvr_it_error(&usart1_rcvr);
 8001362:	480d      	ldr	r0, [pc, #52]	@ (8001398 <HAL_UART_ErrorCallback+0x48>)
 8001364:	f002 fd2c 	bl	8003dc0 <UartRcvr_it_error>
	} else if (huart->Instance == USART2) {
		UartRcvr_it_error(&usart2_rcvr);
	} else if (huart->Instance == UART7) {
		UartRcvr_it_error(&uart7_rcvr);
	}
}
 8001368:	e010      	b.n	800138c <HAL_UART_ErrorCallback+0x3c>
	} else if (huart->Instance == USART2) {
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a0b      	ldr	r2, [pc, #44]	@ (800139c <HAL_UART_ErrorCallback+0x4c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d103      	bne.n	800137c <HAL_UART_ErrorCallback+0x2c>
		UartRcvr_it_error(&usart2_rcvr);
 8001374:	480a      	ldr	r0, [pc, #40]	@ (80013a0 <HAL_UART_ErrorCallback+0x50>)
 8001376:	f002 fd23 	bl	8003dc0 <UartRcvr_it_error>
}
 800137a:	e007      	b.n	800138c <HAL_UART_ErrorCallback+0x3c>
	} else if (huart->Instance == UART7) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a08      	ldr	r2, [pc, #32]	@ (80013a4 <HAL_UART_ErrorCallback+0x54>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d102      	bne.n	800138c <HAL_UART_ErrorCallback+0x3c>
		UartRcvr_it_error(&uart7_rcvr);
 8001386:	4808      	ldr	r0, [pc, #32]	@ (80013a8 <HAL_UART_ErrorCallback+0x58>)
 8001388:	f002 fd1a 	bl	8003dc0 <UartRcvr_it_error>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40011000 	.word	0x40011000
 8001398:	200001f4 	.word	0x200001f4
 800139c:	40004400 	.word	0x40004400
 80013a0:	20000260 	.word	0x20000260
 80013a4:	40007800 	.word	0x40007800
 80013a8:	200002cc 	.word	0x200002cc

080013ac <prints>:


HAL_StatusTypeDef prints(const char* str)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	return UartRcvr_print(&usart1_rcvr, str);
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <prints+0x1c>)
 80013b8:	f002 fbec 	bl	8003b94 <UartRcvr_print>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200001f4 	.word	0x200001f4

080013cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d0:	b672      	cpsid	i
}
 80013d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	prints("Error_Handler\r\n");
 80013d4:	4804      	ldr	r0, [pc, #16]	@ (80013e8 <Error_Handler+0x1c>)
 80013d6:	f7ff ffe9 	bl	80013ac <prints>
	HAL_Delay(10000);
 80013da:	f242 7010 	movw	r0, #10000	@ 0x2710
 80013de:	f002 fd7f 	bl	8003ee0 <HAL_Delay>
	// restart the MCU
	NVIC_SystemReset();
 80013e2:	f7ff fddd 	bl	8000fa0 <__NVIC_SystemReset>
 80013e6:	bf00      	nop
 80013e8:	0800a1d8 	.word	0x0800a1d8

080013ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b10      	ldr	r3, [pc, #64]	@ (8001438 <HAL_MspInit+0x4c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001438 <HAL_MspInit+0x4c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <HAL_MspInit+0x4c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	603b      	str	r3, [r7, #0]
 8001412:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_MspInit+0x4c>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	4a08      	ldr	r2, [pc, #32]	@ (8001438 <HAL_MspInit+0x4c>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800141c:	6413      	str	r3, [r2, #64]	@ 0x40
 800141e:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_MspInit+0x4c>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142a:	bf00      	nop
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <NMI_Handler+0x4>

08001444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <MemManage_Handler+0x4>

08001454 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <BusFault_Handler+0x4>

0800145c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <UsageFault_Handler+0x4>

08001464 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001492:	f002 fd05 	bl	8003ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <DMA1_Stream3_IRQHandler+0x10>)
 80014a2:	f002 ffeb 	bl	800447c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000a24 	.word	0x20000a24

080014b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80014b4:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <DMA1_Stream5_IRQHandler+0x10>)
 80014b6:	f002 ffe1 	bl	800447c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000ae4 	.word	0x20000ae4

080014c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	FT_IT_Feed(ft);
 80014c8:	4b04      	ldr	r3, [pc, #16]	@ (80014dc <TIM2_IRQHandler+0x18>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 fb8a 	bl	8001be6 <FT_IT_Feed>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014d2:	4803      	ldr	r0, [pc, #12]	@ (80014e0 <TIM2_IRQHandler+0x1c>)
 80014d4:	f004 f8f8 	bl	80056c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000b44 	.word	0x20000b44
 80014e0:	20000904 	.word	0x20000904

080014e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <USART1_IRQHandler+0x10>)
 80014ea:	f004 fde5 	bl	80060b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000994 	.word	0x20000994

080014f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <USART2_IRQHandler+0x10>)
 80014fe:	f004 fddb 	bl	80060b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200009dc 	.word	0x200009dc

0800150c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001510:	4802      	ldr	r0, [pc, #8]	@ (800151c <DMA2_Stream2_IRQHandler+0x10>)
 8001512:	f002 ffb3 	bl	800447c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000a84 	.word	0x20000a84

08001520 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <UART7_IRQHandler+0x10>)
 8001526:	f004 fdc7 	bl	80060b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000094c 	.word	0x2000094c

08001534 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return 1;
 8001538:	2301      	movs	r3, #1
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <_kill>:

int _kill(int pid, int sig)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800154e:	f006 ff03 	bl	8008358 <__errno>
 8001552:	4603      	mov	r3, r0
 8001554:	2216      	movs	r2, #22
 8001556:	601a      	str	r2, [r3, #0]
  return -1;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <_exit>:

void _exit (int status)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800156c:	f04f 31ff 	mov.w	r1, #4294967295
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ffe7 	bl	8001544 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001576:	bf00      	nop
 8001578:	e7fd      	b.n	8001576 <_exit+0x12>

0800157a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e00a      	b.n	80015a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800158c:	f3af 8000 	nop.w
 8001590:	4601      	mov	r1, r0
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	1c5a      	adds	r2, r3, #1
 8001596:	60ba      	str	r2, [r7, #8]
 8001598:	b2ca      	uxtb	r2, r1
 800159a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	dbf0      	blt.n	800158c <_read+0x12>
  }

  return len;
 80015aa:	687b      	ldr	r3, [r7, #4]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	e009      	b.n	80015da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	60ba      	str	r2, [r7, #8]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3301      	adds	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	429a      	cmp	r2, r3
 80015e0:	dbf1      	blt.n	80015c6 <_write+0x12>
  }
  return len;
 80015e2:	687b      	ldr	r3, [r7, #4]
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_close>:

int _close(int file)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001614:	605a      	str	r2, [r3, #4]
  return 0;
 8001616:	2300      	movs	r3, #0
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_isatty>:

int _isatty(int file)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800162c:	2301      	movs	r3, #1
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800163a:	b480      	push	{r7}
 800163c:	b085      	sub	sp, #20
 800163e:	af00      	add	r7, sp, #0
 8001640:	60f8      	str	r0, [r7, #12]
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800165c:	4a14      	ldr	r2, [pc, #80]	@ (80016b0 <_sbrk+0x5c>)
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <_sbrk+0x60>)
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001668:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001670:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <_sbrk+0x64>)
 8001672:	4a12      	ldr	r2, [pc, #72]	@ (80016bc <_sbrk+0x68>)
 8001674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <_sbrk+0x64>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4413      	add	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	429a      	cmp	r2, r3
 8001682:	d207      	bcs.n	8001694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001684:	f006 fe68 	bl	8008358 <__errno>
 8001688:	4603      	mov	r3, r0
 800168a:	220c      	movs	r2, #12
 800168c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	e009      	b.n	80016a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <_sbrk+0x64>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <_sbrk+0x64>)
 80016a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016a6:	68fb      	ldr	r3, [r7, #12]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20030000 	.word	0x20030000
 80016b4:	00000400 	.word	0x00000400
 80016b8:	20000900 	.word	0x20000900
 80016bc:	20000c98 	.word	0x20000c98

080016c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016c4:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <SystemInit+0x20>)
 80016c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ca:	4a05      	ldr	r2, [pc, #20]	@ (80016e0 <SystemInit+0x20>)
 80016cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f8:	463b      	mov	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001700:	4b1d      	ldr	r3, [pc, #116]	@ (8001778 <MX_TIM2_Init+0x94>)
 8001702:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001706:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001708:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <MX_TIM2_Init+0x94>)
 800170a:	2200      	movs	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800170e:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <MX_TIM2_Init+0x94>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001714:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <MX_TIM2_Init+0x94>)
 8001716:	f04f 32ff 	mov.w	r2, #4294967295
 800171a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800171c:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <MX_TIM2_Init+0x94>)
 800171e:	2200      	movs	r2, #0
 8001720:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <MX_TIM2_Init+0x94>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001728:	4813      	ldr	r0, [pc, #76]	@ (8001778 <MX_TIM2_Init+0x94>)
 800172a:	f003 ff15 	bl	8005558 <HAL_TIM_Base_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001734:	f7ff fe4a 	bl	80013cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800173c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800173e:	f107 0308 	add.w	r3, r7, #8
 8001742:	4619      	mov	r1, r3
 8001744:	480c      	ldr	r0, [pc, #48]	@ (8001778 <MX_TIM2_Init+0x94>)
 8001746:	f004 f8af 	bl	80058a8 <HAL_TIM_ConfigClockSource>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001750:	f7ff fe3c 	bl	80013cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001754:	2300      	movs	r3, #0
 8001756:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	@ (8001778 <MX_TIM2_Init+0x94>)
 8001762:	f004 fae1 	bl	8005d28 <HAL_TIMEx_MasterConfigSynchronization>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800176c:	f7ff fe2e 	bl	80013cc <Error_Handler>

  //HAL_TIM_Base_Start(&htim2);

  /* USER CODE END TIM2_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000904 	.word	0x20000904

0800177c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800178c:	d115      	bne.n	80017ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <HAL_TIM_Base_MspInit+0x48>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	4a0b      	ldr	r2, [pc, #44]	@ (80017c4 <HAL_TIM_Base_MspInit+0x48>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6413      	str	r3, [r2, #64]	@ 0x40
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_TIM_Base_MspInit+0x48>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	201c      	movs	r0, #28
 80017b0:	f002 fc95 	bl	80040de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017b4:	201c      	movs	r0, #28
 80017b6:	f002 fcae 	bl	8004116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <MX_UART7_Init+0x4c>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	@ (8001818 <MX_UART7_Init+0x50>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <MX_UART7_Init+0x4c>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <MX_UART7_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <MX_UART7_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <MX_UART7_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <MX_UART7_Init+0x4c>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <MX_UART7_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <MX_UART7_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	@ (8001814 <MX_UART7_Init+0x4c>)
 8001800:	f004 fb22 	bl	8005e48 <HAL_UART_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_UART7_Init+0x46>
  {
    Error_Handler();
 800180a:	f7ff fddf 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000094c 	.word	0x2000094c
 8001818:	40007800 	.word	0x40007800

0800181c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001820:	4b11      	ldr	r3, [pc, #68]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001822:	4a12      	ldr	r2, [pc, #72]	@ (800186c <MX_USART1_UART_Init+0x50>)
 8001824:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001826:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001828:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 800182c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b08      	ldr	r3, [pc, #32]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	@ (8001868 <MX_USART1_UART_Init+0x4c>)
 8001854:	f004 faf8 	bl	8005e48 <HAL_UART_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800185e:	f7ff fdb5 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000994 	.word	0x20000994
 800186c:	40011000 	.word	0x40011000

08001870 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001874:	4b11      	ldr	r3, [pc, #68]	@ (80018bc <MX_USART2_UART_Init+0x4c>)
 8001876:	4a12      	ldr	r2, [pc, #72]	@ (80018c0 <MX_USART2_UART_Init+0x50>)
 8001878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <MX_USART2_UART_Init+0x4c>)
 800187c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001882:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <MX_USART2_UART_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001888:	4b0c      	ldr	r3, [pc, #48]	@ (80018bc <MX_USART2_UART_Init+0x4c>)
 800188a:	2200      	movs	r2, #0
 800188c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800188e:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <MX_USART2_UART_Init+0x4c>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001894:	4b09      	ldr	r3, [pc, #36]	@ (80018bc <MX_USART2_UART_Init+0x4c>)
 8001896:	220c      	movs	r2, #12
 8001898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189a:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <MX_USART2_UART_Init+0x4c>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <MX_USART2_UART_Init+0x4c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018a6:	4805      	ldr	r0, [pc, #20]	@ (80018bc <MX_USART2_UART_Init+0x4c>)
 80018a8:	f004 face 	bl	8005e48 <HAL_UART_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018b2:	f7ff fd8b 	bl	80013cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200009dc 	.word	0x200009dc
 80018c0:	40004400 	.word	0x40004400

080018c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08e      	sub	sp, #56	@ 0x38
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a9f      	ldr	r2, [pc, #636]	@ (8001b60 <HAL_UART_MspInit+0x29c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d163      	bne.n	80019ae <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
 80018ea:	4b9e      	ldr	r3, [pc, #632]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	4a9d      	ldr	r2, [pc, #628]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 80018f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80018f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f6:	4b9b      	ldr	r3, [pc, #620]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80018fe:	623b      	str	r3, [r7, #32]
 8001900:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	4b97      	ldr	r3, [pc, #604]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a96      	ldr	r2, [pc, #600]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 800190c:	f043 0320 	orr.w	r3, r3, #32
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b94      	ldr	r3, [pc, #592]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0320 	and.w	r3, r3, #32
 800191a:	61fb      	str	r3, [r7, #28]
 800191c:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800191e:	23c0      	movs	r3, #192	@ 0xc0
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800192e:	2308      	movs	r3, #8
 8001930:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001936:	4619      	mov	r1, r3
 8001938:	488b      	ldr	r0, [pc, #556]	@ (8001b68 <HAL_UART_MspInit+0x2a4>)
 800193a:	f003 f809 	bl	8004950 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 800193e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b6c <HAL_UART_MspInit+0x2a8>)
 8001940:	4a8b      	ldr	r2, [pc, #556]	@ (8001b70 <HAL_UART_MspInit+0x2ac>)
 8001942:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8001944:	4b89      	ldr	r3, [pc, #548]	@ (8001b6c <HAL_UART_MspInit+0x2a8>)
 8001946:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800194a:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800194c:	4b87      	ldr	r3, [pc, #540]	@ (8001b6c <HAL_UART_MspInit+0x2a8>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001952:	4b86      	ldr	r3, [pc, #536]	@ (8001b6c <HAL_UART_MspInit+0x2a8>)
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001958:	4b84      	ldr	r3, [pc, #528]	@ (8001b6c <HAL_UART_MspInit+0x2a8>)
 800195a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800195e:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001960:	4b82      	ldr	r3, [pc, #520]	@ (8001b6c <HAL_UART_MspInit+0x2a8>)
 8001962:	2200      	movs	r2, #0
 8001964:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001966:	4b81      	ldr	r3, [pc, #516]	@ (8001b6c <HAL_UART_MspInit+0x2a8>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 800196c:	4b7f      	ldr	r3, [pc, #508]	@ (8001b6c <HAL_UART_MspInit+0x2a8>)
 800196e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001972:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001974:	4b7d      	ldr	r3, [pc, #500]	@ (8001b6c <HAL_UART_MspInit+0x2a8>)
 8001976:	2200      	movs	r2, #0
 8001978:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800197a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b6c <HAL_UART_MspInit+0x2a8>)
 800197c:	2200      	movs	r2, #0
 800197e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001980:	487a      	ldr	r0, [pc, #488]	@ (8001b6c <HAL_UART_MspInit+0x2a8>)
 8001982:	f002 fbe3 	bl	800414c <HAL_DMA_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800198c:	f7ff fd1e 	bl	80013cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a76      	ldr	r2, [pc, #472]	@ (8001b6c <HAL_UART_MspInit+0x2a8>)
 8001994:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001996:	4a75      	ldr	r2, [pc, #468]	@ (8001b6c <HAL_UART_MspInit+0x2a8>)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800199c:	2200      	movs	r2, #0
 800199e:	2100      	movs	r1, #0
 80019a0:	2052      	movs	r0, #82	@ 0x52
 80019a2:	f002 fb9c 	bl	80040de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80019a6:	2052      	movs	r0, #82	@ 0x52
 80019a8:	f002 fbb5 	bl	8004116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019ac:	e0d3      	b.n	8001b56 <HAL_UART_MspInit+0x292>
  else if(uartHandle->Instance==USART1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a70      	ldr	r2, [pc, #448]	@ (8001b74 <HAL_UART_MspInit+0x2b0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d165      	bne.n	8001a84 <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
 80019bc:	4b69      	ldr	r3, [pc, #420]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 80019be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c0:	4a68      	ldr	r2, [pc, #416]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 80019c2:	f043 0310 	orr.w	r3, r3, #16
 80019c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c8:	4b66      	ldr	r3, [pc, #408]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 80019ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	4b62      	ldr	r3, [pc, #392]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 80019da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019dc:	4a61      	ldr	r2, [pc, #388]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e4:	4b5f      	ldr	r3, [pc, #380]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019f0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a02:	2307      	movs	r3, #7
 8001a04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	485a      	ldr	r0, [pc, #360]	@ (8001b78 <HAL_UART_MspInit+0x2b4>)
 8001a0e:	f002 ff9f 	bl	8004950 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001a12:	4b5a      	ldr	r3, [pc, #360]	@ (8001b7c <HAL_UART_MspInit+0x2b8>)
 8001a14:	4a5a      	ldr	r2, [pc, #360]	@ (8001b80 <HAL_UART_MspInit+0x2bc>)
 8001a16:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001a18:	4b58      	ldr	r3, [pc, #352]	@ (8001b7c <HAL_UART_MspInit+0x2b8>)
 8001a1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a1e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a20:	4b56      	ldr	r3, [pc, #344]	@ (8001b7c <HAL_UART_MspInit+0x2b8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a26:	4b55      	ldr	r3, [pc, #340]	@ (8001b7c <HAL_UART_MspInit+0x2b8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a2c:	4b53      	ldr	r3, [pc, #332]	@ (8001b7c <HAL_UART_MspInit+0x2b8>)
 8001a2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a32:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a34:	4b51      	ldr	r3, [pc, #324]	@ (8001b7c <HAL_UART_MspInit+0x2b8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a3a:	4b50      	ldr	r3, [pc, #320]	@ (8001b7c <HAL_UART_MspInit+0x2b8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001a40:	4b4e      	ldr	r3, [pc, #312]	@ (8001b7c <HAL_UART_MspInit+0x2b8>)
 8001a42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a46:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001a48:	4b4c      	ldr	r3, [pc, #304]	@ (8001b7c <HAL_UART_MspInit+0x2b8>)
 8001a4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a4e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a50:	4b4a      	ldr	r3, [pc, #296]	@ (8001b7c <HAL_UART_MspInit+0x2b8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a56:	4849      	ldr	r0, [pc, #292]	@ (8001b7c <HAL_UART_MspInit+0x2b8>)
 8001a58:	f002 fb78 	bl	800414c <HAL_DMA_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 8001a62:	f7ff fcb3 	bl	80013cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a44      	ldr	r2, [pc, #272]	@ (8001b7c <HAL_UART_MspInit+0x2b8>)
 8001a6a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a6c:	4a43      	ldr	r2, [pc, #268]	@ (8001b7c <HAL_UART_MspInit+0x2b8>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2025      	movs	r0, #37	@ 0x25
 8001a78:	f002 fb31 	bl	80040de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a7c:	2025      	movs	r0, #37	@ 0x25
 8001a7e:	f002 fb4a 	bl	8004116 <HAL_NVIC_EnableIRQ>
}
 8001a82:	e068      	b.n	8001b56 <HAL_UART_MspInit+0x292>
  else if(uartHandle->Instance==USART2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a3e      	ldr	r2, [pc, #248]	@ (8001b84 <HAL_UART_MspInit+0x2c0>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d163      	bne.n	8001b56 <HAL_UART_MspInit+0x292>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b34      	ldr	r3, [pc, #208]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	4a33      	ldr	r2, [pc, #204]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9e:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	4a2c      	ldr	r2, [pc, #176]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aba:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <HAL_UART_MspInit+0x2a0>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001ac6:	2360      	movs	r3, #96	@ 0x60
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4829      	ldr	r0, [pc, #164]	@ (8001b88 <HAL_UART_MspInit+0x2c4>)
 8001ae2:	f002 ff35 	bl	8004950 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001ae6:	4b29      	ldr	r3, [pc, #164]	@ (8001b8c <HAL_UART_MspInit+0x2c8>)
 8001ae8:	4a29      	ldr	r2, [pc, #164]	@ (8001b90 <HAL_UART_MspInit+0x2cc>)
 8001aea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001aec:	4b27      	ldr	r3, [pc, #156]	@ (8001b8c <HAL_UART_MspInit+0x2c8>)
 8001aee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001af2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001af4:	4b25      	ldr	r3, [pc, #148]	@ (8001b8c <HAL_UART_MspInit+0x2c8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001afa:	4b24      	ldr	r3, [pc, #144]	@ (8001b8c <HAL_UART_MspInit+0x2c8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b00:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <HAL_UART_MspInit+0x2c8>)
 8001b02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b06:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b08:	4b20      	ldr	r3, [pc, #128]	@ (8001b8c <HAL_UART_MspInit+0x2c8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <HAL_UART_MspInit+0x2c8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	@ (8001b8c <HAL_UART_MspInit+0x2c8>)
 8001b16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b1a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <HAL_UART_MspInit+0x2c8>)
 8001b1e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b22:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b24:	4b19      	ldr	r3, [pc, #100]	@ (8001b8c <HAL_UART_MspInit+0x2c8>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b2a:	4818      	ldr	r0, [pc, #96]	@ (8001b8c <HAL_UART_MspInit+0x2c8>)
 8001b2c:	f002 fb0e 	bl	800414c <HAL_DMA_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_UART_MspInit+0x276>
      Error_Handler();
 8001b36:	f7ff fc49 	bl	80013cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a13      	ldr	r2, [pc, #76]	@ (8001b8c <HAL_UART_MspInit+0x2c8>)
 8001b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b40:	4a12      	ldr	r2, [pc, #72]	@ (8001b8c <HAL_UART_MspInit+0x2c8>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2026      	movs	r0, #38	@ 0x26
 8001b4c:	f002 fac7 	bl	80040de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b50:	2026      	movs	r0, #38	@ 0x26
 8001b52:	f002 fae0 	bl	8004116 <HAL_NVIC_EnableIRQ>
}
 8001b56:	bf00      	nop
 8001b58:	3738      	adds	r7, #56	@ 0x38
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40007800 	.word	0x40007800
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40021400 	.word	0x40021400
 8001b6c:	20000a24 	.word	0x20000a24
 8001b70:	40026058 	.word	0x40026058
 8001b74:	40011000 	.word	0x40011000
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	20000a84 	.word	0x20000a84
 8001b80:	40026440 	.word	0x40026440
 8001b84:	40004400 	.word	0x40004400
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	20000ae4 	.word	0x20000ae4
 8001b90:	40026088 	.word	0x40026088

08001b94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b98:	f7ff fd92 	bl	80016c0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b9c:	480c      	ldr	r0, [pc, #48]	@ (8001bd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b9e:	490d      	ldr	r1, [pc, #52]	@ (8001bd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba4:	e002      	b.n	8001bac <LoopCopyDataInit>

08001ba6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001baa:	3304      	adds	r3, #4

08001bac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb0:	d3f9      	bcc.n	8001ba6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001be0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb8:	e001      	b.n	8001bbe <LoopFillZerobss>

08001bba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bbc:	3204      	adds	r2, #4

08001bbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc0:	d3fb      	bcc.n	8001bba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f006 fbcf 	bl	8008364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bc6:	f7ff fa01 	bl	8000fcc <main>
  bx  lr    
 8001bca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001bcc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001bd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001bd8:	0800a778 	.word	0x0800a778
  ldr r2, =_sbss
 8001bdc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001be0:	20000c98 	.word	0x20000c98

08001be4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC_IRQHandler>

08001be6 <FT_IT_Feed>:
#include "../fancy_timer/fancy_timer.h"

FT_base* ft = NULL;

FT_ERR FT_IT_Feed(FT_base* ft)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
	if(ft == NULL) return FT_INVALID_ARGUMENT;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <FT_IT_Feed+0x14>
 8001bf4:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001bf8:	e006      	b.n	8001c08 <FT_IT_Feed+0x22>
	ft->SRCR++;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	645a      	str	r2, [r3, #68]	@ 0x44
	return FT_OK;
 8001c04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <FT_InitCustom>:
	if(target_frequency == 0) return FT_INVALID_ARGUMENT;
	return FT_InitCustom(ft, huart, htim, target_frequency);
}

FT_ERR FT_InitCustom(FT_base** ftimer, UART_HandleTypeDef *huart, TIM_HandleTypeDef* htim, uint32_t target_frequency)
{
 8001c14:	b5b0      	push	{r4, r5, r7, lr}
 8001c16:	b098      	sub	sp, #96	@ 0x60
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
	if(ftimer == NULL || htim == NULL || target_frequency == 0)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <FT_InitCustom+0x20>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <FT_InitCustom+0x20>
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <FT_InitCustom+0x26>
	{
		return FT_INVALID_ARGUMENT;
 8001c34:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001c38:	e117      	b.n	8001e6a <FT_InitCustom+0x256>
	}

	ft_timebase timebase = FT_TB_UNKNOWN;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if(target_frequency == 1) timebase = FT_TB_SEC;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <FT_InitCustom+0x38>
 8001c46:	2303      	movs	r3, #3
 8001c48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if(target_frequency == 1000) timebase = FT_TB_MS;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c52:	d102      	bne.n	8001c5a <FT_InitCustom+0x46>
 8001c54:	2302      	movs	r3, #2
 8001c56:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if(target_frequency == 1000000) timebase = FT_TB_US;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	4a85      	ldr	r2, [pc, #532]	@ (8001e74 <FT_InitCustom+0x260>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d102      	bne.n	8001c68 <FT_InitCustom+0x54>
 8001c62:	2301      	movs	r3, #1
 8001c64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	ft_source source = FT_GetSource(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 fd79 	bl	8002760 <FT_GetSource>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	ft_type type = FT_GetType(htim);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 fd01 	bl	800267c <FT_GetType>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	ft_resolution resolution = FT_GetResolution(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fddd 	bl	8002840 <FT_GetResolution>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	ft_prescaler_range prescaler_range = FT_GetPrescalerRange(htim);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 fe47 	bl	8002920 <FT_GetPrescalerRange>
 8001c92:	4603      	mov	r3, r0
 8001c94:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	if(source == FT_SRC_UNKNOWN ||
 8001c98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00b      	beq.n	8001cb8 <FT_InitCustom+0xa4>
 8001ca0:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <FT_InitCustom+0xa4>
		type == FT_TYPE_UNKNOWN ||
 8001ca8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <FT_InitCustom+0xa4>
		resolution == FT_RES_UNKNOWN ||
 8001cb0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <FT_InitCustom+0xaa>
		prescaler_range == FT_PRE_UNKNOWN )
	{
		return FT_INVALID_TIM_INSTANCE;
 8001cb8:	f241 0310 	movw	r3, #4112	@ 0x1010
 8001cbc:	e0d5      	b.n	8001e6a <FT_InitCustom+0x256>
	}

	uint32_t src_freq = FT_GetFrequency(source);
 8001cbe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 fe38 	bl	8002938 <FT_GetFrequency>
 8001cc8:	6538      	str	r0, [r7, #80]	@ 0x50
	if(src_freq == 0)
 8001cca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <FT_InitCustom+0xc2>
	{
		return FT_INVALID_TIM_INSTANCE;
 8001cd0:	f241 0310 	movw	r3, #4112	@ 0x1010
 8001cd4:	e0c9      	b.n	8001e6a <FT_InitCustom+0x256>
	}

	uint32_t max_prescaler;
	switch(prescaler_range)
 8001cd6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d108      	bne.n	8001cf0 <FT_InitCustom+0xdc>
	{
	case FT_PRE_1_65536: max_prescaler = 65536; break;
 8001cde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ce4:	bf00      	nop
	default: return FT_INVALID_TIM_INSTANCE;
	}

	uint32_t counter_period;
	switch(resolution)
 8001ce6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d011      	beq.n	8001d12 <FT_InitCustom+0xfe>
 8001cee:	e002      	b.n	8001cf6 <FT_InitCustom+0xe2>
	default: return FT_INVALID_TIM_INSTANCE;
 8001cf0:	f241 0310 	movw	r3, #4112	@ 0x1010
 8001cf4:	e0b9      	b.n	8001e6a <FT_InitCustom+0x256>
	switch(resolution)
 8001cf6:	2b03      	cmp	r3, #3
 8001cf8:	dc0f      	bgt.n	8001d1a <FT_InitCustom+0x106>
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d002      	beq.n	8001d04 <FT_InitCustom+0xf0>
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d003      	beq.n	8001d0a <FT_InitCustom+0xf6>
 8001d02:	e00a      	b.n	8001d1a <FT_InitCustom+0x106>
	{
	case FT_RES_8: counter_period = UINT8_MAX; break;
 8001d04:	23ff      	movs	r3, #255	@ 0xff
 8001d06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d08:	e00a      	b.n	8001d20 <FT_InitCustom+0x10c>
	case FT_RES_16: counter_period = UINT16_MAX; break;
 8001d0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d10:	e006      	b.n	8001d20 <FT_InitCustom+0x10c>
	case FT_RES_32: counter_period = UINT32_MAX; break;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d18:	e002      	b.n	8001d20 <FT_InitCustom+0x10c>
	default: return FT_INVALID_TIM_INSTANCE;
 8001d1a:	f241 0310 	movw	r3, #4112	@ 0x1010
 8001d1e:	e0a4      	b.n	8001e6a <FT_InitCustom+0x256>
	}

	if(target_frequency > src_freq)
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d902      	bls.n	8001d2e <FT_InitCustom+0x11a>
	{
		return FT_INVALID_ARGUMENT;
 8001d28:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001d2c:	e09d      	b.n	8001e6a <FT_InitCustom+0x256>
	}


	ft_config config;
	config.timebase = timebase;
 8001d2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001d32:	753b      	strb	r3, [r7, #20]
	config.src_freq = src_freq;
 8001d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d36:	61bb      	str	r3, [r7, #24]
	config.des_freq = target_frequency;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	61fb      	str	r3, [r7, #28]
	config.max_prescaler = max_prescaler;
 8001d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	config.counter_period = counter_period;
 8001d40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d42:	637b      	str	r3, [r7, #52]	@ 0x34

	FT_ERR res = FT_GetTimerConfiguration(&config);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fe23 	bl	8002994 <FT_GetTimerConfiguration>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

	if(res != FT_OK) return res;
 8001d54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d5c:	d002      	beq.n	8001d64 <FT_InitCustom+0x150>
 8001d5e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d62:	e082      	b.n	8001e6a <FT_InitCustom+0x256>

	if(*ftimer != NULL) {
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d007      	beq.n	8001d7c <FT_InitCustom+0x168>
		FT_Free(*ftimer);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 f885 	bl	8001e80 <FT_Free>
		*ftimer = NULL;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
	}

	FT_base* ft = (FT_base*)malloc(sizeof(FT_base));
 8001d7c:	2058      	movs	r0, #88	@ 0x58
 8001d7e:	f005 fa7b 	bl	8007278 <malloc>
 8001d82:	4603      	mov	r3, r0
 8001d84:	647b      	str	r3, [r7, #68]	@ 0x44
	if(ft == NULL) return FT_OUT_OF_MEMORY;
 8001d86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <FT_InitCustom+0x17e>
 8001d8c:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001d90:	e06b      	b.n	8001e6a <FT_InitCustom+0x256>
	memset(ft, 0, sizeof(FT_base));
 8001d92:	2258      	movs	r2, #88	@ 0x58
 8001d94:	2100      	movs	r1, #0
 8001d96:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d98:	f006 fa6a 	bl	8008270 <memset>


	ft->timers_count = 0;
 8001d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d9e:	2200      	movs	r2, #0
 8001da0:	87da      	strh	r2, [r3, #62]	@ 0x3e
	ft->timers_size = FT_DEFAULT_SIZE;
 8001da2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001da4:	2204      	movs	r2, #4
 8001da6:	879a      	strh	r2, [r3, #60]	@ 0x3c
	ft->timers = (ft_def**)malloc(sizeof(ft_def*) * ft->timers_size);
 8001da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001daa:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4618      	mov	r0, r3
 8001db0:	f005 fa62 	bl	8007278 <malloc>
 8001db4:	4603      	mov	r3, r0
 8001db6:	461a      	mov	r2, r3
 8001db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dba:	639a      	str	r2, [r3, #56]	@ 0x38
	if(ft->timers == NULL) {
 8001dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d105      	bne.n	8001dd0 <FT_InitCustom+0x1bc>
		free(ft);
 8001dc4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001dc6:	f005 fa5f 	bl	8007288 <free>
		return FT_OUT_OF_MEMORY;
 8001dca:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001dce:	e04c      	b.n	8001e6a <FT_InitCustom+0x256>
	}
	memset(ft->timers, 0, sizeof(ft_def*) * ft->timers_size);
 8001dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd6:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2100      	movs	r1, #0
 8001dde:	f006 fa47 	bl	8008270 <memset>

	ft->source = source;
 8001de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001de4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001de8:	715a      	strb	r2, [r3, #5]
	ft->type = type;
 8001dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dec:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8001df0:	711a      	strb	r2, [r3, #4]
	ft->resolution = resolution;
 8001df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001df4:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001df8:	719a      	strb	r2, [r3, #6]

	// that's software now
	//ft->has_repetition_counter = IS_TIM_REPETITION_COUNTER_INSTANCE(htim->Instance);

	ft->ticks_remainder = 0;
 8001dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	641a      	str	r2, [r3, #64]	@ 0x40

	ft->config = config;
 8001e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e02:	f103 0408 	add.w	r4, r3, #8
 8001e06:	f107 0514 	add.w	r5, r7, #20
 8001e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e12:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	ft->htimer = htim;
 8001e1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	601a      	str	r2, [r3, #0]
	ft->huart = huart;
 8001e20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	651a      	str	r2, [r3, #80]	@ 0x50

	*ftimer = ft;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e2a:	601a      	str	r2, [r3, #0]

	// update timer configuration
	htim->Instance->PSC = config.prescaler;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e32:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = config.counter_period;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
	{
		// enable repetition counter (if available)
		htim->Instance->RCR = FT_REPETITION_COUNTER;
	}*/

	if(IS_TIM_REPETITION_COUNTER_INSTANCE(htim->Instance))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	@ (8001e78 <FT_InitCustom+0x264>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d004      	beq.n	8001e50 <FT_InitCustom+0x23c>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e7c <FT_InitCustom+0x268>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d103      	bne.n	8001e58 <FT_InitCustom+0x244>
	{
		htim->Instance->RCR = 0;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	// set flag to update prescaler and repetition counter
	htim->Instance->EGR = TIM_EGR_UG;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	615a      	str	r2, [r3, #20]

	// start timer
	HAL_TIM_Base_Start(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f003 fbc9 	bl	80055f8 <HAL_TIM_Base_Start>

	return FT_OK;
 8001e66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3760      	adds	r7, #96	@ 0x60
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bdb0      	pop	{r4, r5, r7, pc}
 8001e72:	bf00      	nop
 8001e74:	000f4240 	.word	0x000f4240
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40010400 	.word	0x40010400

08001e80 <FT_Free>:

void FT_Free(FT_base* ft)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	if(ft == NULL) return;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <FT_Free+0x20>
	free(ft->timers);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e92:	4618      	mov	r0, r3
 8001e94:	f005 f9f8 	bl	8007288 <free>
	free(ft);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f005 f9f5 	bl	8007288 <free>
 8001e9e:	e000      	b.n	8001ea2 <FT_Free+0x22>
	if(ft == NULL) return;
 8001ea0:	bf00      	nop
}
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <FT_ProcessTimer>:


FT_ERR FT_ProcessTimer(FT_base* ft, uint32_t feed_time, ft_def* timer)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	if(ft == NULL || timer == NULL) return FT_INVALID_ARGUMENT;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <FT_ProcessTimer+0x18>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <FT_ProcessTimer+0x1e>
 8001ec0:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001ec4:	e05f      	b.n	8001f86 <FT_ProcessTimer+0xde>
	if(timer->paused) return FT_OK;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	791b      	ldrb	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <FT_ProcessTimer+0x2c>
 8001ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed2:	e058      	b.n	8001f86 <FT_ProcessTimer+0xde>

	uint8_t triggered = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	75fb      	strb	r3, [r7, #23]
		//dbgprnt = 1;
	}

	// Long delay
	// ~> Timer triggered in one cycle
	if(feed_time >= timer->requested_time) {
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d315      	bcc.n	8001f0e <FT_ProcessTimer+0x66>
		uint32_t tgc = feed_time / timer->requested_time;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	613b      	str	r3, [r7, #16]
		feed_time -= tgc * timer->requested_time;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	fb02 f303 	mul.w	r3, r2, r3
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	60bb      	str	r3, [r7, #8]
		timer->trigger_counter += tgc;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	441a      	add	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	609a      	str	r2, [r3, #8]
		triggered = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	75fb      	strb	r3, [r7, #23]
//	}

	// Overflow
	// ~> At least UINT32_MAX elapsed since timer started
	// ~> At least one requested_time got fulfilled
	if(timer->elapsed_time + feed_time < timer->elapsed_time)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	441a      	add	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d210      	bcs.n	8001f40 <FT_ProcessTimer+0x98>
	{
		timer->elapsed_time += feed_time - timer->requested_time;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	1acb      	subs	r3, r1, r3
 8001f2a:	441a      	add	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	611a      	str	r2, [r3, #16]
		timer->trigger_counter++;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	609a      	str	r2, [r3, #8]
		triggered = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	75fb      	strb	r3, [r7, #23]
 8001f3e:	e01a      	b.n	8001f76 <FT_ProcessTimer+0xce>
//			FT_Print(ft, print_buf);
//		}
	}
	else
	{
		timer->elapsed_time += feed_time;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	441a      	add	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	611a      	str	r2, [r3, #16]

		// Regular trigger
		while(timer->elapsed_time >= timer->requested_time)
 8001f4c:	e00d      	b.n	8001f6a <FT_ProcessTimer+0xc2>
		{
			timer->elapsed_time -= timer->requested_time;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	1ad2      	subs	r2, r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	611a      	str	r2, [r3, #16]
			timer->trigger_counter++;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	609a      	str	r2, [r3, #8]
			triggered = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	75fb      	strb	r3, [r7, #23]
		while(timer->elapsed_time >= timer->requested_time)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691a      	ldr	r2, [r3, #16]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d2eb      	bcs.n	8001f4e <FT_ProcessTimer+0xa6>
//		snprintf(print_buf, sizeof(print_buf), "feed_time: %lu, requested_time: %lu, trigger_counter: %lu, elapsed: %lu\r\n",
//						feed_time, timer->requested_time, timer->trigger_counter, timer->elapsed_time);
//		FT_Print(ft, print_buf);
//	}

	if(triggered) return FT_TRIGGERED;
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <FT_ProcessTimer+0xda>
 8001f7c:	f241 0350 	movw	r3, #4176	@ 0x1050
 8001f80:	e001      	b.n	8001f86 <FT_ProcessTimer+0xde>
	//else if(errored) return FT_ERRORED;
	return FT_OK;
 8001f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <FT_Feed>:
	ft->SRCR = 0;
	return FT_OK;
}

FT_ERR FT_Feed(FT_base* ft)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
	if(ft == NULL) return FT_INVALID_ARGUMENT;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <FT_Feed+0x14>
 8001fa0:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001fa4:	e090      	b.n	80020c8 <FT_Feed+0x136>

	// recalculate existing timers

	uint8_t timers_triggered = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	75fb      	strb	r3, [r7, #23]
	uint8_t timers_errored = 0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75bb      	strb	r3, [r7, #22]
	FT_ERR res;


	uint32_t feed_time = ft->htimer->Instance->CNT; //__HAL_TIM_GET_COUNTER(ft->htimer)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	613b      	str	r3, [r7, #16]

	if(feed_time) ft->htimer->Instance->CNT = 0;
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d004      	beq.n	8001fc8 <FT_Feed+0x36>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	625a      	str	r2, [r3, #36]	@ 0x24


	if(ft->config.divider > 1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d914      	bls.n	8001ffa <FT_Feed+0x68>
	{
		feed_time += ft->ticks_remainder;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]

		ft->ticks_remainder = feed_time % ft->config.divider;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001fe4:	fb01 f202 	mul.w	r2, r1, r2
 8001fe8:	1a9a      	subs	r2, r3, r2
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40

		feed_time /= ft->config.divider;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	613b      	str	r3, [r7, #16]
	}

	if(ft->SRCR)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00b      	beq.n	800201a <FT_Feed+0x88>
	{
		feed_time += ft->SRCR * ft->config.counter_period;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	613b      	str	r3, [r7, #16]

		ft->SRCR = 0;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	@ 0x44
	}

	if(feed_time == 0) return FT_OK;
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <FT_Feed+0x94>
 8002020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002024:	e050      	b.n	80020c8 <FT_Feed+0x136>


	for(uint16_t i = 0; i < ft->timers_count; i++)
 8002026:	2300      	movs	r3, #0
 8002028:	81fb      	strh	r3, [r7, #14]
 800202a:	e03a      	b.n	80020a2 <FT_Feed+0x110>
	{
		if(ft->timers[i] != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002030:	89fb      	ldrh	r3, [r7, #14]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d02f      	beq.n	800209c <FT_Feed+0x10a>
		{
			res = FT_ProcessTimer(ft, feed_time, ft->timers[i]);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002040:	89fb      	ldrh	r3, [r7, #14]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	6939      	ldr	r1, [r7, #16]
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff2b 	bl	8001ea8 <FT_ProcessTimer>
 8002052:	4603      	mov	r3, r0
 8002054:	81bb      	strh	r3, [r7, #12]

			if(res == FT_ERRORED)
 8002056:	89bb      	ldrh	r3, [r7, #12]
 8002058:	f241 0251 	movw	r2, #4177	@ 0x1051
 800205c:	4293      	cmp	r3, r2
 800205e:	d103      	bne.n	8002068 <FT_Feed+0xd6>
			{
				timers_errored++;
 8002060:	7dbb      	ldrb	r3, [r7, #22]
 8002062:	3301      	adds	r3, #1
 8002064:	75bb      	strb	r3, [r7, #22]
 8002066:	e019      	b.n	800209c <FT_Feed+0x10a>
			}
			else
			{
				if(ft->timers[i]->trigger_counter) timers_triggered++;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800206c:	89fb      	ldrh	r3, [r7, #14]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <FT_Feed+0xf0>
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	3301      	adds	r3, #1
 800207e:	75fb      	strb	r3, [r7, #23]
 8002080:	e00c      	b.n	800209c <FT_Feed+0x10a>
				else if(ft->timers[i]->last_error != FT_OK) timers_errored++;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002086:	89fb      	ldrh	r3, [r7, #14]
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	8a9b      	ldrh	r3, [r3, #20]
 8002090:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002094:	d002      	beq.n	800209c <FT_Feed+0x10a>
 8002096:	7dbb      	ldrb	r3, [r7, #22]
 8002098:	3301      	adds	r3, #1
 800209a:	75bb      	strb	r3, [r7, #22]
	for(uint16_t i = 0; i < ft->timers_count; i++)
 800209c:	89fb      	ldrh	r3, [r7, #14]
 800209e:	3301      	adds	r3, #1
 80020a0:	81fb      	strh	r3, [r7, #14]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80020a6:	89fa      	ldrh	r2, [r7, #14]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d3bf      	bcc.n	800202c <FT_Feed+0x9a>
			}
		}
	}

	if(timers_triggered) return FT_TRIGGERED;
 80020ac:	7dfb      	ldrb	r3, [r7, #23]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <FT_Feed+0x126>
 80020b2:	f241 0350 	movw	r3, #4176	@ 0x1050
 80020b6:	e007      	b.n	80020c8 <FT_Feed+0x136>
	if(timers_errored) return FT_ERRORED;
 80020b8:	7dbb      	ldrb	r3, [r7, #22]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <FT_Feed+0x132>
 80020be:	f241 0351 	movw	r3, #4177	@ 0x1051
 80020c2:	e001      	b.n	80020c8 <FT_Feed+0x136>
	return FT_OK;
 80020c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <FT_GetTriggeredTimer>:
	}
	return res;
}

FT_ERR FT_GetTriggeredTimer(FT_base* ft, uint16_t* id, uint32_t* trigger_count)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	if(ft == NULL || id == NULL) return FT_INVALID_ARGUMENT;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <FT_GetTriggeredTimer+0x18>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <FT_GetTriggeredTimer+0x1e>
 80020e8:	f241 0303 	movw	r3, #4099	@ 0x1003
 80020ec:	e05a      	b.n	80021a4 <FT_GetTriggeredTimer+0xd4>

	uint32_t timer_i = UINT32_MAX;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295
 80020f2:	617b      	str	r3, [r7, #20]
	uint16_t priority = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	827b      	strh	r3, [r7, #18]

	for(uint16_t i = 0; i < ft->timers_count; i++)
 80020f8:	2300      	movs	r3, #0
 80020fa:	823b      	strh	r3, [r7, #16]
 80020fc:	e027      	b.n	800214e <FT_GetTriggeredTimer+0x7e>
	{
		if(ft->timers[i] != NULL && ft->timers[i]->trigger_counter && ft->timers[i]->priority > priority)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002102:	8a3b      	ldrh	r3, [r7, #16]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01c      	beq.n	8002148 <FT_GetTriggeredTimer+0x78>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002112:	8a3b      	ldrh	r3, [r7, #16]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <FT_GetTriggeredTimer+0x78>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002124:	8a3b      	ldrh	r3, [r7, #16]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	885b      	ldrh	r3, [r3, #2]
 800212e:	8a7a      	ldrh	r2, [r7, #18]
 8002130:	429a      	cmp	r2, r3
 8002132:	d209      	bcs.n	8002148 <FT_GetTriggeredTimer+0x78>
		{
			timer_i = i;
 8002134:	8a3b      	ldrh	r3, [r7, #16]
 8002136:	617b      	str	r3, [r7, #20]
			priority = ft->timers[i]->priority;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800213c:	8a3b      	ldrh	r3, [r7, #16]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	885b      	ldrh	r3, [r3, #2]
 8002146:	827b      	strh	r3, [r7, #18]
	for(uint16_t i = 0; i < ft->timers_count; i++)
 8002148:	8a3b      	ldrh	r3, [r7, #16]
 800214a:	3301      	adds	r3, #1
 800214c:	823b      	strh	r3, [r7, #16]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002152:	8a3a      	ldrh	r2, [r7, #16]
 8002154:	429a      	cmp	r2, r3
 8002156:	d3d2      	bcc.n	80020fe <FT_GetTriggeredTimer+0x2e>
		}
	}

	if(timer_i != UINT32_MAX) {
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800215e:	d01f      	beq.n	80021a0 <FT_GetTriggeredTimer+0xd0>
		*id = ft->timers[timer_i]->timer_id;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	881a      	ldrh	r2, [r3, #0]
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	801a      	strh	r2, [r3, #0]
		if(trigger_count != NULL) *trigger_count = ft->timers[timer_i]->trigger_counter;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d008      	beq.n	800218a <FT_GetTriggeredTimer+0xba>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
		ft->timers[timer_i]->trigger_counter = 0;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
		return FT_OK;
 800219a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800219e:	e001      	b.n	80021a4 <FT_GetTriggeredTimer+0xd4>
	}
	return FT_NO_TIMER;
 80021a0:	f241 0352 	movw	r3, #4178	@ 0x1052
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	371c      	adds	r7, #28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <FT_SetTimerInterval>:
	}
	return FT_NO_TIMER;
}

FT_ERR FT_SetTimerInterval(FT_base* ft, uint16_t timer_id, uint32_t interval)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	460b      	mov	r3, r1
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	817b      	strh	r3, [r7, #10]
	if (ft == NULL) return FT_INVALID_ARGUMENT;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <FT_SetTimerInterval+0x1a>
 80021c4:	f241 0303 	movw	r3, #4099	@ 0x1003
 80021c8:	e015      	b.n	80021f6 <FT_SetTimerInterval+0x46>
	ft_def *timer = NULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	613b      	str	r3, [r7, #16]
	FT_ERR res = FT_GetTimer_(ft, timer_id, &timer);
 80021ce:	f107 0210 	add.w	r2, r7, #16
 80021d2:	897b      	ldrh	r3, [r7, #10]
 80021d4:	4619      	mov	r1, r3
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f9bc 	bl	8002554 <FT_GetTimer_>
 80021dc:	4603      	mov	r3, r0
 80021de:	82fb      	strh	r3, [r7, #22]
	if (res == FT_OK) {
 80021e0:	8afb      	ldrh	r3, [r7, #22]
 80021e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021e6:	d105      	bne.n	80021f4 <FT_SetTimerInterval+0x44>
		timer->requested_time = interval;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	60da      	str	r2, [r3, #12]
		return FT_OK;
 80021ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f2:	e000      	b.n	80021f6 <FT_SetTimerInterval+0x46>
	}
	return res;
 80021f4:	8afb      	ldrh	r3, [r7, #22]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <FT_StartTimer>:
{
	return FT_SetTimerPauseState(ft, timer_id, 0);
}

FT_ERR FT_StartTimer(FT_base* ft, uint16_t timer_id)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
 8002206:	460b      	mov	r3, r1
 8002208:	807b      	strh	r3, [r7, #2]
	if(ft == NULL) return FT_INVALID_ARGUMENT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <FT_StartTimer+0x18>
 8002210:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002214:	e01f      	b.n	8002256 <FT_StartTimer+0x58>
	ft_def* timer = NULL;
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
	FT_ERR res = FT_GetTimer_(ft, timer_id, &timer);
 800221a:	f107 0208 	add.w	r2, r7, #8
 800221e:	887b      	ldrh	r3, [r7, #2]
 8002220:	4619      	mov	r1, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f996 	bl	8002554 <FT_GetTimer_>
 8002228:	4603      	mov	r3, r0
 800222a:	81fb      	strh	r3, [r7, #14]
	if (res == FT_OK) {
 800222c:	89fb      	ldrh	r3, [r7, #14]
 800222e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002232:	d10f      	bne.n	8002254 <FT_StartTimer+0x56>
		timer->elapsed_time = 0;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2200      	movs	r2, #0
 8002238:	611a      	str	r2, [r3, #16]
		timer->trigger_counter = 0;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
		timer->last_error = FT_OK;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002246:	829a      	strh	r2, [r3, #20]
		timer->paused = 0;
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2200      	movs	r2, #0
 800224c:	711a      	strb	r2, [r3, #4]
		return FT_OK;
 800224e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002252:	e000      	b.n	8002256 <FT_StartTimer+0x58>
	}
	return res;
 8002254:	89fb      	ldrh	r3, [r7, #14]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <FT_StopTimer>:

FT_ERR FT_StopTimer(FT_base* ft, uint16_t timer_id)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	460b      	mov	r3, r1
 8002268:	807b      	strh	r3, [r7, #2]
	if (ft == NULL) return FT_INVALID_ARGUMENT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d102      	bne.n	8002276 <FT_StopTimer+0x18>
 8002270:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002274:	e01f      	b.n	80022b6 <FT_StopTimer+0x58>
	ft_def *timer = NULL;
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
	FT_ERR res = FT_GetTimer_(ft, timer_id, &timer);
 800227a:	f107 0208 	add.w	r2, r7, #8
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f966 	bl	8002554 <FT_GetTimer_>
 8002288:	4603      	mov	r3, r0
 800228a:	81fb      	strh	r3, [r7, #14]
	if (res == FT_OK) {
 800228c:	89fb      	ldrh	r3, [r7, #14]
 800228e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002292:	d10f      	bne.n	80022b4 <FT_StopTimer+0x56>
		timer->elapsed_time = 0;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]
		timer->trigger_counter = 0;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
		timer->last_error = FT_OK;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022a6:	829a      	strh	r2, [r3, #20]
		timer->paused = 1;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2201      	movs	r2, #1
 80022ac:	711a      	strb	r2, [r3, #4]
		return FT_OK;
 80022ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022b2:	e000      	b.n	80022b6 <FT_StopTimer+0x58>
	}
	return res;
 80022b4:	89fb      	ldrh	r3, [r7, #14]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <FT_NewTimer>:

FT_ERR FT_NewTimer(FT_base* ft, uint32_t time, uint16_t priority, uint16_t* timer_id)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	60f8      	str	r0, [r7, #12]
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	603b      	str	r3, [r7, #0]
 80022ca:	4613      	mov	r3, r2
 80022cc:	80fb      	strh	r3, [r7, #6]
	if(ft == NULL || ft->timers_count == UINT16_MAX - 1) return FT_INVALID_ARGUMENT;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d005      	beq.n	80022e0 <FT_NewTimer+0x22>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022d8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80022dc:	4293      	cmp	r3, r2
 80022de:	d102      	bne.n	80022e6 <FT_NewTimer+0x28>
 80022e0:	f241 0303 	movw	r3, #4099	@ 0x1003
 80022e4:	e05c      	b.n	80023a0 <FT_NewTimer+0xe2>


	if(ft->timers_count == ft->timers_size)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d120      	bne.n	8002334 <FT_NewTimer+0x76>
	{
		if(ft->timers_size == UINT16_MAX) return FT_OUT_OF_MEMORY;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80022f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d102      	bne.n	8002304 <FT_NewTimer+0x46>
 80022fe:	f241 0302 	movw	r3, #4098	@ 0x1002
 8002302:	e04d      	b.n	80023a0 <FT_NewTimer+0xe2>

		ft->timers_size *= 2;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	b29a      	uxth	r2, r3
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	879a      	strh	r2, [r3, #60]	@ 0x3c
		ft->timers = (ft_def**)realloc(ft->timers, sizeof(ft_def*) * ft->timers_size);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4619      	mov	r1, r3
 800231c:	4610      	mov	r0, r2
 800231e:	f005 f869 	bl	80073f4 <realloc>
 8002322:	4602      	mov	r2, r0
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	639a      	str	r2, [r3, #56]	@ 0x38
		if(ft->timers == NULL) return 0;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <FT_NewTimer+0x76>
 8002330:	2300      	movs	r3, #0
 8002332:	e035      	b.n	80023a0 <FT_NewTimer+0xe2>
	}

	ft_def* new_timer = (ft_def*)malloc(sizeof(ft_def));
 8002334:	2018      	movs	r0, #24
 8002336:	f004 ff9f 	bl	8007278 <malloc>
 800233a:	4603      	mov	r3, r0
 800233c:	617b      	str	r3, [r7, #20]
	if(new_timer == NULL) return FT_OUT_OF_MEMORY;
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d102      	bne.n	800234a <FT_NewTimer+0x8c>
 8002344:	f241 0302 	movw	r3, #4098	@ 0x1002
 8002348:	e02a      	b.n	80023a0 <FT_NewTimer+0xe2>

	memset(new_timer, 0, sizeof(ft_def));
 800234a:	2218      	movs	r2, #24
 800234c:	2100      	movs	r1, #0
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f005 ff8e 	bl	8008270 <memset>

	new_timer->timer_id = FT_NewTimerID_(ft);
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f87e 	bl	8002456 <FT_NewTimerID_>
 800235a:	4603      	mov	r3, r0
 800235c:	461a      	mov	r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	801a      	strh	r2, [r3, #0]
	new_timer->requested_time = time;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	60da      	str	r2, [r3, #12]
	new_timer->last_error = FT_OK;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800236e:	829a      	strh	r2, [r3, #20]
	new_timer->priority = priority;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	88fa      	ldrh	r2, [r7, #6]
 8002374:	805a      	strh	r2, [r3, #2]

	if(timer_id != NULL) *timer_id = new_timer->timer_id;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <FT_NewTimer+0xc6>
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	881a      	ldrh	r2, [r3, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	801a      	strh	r2, [r3, #0]

	ft->timers[ft->timers_count++] = new_timer;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800238c:	1c59      	adds	r1, r3, #1
 800238e:	b288      	uxth	r0, r1
 8002390:	68f9      	ldr	r1, [r7, #12]
 8002392:	87c8      	strh	r0, [r1, #62]	@ 0x3e
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	601a      	str	r2, [r3, #0]
	return FT_OK;
 800239c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <FT_KillTimer>:

FT_ERR FT_KillTimer(FT_base* ft, uint16_t id)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	460b      	mov	r3, r1
 80023b2:	807b      	strh	r3, [r7, #2]
	if(ft == NULL) return FT_INVALID_ARGUMENT;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d102      	bne.n	80023c0 <FT_KillTimer+0x18>
 80023ba:	f241 0303 	movw	r3, #4099	@ 0x1003
 80023be:	e046      	b.n	800244e <FT_KillTimer+0xa6>
	for(uint16_t i = 0; i < ft->timers_count; i++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	81fb      	strh	r3, [r7, #14]
 80023c4:	e03c      	b.n	8002440 <FT_KillTimer+0x98>
	{
		if(ft->timers[i]->timer_id == id) {
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023ca:	89fb      	ldrh	r3, [r7, #14]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	887a      	ldrh	r2, [r7, #2]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d12f      	bne.n	800243a <FT_KillTimer+0x92>
			free(ft->timers[i]);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023de:	89fb      	ldrh	r3, [r7, #14]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 ff4e 	bl	8007288 <free>
			ft->timers_count--;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
			if(ft->timers_count && i < ft->timers_count)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d019      	beq.n	8002434 <FT_KillTimer+0x8c>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002404:	89fa      	ldrh	r2, [r7, #14]
 8002406:	429a      	cmp	r2, r3
 8002408:	d214      	bcs.n	8002434 <FT_KillTimer+0x8c>
			{
				// Swap empty index with last timer
				ft->timers[i] = ft->timers[ft->timers_count];
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	441a      	add	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800241a:	89fb      	ldrh	r3, [r7, #14]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	601a      	str	r2, [r3, #0]
				ft->timers[ft->timers_count] = NULL;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4413      	add	r3, r2
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
			}
			return FT_OK;
 8002434:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002438:	e009      	b.n	800244e <FT_KillTimer+0xa6>
	for(uint16_t i = 0; i < ft->timers_count; i++)
 800243a:	89fb      	ldrh	r3, [r7, #14]
 800243c:	3301      	adds	r3, #1
 800243e:	81fb      	strh	r3, [r7, #14]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002444:	89fa      	ldrh	r2, [r7, #14]
 8002446:	429a      	cmp	r2, r3
 8002448:	d3bd      	bcc.n	80023c6 <FT_KillTimer+0x1e>
		}
	}
	return FT_INVALID_ID;
 800244a:	f241 0305 	movw	r3, #4101	@ 0x1005
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <FT_NewTimerID_>:

uint16_t FT_NewTimerID_(FT_base* ft)
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
	if(ft == NULL || ft->timers_count == UINT16_MAX - 1) return 0;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <FT_NewTimerID_+0x1a>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002468:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800246c:	4293      	cmp	r3, r2
 800246e:	d101      	bne.n	8002474 <FT_NewTimerID_+0x1e>
 8002470:	2300      	movs	r3, #0
 8002472:	e069      	b.n	8002548 <FT_NewTimerID_+0xf2>

	// get highest id and increment it
	uint16_t max_id = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	81fb      	strh	r3, [r7, #14]
	uint16_t timer_i;
	for(timer_i = 0; timer_i < ft->timers_count; timer_i++)
 8002478:	2300      	movs	r3, #0
 800247a:	81bb      	strh	r3, [r7, #12]
 800247c:	e01e      	b.n	80024bc <FT_NewTimerID_+0x66>
	{
		if(ft->timers[timer_i] == NULL) continue;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002482:	89bb      	ldrh	r3, [r7, #12]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d012      	beq.n	80024b4 <FT_NewTimerID_+0x5e>
		if(ft->timers[timer_i]->timer_id >= max_id) {
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002492:	89bb      	ldrh	r3, [r7, #12]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	89fa      	ldrh	r2, [r7, #14]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d809      	bhi.n	80024b6 <FT_NewTimerID_+0x60>
			max_id = ft->timers[timer_i]->timer_id;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024a6:	89bb      	ldrh	r3, [r7, #12]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	81fb      	strh	r3, [r7, #14]
 80024b2:	e000      	b.n	80024b6 <FT_NewTimerID_+0x60>
		if(ft->timers[timer_i] == NULL) continue;
 80024b4:	bf00      	nop
	for(timer_i = 0; timer_i < ft->timers_count; timer_i++)
 80024b6:	89bb      	ldrh	r3, [r7, #12]
 80024b8:	3301      	adds	r3, #1
 80024ba:	81bb      	strh	r3, [r7, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80024c0:	89ba      	ldrh	r2, [r7, #12]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d3db      	bcc.n	800247e <FT_NewTimerID_+0x28>
		}
	}
	if(max_id < UINT16_MAX) return max_id + 1;
 80024c6:	89fb      	ldrh	r3, [r7, #14]
 80024c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d003      	beq.n	80024d8 <FT_NewTimerID_+0x82>
 80024d0:	89fb      	ldrh	r3, [r7, #14]
 80024d2:	3301      	adds	r3, #1
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	e037      	b.n	8002548 <FT_NewTimerID_+0xf2>

	// if ran out of new ids, try to reuse old one
	uint16_t new_id = 1;
 80024d8:	2301      	movs	r3, #1
 80024da:	817b      	strh	r3, [r7, #10]
	uint16_t timers_compared = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	813b      	strh	r3, [r7, #8]
	timer_i = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	81bb      	strh	r3, [r7, #12]
	while(timers_compared < ft->timers_count)
 80024e4:	e021      	b.n	800252a <FT_NewTimerID_+0xd4>
	{
		if(ft->timers[timer_i] == NULL) continue;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024ea:	89bb      	ldrh	r3, [r7, #12]
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d018      	beq.n	8002528 <FT_NewTimerID_+0xd2>
		if(ft->timers[timer_i]->timer_id == new_id)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024fa:	89bb      	ldrh	r3, [r7, #12]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	881b      	ldrh	r3, [r3, #0]
 8002504:	897a      	ldrh	r2, [r7, #10]
 8002506:	429a      	cmp	r2, r3
 8002508:	d10a      	bne.n	8002520 <FT_NewTimerID_+0xca>
		{
			new_id++;
 800250a:	897b      	ldrh	r3, [r7, #10]
 800250c:	3301      	adds	r3, #1
 800250e:	817b      	strh	r3, [r7, #10]
			if(new_id == UINT16_MAX) break;
 8002510:	897b      	ldrh	r3, [r7, #10]
 8002512:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002516:	4293      	cmp	r3, r2
 8002518:	d00d      	beq.n	8002536 <FT_NewTimerID_+0xe0>
			timer_i = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	81bb      	strh	r3, [r7, #12]
 800251e:	e004      	b.n	800252a <FT_NewTimerID_+0xd4>
		}
		else timer_i++;
 8002520:	89bb      	ldrh	r3, [r7, #12]
 8002522:	3301      	adds	r3, #1
 8002524:	81bb      	strh	r3, [r7, #12]
 8002526:	e000      	b.n	800252a <FT_NewTimerID_+0xd4>
		if(ft->timers[timer_i] == NULL) continue;
 8002528:	bf00      	nop
	while(timers_compared < ft->timers_count)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800252e:	893a      	ldrh	r2, [r7, #8]
 8002530:	429a      	cmp	r2, r3
 8002532:	d3d8      	bcc.n	80024e6 <FT_NewTimerID_+0x90>
 8002534:	e000      	b.n	8002538 <FT_NewTimerID_+0xe2>
			if(new_id == UINT16_MAX) break;
 8002536:	bf00      	nop
	}
	if(new_id < UINT16_MAX) return new_id;
 8002538:	897b      	ldrh	r3, [r7, #10]
 800253a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800253e:	4293      	cmp	r3, r2
 8002540:	d001      	beq.n	8002546 <FT_NewTimerID_+0xf0>
 8002542:	897b      	ldrh	r3, [r7, #10]
 8002544:	e000      	b.n	8002548 <FT_NewTimerID_+0xf2>
	return 0;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <FT_GetTimer_>:

FT_ERR FT_GetTimer_(FT_base* ft, uint16_t timer_id, ft_def** timer)
{
 8002554:	b480      	push	{r7}
 8002556:	b087      	sub	sp, #28
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	460b      	mov	r3, r1
 800255e:	607a      	str	r2, [r7, #4]
 8002560:	817b      	strh	r3, [r7, #10]
	if(ft == NULL || timer == NULL) return FT_INVALID_ARGUMENT;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <FT_GetTimer_+0x1a>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d102      	bne.n	8002574 <FT_GetTimer_+0x20>
 800256e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002572:	e021      	b.n	80025b8 <FT_GetTimer_+0x64>

	for(uint16_t i = 0; i < ft->timers_count; i++)
 8002574:	2300      	movs	r3, #0
 8002576:	82fb      	strh	r3, [r7, #22]
 8002578:	e017      	b.n	80025aa <FT_GetTimer_+0x56>
	{
		if(ft->timers[i]->timer_id == timer_id)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800257e:	8afb      	ldrh	r3, [r7, #22]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	897a      	ldrh	r2, [r7, #10]
 800258a:	429a      	cmp	r2, r3
 800258c:	d10a      	bne.n	80025a4 <FT_GetTimer_+0x50>
		{
			*timer = ft->timers[i];
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002592:	8afb      	ldrh	r3, [r7, #22]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	601a      	str	r2, [r3, #0]
			return FT_OK;
 800259e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025a2:	e009      	b.n	80025b8 <FT_GetTimer_+0x64>
	for(uint16_t i = 0; i < ft->timers_count; i++)
 80025a4:	8afb      	ldrh	r3, [r7, #22]
 80025a6:	3301      	adds	r3, #1
 80025a8:	82fb      	strh	r3, [r7, #22]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025ae:	8afa      	ldrh	r2, [r7, #22]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d3e2      	bcc.n	800257a <FT_GetTimer_+0x26>
		}
	}
	return FT_INVALID_ID;
 80025b4:	f241 0305 	movw	r3, #4101	@ 0x1005
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <FT_PrintConfiguration>:

FT_ERR FT_PrintConfiguration(FT_base* ft, char* str, uint32_t max_length)
{
 80025c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025c8:	b093      	sub	sp, #76	@ 0x4c
 80025ca:	af0c      	add	r7, sp, #48	@ 0x30
 80025cc:	6178      	str	r0, [r7, #20]
 80025ce:	6139      	str	r1, [r7, #16]
 80025d0:	60fa      	str	r2, [r7, #12]
	if(ft == NULL || str == NULL || max_length == 0) return FT_INVALID_ARGUMENT;
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <FT_PrintConfiguration+0x20>
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <FT_PrintConfiguration+0x20>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <FT_PrintConfiguration+0x26>
 80025e4:	f241 0303 	movw	r3, #4099	@ 0x1003
 80025e8:	e040      	b.n	800266c <FT_PrintConfiguration+0xa8>
	str[0] = '\0';
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
	snprintf(str, max_length, "srcfq:%lu\r\n"
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
						"psc:%lu/%lu\r\n"
						"arr:%lu/%lu\r\n"
						"cycl/fq/ms:%u/%lu/%lu\r\n"
						"stable:%c\r\n",
			ft->config.src_freq,
			ft->config.frequency, ft->config.des_freq,
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	695b      	ldr	r3, [r3, #20]
	snprintf(str, max_length, "srcfq:%lu\r\n"
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fd ffb4 	bl	8000568 <__aeabi_f2d>
 8002600:	4680      	mov	r8, r0
 8002602:	4689      	mov	r9, r1
 8002604:	6979      	ldr	r1, [r7, #20]
 8002606:	6909      	ldr	r1, [r1, #16]
			ft->config.prescaler + 1, ft->config.max_prescaler,
 8002608:	6978      	ldr	r0, [r7, #20]
 800260a:	69c0      	ldr	r0, [r0, #28]
	snprintf(str, max_length, "srcfq:%lu\r\n"
 800260c:	3001      	adds	r0, #1
 800260e:	697c      	ldr	r4, [r7, #20]
 8002610:	6a24      	ldr	r4, [r4, #32]
 8002612:	697d      	ldr	r5, [r7, #20]
 8002614:	6a6d      	ldr	r5, [r5, #36]	@ 0x24
 8002616:	697e      	ldr	r6, [r7, #20]
 8002618:	6ab6      	ldr	r6, [r6, #40]	@ 0x28
			ft->config.divider, ft->config.counter_period,
			ft->config.cycle_length, ft->config.cycle_freq, ft->config.cycle_ms,
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	@ 0x2c
	snprintf(str, max_length, "srcfq:%lu\r\n"
 8002620:	4662      	mov	r2, ip
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800262c:	603b      	str	r3, [r7, #0]
			ft->config.is_stable ? 'T' : 'F'
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f893 c018 	ldrb.w	ip, [r3, #24]
	snprintf(str, max_length, "srcfq:%lu\r\n"
 8002634:	f1bc 0f00 	cmp.w	ip, #0
 8002638:	d001      	beq.n	800263e <FT_PrintConfiguration+0x7a>
 800263a:	2354      	movs	r3, #84	@ 0x54
 800263c:	e000      	b.n	8002640 <FT_PrintConfiguration+0x7c>
 800263e:	2346      	movs	r3, #70	@ 0x46
 8002640:	930a      	str	r3, [sp, #40]	@ 0x28
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	9309      	str	r3, [sp, #36]	@ 0x24
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	9308      	str	r3, [sp, #32]
 800264a:	4613      	mov	r3, r2
 800264c:	9307      	str	r3, [sp, #28]
 800264e:	9606      	str	r6, [sp, #24]
 8002650:	9505      	str	r5, [sp, #20]
 8002652:	9404      	str	r4, [sp, #16]
 8002654:	9003      	str	r0, [sp, #12]
 8002656:	9102      	str	r1, [sp, #8]
 8002658:	e9cd 8900 	strd	r8, r9, [sp]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4a06      	ldr	r2, [pc, #24]	@ (8002678 <FT_PrintConfiguration+0xb4>)
 8002660:	68f9      	ldr	r1, [r7, #12]
 8002662:	6938      	ldr	r0, [r7, #16]
 8002664:	f005 fcf8 	bl	8008058 <sniprintf>
			);
	return FT_OK;
 8002668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 800266c:	4618      	mov	r0, r3
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002676:	bf00      	nop
 8002678:	0800a1e8 	.word	0x0800a1e8

0800267c <FT_GetType>:

	return 0;
}

ft_type FT_GetType(TIM_HandleTypeDef* htim)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	if (
#ifdef TIM1
			htim->Instance == TIM1 ||
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
	if (
 8002688:	4a28      	ldr	r2, [pc, #160]	@ (800272c <FT_GetType+0xb0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <FT_GetType+0x1c>
#endif
#ifdef TIM8
			htim->Instance == TIM8 ||
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a27      	ldr	r2, [pc, #156]	@ (8002730 <FT_GetType+0xb4>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <FT_GetType+0x20>
#endif
			0)
	{
		return FT_TYPE_ADVANCED;
 8002698:	2305      	movs	r3, #5
 800269a:	e040      	b.n	800271e <FT_GetType+0xa2>
	}
	else if (
#ifdef TIM2
			htim->Instance == TIM2 ||
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
	else if (
 80026a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026a4:	d02c      	beq.n	8002700 <FT_GetType+0x84>
#endif
#ifdef TIM3
			htim->Instance == TIM3 ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM2 ||
 80026aa:	4a22      	ldr	r2, [pc, #136]	@ (8002734 <FT_GetType+0xb8>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d027      	beq.n	8002700 <FT_GetType+0x84>
#endif
#ifdef TIM4
			htim->Instance == TIM4 ||
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM3 ||
 80026b4:	4a20      	ldr	r2, [pc, #128]	@ (8002738 <FT_GetType+0xbc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d022      	beq.n	8002700 <FT_GetType+0x84>
#endif
#ifdef TIM5
			htim->Instance == TIM5 ||
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM4 ||
 80026be:	4a1f      	ldr	r2, [pc, #124]	@ (800273c <FT_GetType+0xc0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d01d      	beq.n	8002700 <FT_GetType+0x84>
#endif
#ifdef TIM9
			htim->Instance == TIM9 ||
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM5 ||
 80026c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002740 <FT_GetType+0xc4>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d018      	beq.n	8002700 <FT_GetType+0x84>
#endif
#ifdef TIM10
			htim->Instance == TIM10 ||
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM9 ||
 80026d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002744 <FT_GetType+0xc8>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d013      	beq.n	8002700 <FT_GetType+0x84>
#endif
#ifdef TIM11
			htim->Instance == TIM11 ||
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM10 ||
 80026dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002748 <FT_GetType+0xcc>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00e      	beq.n	8002700 <FT_GetType+0x84>
#endif
#ifdef TIM12
			htim->Instance == TIM12 ||
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM11 ||
 80026e6:	4a19      	ldr	r2, [pc, #100]	@ (800274c <FT_GetType+0xd0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d009      	beq.n	8002700 <FT_GetType+0x84>
#endif
#ifdef TIM13
			htim->Instance == TIM13 ||
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM12 ||
 80026f0:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <FT_GetType+0xd4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <FT_GetType+0x84>
#endif
#ifdef TIM14
			htim->Instance == TIM14 ||
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a16      	ldr	r2, [pc, #88]	@ (8002754 <FT_GetType+0xd8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d101      	bne.n	8002704 <FT_GetType+0x88>
#ifdef TIM17
			htim->Instance == TIM17 ||
#endif
			0)
	{
		return FT_TYPE_GP;
 8002700:	2302      	movs	r3, #2
 8002702:	e00c      	b.n	800271e <FT_GetType+0xa2>
	}
	else if (
#ifdef TIM6
			htim->Instance == TIM6 ||
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
	else if (
 8002708:	4a13      	ldr	r2, [pc, #76]	@ (8002758 <FT_GetType+0xdc>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d004      	beq.n	8002718 <FT_GetType+0x9c>
#endif
#ifdef TIM7
			htim->Instance == TIM7 ||
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a12      	ldr	r2, [pc, #72]	@ (800275c <FT_GetType+0xe0>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d101      	bne.n	800271c <FT_GetType+0xa0>
#endif
			0)
	{
		return FT_TYPE_BASIC;
 8002718:	2303      	movs	r3, #3
 800271a:	e000      	b.n	800271e <FT_GetType+0xa2>
	}
	return FT_TYPE_UNKNOWN;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40010000 	.word	0x40010000
 8002730:	40010400 	.word	0x40010400
 8002734:	40000400 	.word	0x40000400
 8002738:	40000800 	.word	0x40000800
 800273c:	40000c00 	.word	0x40000c00
 8002740:	40014000 	.word	0x40014000
 8002744:	40014400 	.word	0x40014400
 8002748:	40014800 	.word	0x40014800
 800274c:	40001800 	.word	0x40001800
 8002750:	40001c00 	.word	0x40001c00
 8002754:	40002000 	.word	0x40002000
 8002758:	40001000 	.word	0x40001000
 800275c:	40001400 	.word	0x40001400

08002760 <FT_GetSource>:

ft_source FT_GetSource(TIM_HandleTypeDef* htim)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	if(
#ifdef TIM2
			htim->Instance == TIM2 ||
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
	if(
 800276c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002770:	d027      	beq.n	80027c2 <FT_GetSource+0x62>
#endif
#ifdef TIM3
			htim->Instance == TIM3 ||
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM2 ||
 8002776:	4a25      	ldr	r2, [pc, #148]	@ (800280c <FT_GetSource+0xac>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d022      	beq.n	80027c2 <FT_GetSource+0x62>
#endif
#ifdef TIM4
			htim->Instance == TIM4 ||
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM3 ||
 8002780:	4a23      	ldr	r2, [pc, #140]	@ (8002810 <FT_GetSource+0xb0>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d01d      	beq.n	80027c2 <FT_GetSource+0x62>
#endif
#ifdef TIM5
			htim->Instance == TIM5 ||
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM4 ||
 800278a:	4a22      	ldr	r2, [pc, #136]	@ (8002814 <FT_GetSource+0xb4>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d018      	beq.n	80027c2 <FT_GetSource+0x62>
#endif
#ifdef TIM6
			htim->Instance == TIM6 ||
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM5 ||
 8002794:	4a20      	ldr	r2, [pc, #128]	@ (8002818 <FT_GetSource+0xb8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <FT_GetSource+0x62>
#endif
#ifdef TIM7
			htim->Instance == TIM7 ||
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM6 ||
 800279e:	4a1f      	ldr	r2, [pc, #124]	@ (800281c <FT_GetSource+0xbc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00e      	beq.n	80027c2 <FT_GetSource+0x62>
#endif
#ifdef TIM12
			htim->Instance == TIM12 ||
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM7 ||
 80027a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002820 <FT_GetSource+0xc0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d009      	beq.n	80027c2 <FT_GetSource+0x62>
#endif
#ifdef TIM13
			htim->Instance == TIM13 ||
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM12 ||
 80027b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002824 <FT_GetSource+0xc4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d004      	beq.n	80027c2 <FT_GetSource+0x62>
#endif
#ifdef TIM14
			htim->Instance == TIM14 ||
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a1a      	ldr	r2, [pc, #104]	@ (8002828 <FT_GetSource+0xc8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <FT_GetSource+0x66>
#endif
			0)
	{
		return FT_SRC_APB1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e01b      	b.n	80027fe <FT_GetSource+0x9e>
	}
	else if(
#ifdef TIM1
			htim->Instance == TIM1 ||
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
	else if(
 80027ca:	4a18      	ldr	r2, [pc, #96]	@ (800282c <FT_GetSource+0xcc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <FT_GetSource+0x98>
#endif
#ifdef TIM8
			htim->Instance == TIM8 ||
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM1 ||
 80027d4:	4a16      	ldr	r2, [pc, #88]	@ (8002830 <FT_GetSource+0xd0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00e      	beq.n	80027f8 <FT_GetSource+0x98>
#endif
#ifdef TIM9
			htim->Instance == TIM9 ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM8 ||
 80027de:	4a15      	ldr	r2, [pc, #84]	@ (8002834 <FT_GetSource+0xd4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d009      	beq.n	80027f8 <FT_GetSource+0x98>
#endif
#ifdef TIM10
			htim->Instance == TIM10 ||
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM9 ||
 80027e8:	4a13      	ldr	r2, [pc, #76]	@ (8002838 <FT_GetSource+0xd8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <FT_GetSource+0x98>
#endif
#ifdef TIM11
			htim->Instance == TIM11 ||
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a12      	ldr	r2, [pc, #72]	@ (800283c <FT_GetSource+0xdc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d101      	bne.n	80027fc <FT_GetSource+0x9c>
#ifdef TIM17
			htim->Instance == TIM17 ||
#endif
		0)
	{
		return FT_SRC_APB2;
 80027f8:	2302      	movs	r3, #2
 80027fa:	e000      	b.n	80027fe <FT_GetSource+0x9e>
	}
	return FT_SRC_UNKNOWN;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40000400 	.word	0x40000400
 8002810:	40000800 	.word	0x40000800
 8002814:	40000c00 	.word	0x40000c00
 8002818:	40001000 	.word	0x40001000
 800281c:	40001400 	.word	0x40001400
 8002820:	40001800 	.word	0x40001800
 8002824:	40001c00 	.word	0x40001c00
 8002828:	40002000 	.word	0x40002000
 800282c:	40010000 	.word	0x40010000
 8002830:	40010400 	.word	0x40010400
 8002834:	40014000 	.word	0x40014000
 8002838:	40014400 	.word	0x40014400
 800283c:	40014800 	.word	0x40014800

08002840 <FT_GetResolution>:

ft_resolution FT_GetResolution(TIM_HandleTypeDef* htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
	if(
#ifdef TIM1
		htim->Instance == TIM1 ||
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
	if(
 800284c:	4a27      	ldr	r2, [pc, #156]	@ (80028ec <FT_GetResolution+0xac>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d036      	beq.n	80028c0 <FT_GetResolution+0x80>
#endif
#ifdef TIM3
		htim->Instance == TIM3 ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM1 ||
 8002856:	4a26      	ldr	r2, [pc, #152]	@ (80028f0 <FT_GetResolution+0xb0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d031      	beq.n	80028c0 <FT_GetResolution+0x80>
#endif
#ifdef TIM4
		htim->Instance == TIM4 ||
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM3 ||
 8002860:	4a24      	ldr	r2, [pc, #144]	@ (80028f4 <FT_GetResolution+0xb4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d02c      	beq.n	80028c0 <FT_GetResolution+0x80>
#endif
#ifdef TIM6
		htim->Instance == TIM6 ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM4 ||
 800286a:	4a23      	ldr	r2, [pc, #140]	@ (80028f8 <FT_GetResolution+0xb8>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d027      	beq.n	80028c0 <FT_GetResolution+0x80>
#endif
#ifdef TIM7
		htim->Instance == TIM7 ||
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM6 ||
 8002874:	4a21      	ldr	r2, [pc, #132]	@ (80028fc <FT_GetResolution+0xbc>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d022      	beq.n	80028c0 <FT_GetResolution+0x80>
#endif
#ifdef TIM8
		htim->Instance == TIM8 ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM7 ||
 800287e:	4a20      	ldr	r2, [pc, #128]	@ (8002900 <FT_GetResolution+0xc0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d01d      	beq.n	80028c0 <FT_GetResolution+0x80>
#endif
#ifdef TIM9
		htim->Instance == TIM9 ||
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM8 ||
 8002888:	4a1e      	ldr	r2, [pc, #120]	@ (8002904 <FT_GetResolution+0xc4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d018      	beq.n	80028c0 <FT_GetResolution+0x80>
#endif
#ifdef TIM10
		htim->Instance == TIM10 ||
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM9 ||
 8002892:	4a1d      	ldr	r2, [pc, #116]	@ (8002908 <FT_GetResolution+0xc8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d013      	beq.n	80028c0 <FT_GetResolution+0x80>
#endif
#ifdef TIM11
		htim->Instance == TIM11 ||
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM10 ||
 800289c:	4a1b      	ldr	r2, [pc, #108]	@ (800290c <FT_GetResolution+0xcc>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00e      	beq.n	80028c0 <FT_GetResolution+0x80>
#endif
#ifdef TIM12
		htim->Instance == TIM12 ||
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM11 ||
 80028a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002910 <FT_GetResolution+0xd0>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d009      	beq.n	80028c0 <FT_GetResolution+0x80>
#endif
#ifdef TIM13
		htim->Instance == TIM13 ||
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM12 ||
 80028b0:	4a18      	ldr	r2, [pc, #96]	@ (8002914 <FT_GetResolution+0xd4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d004      	beq.n	80028c0 <FT_GetResolution+0x80>
#endif
#ifdef TIM14
		htim->Instance == TIM14 ||
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a17      	ldr	r2, [pc, #92]	@ (8002918 <FT_GetResolution+0xd8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d101      	bne.n	80028c4 <FT_GetResolution+0x84>
#ifdef TIM17
		htim->Instance == TIM17 ||
#endif
		0)
	{
		return FT_RES_16;
 80028c0:	2302      	movs	r3, #2
 80028c2:	e00c      	b.n	80028de <FT_GetResolution+0x9e>
	}
	else if(
#ifdef TIM2
		htim->Instance == TIM2 ||
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
	else if(
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028cc:	d004      	beq.n	80028d8 <FT_GetResolution+0x98>
#endif
#ifdef TIM5
		htim->Instance == TIM5 ||
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a12      	ldr	r2, [pc, #72]	@ (800291c <FT_GetResolution+0xdc>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <FT_GetResolution+0x9c>
#endif
		0)
	{
		return FT_RES_32;
 80028d8:	2303      	movs	r3, #3
 80028da:	e000      	b.n	80028de <FT_GetResolution+0x9e>
	}
	return FT_RES_UNKNOWN;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40010000 	.word	0x40010000
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000800 	.word	0x40000800
 80028f8:	40001000 	.word	0x40001000
 80028fc:	40001400 	.word	0x40001400
 8002900:	40010400 	.word	0x40010400
 8002904:	40014000 	.word	0x40014000
 8002908:	40014400 	.word	0x40014400
 800290c:	40014800 	.word	0x40014800
 8002910:	40001800 	.word	0x40001800
 8002914:	40001c00 	.word	0x40001c00
 8002918:	40002000 	.word	0x40002000
 800291c:	40000c00 	.word	0x40000c00

08002920 <FT_GetPrescalerRange>:

ft_prescaler_range FT_GetPrescalerRange(TIM_HandleTypeDef* htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
#if defined(STM32H747xx) || defined(STM32F429xx)
	return FT_PRE_1_65536;
 8002928:	2301      	movs	r3, #1
#else
#error No prescaler values specified for current module!
#endif
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
	...

08002938 <FT_GetFrequency>:

uint32_t FT_GetFrequency(ft_source source)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
	if (source == FT_SRC_APB1) {
 8002942:	79fb      	ldrb	r3, [r7, #7]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d10d      	bne.n	8002964 <FT_GetFrequency+0x2c>
		uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 8002948:	f002 fdde 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 800294c:	60b8      	str	r0, [r7, #8]
#if defined(STM32H747xx)
		if((RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) == 0)
#else
		if((RCC->CFGR & RCC_CFGR_PPRE1) == 0)
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <FT_GetFrequency+0x58>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <FT_GetFrequency+0x26>
#endif
		{
			/* PCLK1 prescaler equal to 1 => TIMCLK = PCLK1 */
			return (pclk1);
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	e014      	b.n	8002988 <FT_GetFrequency+0x50>
		}
		else
		{
			/* PCLK1 prescaler different from 1 => TIMCLK = 2 * PCLK1 */
			return(2 * pclk1);
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	e011      	b.n	8002988 <FT_GetFrequency+0x50>
		}
	}
	else if (source == FT_SRC_APB2) {
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d10d      	bne.n	8002986 <FT_GetFrequency+0x4e>
		uint32_t pclk2 = HAL_RCC_GetPCLK2Freq();
 800296a:	f002 fde1 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 800296e:	60f8      	str	r0, [r7, #12]
#if defined(STM32H747xx)
		if((RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) == 0)
#else
		if((RCC->CFGR & RCC_CFGR_PPRE2) == 0)
 8002970:	4b07      	ldr	r3, [pc, #28]	@ (8002990 <FT_GetFrequency+0x58>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <FT_GetFrequency+0x48>
#endif
		{
			/* PCLK2 prescaler equal to 1 => TIMCLK = PCLK2 */
			return (pclk2);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	e003      	b.n	8002988 <FT_GetFrequency+0x50>
		}
		else
		{
			/* PCLK2 prescaler different from 1 => TIMCLK = 2 * PCLK2 */
			return(2 * pclk2);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	e000      	b.n	8002988 <FT_GetFrequency+0x50>
		}
	}
	return 0;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40023800 	.word	0x40023800

08002994 <FT_GetTimerConfiguration>:

FT_ERR FT_GetTimerConfiguration(ft_config* config) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b08e      	sub	sp, #56	@ 0x38
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
	if(config == NULL) return FT_INVALID_ARGUMENT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d102      	bne.n	80029a8 <FT_GetTimerConfiguration+0x14>
 80029a2:	f241 0303 	movw	r3, #4099	@ 0x1003
 80029a6:	e15b      	b.n	8002c60 <FT_GetTimerConfiguration+0x2cc>


	uint32_t src_freq = config->src_freq;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	623b      	str	r3, [r7, #32]
	uint32_t des_freq = config->des_freq;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	61fb      	str	r3, [r7, #28]
	uint32_t prescaler = 1;
 80029b4:	2301      	movs	r3, #1
 80029b6:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t max_prescaler = config->max_prescaler;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	61bb      	str	r3, [r7, #24]
	uint32_t divider = 1;
 80029be:	2301      	movs	r3, #1
 80029c0:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t counter_period = config->counter_period;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	617b      	str	r3, [r7, #20]


	if(max_prescaler == UINT32_MAX /*||
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ce:	d102      	bne.n	80029d6 <FT_GetTimerConfiguration+0x42>
			counter_period == UINT32_MAX*/) return FT_INVALID_ARGUMENT;
 80029d0:	f241 0303 	movw	r3, #4099	@ 0x1003
 80029d4:	e144      	b.n	8002c60 <FT_GetTimerConfiguration+0x2cc>

    float prescaler_divider = (float)src_freq / des_freq;
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	ee07 3a90 	vmov	s15, r3
 80029dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ee:	edc7 7a04 	vstr	s15, [r7, #16]

    if(des_freq > src_freq || prescaler_divider / counter_period >= max_prescaler ) {
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d812      	bhi.n	8002a20 <FT_GetTimerConfiguration+0x8c>
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	ee07 3a90 	vmov	s15, r3
 8002a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a04:	edd7 6a04 	vldr	s13, [r7, #16]
 8002a08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1e:	db02      	blt.n	8002a26 <FT_GetTimerConfiguration+0x92>
        return FT_IMPOSSIBLE_FREQUENCY;
 8002a20:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8002a24:	e11c      	b.n	8002c60 <FT_GetTimerConfiguration+0x2cc>
    }


    float current_freq, current_freq_diff, best_freq_diff = src_freq;
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	ee07 3a90 	vmov	s15, r3
 8002a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a30:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    uint32_t best_prescaler = 1, best_divider = 1;
 8002a34:	2301      	movs	r3, #1
 8002a36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a38:	2301      	movs	r3, #1
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24

    for (divider = 1; divider <= counter_period; divider++)
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a40:	e0bb      	b.n	8002bba <FT_GetTimerConfiguration+0x226>
    {
        for(prescaler = 1; prescaler <= max_prescaler; prescaler++)
 8002a42:	2301      	movs	r3, #1
 8002a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a46:	e0ae      	b.n	8002ba6 <FT_GetTimerConfiguration+0x212>
        {
            current_freq = (float)src_freq / (prescaler * divider);
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	ee07 3a90 	vmov	s15, r3
 8002a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	ee07 3a90 	vmov	s15, r3
 8002a5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a66:	edc7 7a03 	vstr	s15, [r7, #12]
            current_freq_diff = fabs(des_freq - current_freq);
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	ee07 3a90 	vmov	s15, r3
 8002a70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a7c:	eef0 7ae7 	vabs.f32	s15, s15
 8002a80:	edc7 7a02 	vstr	s15, [r7, #8]
            if(current_freq == des_freq)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a92:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	d165      	bne.n	8002b68 <FT_GetTimerConfiguration+0x1d4>
            {
                printf("Perfect hit!\r\n");
 8002a9c:	4872      	ldr	r0, [pc, #456]	@ (8002c68 <FT_GetTimerConfiguration+0x2d4>)
 8002a9e:	f005 fad3 	bl	8008048 <puts>

                config->is_stable = 1;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	741a      	strb	r2, [r3, #16]

                config->prescaler = prescaler - 1;
 8002aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aaa:	1e5a      	subs	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	615a      	str	r2, [r3, #20]
                config->divider = divider;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ab4:	61da      	str	r2, [r3, #28]
                config->counter_period = (int)(counter_period / divider) * divider;
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ac0:	fb03 f202 	mul.w	r2, r3, r2
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	621a      	str	r2, [r3, #32]

                config->frequency = (float)src_freq / (prescaler * divider);
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	ee07 3a90 	vmov	s15, r3
 8002ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ad4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	edc3 7a03 	vstr	s15, [r3, #12]
                config->cycle_length = counter_period / divider;
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	849a      	strh	r2, [r3, #36]	@ 0x24
                config->cycle_freq = ((float)src_freq / config->frequency) * config->cycle_length;
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b22:	ee17 2a90 	vmov	r2, s15
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	629a      	str	r2, [r3, #40]	@ 0x28
                config->cycle_ms = ((float)src_freq / config->frequency) * ((float)config->cycle_length / 1000);
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	ee07 3a90 	vmov	s15, r3
 8002b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b4a:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8002c6c <FT_GetTimerConfiguration+0x2d8>
 8002b4e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b5a:	ee17 2a90 	vmov	r2, s15
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	62da      	str	r2, [r3, #44]	@ 0x2c

                return FT_OK;
 8002b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b66:	e07b      	b.n	8002c60 <FT_GetTimerConfiguration+0x2cc>
            }
            else if(current_freq_diff < best_freq_diff)
 8002b68:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b6c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b78:	d506      	bpl.n	8002b88 <FT_GetTimerConfiguration+0x1f4>
            {
                best_freq_diff = current_freq_diff;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                best_prescaler = prescaler;
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b80:	62bb      	str	r3, [r7, #40]	@ 0x28
                best_divider = divider;
 8002b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b86:	e00b      	b.n	8002ba0 <FT_GetTimerConfiguration+0x20c>
            }
            else if(current_freq < des_freq)
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b92:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b9e:	d408      	bmi.n	8002bb2 <FT_GetTimerConfiguration+0x21e>
        for(prescaler = 1; prescaler <= max_prescaler; prescaler++)
 8002ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ba6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	f67f af4c 	bls.w	8002a48 <FT_GetTimerConfiguration+0xb4>
 8002bb0:	e000      	b.n	8002bb4 <FT_GetTimerConfiguration+0x220>
            {
                break;
 8002bb2:	bf00      	nop
    for (divider = 1; divider <= counter_period; divider++)
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	f67f af3f 	bls.w	8002a42 <FT_GetTimerConfiguration+0xae>
            }
        }
    }

    config->is_stable = 0;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	741a      	strb	r2, [r3, #16]

    config->prescaler = best_prescaler - 1;
 8002bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bcc:	1e5a      	subs	r2, r3, #1
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	615a      	str	r2, [r3, #20]
    config->divider = best_divider;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd6:	61da      	str	r2, [r3, #28]
    config->counter_period = (int)(counter_period / best_divider) * best_divider;
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be2:	fb03 f202 	mul.w	r2, r3, r2
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	621a      	str	r2, [r3, #32]

    config->frequency = (float)src_freq / (best_prescaler * best_divider);
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	ee07 3a90 	vmov	s15, r3
 8002bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf8:	fb02 f303 	mul.w	r3, r2, r3
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	edc3 7a03 	vstr	s15, [r3, #12]
    config->cycle_length = counter_period / best_divider;
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	849a      	strh	r2, [r3, #36]	@ 0x24
    config->cycle_freq = ((float)src_freq / config->frequency) * config->cycle_length;
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c44:	ee17 2a90 	vmov	r2, s15
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	629a      	str	r2, [r3, #40]	@ 0x28
    config->cycle_ms = config->cycle_freq / 1000;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	4a07      	ldr	r2, [pc, #28]	@ (8002c70 <FT_GetTimerConfiguration+0x2dc>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	099a      	lsrs	r2, r3, #6
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    return FT_OK;
 8002c5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3738      	adds	r7, #56	@ 0x38
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	0800a244 	.word	0x0800a244
 8002c6c:	447a0000 	.word	0x447a0000
 8002c70:	10624dd3 	.word	0x10624dd3

08002c74 <GSM_cmd>:
 */

#include "gsm.h"

GSM_ERR GSM_cmd(gsm_t *gsm, const uint8_t* cmd, uint16_t cmd_len)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]
	if(gsm == NULL) return GSM_INVALID_ARGUMENT;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d102      	bne.n	8002c8e <GSM_cmd+0x1a>
 8002c88:	f249 0303 	movw	r3, #36867	@ 0x9003
 8002c8c:	e019      	b.n	8002cc2 <GSM_cmd+0x4e>
	if(gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <GSM_cmd+0x2a>
 8002c98:	f249 0301 	movw	r3, #36865	@ 0x9001
 8002c9c:	e011      	b.n	8002cc2 <GSM_cmd+0x4e>
	HAL_StatusTypeDef status = UartRcvr_send(gsm->uart_rcvr_gsm, cmd, cmd_len);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8002ca4:	88fa      	ldrh	r2, [r7, #6]
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 ff57 	bl	8003b5c <UartRcvr_send>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	75fb      	strb	r3, [r7, #23]
	return status == HAL_OK ? GSM_OK : GSM_HAL_ERR;
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <GSM_cmd+0x4a>
 8002cb8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8002cbc:	e001      	b.n	8002cc2 <GSM_cmd+0x4e>
 8002cbe:	f249 0351 	movw	r3, #36945	@ 0x9051
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <GSM_str>:

GSM_ERR GSM_str(gsm_t *gsm, const char* str)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
	if (gsm == NULL) return GSM_INVALID_ARGUMENT;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <GSM_str+0x16>
 8002cda:	f249 0303 	movw	r3, #36867	@ 0x9003
 8002cde:	e012      	b.n	8002d06 <GSM_str+0x3c>
	if (gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <GSM_str+0x26>
 8002cea:	f249 0301 	movw	r3, #36865	@ 0x9001
 8002cee:	e00a      	b.n	8002d06 <GSM_str+0x3c>

	return GSM_cmd(gsm, (const uint8_t*)str, strlen(str));
 8002cf0:	6838      	ldr	r0, [r7, #0]
 8002cf2:	f7fd facd 	bl	8000290 <strlen>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6839      	ldr	r1, [r7, #0]
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff ffb8 	bl	8002c74 <GSM_cmd>
 8002d04:	4603      	mov	r3, r0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <GSM_Prints>:

GSM_ERR GSM_Prints(gsm_t *gsm, const char* str)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
	if (gsm == NULL) return GSM_INVALID_ARGUMENT;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <GSM_Prints+0x16>
 8002d1e:	f249 0303 	movw	r3, #36867	@ 0x9003
 8002d22:	e018      	b.n	8002d56 <GSM_Prints+0x48>
	if (gsm->uart_rcvr_debug == NULL) return GSM_OK;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <GSM_Prints+0x26>
 8002d2e:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8002d32:	e010      	b.n	8002d56 <GSM_Prints+0x48>

	HAL_StatusTypeDef status = UartRcvr_print(gsm->uart_rcvr_debug, str);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8002d3a:	6839      	ldr	r1, [r7, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 ff29 	bl	8003b94 <UartRcvr_print>
 8002d42:	4603      	mov	r3, r0
 8002d44:	73fb      	strb	r3, [r7, #15]
	return status == HAL_OK ? GSM_OK : GSM_HAL_ERR;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <GSM_Prints+0x44>
 8002d4c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8002d50:	e001      	b.n	8002d56 <GSM_Prints+0x48>
 8002d52:	f249 0351 	movw	r3, #36945	@ 0x9051
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <GSM_at>:


GSM_ERR GSM_at(gsm_t *gsm, const char* at_cmd, uint8_t response_expected, uint32_t timeout_ms)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	71fb      	strb	r3, [r7, #7]
	if (gsm == NULL) return GSM_INVALID_ARGUMENT;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <GSM_at+0x1c>
 8002d76:	f249 0303 	movw	r3, #36867	@ 0x9003
 8002d7a:	e041      	b.n	8002e00 <GSM_at+0xa0>
	if (gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d004      	beq.n	8002d90 <GSM_at+0x30>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d102      	bne.n	8002d96 <GSM_at+0x36>
 8002d90:	f249 0301 	movw	r3, #36865	@ 0x9001
 8002d94:	e034      	b.n	8002e00 <GSM_at+0xa0>

	GSM_Prints(gsm, ">> ");
 8002d96:	491c      	ldr	r1, [pc, #112]	@ (8002e08 <GSM_at+0xa8>)
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f7ff ffb8 	bl	8002d0e <GSM_Prints>
	GSM_Prints(gsm, at_cmd);
 8002d9e:	68b9      	ldr	r1, [r7, #8]
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f7ff ffb4 	bl	8002d0e <GSM_Prints>

	GSM_ClearResponse(gsm);
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fc3a 	bl	8003620 <GSM_ClearResponse>

	if (response_expected == 1)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d118      	bne.n	8002de4 <GSM_at+0x84>
	{
		gsm->flags.response_expected = 1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2201      	movs	r2, #1
 8002db6:	721a      	strb	r2, [r3, #8]
		FT_SetTimerInterval(gsm->ft, gsm->timers.timeout, timeout_ms * 10);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f8d3 02b0 	ldr.w	r0, [r3, #688]	@ 0x2b0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8ad9      	ldrh	r1, [r3, #22]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f7ff f9ef 	bl	80021b0 <FT_SetTimerInterval>
		FT_StartTimer(gsm->ft, gsm->timers.timeout);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f8d3 22b0 	ldr.w	r2, [r3, #688]	@ 0x2b0
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8adb      	ldrh	r3, [r3, #22]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f7ff fa0d 	bl	80021fe <FT_StartTimer>
	}

	GSM_ERR err = GSM_str(gsm, at_cmd);
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff ff6f 	bl	8002cca <GSM_str>
 8002dec:	4603      	mov	r3, r0
 8002dee:	82fb      	strh	r3, [r7, #22]
	if (err != GSM_OK) return err;
 8002df0:	8afb      	ldrh	r3, [r7, #22]
 8002df2:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 8002df6:	d001      	beq.n	8002dfc <GSM_at+0x9c>
 8002df8:	8afb      	ldrh	r3, [r7, #22]
 8002dfa:	e001      	b.n	8002e00 <GSM_at+0xa0>

	return GSM_OK;
 8002dfc:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	0800a254 	.word	0x0800a254

08002e0c <GSM_Feed>:



GSM_ERR GSM_Feed(gsm_t *gsm)
{
 8002e0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
	if (gsm == NULL) return GSM_INVALID_ARGUMENT;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <GSM_Feed+0x16>
 8002e1c:	f249 0303 	movw	r3, #36867	@ 0x9003
 8002e20:	e0d9      	b.n	8002fd6 <GSM_Feed+0x1ca>
	if (gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d004      	beq.n	8002e36 <GSM_Feed+0x2a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <GSM_Feed+0x30>
 8002e36:	f249 0301 	movw	r3, #36865	@ 0x9001
 8002e3a:	e0cc      	b.n	8002fd6 <GSM_Feed+0x1ca>

	GSM_ERR err = GSM_ProcessInput(gsm);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f913 	bl	8003068 <GSM_ProcessInput>
 8002e42:	4603      	mov	r3, r0
 8002e44:	81fb      	strh	r3, [r7, #14]
	if (err != GSM_OK) return err;
 8002e46:	89fb      	ldrh	r3, [r7, #14]
 8002e48:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 8002e4c:	d001      	beq.n	8002e52 <GSM_Feed+0x46>
 8002e4e:	89fb      	ldrh	r3, [r7, #14]
 8002e50:	e0c1      	b.n	8002fd6 <GSM_Feed+0x1ca>

	FT_ERR ft_err = FT_Feed(gsm->ft);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff f89a 	bl	8001f92 <FT_Feed>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	81bb      	strh	r3, [r7, #12]
	while (ft_err == FT_TRIGGERED && FT_GetTriggeredTimer(gsm->ft, &gsm->timer_id, &gsm->timer_trigger_count) == FT_OK)
 8002e62:	e08c      	b.n	8002f7e <GSM_Feed+0x172>
	{
		if(gsm->timer_id == gsm->timers.time_counter)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	8b5a      	ldrh	r2, [r3, #26]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	8a9b      	ldrh	r3, [r3, #20]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d10f      	bne.n	8002e90 <GSM_Feed+0x84>
		{
			gsm->time += gsm->timer_trigger_count;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	e9d3 23aa 	ldrd	r2, r3, [r3, #680]	@ 0x2a8
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	69c9      	ldr	r1, [r1, #28]
 8002e7a:	2000      	movs	r0, #0
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	4605      	mov	r5, r0
 8002e80:	eb12 0804 	adds.w	r8, r2, r4
 8002e84:	eb43 0905 	adc.w	r9, r3, r5
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	e9c3 89aa 	strd	r8, r9, [r3, #680]	@ 0x2a8
 8002e8e:	e076      	b.n	8002f7e <GSM_Feed+0x172>
		}
		else if (gsm->timer_id == gsm->timers.timeout)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	8b5a      	ldrh	r2, [r3, #26]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	8adb      	ldrh	r3, [r3, #22]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d125      	bne.n	8002ee8 <GSM_Feed+0xdc>
		{
			GSM_Prints(gsm, "Timeout\r\n");
 8002e9c:	4950      	ldr	r1, [pc, #320]	@ (8002fe0 <GSM_Feed+0x1d4>)
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7ff ff35 	bl	8002d0e <GSM_Prints>
			gsm->flags.timeout = 1;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	711a      	strb	r2, [r3, #4]
			gsm->flags.timeout_count++;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	88db      	ldrh	r3, [r3, #6]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	80da      	strh	r2, [r3, #6]
			gsm->flags.detected = 0;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
			gsm->flags.initialized = 0;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	709a      	strb	r2, [r3, #2]

			FT_StopTimer(gsm->ft, gsm->timers.timeout);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8d3 22b0 	ldr.w	r2, [r3, #688]	@ 0x2b0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	8adb      	ldrh	r3, [r3, #22]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4610      	mov	r0, r2
 8002ed0:	f7ff f9c5 	bl	800225e <FT_StopTimer>
			FT_StartTimer(gsm->ft, gsm->timers.detect);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f8d3 22b0 	ldr.w	r2, [r3, #688]	@ 0x2b0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	8b1b      	ldrh	r3, [r3, #24]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	f7ff f98c 	bl	80021fe <FT_StartTimer>
 8002ee6:	e04a      	b.n	8002f7e <GSM_Feed+0x172>
		}
		else if (gsm->timer_id == gsm->timers.detect)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8b5a      	ldrh	r2, [r3, #26]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8b1b      	ldrh	r3, [r3, #24]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d140      	bne.n	8002f76 <GSM_Feed+0x16a>
		{
			if(gsm->flags.response_awaiting == 1) break;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	7b1b      	ldrb	r3, [r3, #12]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d056      	beq.n	8002faa <GSM_Feed+0x19e>
			GSM_Prints(gsm, "Detect\r\n");
 8002efc:	4939      	ldr	r1, [pc, #228]	@ (8002fe4 <GSM_Feed+0x1d8>)
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff ff05 	bl	8002d0e <GSM_Prints>
			if (gsm->flags.detected == 0)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d12a      	bne.n	8002f62 <GSM_Feed+0x156>
			{
				if(gsm->flags.detecting && gsm->flags.timeout == 0 && gsm->flags.response_available == 0) break;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	785b      	ldrb	r3, [r3, #1]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d007      	beq.n	8002f24 <GSM_Feed+0x118>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	791b      	ldrb	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d103      	bne.n	8002f24 <GSM_Feed+0x118>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7a5b      	ldrb	r3, [r3, #9]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d044      	beq.n	8002fae <GSM_Feed+0x1a2>
				gsm->flags.detecting = 1;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	705a      	strb	r2, [r3, #1]
				snprintf((char*)gsm->line_buf, GSM_LINE_BUFFER_SIZE, "GSM Dtct [%d]\r\n", gsm->flags.timeout_count + 1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f503 7009 	add.w	r0, r3, #548	@ 0x224
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	88db      	ldrh	r3, [r3, #6]
 8002f34:	3301      	adds	r3, #1
 8002f36:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe8 <GSM_Feed+0x1dc>)
 8002f38:	2180      	movs	r1, #128	@ 0x80
 8002f3a:	f005 f88d 	bl	8008058 <sniprintf>
				GSM_Prints(gsm, (char*)gsm->line_buf);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8002f44:	4619      	mov	r1, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff fee1 	bl	8002d0e <GSM_Prints>
				GSM_ChangeBaudRate(gsm);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 faa9 	bl	80034a4 <GSM_ChangeBaudRate>
				GSM_at(gsm, "\r\nAT\r\n", 1, 1000);
 8002f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f56:	2201      	movs	r2, #1
 8002f58:	4924      	ldr	r1, [pc, #144]	@ (8002fec <GSM_Feed+0x1e0>)
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f7ff ff00 	bl	8002d60 <GSM_at>
 8002f60:	e00d      	b.n	8002f7e <GSM_Feed+0x172>
			}
			else {
				FT_StopTimer(gsm->ft, gsm->timers.detect);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 22b0 	ldr.w	r2, [r3, #688]	@ 0x2b0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8b1b      	ldrh	r3, [r3, #24]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f7ff f975 	bl	800225e <FT_StopTimer>
 8002f74:	e003      	b.n	8002f7e <GSM_Feed+0x172>
			}
		}
		else
		{
			GSM_Prints(gsm, "Unknown timer triggered\r\n");
 8002f76:	491e      	ldr	r1, [pc, #120]	@ (8002ff0 <GSM_Feed+0x1e4>)
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff fec8 	bl	8002d0e <GSM_Prints>
	while (ft_err == FT_TRIGGERED && FT_GetTriggeredTimer(gsm->ft, &gsm->timer_id, &gsm->timer_trigger_count) == FT_OK)
 8002f7e:	89bb      	ldrh	r3, [r7, #12]
 8002f80:	f241 0250 	movw	r2, #4176	@ 0x1050
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d113      	bne.n	8002fb0 <GSM_Feed+0x1a4>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f8d3 02b0 	ldr.w	r0, [r3, #688]	@ 0x2b0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f103 011a 	add.w	r1, r3, #26
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	331c      	adds	r3, #28
 8002f98:	461a      	mov	r2, r3
 8002f9a:	f7ff f899 	bl	80020d0 <FT_GetTriggeredTimer>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa4:	f43f af5e 	beq.w	8002e64 <GSM_Feed+0x58>
 8002fa8:	e002      	b.n	8002fb0 <GSM_Feed+0x1a4>
			if(gsm->flags.response_awaiting == 1) break;
 8002faa:	bf00      	nop
 8002fac:	e000      	b.n	8002fb0 <GSM_Feed+0x1a4>
				if(gsm->flags.detecting && gsm->flags.timeout == 0 && gsm->flags.response_available == 0) break;
 8002fae:	bf00      	nop
		}
	}

	if (gsm->flags.detected == 1 && gsm->flags.initialized == 0 && gsm->flags.initializing == 0)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d10c      	bne.n	8002fd2 <GSM_Feed+0x1c6>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	789b      	ldrb	r3, [r3, #2]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d108      	bne.n	8002fd2 <GSM_Feed+0x1c6>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	78db      	ldrb	r3, [r3, #3]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d104      	bne.n	8002fd2 <GSM_Feed+0x1c6>
	{
		return GSM_InitModem(gsm);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f913 	bl	80031f4 <GSM_InitModem>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	e001      	b.n	8002fd6 <GSM_Feed+0x1ca>
	}


	return GSM_IDLE;
 8002fd2:	f249 0304 	movw	r3, #36868	@ 0x9004
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fe0:	0800a258 	.word	0x0800a258
 8002fe4:	0800a264 	.word	0x0800a264
 8002fe8:	0800a270 	.word	0x0800a270
 8002fec:	0800a280 	.word	0x0800a280
 8002ff0:	0800a288 	.word	0x0800a288

08002ff4 <GSM_AwaitResponse>:

GSM_ERR GSM_AwaitResponse(gsm_t *gsm)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	if (gsm == NULL) return GSM_INVALID_ARGUMENT;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <GSM_AwaitResponse+0x14>
 8003002:	f249 0303 	movw	r3, #36867	@ 0x9003
 8003006:	e02b      	b.n	8003060 <GSM_AwaitResponse+0x6c>
	if (gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d004      	beq.n	800301c <GSM_AwaitResponse+0x28>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d102      	bne.n	8003022 <GSM_AwaitResponse+0x2e>
 800301c:	f249 0301 	movw	r3, #36865	@ 0x9001
 8003020:	e01e      	b.n	8003060 <GSM_AwaitResponse+0x6c>

	gsm->flags.response_awaiting = 1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	731a      	strb	r2, [r3, #12]

	while (gsm->flags.response_expected == 1 && gsm->flags.response_available == 0 && gsm->flags.timeout == 0)
 8003028:	e002      	b.n	8003030 <GSM_AwaitResponse+0x3c>
	{
		GSM_Feed(gsm);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff feee 	bl	8002e0c <GSM_Feed>
	while (gsm->flags.response_expected == 1 && gsm->flags.response_available == 0 && gsm->flags.timeout == 0)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	7a1b      	ldrb	r3, [r3, #8]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d107      	bne.n	8003048 <GSM_AwaitResponse+0x54>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7a5b      	ldrb	r3, [r3, #9]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d103      	bne.n	8003048 <GSM_AwaitResponse+0x54>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	791b      	ldrb	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <GSM_AwaitResponse+0x36>
	}

	if (gsm->flags.timeout)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	791b      	ldrb	r3, [r3, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <GSM_AwaitResponse+0x62>
	{
		return GSM_TIMEOUT;
 8003050:	f249 0306 	movw	r3, #36870	@ 0x9006
 8003054:	e004      	b.n	8003060 <GSM_AwaitResponse+0x6c>
	}

	gsm->flags.response_expected = 0;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	721a      	strb	r2, [r3, #8]
	return GSM_OK;
 800305c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 8003060:	4618      	mov	r0, r3
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <GSM_ProcessInput>:

GSM_ERR GSM_ProcessInput(gsm_t *gsm)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	if(gsm == NULL) return GSM_INVALID_ARGUMENT;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <GSM_ProcessInput+0x14>
 8003076:	f249 0303 	movw	r3, #36867	@ 0x9003
 800307a:	e0ac      	b.n	80031d6 <GSM_ProcessInput+0x16e>
	if(gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <GSM_ProcessInput+0x2a>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800308c:	2b00      	cmp	r3, #0
 800308e:	f040 8083 	bne.w	8003198 <GSM_ProcessInput+0x130>
 8003092:	f249 0301 	movw	r3, #36865	@ 0x9001
 8003096:	e09e      	b.n	80031d6 <GSM_ProcessInput+0x16e>

	while (UartRcvr_available(gsm->uart_rcvr_gsm)) {
		gsm->rx_buf_len = UartRcvr_get_input(gsm->uart_rcvr_gsm, gsm->rx_buf, GSM_RX_BUFFER_SIZE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f8d3 02b4 	ldr.w	r0, [r3, #692]	@ 0x2b4
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3320      	adds	r3, #32
 80030a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030a6:	4619      	mov	r1, r3
 80030a8:	f000 fc52 	bl	8003950 <UartRcvr_get_input>
 80030ac:	4603      	mov	r3, r0
 80030ae:	461a      	mov	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220
		if (gsm->rx_buf_len == 0) continue;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8b3 3220 	ldrh.w	r3, [r3, #544]	@ 0x220
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d06a      	beq.n	8003196 <GSM_ProcessInput+0x12e>
		gsm->rx_buf_processed = 0;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f8a3 2222 	strh.w	r2, [r3, #546]	@ 0x222


		while (GSM_GetLine(gsm) == GSM_OK)
 80030c8:	e05d      	b.n	8003186 <GSM_ProcessInput+0x11e>
		{
			gsm->flags.response_lines++;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	895b      	ldrh	r3, [r3, #10]
 80030ce:	3301      	adds	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	815a      	strh	r2, [r3, #10]

			GSM_Prints(gsm, "<< ");
 80030d6:	4942      	ldr	r1, [pc, #264]	@ (80031e0 <GSM_ProcessInput+0x178>)
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff fe18 	bl	8002d0e <GSM_Prints>
			GSM_Prints(gsm, (char*)gsm->line_buf);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 80030e4:	4619      	mov	r1, r3
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7ff fe11 	bl	8002d0e <GSM_Prints>
			GSM_Prints(gsm, "\r\n");
 80030ec:	493d      	ldr	r1, [pc, #244]	@ (80031e4 <GSM_ProcessInput+0x17c>)
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff fe0d 	bl	8002d0e <GSM_Prints>

			if (gsm->line_buf_len >= 2 && strncmp((char*)gsm->line_buf, "OK", 2) == 0)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	@ 0x2a4
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d914      	bls.n	8003128 <GSM_ProcessInput+0xc0>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8003104:	2202      	movs	r2, #2
 8003106:	4938      	ldr	r1, [pc, #224]	@ (80031e8 <GSM_ProcessInput+0x180>)
 8003108:	4618      	mov	r0, r3
 800310a:	f005 f8b9 	bl	8008280 <strncmp>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d109      	bne.n	8003128 <GSM_ProcessInput+0xc0>
			{
				gsm->flags.response_ok = 1;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	735a      	strb	r2, [r3, #13]
				gsm->flags.detected = 1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	701a      	strb	r2, [r3, #0]
				gsm->flags.response_available = 1;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	725a      	strb	r2, [r3, #9]
 8003126:	e02e      	b.n	8003186 <GSM_ProcessInput+0x11e>
			}
			else if (gsm->line_buf_len >= 5 && strncmp((char*)gsm->line_buf, "ERROR", 5) == 0)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	@ 0x2a4
 800312e:	2b04      	cmp	r3, #4
 8003130:	d911      	bls.n	8003156 <GSM_ProcessInput+0xee>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8003138:	2205      	movs	r2, #5
 800313a:	492c      	ldr	r1, [pc, #176]	@ (80031ec <GSM_ProcessInput+0x184>)
 800313c:	4618      	mov	r0, r3
 800313e:	f005 f89f 	bl	8008280 <strncmp>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d106      	bne.n	8003156 <GSM_ProcessInput+0xee>
			{
				gsm->flags.response_error = 1;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	739a      	strb	r2, [r3, #14]
				gsm->flags.response_available = 1;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	725a      	strb	r2, [r3, #9]
 8003154:	e017      	b.n	8003186 <GSM_ProcessInput+0x11e>
			}
			else if (gsm->line_buf_len >= 1 && strncmp((char*)gsm->line_buf, "+", 1) == 0)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	@ 0x2a4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00f      	beq.n	8003180 <GSM_ProcessInput+0x118>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	4b21      	ldr	r3, [pc, #132]	@ (80031f0 <GSM_ProcessInput+0x188>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <GSM_ProcessInput+0x118>
			{
				gsm->flags.response_command = 1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	741a      	strb	r2, [r3, #16]
				gsm->flags.response_available = 1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	725a      	strb	r2, [r3, #9]
 800317e:	e002      	b.n	8003186 <GSM_ProcessInput+0x11e>
			}
			else {
				gsm->flags.response_unknown = 1;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	73da      	strb	r2, [r3, #15]
		while (GSM_GetLine(gsm) == GSM_OK)
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fa8b 	bl	80036a2 <GSM_GetLine>
 800318c:	4603      	mov	r3, r0
 800318e:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 8003192:	d09a      	beq.n	80030ca <GSM_ProcessInput+0x62>
 8003194:	e000      	b.n	8003198 <GSM_ProcessInput+0x130>
		if (gsm->rx_buf_len == 0) continue;
 8003196:	bf00      	nop
	while (UartRcvr_available(gsm->uart_rcvr_gsm)) {
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fb90 	bl	80038c4 <UartRcvr_available>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f47f af76 	bne.w	8003098 <GSM_ProcessInput+0x30>
			}

		}
	}

	if (gsm->flags.response_available == 1) {
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	7a5b      	ldrb	r3, [r3, #9]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d10e      	bne.n	80031d2 <GSM_ProcessInput+0x16a>
		gsm->flags.timeout_count = 0;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	80da      	strh	r2, [r3, #6]
		gsm->flags.timeout = 0;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	711a      	strb	r2, [r3, #4]
		FT_StopTimer(gsm->ft, gsm->timers.timeout);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 22b0 	ldr.w	r2, [r3, #688]	@ 0x2b0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	8adb      	ldrh	r3, [r3, #22]
 80031ca:	4619      	mov	r1, r3
 80031cc:	4610      	mov	r0, r2
 80031ce:	f7ff f846 	bl	800225e <FT_StopTimer>
	}

	return GSM_OK;
 80031d2:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	0800a2a4 	.word	0x0800a2a4
 80031e4:	0800a2a8 	.word	0x0800a2a8
 80031e8:	0800a2ac 	.word	0x0800a2ac
 80031ec:	0800a2b0 	.word	0x0800a2b0
 80031f0:	0800a2b8 	.word	0x0800a2b8

080031f4 <GSM_InitModem>:

GSM_ERR GSM_InitModem(gsm_t *gsm)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
	if (gsm == NULL) return GSM_INVALID_ARGUMENT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d102      	bne.n	8003208 <GSM_InitModem+0x14>
 8003202:	f249 0303 	movw	r3, #36867	@ 0x9003
 8003206:	e0e7      	b.n	80033d8 <GSM_InitModem+0x1e4>
	if (gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d004      	beq.n	800321c <GSM_InitModem+0x28>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <GSM_InitModem+0x2e>
 800321c:	f249 0301 	movw	r3, #36865	@ 0x9001
 8003220:	e0da      	b.n	80033d8 <GSM_InitModem+0x1e4>

	gsm->flags.initializing = 1;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	70da      	strb	r2, [r3, #3]

	GSM_Prints(gsm, "GSM Init\r\n");
 8003228:	496d      	ldr	r1, [pc, #436]	@ (80033e0 <GSM_InitModem+0x1ec>)
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fd6f 	bl	8002d0e <GSM_Prints>

	GSM_at(gsm, "ATE0\r\n", 1, 1000);
 8003230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003234:	2201      	movs	r2, #1
 8003236:	496b      	ldr	r1, [pc, #428]	@ (80033e4 <GSM_InitModem+0x1f0>)
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff fd91 	bl	8002d60 <GSM_at>
	GSM_AwaitResponse(gsm);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff fed8 	bl	8002ff4 <GSM_AwaitResponse>
	if(gsm->flags.response_ok == 0) {
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7b5b      	ldrb	r3, [r3, #13]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d105      	bne.n	8003258 <GSM_InitModem+0x64>
		gsm->flags.initializing = 0;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003252:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003256:	e0bf      	b.n	80033d8 <GSM_InitModem+0x1e4>
	}

	GSM_at(gsm, "AT+IPR=921600\r\n", 1, 1000);
 8003258:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800325c:	2201      	movs	r2, #1
 800325e:	4962      	ldr	r1, [pc, #392]	@ (80033e8 <GSM_InitModem+0x1f4>)
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff fd7d 	bl	8002d60 <GSM_at>
	GSM_SetBaudRate(gsm, GSM_BAUD_RATE_921600);
 8003266:	2101      	movs	r1, #1
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f8cf 	bl	800340c <GSM_SetBaudRate>
	GSM_AwaitResponse(gsm);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fec0 	bl	8002ff4 <GSM_AwaitResponse>
	if(gsm->flags.response_ok == 0) {
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7b5b      	ldrb	r3, [r3, #13]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d105      	bne.n	8003288 <GSM_InitModem+0x94>
		gsm->flags.initializing = 0;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003282:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003286:	e0a7      	b.n	80033d8 <GSM_InitModem+0x1e4>
	}

	GSM_at(gsm, "AT+CSCS=\"GSM\"\r\n", 1, 1000);
 8003288:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800328c:	2201      	movs	r2, #1
 800328e:	4957      	ldr	r1, [pc, #348]	@ (80033ec <GSM_InitModem+0x1f8>)
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7ff fd65 	bl	8002d60 <GSM_at>
	GSM_AwaitResponse(gsm);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff feac 	bl	8002ff4 <GSM_AwaitResponse>
	if(gsm->flags.response_ok == 0) {
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7b5b      	ldrb	r3, [r3, #13]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d105      	bne.n	80032b0 <GSM_InitModem+0xbc>
		gsm->flags.initializing = 0;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 80032aa:	f249 0330 	movw	r3, #36912	@ 0x9030
 80032ae:	e093      	b.n	80033d8 <GSM_InitModem+0x1e4>
	}

	GSM_at(gsm, "AT+CNMI=2,2,0,0,0\r\n", 1, 1000);
 80032b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032b4:	2201      	movs	r2, #1
 80032b6:	494e      	ldr	r1, [pc, #312]	@ (80033f0 <GSM_InitModem+0x1fc>)
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fd51 	bl	8002d60 <GSM_at>
	GSM_AwaitResponse(gsm);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7ff fe98 	bl	8002ff4 <GSM_AwaitResponse>
	if(gsm->flags.response_ok == 0) {
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	7b5b      	ldrb	r3, [r3, #13]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <GSM_InitModem+0xe4>
		gsm->flags.initializing = 0;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 80032d2:	f249 0330 	movw	r3, #36912	@ 0x9030
 80032d6:	e07f      	b.n	80033d8 <GSM_InitModem+0x1e4>
	}

	GSM_at(gsm, "AT+CMGF=1\r\n", 1, 1000);
 80032d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032dc:	2201      	movs	r2, #1
 80032de:	4945      	ldr	r1, [pc, #276]	@ (80033f4 <GSM_InitModem+0x200>)
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff fd3d 	bl	8002d60 <GSM_at>
	GSM_AwaitResponse(gsm);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff fe84 	bl	8002ff4 <GSM_AwaitResponse>
	if(gsm->flags.response_ok == 0) {
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7b5b      	ldrb	r3, [r3, #13]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <GSM_InitModem+0x10c>
		gsm->flags.initializing = 0;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 80032fa:	f249 0330 	movw	r3, #36912	@ 0x9030
 80032fe:	e06b      	b.n	80033d8 <GSM_InitModem+0x1e4>
	}

	GSM_at(gsm, "AT+CUSD=1\r\n", 1, 1000);
 8003300:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003304:	2201      	movs	r2, #1
 8003306:	493c      	ldr	r1, [pc, #240]	@ (80033f8 <GSM_InitModem+0x204>)
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fd29 	bl	8002d60 <GSM_at>
	GSM_AwaitResponse(gsm);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fe70 	bl	8002ff4 <GSM_AwaitResponse>
	if(gsm->flags.response_ok == 0) {
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	7b5b      	ldrb	r3, [r3, #13]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <GSM_InitModem+0x134>
		gsm->flags.initializing = 0;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003322:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003326:	e057      	b.n	80033d8 <GSM_InitModem+0x1e4>
	}

	GSM_at(gsm, "AT+CGDCONT=1,\"IP\",\"internet\",\"0.0.0.0\",0,0\r\n", 1, 1000);
 8003328:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800332c:	2201      	movs	r2, #1
 800332e:	4933      	ldr	r1, [pc, #204]	@ (80033fc <GSM_InitModem+0x208>)
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff fd15 	bl	8002d60 <GSM_at>
	GSM_AwaitResponse(gsm);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff fe5c 	bl	8002ff4 <GSM_AwaitResponse>
	if(gsm->flags.response_ok == 0) {
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7b5b      	ldrb	r3, [r3, #13]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <GSM_InitModem+0x15c>
		gsm->flags.initializing = 0;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 800334a:	f249 0330 	movw	r3, #36912	@ 0x9030
 800334e:	e043      	b.n	80033d8 <GSM_InitModem+0x1e4>
	}

	GSM_at(gsm, "AT+CGACT=1,1\r\n", 1, 1000);
 8003350:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003354:	2201      	movs	r2, #1
 8003356:	492a      	ldr	r1, [pc, #168]	@ (8003400 <GSM_InitModem+0x20c>)
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff fd01 	bl	8002d60 <GSM_at>
	GSM_AwaitResponse(gsm);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff fe48 	bl	8002ff4 <GSM_AwaitResponse>
	if(gsm->flags.response_ok == 0) {
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	7b5b      	ldrb	r3, [r3, #13]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <GSM_InitModem+0x184>
		gsm->flags.initializing = 0;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003372:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003376:	e02f      	b.n	80033d8 <GSM_InitModem+0x1e4>
	}

	GSM_at(gsm, "AT+CIPCCFG=3,0,0,0,1,0,500\r\n", 1, 1000);
 8003378:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800337c:	2201      	movs	r2, #1
 800337e:	4921      	ldr	r1, [pc, #132]	@ (8003404 <GSM_InitModem+0x210>)
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fced 	bl	8002d60 <GSM_at>
	GSM_AwaitResponse(gsm);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fe34 	bl	8002ff4 <GSM_AwaitResponse>
	if(gsm->flags.response_ok == 0) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	7b5b      	ldrb	r3, [r3, #13]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <GSM_InitModem+0x1ac>
		gsm->flags.initializing = 0;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 800339a:	f249 0330 	movw	r3, #36912	@ 0x9030
 800339e:	e01b      	b.n	80033d8 <GSM_InitModem+0x1e4>
	}

	GSM_at(gsm, "AT+CNTP=\"pool.ntp.org\",8\r\n", 1, 1000);
 80033a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033a4:	2201      	movs	r2, #1
 80033a6:	4918      	ldr	r1, [pc, #96]	@ (8003408 <GSM_InitModem+0x214>)
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f7ff fcd9 	bl	8002d60 <GSM_at>
	GSM_AwaitResponse(gsm);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff fe20 	bl	8002ff4 <GSM_AwaitResponse>
	if(gsm->flags.response_ok == 0) {
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	7b5b      	ldrb	r3, [r3, #13]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <GSM_InitModem+0x1d4>
		gsm->flags.initializing = 0;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 80033c2:	f249 0330 	movw	r3, #36912	@ 0x9030
 80033c6:	e007      	b.n	80033d8 <GSM_InitModem+0x1e4>
	}

	gsm->flags.initializing = 0;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	70da      	strb	r2, [r3, #3]
	gsm->flags.initialized = 1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	709a      	strb	r2, [r3, #2]

	return GSM_OK;
 80033d4:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	0800a2bc 	.word	0x0800a2bc
 80033e4:	0800a2c8 	.word	0x0800a2c8
 80033e8:	0800a2d0 	.word	0x0800a2d0
 80033ec:	0800a2e0 	.word	0x0800a2e0
 80033f0:	0800a2f0 	.word	0x0800a2f0
 80033f4:	0800a304 	.word	0x0800a304
 80033f8:	0800a310 	.word	0x0800a310
 80033fc:	0800a31c 	.word	0x0800a31c
 8003400:	0800a34c 	.word	0x0800a34c
 8003404:	0800a35c 	.word	0x0800a35c
 8003408:	0800a37c 	.word	0x0800a37c

0800340c <GSM_SetBaudRate>:

GSM_ERR GSM_SetBaudRate(gsm_t *gsm, gsm_baud_rate_t baud_rate)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	70fb      	strb	r3, [r7, #3]
	if(gsm == NULL) return GSM_INVALID_ARGUMENT;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d102      	bne.n	8003424 <GSM_SetBaudRate+0x18>
 800341e:	f249 0303 	movw	r3, #36867	@ 0x9003
 8003422:	e036      	b.n	8003492 <GSM_SetBaudRate+0x86>
	if(gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <GSM_SetBaudRate+0x28>
 800342e:	f249 0301 	movw	r3, #36865	@ 0x9001
 8003432:	e02e      	b.n	8003492 <GSM_SetBaudRate+0x86>

	uint32_t baud_rate_val = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
	switch (baud_rate) {
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <GSM_SetBaudRate+0x38>
 800343e:	2b01      	cmp	r3, #1
 8003440:	d008      	beq.n	8003454 <GSM_SetBaudRate+0x48>
 8003442:	e00f      	b.n	8003464 <GSM_SetBaudRate+0x58>
		case GSM_BAUD_RATE_115200:
			baud_rate_val = 115200;
 8003444:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003448:	60fb      	str	r3, [r7, #12]
			GSM_Prints(gsm, "Setting baud rate to 115200\r\n");
 800344a:	4914      	ldr	r1, [pc, #80]	@ (800349c <GSM_SetBaudRate+0x90>)
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fc5e 	bl	8002d0e <GSM_Prints>
			break;
 8003452:	e00a      	b.n	800346a <GSM_SetBaudRate+0x5e>
		case GSM_BAUD_RATE_921600:
			baud_rate_val = 921600;
 8003454:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8003458:	60fb      	str	r3, [r7, #12]
			GSM_Prints(gsm, "Setting baud rate to 921600\r\n");
 800345a:	4911      	ldr	r1, [pc, #68]	@ (80034a0 <GSM_SetBaudRate+0x94>)
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff fc56 	bl	8002d0e <GSM_Prints>
			break;
 8003462:	e002      	b.n	800346a <GSM_SetBaudRate+0x5e>
		default:
			return GSM_INVALID_ARGUMENT;
 8003464:	f249 0303 	movw	r3, #36867	@ 0x9003
 8003468:	e013      	b.n	8003492 <GSM_SetBaudRate+0x86>
	}

	uint8_t status = UartRcvr_set_baud_rate(gsm->uart_rcvr_gsm, baud_rate_val);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8003470:	68f9      	ldr	r1, [r7, #12]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fb0a 	bl	8003a8c <UartRcvr_set_baud_rate>
 8003478:	4603      	mov	r3, r0
 800347a:	72fb      	strb	r3, [r7, #11]
	if(status == 0) return GSM_BAUD_RATE_ERR;
 800347c:	7afb      	ldrb	r3, [r7, #11]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d102      	bne.n	8003488 <GSM_SetBaudRate+0x7c>
 8003482:	f249 0307 	movw	r3, #36871	@ 0x9007
 8003486:	e004      	b.n	8003492 <GSM_SetBaudRate+0x86>
	gsm->config.baud_rate = baud_rate;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	749a      	strb	r2, [r3, #18]

	return GSM_OK;
 800348e:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	0800a398 	.word	0x0800a398
 80034a0:	0800a3b8 	.word	0x0800a3b8

080034a4 <GSM_ChangeBaudRate>:

GSM_ERR GSM_ChangeBaudRate(gsm_t *gsm)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
	if(gsm == NULL) return GSM_INVALID_ARGUMENT;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <GSM_ChangeBaudRate+0x14>
 80034b2:	f249 0303 	movw	r3, #36867	@ 0x9003
 80034b6:	e015      	b.n	80034e4 <GSM_ChangeBaudRate+0x40>
	if(gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d102      	bne.n	80034c8 <GSM_ChangeBaudRate+0x24>
 80034c2:	f249 0301 	movw	r3, #36865	@ 0x9001
 80034c6:	e00d      	b.n	80034e4 <GSM_ChangeBaudRate+0x40>

	gsm_baud_rate_t new_baud_rate = gsm->config.baud_rate == GSM_BAUD_RATE_115200 ? GSM_BAUD_RATE_921600 : GSM_BAUD_RATE_115200;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	7c9b      	ldrb	r3, [r3, #18]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	73fb      	strb	r3, [r7, #15]

	return GSM_SetBaudRate(gsm, new_baud_rate);
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	4619      	mov	r1, r3
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff ff95 	bl	800340c <GSM_SetBaudRate>
 80034e2:	4603      	mov	r3, r0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <GSM_Init>:

GSM_ERR GSM_Init(gsm_t *gsm, FT_base *ft, uart_receiver_t *uart_rcvr_gsm, uart_receiver_t *uart_rcvr_debug)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
	if (gsm == NULL || ft == NULL || uart_rcvr_gsm == NULL) return GSM_INVALID_ARGUMENT;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <GSM_Init+0x20>
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <GSM_Init+0x20>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <GSM_Init+0x26>
 800350c:	f249 0303 	movw	r3, #36867	@ 0x9003
 8003510:	e045      	b.n	800359e <GSM_Init+0xb2>

	gsm->ft = ft;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
	gsm->uart_rcvr_gsm = uart_rcvr_gsm;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
	gsm->uart_rcvr_debug = uart_rcvr_debug;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

	gsm->config.baud_rate = GSM_BAUD_RATE_115200;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	749a      	strb	r2, [r3, #18]

	FT_ERR ft_err = FT_NewTimer(ft, GSM_TIMER_TIME_COUNTER_INTERVAL, GSM_TIMER_TIME_COUNTER_PRIORITY, &gsm->timers.time_counter);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3314      	adds	r3, #20
 8003534:	2264      	movs	r2, #100	@ 0x64
 8003536:	2101      	movs	r1, #1
 8003538:	68b8      	ldr	r0, [r7, #8]
 800353a:	f7fe fec0 	bl	80022be <FT_NewTimer>
 800353e:	4603      	mov	r3, r0
 8003540:	82fb      	strh	r3, [r7, #22]

	if(ft_err == FT_OK) ft_err = FT_NewTimer(ft, GSM_TIMER_TIMEOUT_INTERVAL, GSM_TIMER_TIMEOUT_PRIORITY, &gsm->timers.timeout);
 8003542:	8afb      	ldrh	r3, [r7, #22]
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003548:	d109      	bne.n	800355e <GSM_Init+0x72>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	3316      	adds	r3, #22
 800354e:	225a      	movs	r2, #90	@ 0x5a
 8003550:	f242 7110 	movw	r1, #10000	@ 0x2710
 8003554:	68b8      	ldr	r0, [r7, #8]
 8003556:	f7fe feb2 	bl	80022be <FT_NewTimer>
 800355a:	4603      	mov	r3, r0
 800355c:	82fb      	strh	r3, [r7, #22]
	FT_StopTimer(ft, gsm->timers.timeout);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8adb      	ldrh	r3, [r3, #22]
 8003562:	4619      	mov	r1, r3
 8003564:	68b8      	ldr	r0, [r7, #8]
 8003566:	f7fe fe7a 	bl	800225e <FT_StopTimer>

	if(ft_err == FT_OK) ft_err = FT_NewTimer(ft, GSM_TIMER_DETECT_INTERVAL, GSM_TIMER_DETECT_PRIORITY, &gsm->timers.detect);
 800356a:	8afb      	ldrh	r3, [r7, #22]
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003570:	d109      	bne.n	8003586 <GSM_Init+0x9a>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3318      	adds	r3, #24
 8003576:	2250      	movs	r2, #80	@ 0x50
 8003578:	f241 3188 	movw	r1, #5000	@ 0x1388
 800357c:	68b8      	ldr	r0, [r7, #8]
 800357e:	f7fe fe9e 	bl	80022be <FT_NewTimer>
 8003582:	4603      	mov	r3, r0
 8003584:	82fb      	strh	r3, [r7, #22]

	if (ft_err != FT_OK) {
 8003586:	8afb      	ldrh	r3, [r7, #22]
 8003588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800358c:	d005      	beq.n	800359a <GSM_Init+0xae>
		GSM_DeInit(gsm);
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 f809 	bl	80035a6 <GSM_DeInit>
		return GSM_FT_ERR;
 8003594:	f249 0310 	movw	r3, #36880	@ 0x9010
 8003598:	e001      	b.n	800359e <GSM_Init+0xb2>
	}

	return GSM_OK;
 800359a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <GSM_DeInit>:

GSM_ERR GSM_DeInit(gsm_t *gsm)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
	if (gsm == NULL) return GSM_INVALID_ARGUMENT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <GSM_DeInit+0x14>
 80035b4:	f249 0303 	movw	r3, #36867	@ 0x9003
 80035b8:	e02e      	b.n	8003618 <GSM_DeInit+0x72>

	gsm->ft = NULL;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
	gsm->uart_rcvr_gsm = NULL;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
	gsm->uart_rcvr_debug = NULL;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

	FT_KillTimer(gsm->ft, gsm->timers.time_counter);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 22b0 	ldr.w	r2, [r3, #688]	@ 0x2b0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	8a9b      	ldrh	r3, [r3, #20]
 80035dc:	4619      	mov	r1, r3
 80035de:	4610      	mov	r0, r2
 80035e0:	f7fe fee2 	bl	80023a8 <FT_KillTimer>
	FT_KillTimer(gsm->ft, gsm->timers.timeout);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8d3 22b0 	ldr.w	r2, [r3, #688]	@ 0x2b0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	8adb      	ldrh	r3, [r3, #22]
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f7fe fed9 	bl	80023a8 <FT_KillTimer>
	FT_KillTimer(gsm->ft, gsm->timers.detect);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 22b0 	ldr.w	r2, [r3, #688]	@ 0x2b0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	8b1b      	ldrh	r3, [r3, #24]
 8003600:	4619      	mov	r1, r3
 8003602:	4610      	mov	r0, r2
 8003604:	f7fe fed0 	bl	80023a8 <FT_KillTimer>

	memset(gsm, 0, sizeof(gsm_t));
 8003608:	f44f 7230 	mov.w	r2, #704	@ 0x2c0
 800360c:	2100      	movs	r1, #0
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f004 fe2e 	bl	8008270 <memset>

	return GSM_OK;
 8003614:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 8003618:	4618      	mov	r0, r3
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <GSM_ClearResponse>:


GSM_ERR GSM_ClearResponse(gsm_t *gsm)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
	if(gsm == NULL) return GSM_INVALID_ARGUMENT;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <GSM_ClearResponse+0x14>
 800362e:	f249 0303 	movw	r3, #36867	@ 0x9003
 8003632:	e030      	b.n	8003696 <GSM_ClearResponse+0x76>
	if(gsm->ft == NULL) return GSM_NOT_INITIALIZED;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <GSM_ClearResponse+0x24>
 800363e:	f249 0301 	movw	r3, #36865	@ 0x9001
 8003642:	e028      	b.n	8003696 <GSM_ClearResponse+0x76>

	gsm->flags.timeout = 0;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	711a      	strb	r2, [r3, #4]
	gsm->flags.response_expected = 0;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	721a      	strb	r2, [r3, #8]
	gsm->flags.response_available = 0;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	725a      	strb	r2, [r3, #9]
	gsm->flags.response_awaiting = 0;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	731a      	strb	r2, [r3, #12]

	gsm->flags.response_ok = 0;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	735a      	strb	r2, [r3, #13]
	gsm->flags.response_error = 0;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	739a      	strb	r2, [r3, #14]
	gsm->flags.response_unknown = 0;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	73da      	strb	r2, [r3, #15]
	gsm->flags.response_command = 0;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	741a      	strb	r2, [r3, #16]
	gsm->flags.response_lines = 0;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	815a      	strh	r2, [r3, #10]

	gsm->rx_buf_len = 0;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f8a3 2220 	strh.w	r2, [r3, #544]	@ 0x220
	gsm->rx_buf_processed = 0;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f8a3 2222 	strh.w	r2, [r3, #546]	@ 0x222
	gsm->line_buf_len = 0;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f8a3 22a4 	strh.w	r2, [r3, #676]	@ 0x2a4

	return GSM_OK;
 8003692:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <GSM_GetLine>:

GSM_ERR GSM_GetLine(gsm_t *gsm)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
	if(gsm == NULL) return GSM_INVALID_ARGUMENT;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <GSM_GetLine+0x14>
 80036b0:	f249 0303 	movw	r3, #36867	@ 0x9003
 80036b4:	e07d      	b.n	80037b2 <GSM_GetLine+0x110>
	if(gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d004      	beq.n	80036ca <GSM_GetLine+0x28>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d102      	bne.n	80036d0 <GSM_GetLine+0x2e>
 80036ca:	f249 0301 	movw	r3, #36865	@ 0x9001
 80036ce:	e070      	b.n	80037b2 <GSM_GetLine+0x110>

    if(gsm->rx_buf_len == 0 || gsm->rx_buf_len == gsm->rx_buf_processed) return GSM_LINE_NO_DATA;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8b3 3220 	ldrh.w	r3, [r3, #544]	@ 0x220
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d007      	beq.n	80036ea <GSM_GetLine+0x48>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8b3 2220 	ldrh.w	r2, [r3, #544]	@ 0x220
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8b3 3222 	ldrh.w	r3, [r3, #546]	@ 0x222
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d102      	bne.n	80036f0 <GSM_GetLine+0x4e>
 80036ea:	f249 0320 	movw	r3, #36896	@ 0x9020
 80036ee:	e060      	b.n	80037b2 <GSM_GetLine+0x110>

    gsm->line_buf_len = 0;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f8a3 22a4 	strh.w	r2, [r3, #676]	@ 0x2a4
	while (gsm->rx_buf_processed < gsm->rx_buf_len && gsm->line_buf_len < GSM_LINE_BUFFER_SIZE - 1) {
 80036f8:	e043      	b.n	8003782 <GSM_GetLine+0xe0>
		if (gsm->rx_buf_processed && gsm->rx_buf[gsm->rx_buf_processed - 1] == '\r' && gsm->rx_buf[gsm->rx_buf_processed] == '\n')
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8b3 3222 	ldrh.w	r3, [r3, #546]	@ 0x222
 8003700:	2b00      	cmp	r3, #0
 8003702:	d024      	beq.n	800374e <GSM_GetLine+0xac>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8b3 3222 	ldrh.w	r3, [r3, #546]	@ 0x222
 800370a:	3b01      	subs	r3, #1
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	4413      	add	r3, r2
 8003710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003714:	2b0d      	cmp	r3, #13
 8003716:	d11a      	bne.n	800374e <GSM_GetLine+0xac>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8b3 3222 	ldrh.w	r3, [r3, #546]	@ 0x222
 800371e:	461a      	mov	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003728:	2b0a      	cmp	r3, #10
 800372a:	d110      	bne.n	800374e <GSM_GetLine+0xac>
		{
			gsm->rx_buf_processed++;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8b3 3222 	ldrh.w	r3, [r3, #546]	@ 0x222
 8003732:	3301      	adds	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f8a3 2222 	strh.w	r2, [r3, #546]	@ 0x222
			gsm->line_buf_len--;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	@ 0x2a4
 8003742:	3b01      	subs	r3, #1
 8003744:	b29a      	uxth	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8a3 22a4 	strh.w	r2, [r3, #676]	@ 0x2a4
			break;
 800374c:	e026      	b.n	800379c <GSM_GetLine+0xfa>
		}
		gsm->line_buf[gsm->line_buf_len++] = gsm->rx_buf[gsm->rx_buf_processed++];
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8b3 3222 	ldrh.w	r3, [r3, #546]	@ 0x222
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	b291      	uxth	r1, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	f8a2 1222 	strh.w	r1, [r2, #546]	@ 0x222
 800375e:	4618      	mov	r0, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	@ 0x2a4
 8003766:	1c5a      	adds	r2, r3, #1
 8003768:	b291      	uxth	r1, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	f8a2 12a4 	strh.w	r1, [r2, #676]	@ 0x2a4
 8003770:	4619      	mov	r1, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4403      	add	r3, r0
 8003776:	f893 2020 	ldrb.w	r2, [r3, #32]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	440b      	add	r3, r1
 800377e:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224
	while (gsm->rx_buf_processed < gsm->rx_buf_len && gsm->line_buf_len < GSM_LINE_BUFFER_SIZE - 1) {
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8b3 2222 	ldrh.w	r2, [r3, #546]	@ 0x222
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f8b3 3220 	ldrh.w	r3, [r3, #544]	@ 0x220
 800378e:	429a      	cmp	r2, r3
 8003790:	d204      	bcs.n	800379c <GSM_GetLine+0xfa>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	@ 0x2a4
 8003798:	2b7e      	cmp	r3, #126	@ 0x7e
 800379a:	d9ae      	bls.n	80036fa <GSM_GetLine+0x58>
	}
	gsm->line_buf[gsm->line_buf_len] = 0;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8b3 32a4 	ldrh.w	r3, [r3, #676]	@ 0x2a4
 80037a2:	461a      	mov	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4413      	add	r3, r2
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2224 	strb.w	r2, [r3, #548]	@ 0x224

	return GSM_OK;
 80037ae:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <UartRcvr_init>:
 */

#include "uart_receiver.h"

uint8_t UartRcvr_init(uart_receiver_t* uart_rcvr, UART_HandleTypeDef* huart)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	6039      	str	r1, [r7, #0]
	if(uart_rcvr == NULL || huart == NULL) return 0;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <UartRcvr_init+0x16>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <UartRcvr_init+0x1a>
 80037d4:	2300      	movs	r3, #0
 80037d6:	e038      	b.n	800384a <UartRcvr_init+0x8c>
	UartRcvr_deinit(uart_rcvr);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f83a 	bl	8003852 <UartRcvr_deinit>

	uart_rcvr->buffer_active.data = (uint8_t*)malloc(UART_RECEIVER_CIRCULAR_BUFFER_SIZE);
 80037de:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80037e2:	f003 fd49 	bl	8007278 <malloc>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	651a      	str	r2, [r3, #80]	@ 0x50
	uart_rcvr->buffer_active.len = 0;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	if (uart_rcvr->buffer_active.data == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d104      	bne.n	8003808 <UartRcvr_init+0x4a>
	{
		UartRcvr_deinit(uart_rcvr);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f827 	bl	8003852 <UartRcvr_deinit>
		return 0;
 8003804:	2300      	movs	r3, #0
 8003806:	e020      	b.n	800384a <UartRcvr_init+0x8c>
	}

	uart_rcvr->buffer_pending.data = (uint8_t*)malloc(UART_RECEIVER_MAX_BUFFER_LENGTH);
 8003808:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800380c:	f003 fd34 	bl	8007278 <malloc>
 8003810:	4603      	mov	r3, r0
 8003812:	461a      	mov	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	659a      	str	r2, [r3, #88]	@ 0x58
	uart_rcvr->buffer_pending.len = 0;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	if (uart_rcvr->buffer_pending.data == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003824:	2b00      	cmp	r3, #0
 8003826:	d104      	bne.n	8003832 <UartRcvr_init+0x74>
	{
		UartRcvr_deinit(uart_rcvr);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f812 	bl	8003852 <UartRcvr_deinit>
		return 0;
 800382e:	2300      	movs	r3, #0
 8003830:	e00b      	b.n	800384a <UartRcvr_init+0x8c>
	}

	uart_rcvr->huart = huart;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	669a      	str	r2, [r3, #104]	@ 0x68

	HAL_UARTEx_ReceiveToIdle_DMA(huart, uart_rcvr->buffer_active.data, UART_RECEIVER_CIRCULAR_BUFFER_SIZE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003840:	4619      	mov	r1, r3
 8003842:	6838      	ldr	r0, [r7, #0]
 8003844:	f002 fbdb 	bl	8005ffe <HAL_UARTEx_ReceiveToIdle_DMA>
	return 1;
 8003848:	2301      	movs	r3, #1
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <UartRcvr_deinit>:

void UartRcvr_deinit(uart_receiver_t *uart_rcvr)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
	if(uart_rcvr == NULL) return;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d02d      	beq.n	80038bc <UartRcvr_deinit+0x6a>
	if(uart_rcvr->buffer_active.data != NULL) free(uart_rcvr->buffer_active.data);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003864:	2b00      	cmp	r3, #0
 8003866:	d004      	beq.n	8003872 <UartRcvr_deinit+0x20>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386c:	4618      	mov	r0, r3
 800386e:	f003 fd0b 	bl	8007288 <free>
	if(uart_rcvr->buffer_pending.data != NULL) free(uart_rcvr->buffer_pending.data);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003876:	2b00      	cmp	r3, #0
 8003878:	d004      	beq.n	8003884 <UartRcvr_deinit+0x32>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387e:	4618      	mov	r0, r3
 8003880:	f003 fd02 	bl	8007288 <free>
	for (uint8_t i = 0; i < UART_RECEIVER_MAX_BUFFERS; i++)
 8003884:	2300      	movs	r3, #0
 8003886:	73fb      	strb	r3, [r7, #15]
 8003888:	e00f      	b.n	80038aa <UartRcvr_deinit+0x58>
	{
		if(uart_rcvr->buffers[i].data != NULL) free(uart_rcvr->buffers[i].data);
 800388a:	7bfa      	ldrb	r2, [r7, #15]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d006      	beq.n	80038a4 <UartRcvr_deinit+0x52>
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800389e:	4618      	mov	r0, r3
 80038a0:	f003 fcf2 	bl	8007288 <free>
	for (uint8_t i = 0; i < UART_RECEIVER_MAX_BUFFERS; i++)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	3301      	adds	r3, #1
 80038a8:	73fb      	strb	r3, [r7, #15]
 80038aa:	7bfb      	ldrb	r3, [r7, #15]
 80038ac:	2b09      	cmp	r3, #9
 80038ae:	d9ec      	bls.n	800388a <UartRcvr_deinit+0x38>
	}
	memset(uart_rcvr, 0, sizeof(uart_receiver_t));
 80038b0:	226c      	movs	r2, #108	@ 0x6c
 80038b2:	2100      	movs	r1, #0
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f004 fcdb 	bl	8008270 <memset>
 80038ba:	e000      	b.n	80038be <UartRcvr_deinit+0x6c>
	if(uart_rcvr == NULL) return;
 80038bc:	bf00      	nop
}
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <UartRcvr_available>:

uint8_t UartRcvr_available(uart_receiver_t *uart_rcvr)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return 0;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <UartRcvr_available+0x16>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d114      	bne.n	8003904 <UartRcvr_available+0x40>
 80038da:	2300      	movs	r3, #0
 80038dc:	e02f      	b.n	800393e <UartRcvr_available+0x7a>

	while (uart_rcvr->buffer_index_pending != uart_rcvr->buffer_index_active
			&& uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data == NULL)
	{
		uart_rcvr->buffer_index_pending = (uart_rcvr->buffer_index_pending + 1) % UART_RECEIVER_MAX_BUFFERS;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	4b19      	ldr	r3, [pc, #100]	@ (800394c <UartRcvr_available+0x88>)
 80038e8:	fb83 1302 	smull	r1, r3, r3, r2
 80038ec:	1099      	asrs	r1, r3, #2
 80038ee:	17d3      	asrs	r3, r2, #31
 80038f0:	1ac9      	subs	r1, r1, r3
 80038f2:	460b      	mov	r3, r1
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	1ad1      	subs	r1, r2, r3
 80038fc:	b28a      	uxth	r2, r1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	while (uart_rcvr->buffer_index_pending != uart_rcvr->buffer_index_active
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
			&& uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data == NULL)
 8003910:	429a      	cmp	r2, r3
 8003912:	d008      	beq.n	8003926 <UartRcvr_available+0x62>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800391a:	461a      	mov	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0db      	beq.n	80038de <UartRcvr_available+0x1a>
	}

	return uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data != NULL;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800392c:	461a      	mov	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf14      	ite	ne
 8003938:	2301      	movne	r3, #1
 800393a:	2300      	moveq	r3, #0
 800393c:	b2db      	uxtb	r3, r3
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	66666667 	.word	0x66666667

08003950 <UartRcvr_get_input>:

uint16_t UartRcvr_get_input(uart_receiver_t *uart_rcvr, uint8_t* str, uint16_t max_len)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	4613      	mov	r3, r2
 800395c:	80fb      	strh	r3, [r7, #6]
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return 0;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <UartRcvr_get_input+0x1c>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003968:	2b00      	cmp	r3, #0
 800396a:	d101      	bne.n	8003970 <UartRcvr_get_input+0x20>
 800396c:	2300      	movs	r3, #0
 800396e:	e089      	b.n	8003a84 <UartRcvr_get_input+0x134>

	if (uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data == NULL) return 0;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003976:	461a      	mov	r2, r3
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <UartRcvr_get_input+0x36>
 8003982:	2300      	movs	r3, #0
 8003984:	e07e      	b.n	8003a84 <UartRcvr_get_input+0x134>

	uint16_t len = uart_rcvr->buffers[uart_rcvr->buffer_index_pending].len;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	889b      	ldrh	r3, [r3, #4]
 8003994:	82fb      	strh	r3, [r7, #22]
	if(str != NULL && max_len > 0)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d053      	beq.n	8003a44 <UartRcvr_get_input+0xf4>
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d050      	beq.n	8003a44 <UartRcvr_get_input+0xf4>
	{
		if (len + 1 > max_len) len = max_len - 1;
 80039a2:	8afa      	ldrh	r2, [r7, #22]
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <UartRcvr_get_input+0x60>
 80039aa:	88fb      	ldrh	r3, [r7, #6]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	82fb      	strh	r3, [r7, #22]
		memcpy(str, uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data + uart_rcvr->buffers[uart_rcvr->buffer_index_pending].processed, len + 1);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80039c4:	68f9      	ldr	r1, [r7, #12]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	440b      	add	r3, r1
 80039ca:	88db      	ldrh	r3, [r3, #6]
 80039cc:	18d1      	adds	r1, r2, r3
 80039ce:	8afb      	ldrh	r3, [r7, #22]
 80039d0:	3301      	adds	r3, #1
 80039d2:	461a      	mov	r2, r3
 80039d4:	68b8      	ldr	r0, [r7, #8]
 80039d6:	f004 fcec 	bl	80083b2 <memcpy>
		str[len] = '\0';
 80039da:	8afb      	ldrh	r3, [r7, #22]
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	4413      	add	r3, r2
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
		if (len != uart_rcvr->buffers[uart_rcvr->buffer_index_pending].len)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	889b      	ldrh	r3, [r3, #4]
 80039f2:	8afa      	ldrh	r2, [r7, #22]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d025      	beq.n	8003a44 <UartRcvr_get_input+0xf4>
		{
			uart_rcvr->buffers[uart_rcvr->buffer_index_pending].len -= len;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	00db      	lsls	r3, r3, #3
 8003a02:	4413      	add	r3, r2
 8003a04:	889a      	ldrh	r2, [r3, #4]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	8afb      	ldrh	r3, [r7, #22]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	b299      	uxth	r1, r3
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	00c3      	lsls	r3, r0, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	460a      	mov	r2, r1
 8003a1c:	809a      	strh	r2, [r3, #4]
			uart_rcvr->buffers[uart_rcvr->buffer_index_pending].processed += len;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	4413      	add	r3, r2
 8003a2a:	88da      	ldrh	r2, [r3, #6]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003a32:	4618      	mov	r0, r3
 8003a34:	8afb      	ldrh	r3, [r7, #22]
 8003a36:	4413      	add	r3, r2
 8003a38:	b299      	uxth	r1, r3
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	00c3      	lsls	r3, r0, #3
 8003a3e:	4413      	add	r3, r2
 8003a40:	460a      	mov	r2, r1
 8003a42:	80da      	strh	r2, [r3, #6]
		}
	}

	if(len == uart_rcvr->buffers[uart_rcvr->buffer_index_pending].len || str == NULL)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	4413      	add	r3, r2
 8003a50:	889b      	ldrh	r3, [r3, #4]
 8003a52:	8afa      	ldrh	r2, [r7, #22]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d002      	beq.n	8003a5e <UartRcvr_get_input+0x10e>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d111      	bne.n	8003a82 <UartRcvr_get_input+0x132>
	{
		free(uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003a64:	461a      	mov	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f003 fc0b 	bl	8007288 <free>
		uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data = NULL;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8003a78:	4619      	mov	r1, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
	}
	return len;
 8003a82:	8afb      	ldrh	r3, [r7, #22]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <UartRcvr_set_baud_rate>:

uint8_t UartRcvr_set_baud_rate(uart_receiver_t *uart_rcvr, uint32_t baud_rate)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
	if(uart_rcvr == NULL || uart_rcvr->huart == NULL) return 0;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <UartRcvr_set_baud_rate+0x18>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <UartRcvr_set_baud_rate+0x1c>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e050      	b.n	8003b4a <UartRcvr_set_baud_rate+0xbe>

	uint32_t pclk;
	if (uart_rcvr->huart->Instance == USART1 || uart_rcvr->huart->Instance == USART6) {
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a29      	ldr	r2, [pc, #164]	@ (8003b54 <UartRcvr_set_baud_rate+0xc8>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d005      	beq.n	8003ac0 <UartRcvr_set_baud_rate+0x34>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a27      	ldr	r2, [pc, #156]	@ (8003b58 <UartRcvr_set_baud_rate+0xcc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d103      	bne.n	8003ac8 <UartRcvr_set_baud_rate+0x3c>
		// USART1 and USART6 are on APB2
		pclk = HAL_RCC_GetPCLK2Freq();
 8003ac0:	f001 fd36 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8003ac4:	6178      	str	r0, [r7, #20]
 8003ac6:	e002      	b.n	8003ace <UartRcvr_set_baud_rate+0x42>
	} else {
		// USART2, USART3, UART4, UART5 are on APB1
		pclk = HAL_RCC_GetPCLK1Freq();
 8003ac8:	f001 fd1e 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8003acc:	6178      	str	r0, [r7, #20]
	}
    uint32_t usartdiv = (pclk + (baud_rate / 2)) / baud_rate;
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	085a      	lsrs	r2, r3, #1
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	441a      	add	r2, r3
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003adc:	613b      	str	r3, [r7, #16]

    UART_HandleTypeDef* huart = uart_rcvr->huart;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ae2:	60fb      	str	r3, [r7, #12]
    USART_TypeDef* instance = huart->Instance;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60bb      	str	r3, [r7, #8]


    while(__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE) == RESET); // wait for transmission complete
 8003aea:	bf00      	nop
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af6:	2b80      	cmp	r3, #128	@ 0x80
 8003af8:	d1f8      	bne.n	8003aec <UartRcvr_set_baud_rate+0x60>

    instance->CR1 &= ~(USART_CR1_UE);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b06:	f3bf 8f4f 	dsb	sy
}
 8003b0a:	bf00      	nop
	__DSB(); // barrier
	(void)(instance->CR1); // read-back
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003b10:	f3bf 8f5f 	dmb	sy
}
 8003b14:	bf00      	nop
	__DMB();

    instance->BRR = usartdiv;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b1c:	f3bf 8f4f 	dsb	sy
}
 8003b20:	bf00      	nop
    __DSB();
    (void)(instance->BRR);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	689b      	ldr	r3, [r3, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8003b26:	f3bf 8f5f 	dmb	sy
}
 8003b2a:	bf00      	nop
    __DMB();

    instance->CR1 |= USART_CR1_UE;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b38:	f3bf 8f4f 	dsb	sy
}
 8003b3c:	bf00      	nop
	__DSB();
	(void)(instance->CR1);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003b42:	f3bf 8f5f 	dmb	sy
}
 8003b46:	bf00      	nop
	__DMB();

	return 1;
 8003b48:	2301      	movs	r3, #1
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3718      	adds	r7, #24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40011000 	.word	0x40011000
 8003b58:	40011400 	.word	0x40011400

08003b5c <UartRcvr_send>:
	if(uart_rcvr == NULL || uart_rcvr->huart == NULL) return HAL_ERROR;
	return HAL_UART_Transmit(uart_rcvr->huart, (uint8_t*)&c, 1, UART_TX_TIMEOUT);
}

HAL_StatusTypeDef UartRcvr_send(uart_receiver_t *uart_rcvr, const uint8_t* str, uint16_t len)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
	if(uart_rcvr == NULL || uart_rcvr->huart == NULL) return HAL_ERROR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <UartRcvr_send+0x1c>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <UartRcvr_send+0x20>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e007      	b.n	8003b8c <UartRcvr_send+0x30>
	return HAL_UART_Transmit(uart_rcvr->huart, str, len, UART_TX_TIMEOUT);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8003b80:	88fa      	ldrh	r2, [r7, #6]
 8003b82:	2364      	movs	r3, #100	@ 0x64
 8003b84:	68b9      	ldr	r1, [r7, #8]
 8003b86:	f002 f9af 	bl	8005ee8 <HAL_UART_Transmit>
 8003b8a:	4603      	mov	r3, r0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <UartRcvr_print>:

HAL_StatusTypeDef UartRcvr_print(uart_receiver_t *uart_rcvr, const char* str)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
	return UartRcvr_send(uart_rcvr, (const uint8_t*)str, strlen(str));
 8003b9e:	6838      	ldr	r0, [r7, #0]
 8003ba0:	f7fc fb76 	bl	8000290 <strlen>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	6839      	ldr	r1, [r7, #0]
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f7ff ffd5 	bl	8003b5c <UartRcvr_send>
 8003bb2:	4603      	mov	r3, r0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <UartRcvr_it_swap>:

void UartRcvr_it_swap(uart_receiver_t *uart_rcvr)
{
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d05b      	beq.n	8003c82 <UartRcvr_it_swap+0xc6>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d057      	beq.n	8003c82 <UartRcvr_it_swap+0xc6>

	uint16_t next_index = (uart_rcvr->buffer_index_active + 1) % UART_RECEIVER_MAX_BUFFERS;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	4b2e      	ldr	r3, [pc, #184]	@ (8003c94 <UartRcvr_it_swap+0xd8>)
 8003bdc:	fb83 1302 	smull	r1, r3, r3, r2
 8003be0:	1099      	asrs	r1, r3, #2
 8003be2:	17d3      	asrs	r3, r2, #31
 8003be4:	1ac9      	subs	r1, r1, r3
 8003be6:	460b      	mov	r3, r1
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	1ad1      	subs	r1, r2, r3
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	81fb      	strh	r3, [r7, #14]
	if (uart_rcvr->buffers[next_index].data != NULL) return;
 8003bf4:	89fa      	ldrh	r2, [r7, #14]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d142      	bne.n	8003c86 <UartRcvr_it_swap+0xca>

	uart_rcvr->buffers[next_index].data = (uint8_t*)malloc(uart_rcvr->buffer_pending.len + 1);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c06:	3301      	adds	r3, #1
 8003c08:	89fc      	ldrh	r4, [r7, #14]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f003 fb34 	bl	8007278 <malloc>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461a      	mov	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
	if (uart_rcvr->buffers[next_index].data == NULL) return;
 8003c1a:	89fa      	ldrh	r2, [r7, #14]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d031      	beq.n	8003c8a <UartRcvr_it_swap+0xce>

	memcpy(uart_rcvr->buffers[next_index].data, uart_rcvr->buffer_pending.data, uart_rcvr->buffer_pending.len);
 8003c26:	89fa      	ldrh	r2, [r7, #14]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f004 fbba 	bl	80083b2 <memcpy>
	uart_rcvr->buffers[next_index].data[uart_rcvr->buffer_pending.len] = '\0';
 8003c3e:	89fa      	ldrh	r2, [r7, #14]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8003c4c:	4413      	add	r3, r2
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
	uart_rcvr->buffers[next_index].len = uart_rcvr->buffer_pending.len;
 8003c52:	89fb      	ldrh	r3, [r7, #14]
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4413      	add	r3, r2
 8003c60:	460a      	mov	r2, r1
 8003c62:	809a      	strh	r2, [r3, #4]
	uart_rcvr->buffers[next_index].processed = 0;
 8003c64:	89fb      	ldrh	r3, [r7, #14]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	80da      	strh	r2, [r3, #6]

	uart_rcvr->buffer_index_active = next_index;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	89fa      	ldrh	r2, [r7, #14]
 8003c74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	uart_rcvr->buffer_pending.len = 0;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003c80:	e004      	b.n	8003c8c <UartRcvr_it_swap+0xd0>
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 8003c82:	bf00      	nop
 8003c84:	e002      	b.n	8003c8c <UartRcvr_it_swap+0xd0>
	if (uart_rcvr->buffers[next_index].data != NULL) return;
 8003c86:	bf00      	nop
 8003c88:	e000      	b.n	8003c8c <UartRcvr_it_swap+0xd0>
	if (uart_rcvr->buffers[next_index].data == NULL) return;
 8003c8a:	bf00      	nop
}
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd90      	pop	{r4, r7, pc}
 8003c92:	bf00      	nop
 8003c94:	66666667 	.word	0x66666667

08003c98 <UartRcvr_it_process>:


void UartRcvr_it_process(uart_receiver_t *uart_rcvr, uint16_t offset, uint16_t size)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	807b      	strh	r3, [r7, #2]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	803b      	strh	r3, [r7, #0]
	uint16_t size_left = ((uart_rcvr->buffer_pending.len + size) <= UART_RECEIVER_MAX_BUFFER_LENGTH)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003cae:	461a      	mov	r2, r3
 8003cb0:	883b      	ldrh	r3, [r7, #0]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cb8:	d906      	bls.n	8003cc8 <UartRcvr_it_process+0x30>
			? size
			: (UART_RECEIVER_MAX_BUFFER_LENGTH - uart_rcvr->buffer_pending.len);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
	uint16_t size_left = ((uart_rcvr->buffer_pending.len + size) <= UART_RECEIVER_MAX_BUFFER_LENGTH)
 8003cc0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	e000      	b.n	8003cca <UartRcvr_it_process+0x32>
 8003cc8:	883b      	ldrh	r3, [r7, #0]
 8003cca:	81fb      	strh	r3, [r7, #14]
	if(size_left != 0)
 8003ccc:	89fb      	ldrh	r3, [r7, #14]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <UartRcvr_it_process+0x68>
	{
		memcpy(uart_rcvr->buffer_pending.data + uart_rcvr->buffer_pending.len, uart_rcvr->buffer_active.data + offset, size_left);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8003cdc:	1898      	adds	r0, r3, r2
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ce2:	887b      	ldrh	r3, [r7, #2]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	89fa      	ldrh	r2, [r7, #14]
 8003ce8:	4619      	mov	r1, r3
 8003cea:	f004 fb62 	bl	80083b2 <memcpy>
		uart_rcvr->buffer_pending.len += size_left;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8003cf4:	89fb      	ldrh	r3, [r7, #14]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	}
	if (size_left != size) {
 8003d00:	89fa      	ldrh	r2, [r7, #14]
 8003d02:	883b      	ldrh	r3, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d011      	beq.n	8003d2c <UartRcvr_it_process+0x94>
		UartRcvr_it_swap(uart_rcvr);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff57 	bl	8003bbc <UartRcvr_it_swap>
		UartRcvr_it_process(uart_rcvr, (offset + size_left) % UART_RECEIVER_CIRCULAR_BUFFER_SIZE, size - size_left);
 8003d0e:	887a      	ldrh	r2, [r7, #2]
 8003d10:	89fb      	ldrh	r3, [r7, #14]
 8003d12:	4413      	add	r3, r2
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1a:	b299      	uxth	r1, r3
 8003d1c:	883a      	ldrh	r2, [r7, #0]
 8003d1e:	89fb      	ldrh	r3, [r7, #14]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7ff ffb6 	bl	8003c98 <UartRcvr_it_process>
	}
}
 8003d2c:	bf00      	nop
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <UartRcvr_it_trigger>:

void UartRcvr_it_trigger(uart_receiver_t *uart_rcvr, uint16_t pos)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	807b      	strh	r3, [r7, #2]
	if(uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d038      	beq.n	8003db8 <UartRcvr_it_trigger+0x84>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d034      	beq.n	8003db8 <UartRcvr_it_trigger+0x84>
	if(uart_rcvr->old_pos != pos)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8003d54:	887a      	ldrh	r2, [r7, #2]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d02f      	beq.n	8003dba <UartRcvr_it_trigger+0x86>
	{
		if(pos > uart_rcvr->old_pos)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8003d60:	887a      	ldrh	r2, [r7, #2]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d90d      	bls.n	8003d82 <UartRcvr_it_trigger+0x4e>
		{
			UartRcvr_it_process(uart_rcvr, uart_rcvr->old_pos, pos - uart_rcvr->old_pos);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff ff8c 	bl	8003c98 <UartRcvr_it_process>
 8003d80:	e015      	b.n	8003dae <UartRcvr_it_trigger+0x7a>
		}
		else
		{
			UartRcvr_it_process(uart_rcvr, uart_rcvr->old_pos, UART_RECEIVER_CIRCULAR_BUFFER_SIZE - uart_rcvr->old_pos);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8003d8e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ff7e 	bl	8003c98 <UartRcvr_it_process>
			if(pos > 0)
 8003d9c:	887b      	ldrh	r3, [r7, #2]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d005      	beq.n	8003dae <UartRcvr_it_trigger+0x7a>
			{
				UartRcvr_it_process(uart_rcvr, 0, pos);
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	461a      	mov	r2, r3
 8003da6:	2100      	movs	r1, #0
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff75 	bl	8003c98 <UartRcvr_it_process>
			}
		}
		uart_rcvr->old_pos = pos;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	887a      	ldrh	r2, [r7, #2]
 8003db2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
 8003db6:	e000      	b.n	8003dba <UartRcvr_it_trigger+0x86>
	if(uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 8003db8:	bf00      	nop
	}
}
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <UartRcvr_it_error>:

void UartRcvr_it_error(uart_receiver_t *uart_rcvr)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d011      	beq.n	8003df2 <UartRcvr_it_error+0x32>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <UartRcvr_it_error+0x32>
	uart_rcvr->old_pos = 0;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	HAL_UARTEx_ReceiveToIdle_DMA(uart_rcvr->huart, uart_rcvr->buffer_active.data, UART_RECEIVER_CIRCULAR_BUFFER_SIZE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003de6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dea:	4619      	mov	r1, r3
 8003dec:	f002 f907 	bl	8005ffe <HAL_UARTEx_ReceiveToIdle_DMA>
 8003df0:	e000      	b.n	8003df4 <UartRcvr_it_error+0x34>
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 8003df2:	bf00      	nop
}
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e00:	4b0e      	ldr	r3, [pc, #56]	@ (8003e3c <HAL_Init+0x40>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0d      	ldr	r2, [pc, #52]	@ (8003e3c <HAL_Init+0x40>)
 8003e06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e3c <HAL_Init+0x40>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0a      	ldr	r2, [pc, #40]	@ (8003e3c <HAL_Init+0x40>)
 8003e12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e18:	4b08      	ldr	r3, [pc, #32]	@ (8003e3c <HAL_Init+0x40>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a07      	ldr	r2, [pc, #28]	@ (8003e3c <HAL_Init+0x40>)
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e24:	2003      	movs	r0, #3
 8003e26:	f000 f94f 	bl	80040c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e2a:	200f      	movs	r0, #15
 8003e2c:	f000 f808 	bl	8003e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e30:	f7fd fadc 	bl	80013ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023c00 	.word	0x40023c00

08003e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e48:	4b12      	ldr	r3, [pc, #72]	@ (8003e94 <HAL_InitTick+0x54>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b12      	ldr	r3, [pc, #72]	@ (8003e98 <HAL_InitTick+0x58>)
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	4619      	mov	r1, r3
 8003e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 f967 	bl	8004132 <HAL_SYSTICK_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e00e      	b.n	8003e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b0f      	cmp	r3, #15
 8003e72:	d80a      	bhi.n	8003e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e74:	2200      	movs	r2, #0
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7c:	f000 f92f 	bl	80040de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e80:	4a06      	ldr	r2, [pc, #24]	@ (8003e9c <HAL_InitTick+0x5c>)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e000      	b.n	8003e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20000000 	.word	0x20000000
 8003e98:	20000008 	.word	0x20000008
 8003e9c:	20000004 	.word	0x20000004

08003ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ea4:	4b06      	ldr	r3, [pc, #24]	@ (8003ec0 <HAL_IncTick+0x20>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <HAL_IncTick+0x24>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4413      	add	r3, r2
 8003eb0:	4a04      	ldr	r2, [pc, #16]	@ (8003ec4 <HAL_IncTick+0x24>)
 8003eb2:	6013      	str	r3, [r2, #0]
}
 8003eb4:	bf00      	nop
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000008 	.word	0x20000008
 8003ec4:	20000b48 	.word	0x20000b48

08003ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  return uwTick;
 8003ecc:	4b03      	ldr	r3, [pc, #12]	@ (8003edc <HAL_GetTick+0x14>)
 8003ece:	681b      	ldr	r3, [r3, #0]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	20000b48 	.word	0x20000b48

08003ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ee8:	f7ff ffee 	bl	8003ec8 <HAL_GetTick>
 8003eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d005      	beq.n	8003f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003efa:	4b0a      	ldr	r3, [pc, #40]	@ (8003f24 <HAL_Delay+0x44>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	461a      	mov	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f06:	bf00      	nop
 8003f08:	f7ff ffde 	bl	8003ec8 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d8f7      	bhi.n	8003f08 <HAL_Delay+0x28>
  {
  }
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000008 	.word	0x20000008

08003f28 <__NVIC_SetPriorityGrouping>:
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f38:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <__NVIC_SetPriorityGrouping+0x44>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f44:	4013      	ands	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f5a:	4a04      	ldr	r2, [pc, #16]	@ (8003f6c <__NVIC_SetPriorityGrouping+0x44>)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	60d3      	str	r3, [r2, #12]
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <__NVIC_GetPriorityGrouping>:
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f74:	4b04      	ldr	r3, [pc, #16]	@ (8003f88 <__NVIC_GetPriorityGrouping+0x18>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	f003 0307 	and.w	r3, r3, #7
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <__NVIC_EnableIRQ>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	db0b      	blt.n	8003fb6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f9e:	79fb      	ldrb	r3, [r7, #7]
 8003fa0:	f003 021f 	and.w	r2, r3, #31
 8003fa4:	4907      	ldr	r1, [pc, #28]	@ (8003fc4 <__NVIC_EnableIRQ+0x38>)
 8003fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003faa:	095b      	lsrs	r3, r3, #5
 8003fac:	2001      	movs	r0, #1
 8003fae:	fa00 f202 	lsl.w	r2, r0, r2
 8003fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	e000e100 	.word	0xe000e100

08003fc8 <__NVIC_SetPriority>:
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	4603      	mov	r3, r0
 8003fd0:	6039      	str	r1, [r7, #0]
 8003fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	db0a      	blt.n	8003ff2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	490c      	ldr	r1, [pc, #48]	@ (8004014 <__NVIC_SetPriority+0x4c>)
 8003fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe6:	0112      	lsls	r2, r2, #4
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	440b      	add	r3, r1
 8003fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ff0:	e00a      	b.n	8004008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4908      	ldr	r1, [pc, #32]	@ (8004018 <__NVIC_SetPriority+0x50>)
 8003ff8:	79fb      	ldrb	r3, [r7, #7]
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	3b04      	subs	r3, #4
 8004000:	0112      	lsls	r2, r2, #4
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	440b      	add	r3, r1
 8004006:	761a      	strb	r2, [r3, #24]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	e000e100 	.word	0xe000e100
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <NVIC_EncodePriority>:
{
 800401c:	b480      	push	{r7}
 800401e:	b089      	sub	sp, #36	@ 0x24
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f1c3 0307 	rsb	r3, r3, #7
 8004036:	2b04      	cmp	r3, #4
 8004038:	bf28      	it	cs
 800403a:	2304      	movcs	r3, #4
 800403c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	3304      	adds	r3, #4
 8004042:	2b06      	cmp	r3, #6
 8004044:	d902      	bls.n	800404c <NVIC_EncodePriority+0x30>
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3b03      	subs	r3, #3
 800404a:	e000      	b.n	800404e <NVIC_EncodePriority+0x32>
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004050:	f04f 32ff 	mov.w	r2, #4294967295
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	fa02 f303 	lsl.w	r3, r2, r3
 800405a:	43da      	mvns	r2, r3
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	401a      	ands	r2, r3
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004064:	f04f 31ff 	mov.w	r1, #4294967295
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	fa01 f303 	lsl.w	r3, r1, r3
 800406e:	43d9      	mvns	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004074:	4313      	orrs	r3, r2
}
 8004076:	4618      	mov	r0, r3
 8004078:	3724      	adds	r7, #36	@ 0x24
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3b01      	subs	r3, #1
 8004090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004094:	d301      	bcc.n	800409a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004096:	2301      	movs	r3, #1
 8004098:	e00f      	b.n	80040ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800409a:	4a0a      	ldr	r2, [pc, #40]	@ (80040c4 <SysTick_Config+0x40>)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3b01      	subs	r3, #1
 80040a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040a2:	210f      	movs	r1, #15
 80040a4:	f04f 30ff 	mov.w	r0, #4294967295
 80040a8:	f7ff ff8e 	bl	8003fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040ac:	4b05      	ldr	r3, [pc, #20]	@ (80040c4 <SysTick_Config+0x40>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040b2:	4b04      	ldr	r3, [pc, #16]	@ (80040c4 <SysTick_Config+0x40>)
 80040b4:	2207      	movs	r2, #7
 80040b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	e000e010 	.word	0xe000e010

080040c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f7ff ff29 	bl	8003f28 <__NVIC_SetPriorityGrouping>
}
 80040d6:	bf00      	nop
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	4603      	mov	r3, r0
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
 80040ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040f0:	f7ff ff3e 	bl	8003f70 <__NVIC_GetPriorityGrouping>
 80040f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	6978      	ldr	r0, [r7, #20]
 80040fc:	f7ff ff8e 	bl	800401c <NVIC_EncodePriority>
 8004100:	4602      	mov	r2, r0
 8004102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004106:	4611      	mov	r1, r2
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff ff5d 	bl	8003fc8 <__NVIC_SetPriority>
}
 800410e:	bf00      	nop
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}

08004116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	4603      	mov	r3, r0
 800411e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff ff31 	bl	8003f8c <__NVIC_EnableIRQ>
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff ffa2 	bl	8004084 <SysTick_Config>
 8004140:	4603      	mov	r3, r0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004158:	f7ff feb6 	bl	8003ec8 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e099      	b.n	800429c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0201 	bic.w	r2, r2, #1
 8004186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004188:	e00f      	b.n	80041aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800418a:	f7ff fe9d 	bl	8003ec8 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b05      	cmp	r3, #5
 8004196:	d908      	bls.n	80041aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2203      	movs	r2, #3
 80041a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e078      	b.n	800429c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e8      	bne.n	800418a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4b38      	ldr	r3, [pc, #224]	@ (80042a4 <HAL_DMA_Init+0x158>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	2b04      	cmp	r3, #4
 8004202:	d107      	bne.n	8004214 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420c:	4313      	orrs	r3, r2
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4313      	orrs	r3, r2
 8004212:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f023 0307 	bic.w	r3, r3, #7
 800422a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	2b04      	cmp	r3, #4
 800423c:	d117      	bne.n	800426e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00e      	beq.n	800426e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fb01 	bl	8004858 <DMA_CheckFifoParam>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2240      	movs	r2, #64	@ 0x40
 8004260:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800426a:	2301      	movs	r3, #1
 800426c:	e016      	b.n	800429c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fab8 	bl	80047ec <DMA_CalcBaseAndBitshift>
 800427c:	4603      	mov	r3, r0
 800427e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004284:	223f      	movs	r2, #63	@ 0x3f
 8004286:	409a      	lsls	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	f010803f 	.word	0xf010803f

080042a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_DMA_Start_IT+0x26>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e040      	b.n	8004350 <HAL_DMA_Start_IT+0xa8>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d12f      	bne.n	8004342 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fa4a 	bl	8004790 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004300:	223f      	movs	r2, #63	@ 0x3f
 8004302:	409a      	lsls	r2, r3
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0216 	orr.w	r2, r2, #22
 8004316:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0208 	orr.w	r2, r2, #8
 800432e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	e005      	b.n	800434e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800434a:	2302      	movs	r3, #2
 800434c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800434e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004364:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004366:	f7ff fdaf 	bl	8003ec8 <HAL_GetTick>
 800436a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004372:	b2db      	uxtb	r3, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d008      	beq.n	800438a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2280      	movs	r2, #128	@ 0x80
 800437c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e052      	b.n	8004430 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0216 	bic.w	r2, r2, #22
 8004398:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695a      	ldr	r2, [r3, #20]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <HAL_DMA_Abort+0x62>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0208 	bic.w	r2, r2, #8
 80043c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0201 	bic.w	r2, r2, #1
 80043d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043da:	e013      	b.n	8004404 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043dc:	f7ff fd74 	bl	8003ec8 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b05      	cmp	r3, #5
 80043e8:	d90c      	bls.n	8004404 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2203      	movs	r2, #3
 80043f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e015      	b.n	8004430 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e4      	bne.n	80043dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004416:	223f      	movs	r2, #63	@ 0x3f
 8004418:	409a      	lsls	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d004      	beq.n	8004456 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2280      	movs	r2, #128	@ 0x80
 8004450:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e00c      	b.n	8004470 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2205      	movs	r2, #5
 800445a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004488:	4b8e      	ldr	r3, [pc, #568]	@ (80046c4 <HAL_DMA_IRQHandler+0x248>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a8e      	ldr	r2, [pc, #568]	@ (80046c8 <HAL_DMA_IRQHandler+0x24c>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	0a9b      	lsrs	r3, r3, #10
 8004494:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a6:	2208      	movs	r2, #8
 80044a8:	409a      	lsls	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4013      	ands	r3, r2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01a      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0304 	and.w	r3, r3, #4
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d013      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0204 	bic.w	r2, r2, #4
 80044ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d4:	2208      	movs	r2, #8
 80044d6:	409a      	lsls	r2, r3
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e0:	f043 0201 	orr.w	r2, r3, #1
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ec:	2201      	movs	r2, #1
 80044ee:	409a      	lsls	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d012      	beq.n	800451e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00b      	beq.n	800451e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800450a:	2201      	movs	r2, #1
 800450c:	409a      	lsls	r2, r3
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004516:	f043 0202 	orr.w	r2, r3, #2
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004522:	2204      	movs	r2, #4
 8004524:	409a      	lsls	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4013      	ands	r3, r2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d012      	beq.n	8004554 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00b      	beq.n	8004554 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004540:	2204      	movs	r2, #4
 8004542:	409a      	lsls	r2, r3
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454c:	f043 0204 	orr.w	r2, r3, #4
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004558:	2210      	movs	r2, #16
 800455a:	409a      	lsls	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d043      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0308 	and.w	r3, r3, #8
 800456e:	2b00      	cmp	r3, #0
 8004570:	d03c      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004576:	2210      	movs	r2, #16
 8004578:	409a      	lsls	r2, r3
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d018      	beq.n	80045be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d108      	bne.n	80045ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d024      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	4798      	blx	r3
 80045aa:	e01f      	b.n	80045ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01b      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	4798      	blx	r3
 80045bc:	e016      	b.n	80045ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d107      	bne.n	80045dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0208 	bic.w	r2, r2, #8
 80045da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f0:	2220      	movs	r2, #32
 80045f2:	409a      	lsls	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 808f 	beq.w	800471c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8087 	beq.w	800471c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004612:	2220      	movs	r2, #32
 8004614:	409a      	lsls	r2, r3
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b05      	cmp	r3, #5
 8004624:	d136      	bne.n	8004694 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0216 	bic.w	r2, r2, #22
 8004634:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004644:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <HAL_DMA_IRQHandler+0x1da>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0208 	bic.w	r2, r2, #8
 8004664:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466a:	223f      	movs	r2, #63	@ 0x3f
 800466c:	409a      	lsls	r2, r3
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004686:	2b00      	cmp	r3, #0
 8004688:	d07e      	beq.n	8004788 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
        }
        return;
 8004692:	e079      	b.n	8004788 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01d      	beq.n	80046de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10d      	bne.n	80046cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d031      	beq.n	800471c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	4798      	blx	r3
 80046c0:	e02c      	b.n	800471c <HAL_DMA_IRQHandler+0x2a0>
 80046c2:	bf00      	nop
 80046c4:	20000000 	.word	0x20000000
 80046c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d023      	beq.n	800471c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
 80046dc:	e01e      	b.n	800471c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10f      	bne.n	800470c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0210 	bic.w	r2, r2, #16
 80046fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004720:	2b00      	cmp	r3, #0
 8004722:	d032      	beq.n	800478a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d022      	beq.n	8004776 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2205      	movs	r2, #5
 8004734:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f022 0201 	bic.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	3301      	adds	r3, #1
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	429a      	cmp	r2, r3
 8004752:	d307      	bcc.n	8004764 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1f2      	bne.n	8004748 <HAL_DMA_IRQHandler+0x2cc>
 8004762:	e000      	b.n	8004766 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004764:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d005      	beq.n	800478a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	4798      	blx	r3
 8004786:	e000      	b.n	800478a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004788:	bf00      	nop
    }
  }
}
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b40      	cmp	r3, #64	@ 0x40
 80047bc:	d108      	bne.n	80047d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80047ce:	e007      	b.n	80047e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	60da      	str	r2, [r3, #12]
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	3b10      	subs	r3, #16
 80047fc:	4a14      	ldr	r2, [pc, #80]	@ (8004850 <DMA_CalcBaseAndBitshift+0x64>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004806:	4a13      	ldr	r2, [pc, #76]	@ (8004854 <DMA_CalcBaseAndBitshift+0x68>)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b03      	cmp	r3, #3
 8004818:	d909      	bls.n	800482e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	1d1a      	adds	r2, r3, #4
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	659a      	str	r2, [r3, #88]	@ 0x58
 800482c:	e007      	b.n	800483e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	aaaaaaab 	.word	0xaaaaaaab
 8004854:	0800a3f0 	.word	0x0800a3f0

08004858 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004868:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d11f      	bne.n	80048b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2b03      	cmp	r3, #3
 8004876:	d856      	bhi.n	8004926 <DMA_CheckFifoParam+0xce>
 8004878:	a201      	add	r2, pc, #4	@ (adr r2, 8004880 <DMA_CheckFifoParam+0x28>)
 800487a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487e:	bf00      	nop
 8004880:	08004891 	.word	0x08004891
 8004884:	080048a3 	.word	0x080048a3
 8004888:	08004891 	.word	0x08004891
 800488c:	08004927 	.word	0x08004927
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004894:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d046      	beq.n	800492a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048a0:	e043      	b.n	800492a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048aa:	d140      	bne.n	800492e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048b0:	e03d      	b.n	800492e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ba:	d121      	bne.n	8004900 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b03      	cmp	r3, #3
 80048c0:	d837      	bhi.n	8004932 <DMA_CheckFifoParam+0xda>
 80048c2:	a201      	add	r2, pc, #4	@ (adr r2, 80048c8 <DMA_CheckFifoParam+0x70>)
 80048c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c8:	080048d9 	.word	0x080048d9
 80048cc:	080048df 	.word	0x080048df
 80048d0:	080048d9 	.word	0x080048d9
 80048d4:	080048f1 	.word	0x080048f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	73fb      	strb	r3, [r7, #15]
      break;
 80048dc:	e030      	b.n	8004940 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d025      	beq.n	8004936 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048ee:	e022      	b.n	8004936 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048f8:	d11f      	bne.n	800493a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048fe:	e01c      	b.n	800493a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d903      	bls.n	800490e <DMA_CheckFifoParam+0xb6>
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b03      	cmp	r3, #3
 800490a:	d003      	beq.n	8004914 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800490c:	e018      	b.n	8004940 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
      break;
 8004912:	e015      	b.n	8004940 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004918:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00e      	beq.n	800493e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      break;
 8004924:	e00b      	b.n	800493e <DMA_CheckFifoParam+0xe6>
      break;
 8004926:	bf00      	nop
 8004928:	e00a      	b.n	8004940 <DMA_CheckFifoParam+0xe8>
      break;
 800492a:	bf00      	nop
 800492c:	e008      	b.n	8004940 <DMA_CheckFifoParam+0xe8>
      break;
 800492e:	bf00      	nop
 8004930:	e006      	b.n	8004940 <DMA_CheckFifoParam+0xe8>
      break;
 8004932:	bf00      	nop
 8004934:	e004      	b.n	8004940 <DMA_CheckFifoParam+0xe8>
      break;
 8004936:	bf00      	nop
 8004938:	e002      	b.n	8004940 <DMA_CheckFifoParam+0xe8>
      break;   
 800493a:	bf00      	nop
 800493c:	e000      	b.n	8004940 <DMA_CheckFifoParam+0xe8>
      break;
 800493e:	bf00      	nop
    }
  } 
  
  return status; 
 8004940:	7bfb      	ldrb	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop

08004950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004950:	b480      	push	{r7}
 8004952:	b089      	sub	sp, #36	@ 0x24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800495a:	2300      	movs	r3, #0
 800495c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800495e:	2300      	movs	r3, #0
 8004960:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004962:	2300      	movs	r3, #0
 8004964:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	e177      	b.n	8004c5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800496c:	2201      	movs	r2, #1
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4013      	ands	r3, r2
 800497e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	429a      	cmp	r2, r3
 8004986:	f040 8166 	bne.w	8004c56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b01      	cmp	r3, #1
 8004994:	d005      	beq.n	80049a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d130      	bne.n	8004a04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	2203      	movs	r2, #3
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	4013      	ands	r3, r2
 80049b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	fa02 f303 	lsl.w	r3, r2, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049d8:	2201      	movs	r2, #1
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	43db      	mvns	r3, r3
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	4013      	ands	r3, r2
 80049e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	091b      	lsrs	r3, r3, #4
 80049ee:	f003 0201 	and.w	r2, r3, #1
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 0303 	and.w	r3, r3, #3
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d017      	beq.n	8004a40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a20:	43db      	mvns	r3, r3
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4013      	ands	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f003 0303 	and.w	r3, r3, #3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d123      	bne.n	8004a94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	08da      	lsrs	r2, r3, #3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3208      	adds	r2, #8
 8004a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	220f      	movs	r2, #15
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	08da      	lsrs	r2, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3208      	adds	r2, #8
 8004a8e:	69b9      	ldr	r1, [r7, #24]
 8004a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	2203      	movs	r2, #3
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 0203 	and.w	r2, r3, #3
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	005b      	lsls	r3, r3, #1
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69ba      	ldr	r2, [r7, #24]
 8004ac6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 80c0 	beq.w	8004c56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	4b66      	ldr	r3, [pc, #408]	@ (8004c74 <HAL_GPIO_Init+0x324>)
 8004adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ade:	4a65      	ldr	r2, [pc, #404]	@ (8004c74 <HAL_GPIO_Init+0x324>)
 8004ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ae6:	4b63      	ldr	r3, [pc, #396]	@ (8004c74 <HAL_GPIO_Init+0x324>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004af2:	4a61      	ldr	r2, [pc, #388]	@ (8004c78 <HAL_GPIO_Init+0x328>)
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	089b      	lsrs	r3, r3, #2
 8004af8:	3302      	adds	r3, #2
 8004afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	220f      	movs	r2, #15
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4013      	ands	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a58      	ldr	r2, [pc, #352]	@ (8004c7c <HAL_GPIO_Init+0x32c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d037      	beq.n	8004b8e <HAL_GPIO_Init+0x23e>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a57      	ldr	r2, [pc, #348]	@ (8004c80 <HAL_GPIO_Init+0x330>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d031      	beq.n	8004b8a <HAL_GPIO_Init+0x23a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a56      	ldr	r2, [pc, #344]	@ (8004c84 <HAL_GPIO_Init+0x334>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d02b      	beq.n	8004b86 <HAL_GPIO_Init+0x236>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a55      	ldr	r2, [pc, #340]	@ (8004c88 <HAL_GPIO_Init+0x338>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d025      	beq.n	8004b82 <HAL_GPIO_Init+0x232>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a54      	ldr	r2, [pc, #336]	@ (8004c8c <HAL_GPIO_Init+0x33c>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d01f      	beq.n	8004b7e <HAL_GPIO_Init+0x22e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a53      	ldr	r2, [pc, #332]	@ (8004c90 <HAL_GPIO_Init+0x340>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d019      	beq.n	8004b7a <HAL_GPIO_Init+0x22a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a52      	ldr	r2, [pc, #328]	@ (8004c94 <HAL_GPIO_Init+0x344>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <HAL_GPIO_Init+0x226>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a51      	ldr	r2, [pc, #324]	@ (8004c98 <HAL_GPIO_Init+0x348>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d00d      	beq.n	8004b72 <HAL_GPIO_Init+0x222>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a50      	ldr	r2, [pc, #320]	@ (8004c9c <HAL_GPIO_Init+0x34c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d007      	beq.n	8004b6e <HAL_GPIO_Init+0x21e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4f      	ldr	r2, [pc, #316]	@ (8004ca0 <HAL_GPIO_Init+0x350>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d101      	bne.n	8004b6a <HAL_GPIO_Init+0x21a>
 8004b66:	2309      	movs	r3, #9
 8004b68:	e012      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b6a:	230a      	movs	r3, #10
 8004b6c:	e010      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b6e:	2308      	movs	r3, #8
 8004b70:	e00e      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b72:	2307      	movs	r3, #7
 8004b74:	e00c      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b76:	2306      	movs	r3, #6
 8004b78:	e00a      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b7a:	2305      	movs	r3, #5
 8004b7c:	e008      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b7e:	2304      	movs	r3, #4
 8004b80:	e006      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b82:	2303      	movs	r3, #3
 8004b84:	e004      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e002      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <HAL_GPIO_Init+0x240>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	f002 0203 	and.w	r2, r2, #3
 8004b96:	0092      	lsls	r2, r2, #2
 8004b98:	4093      	lsls	r3, r2
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ba0:	4935      	ldr	r1, [pc, #212]	@ (8004c78 <HAL_GPIO_Init+0x328>)
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	089b      	lsrs	r3, r3, #2
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bae:	4b3d      	ldr	r3, [pc, #244]	@ (8004ca4 <HAL_GPIO_Init+0x354>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bd2:	4a34      	ldr	r2, [pc, #208]	@ (8004ca4 <HAL_GPIO_Init+0x354>)
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bd8:	4b32      	ldr	r3, [pc, #200]	@ (8004ca4 <HAL_GPIO_Init+0x354>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	4013      	ands	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bfc:	4a29      	ldr	r2, [pc, #164]	@ (8004ca4 <HAL_GPIO_Init+0x354>)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c02:	4b28      	ldr	r3, [pc, #160]	@ (8004ca4 <HAL_GPIO_Init+0x354>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c26:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca4 <HAL_GPIO_Init+0x354>)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca4 <HAL_GPIO_Init+0x354>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c50:	4a14      	ldr	r2, [pc, #80]	@ (8004ca4 <HAL_GPIO_Init+0x354>)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b0f      	cmp	r3, #15
 8004c60:	f67f ae84 	bls.w	800496c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	3724      	adds	r7, #36	@ 0x24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	40023800 	.word	0x40023800
 8004c78:	40013800 	.word	0x40013800
 8004c7c:	40020000 	.word	0x40020000
 8004c80:	40020400 	.word	0x40020400
 8004c84:	40020800 	.word	0x40020800
 8004c88:	40020c00 	.word	0x40020c00
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40021400 	.word	0x40021400
 8004c94:	40021800 	.word	0x40021800
 8004c98:	40021c00 	.word	0x40021c00
 8004c9c:	40022000 	.word	0x40022000
 8004ca0:	40022400 	.word	0x40022400
 8004ca4:	40013c00 	.word	0x40013c00

08004ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e267      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d075      	beq.n	8004db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cc6:	4b88      	ldr	r3, [pc, #544]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 030c 	and.w	r3, r3, #12
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d00c      	beq.n	8004cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cd2:	4b85      	ldr	r3, [pc, #532]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d112      	bne.n	8004d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cde:	4b82      	ldr	r3, [pc, #520]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cea:	d10b      	bne.n	8004d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cec:	4b7e      	ldr	r3, [pc, #504]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d05b      	beq.n	8004db0 <HAL_RCC_OscConfig+0x108>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d157      	bne.n	8004db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e242      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d0c:	d106      	bne.n	8004d1c <HAL_RCC_OscConfig+0x74>
 8004d0e:	4b76      	ldr	r3, [pc, #472]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a75      	ldr	r2, [pc, #468]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	e01d      	b.n	8004d58 <HAL_RCC_OscConfig+0xb0>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d24:	d10c      	bne.n	8004d40 <HAL_RCC_OscConfig+0x98>
 8004d26:	4b70      	ldr	r3, [pc, #448]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a6f      	ldr	r2, [pc, #444]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	4b6d      	ldr	r3, [pc, #436]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a6c      	ldr	r2, [pc, #432]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3c:	6013      	str	r3, [r2, #0]
 8004d3e:	e00b      	b.n	8004d58 <HAL_RCC_OscConfig+0xb0>
 8004d40:	4b69      	ldr	r3, [pc, #420]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a68      	ldr	r2, [pc, #416]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	4b66      	ldr	r3, [pc, #408]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a65      	ldr	r2, [pc, #404]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d013      	beq.n	8004d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d60:	f7ff f8b2 	bl	8003ec8 <HAL_GetTick>
 8004d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d68:	f7ff f8ae 	bl	8003ec8 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	@ 0x64
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e207      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0f0      	beq.n	8004d68 <HAL_RCC_OscConfig+0xc0>
 8004d86:	e014      	b.n	8004db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7ff f89e 	bl	8003ec8 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d90:	f7ff f89a 	bl	8003ec8 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	@ 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e1f3      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004da2:	4b51      	ldr	r3, [pc, #324]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0xe8>
 8004dae:	e000      	b.n	8004db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d063      	beq.n	8004e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	f003 030c 	and.w	r3, r3, #12
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00b      	beq.n	8004de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dca:	4b47      	ldr	r3, [pc, #284]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d11c      	bne.n	8004e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dd6:	4b44      	ldr	r3, [pc, #272]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d116      	bne.n	8004e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004de2:	4b41      	ldr	r3, [pc, #260]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d005      	beq.n	8004dfa <HAL_RCC_OscConfig+0x152>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e1c7      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4937      	ldr	r1, [pc, #220]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0e:	e03a      	b.n	8004e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d020      	beq.n	8004e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e18:	4b34      	ldr	r3, [pc, #208]	@ (8004eec <HAL_RCC_OscConfig+0x244>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1e:	f7ff f853 	bl	8003ec8 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e26:	f7ff f84f 	bl	8003ec8 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e1a8      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e38:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e44:	4b28      	ldr	r3, [pc, #160]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	4925      	ldr	r1, [pc, #148]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	600b      	str	r3, [r1, #0]
 8004e58:	e015      	b.n	8004e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e5a:	4b24      	ldr	r3, [pc, #144]	@ (8004eec <HAL_RCC_OscConfig+0x244>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7ff f832 	bl	8003ec8 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e68:	f7ff f82e 	bl	8003ec8 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e187      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d036      	beq.n	8004f00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d016      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e9a:	4b15      	ldr	r3, [pc, #84]	@ (8004ef0 <HAL_RCC_OscConfig+0x248>)
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea0:	f7ff f812 	bl	8003ec8 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ea8:	f7ff f80e 	bl	8003ec8 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e167      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0f0      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x200>
 8004ec6:	e01b      	b.n	8004f00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ec8:	4b09      	ldr	r3, [pc, #36]	@ (8004ef0 <HAL_RCC_OscConfig+0x248>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ece:	f7fe fffb 	bl	8003ec8 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed4:	e00e      	b.n	8004ef4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ed6:	f7fe fff7 	bl	8003ec8 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d907      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e150      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	42470000 	.word	0x42470000
 8004ef0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ef4:	4b88      	ldr	r3, [pc, #544]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1ea      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8097 	beq.w	800503c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f12:	4b81      	ldr	r3, [pc, #516]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10f      	bne.n	8004f3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	4b7d      	ldr	r3, [pc, #500]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	4a7c      	ldr	r2, [pc, #496]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f2e:	4b7a      	ldr	r3, [pc, #488]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f36:	60bb      	str	r3, [r7, #8]
 8004f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3e:	4b77      	ldr	r3, [pc, #476]	@ (800511c <HAL_RCC_OscConfig+0x474>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d118      	bne.n	8004f7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f4a:	4b74      	ldr	r3, [pc, #464]	@ (800511c <HAL_RCC_OscConfig+0x474>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a73      	ldr	r2, [pc, #460]	@ (800511c <HAL_RCC_OscConfig+0x474>)
 8004f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f56:	f7fe ffb7 	bl	8003ec8 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5c:	e008      	b.n	8004f70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5e:	f7fe ffb3 	bl	8003ec8 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d901      	bls.n	8004f70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e10c      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f70:	4b6a      	ldr	r3, [pc, #424]	@ (800511c <HAL_RCC_OscConfig+0x474>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0f0      	beq.n	8004f5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d106      	bne.n	8004f92 <HAL_RCC_OscConfig+0x2ea>
 8004f84:	4b64      	ldr	r3, [pc, #400]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f88:	4a63      	ldr	r2, [pc, #396]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f90:	e01c      	b.n	8004fcc <HAL_RCC_OscConfig+0x324>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	2b05      	cmp	r3, #5
 8004f98:	d10c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x30c>
 8004f9a:	4b5f      	ldr	r3, [pc, #380]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9e:	4a5e      	ldr	r2, [pc, #376]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fa0:	f043 0304 	orr.w	r3, r3, #4
 8004fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa6:	4b5c      	ldr	r3, [pc, #368]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004faa:	4a5b      	ldr	r2, [pc, #364]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fac:	f043 0301 	orr.w	r3, r3, #1
 8004fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fb2:	e00b      	b.n	8004fcc <HAL_RCC_OscConfig+0x324>
 8004fb4:	4b58      	ldr	r3, [pc, #352]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb8:	4a57      	ldr	r2, [pc, #348]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fba:	f023 0301 	bic.w	r3, r3, #1
 8004fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fc0:	4b55      	ldr	r3, [pc, #340]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc4:	4a54      	ldr	r2, [pc, #336]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004fc6:	f023 0304 	bic.w	r3, r3, #4
 8004fca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d015      	beq.n	8005000 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd4:	f7fe ff78 	bl	8003ec8 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fda:	e00a      	b.n	8004ff2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fdc:	f7fe ff74 	bl	8003ec8 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e0cb      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ff2:	4b49      	ldr	r3, [pc, #292]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0ee      	beq.n	8004fdc <HAL_RCC_OscConfig+0x334>
 8004ffe:	e014      	b.n	800502a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005000:	f7fe ff62 	bl	8003ec8 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005006:	e00a      	b.n	800501e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005008:	f7fe ff5e 	bl	8003ec8 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e0b5      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800501e:	4b3e      	ldr	r3, [pc, #248]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1ee      	bne.n	8005008 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800502a:	7dfb      	ldrb	r3, [r7, #23]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d105      	bne.n	800503c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005030:	4b39      	ldr	r3, [pc, #228]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005034:	4a38      	ldr	r2, [pc, #224]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800503a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 80a1 	beq.w	8005188 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005046:	4b34      	ldr	r3, [pc, #208]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f003 030c 	and.w	r3, r3, #12
 800504e:	2b08      	cmp	r3, #8
 8005050:	d05c      	beq.n	800510c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d141      	bne.n	80050de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800505a:	4b31      	ldr	r3, [pc, #196]	@ (8005120 <HAL_RCC_OscConfig+0x478>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005060:	f7fe ff32 	bl	8003ec8 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005068:	f7fe ff2e 	bl	8003ec8 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e087      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800507a:	4b27      	ldr	r3, [pc, #156]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69da      	ldr	r2, [r3, #28]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	019b      	lsls	r3, r3, #6
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	085b      	lsrs	r3, r3, #1
 800509e:	3b01      	subs	r3, #1
 80050a0:	041b      	lsls	r3, r3, #16
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a8:	061b      	lsls	r3, r3, #24
 80050aa:	491b      	ldr	r1, [pc, #108]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005120 <HAL_RCC_OscConfig+0x478>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b6:	f7fe ff07 	bl	8003ec8 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050bc:	e008      	b.n	80050d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050be:	f7fe ff03 	bl	8003ec8 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e05c      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d0:	4b11      	ldr	r3, [pc, #68]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d0f0      	beq.n	80050be <HAL_RCC_OscConfig+0x416>
 80050dc:	e054      	b.n	8005188 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050de:	4b10      	ldr	r3, [pc, #64]	@ (8005120 <HAL_RCC_OscConfig+0x478>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e4:	f7fe fef0 	bl	8003ec8 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fe feec 	bl	8003ec8 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e045      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fe:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <HAL_RCC_OscConfig+0x470>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x444>
 800510a:	e03d      	b.n	8005188 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d107      	bne.n	8005124 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e038      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
 8005118:	40023800 	.word	0x40023800
 800511c:	40007000 	.word	0x40007000
 8005120:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005124:	4b1b      	ldr	r3, [pc, #108]	@ (8005194 <HAL_RCC_OscConfig+0x4ec>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d028      	beq.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d121      	bne.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514a:	429a      	cmp	r2, r3
 800514c:	d11a      	bne.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800515a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800515c:	4293      	cmp	r3, r2
 800515e:	d111      	bne.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	3b01      	subs	r3, #1
 800516e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005170:	429a      	cmp	r2, r3
 8005172:	d107      	bne.n	8005184 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40023800 	.word	0x40023800

08005198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0cc      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80051ac:	4b68      	ldr	r3, [pc, #416]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d90c      	bls.n	80051d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ba:	4b65      	ldr	r3, [pc, #404]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051c2:	4b63      	ldr	r3, [pc, #396]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0b8      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d020      	beq.n	8005222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051ec:	4b59      	ldr	r3, [pc, #356]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4a58      	ldr	r2, [pc, #352]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80051f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005204:	4b53      	ldr	r3, [pc, #332]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	4a52      	ldr	r2, [pc, #328]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 800520a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800520e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005210:	4b50      	ldr	r3, [pc, #320]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	494d      	ldr	r1, [pc, #308]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d044      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d107      	bne.n	8005246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005236:	4b47      	ldr	r3, [pc, #284]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d119      	bne.n	8005276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e07f      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d003      	beq.n	8005256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005252:	2b03      	cmp	r3, #3
 8005254:	d107      	bne.n	8005266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005256:	4b3f      	ldr	r3, [pc, #252]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d109      	bne.n	8005276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e06f      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005266:	4b3b      	ldr	r3, [pc, #236]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e067      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005276:	4b37      	ldr	r3, [pc, #220]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f023 0203 	bic.w	r2, r3, #3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	4934      	ldr	r1, [pc, #208]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005284:	4313      	orrs	r3, r2
 8005286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005288:	f7fe fe1e 	bl	8003ec8 <HAL_GetTick>
 800528c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528e:	e00a      	b.n	80052a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005290:	f7fe fe1a 	bl	8003ec8 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800529e:	4293      	cmp	r3, r2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e04f      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 020c 	and.w	r2, r3, #12
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d1eb      	bne.n	8005290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052b8:	4b25      	ldr	r3, [pc, #148]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 030f 	and.w	r3, r3, #15
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d20c      	bcs.n	80052e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c6:	4b22      	ldr	r3, [pc, #136]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80052c8:	683a      	ldr	r2, [r7, #0]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b20      	ldr	r3, [pc, #128]	@ (8005350 <HAL_RCC_ClockConfig+0x1b8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e032      	b.n	8005346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d008      	beq.n	80052fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052ec:	4b19      	ldr	r3, [pc, #100]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	4916      	ldr	r1, [pc, #88]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800530a:	4b12      	ldr	r3, [pc, #72]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	490e      	ldr	r1, [pc, #56]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 800531a:	4313      	orrs	r3, r2
 800531c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800531e:	f000 f821 	bl	8005364 <HAL_RCC_GetSysClockFreq>
 8005322:	4602      	mov	r2, r0
 8005324:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <HAL_RCC_ClockConfig+0x1bc>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	091b      	lsrs	r3, r3, #4
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	490a      	ldr	r1, [pc, #40]	@ (8005358 <HAL_RCC_ClockConfig+0x1c0>)
 8005330:	5ccb      	ldrb	r3, [r1, r3]
 8005332:	fa22 f303 	lsr.w	r3, r2, r3
 8005336:	4a09      	ldr	r2, [pc, #36]	@ (800535c <HAL_RCC_ClockConfig+0x1c4>)
 8005338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800533a:	4b09      	ldr	r3, [pc, #36]	@ (8005360 <HAL_RCC_ClockConfig+0x1c8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f7fe fd7e 	bl	8003e40 <HAL_InitTick>

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40023c00 	.word	0x40023c00
 8005354:	40023800 	.word	0x40023800
 8005358:	0800a3d8 	.word	0x0800a3d8
 800535c:	20000000 	.word	0x20000000
 8005360:	20000004 	.word	0x20000004

08005364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005368:	b090      	sub	sp, #64	@ 0x40
 800536a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005370:	2300      	movs	r3, #0
 8005372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005374:	2300      	movs	r3, #0
 8005376:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800537c:	4b59      	ldr	r3, [pc, #356]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 030c 	and.w	r3, r3, #12
 8005384:	2b08      	cmp	r3, #8
 8005386:	d00d      	beq.n	80053a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005388:	2b08      	cmp	r3, #8
 800538a:	f200 80a1 	bhi.w	80054d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0x34>
 8005392:	2b04      	cmp	r3, #4
 8005394:	d003      	beq.n	800539e <HAL_RCC_GetSysClockFreq+0x3a>
 8005396:	e09b      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005398:	4b53      	ldr	r3, [pc, #332]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800539a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800539c:	e09b      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800539e:	4b53      	ldr	r3, [pc, #332]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x188>)
 80053a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053a2:	e098      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053a4:	4b4f      	ldr	r3, [pc, #316]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ac:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053ae:	4b4d      	ldr	r3, [pc, #308]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d028      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053ba:	4b4a      	ldr	r3, [pc, #296]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	099b      	lsrs	r3, r3, #6
 80053c0:	2200      	movs	r2, #0
 80053c2:	623b      	str	r3, [r7, #32]
 80053c4:	627a      	str	r2, [r7, #36]	@ 0x24
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80053cc:	2100      	movs	r1, #0
 80053ce:	4b47      	ldr	r3, [pc, #284]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x188>)
 80053d0:	fb03 f201 	mul.w	r2, r3, r1
 80053d4:	2300      	movs	r3, #0
 80053d6:	fb00 f303 	mul.w	r3, r0, r3
 80053da:	4413      	add	r3, r2
 80053dc:	4a43      	ldr	r2, [pc, #268]	@ (80054ec <HAL_RCC_GetSysClockFreq+0x188>)
 80053de:	fba0 1202 	umull	r1, r2, r0, r2
 80053e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053e4:	460a      	mov	r2, r1
 80053e6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80053e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ea:	4413      	add	r3, r2
 80053ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f0:	2200      	movs	r2, #0
 80053f2:	61bb      	str	r3, [r7, #24]
 80053f4:	61fa      	str	r2, [r7, #28]
 80053f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80053fe:	f7fb fbe3 	bl	8000bc8 <__aeabi_uldivmod>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4613      	mov	r3, r2
 8005408:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800540a:	e053      	b.n	80054b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800540c:	4b35      	ldr	r3, [pc, #212]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	099b      	lsrs	r3, r3, #6
 8005412:	2200      	movs	r2, #0
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	617a      	str	r2, [r7, #20]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800541e:	f04f 0b00 	mov.w	fp, #0
 8005422:	4652      	mov	r2, sl
 8005424:	465b      	mov	r3, fp
 8005426:	f04f 0000 	mov.w	r0, #0
 800542a:	f04f 0100 	mov.w	r1, #0
 800542e:	0159      	lsls	r1, r3, #5
 8005430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005434:	0150      	lsls	r0, r2, #5
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	ebb2 080a 	subs.w	r8, r2, sl
 800543e:	eb63 090b 	sbc.w	r9, r3, fp
 8005442:	f04f 0200 	mov.w	r2, #0
 8005446:	f04f 0300 	mov.w	r3, #0
 800544a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800544e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005452:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005456:	ebb2 0408 	subs.w	r4, r2, r8
 800545a:	eb63 0509 	sbc.w	r5, r3, r9
 800545e:	f04f 0200 	mov.w	r2, #0
 8005462:	f04f 0300 	mov.w	r3, #0
 8005466:	00eb      	lsls	r3, r5, #3
 8005468:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800546c:	00e2      	lsls	r2, r4, #3
 800546e:	4614      	mov	r4, r2
 8005470:	461d      	mov	r5, r3
 8005472:	eb14 030a 	adds.w	r3, r4, sl
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	eb45 030b 	adc.w	r3, r5, fp
 800547c:	607b      	str	r3, [r7, #4]
 800547e:	f04f 0200 	mov.w	r2, #0
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	e9d7 4500 	ldrd	r4, r5, [r7]
 800548a:	4629      	mov	r1, r5
 800548c:	028b      	lsls	r3, r1, #10
 800548e:	4621      	mov	r1, r4
 8005490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005494:	4621      	mov	r1, r4
 8005496:	028a      	lsls	r2, r1, #10
 8005498:	4610      	mov	r0, r2
 800549a:	4619      	mov	r1, r3
 800549c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800549e:	2200      	movs	r2, #0
 80054a0:	60bb      	str	r3, [r7, #8]
 80054a2:	60fa      	str	r2, [r7, #12]
 80054a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054a8:	f7fb fb8e 	bl	8000bc8 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4613      	mov	r3, r2
 80054b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054b4:	4b0b      	ldr	r3, [pc, #44]	@ (80054e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	3301      	adds	r3, #1
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80054c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054ce:	e002      	b.n	80054d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054d0:	4b05      	ldr	r3, [pc, #20]	@ (80054e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80054d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80054d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3740      	adds	r7, #64	@ 0x40
 80054dc:	46bd      	mov	sp, r7
 80054de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054e2:	bf00      	nop
 80054e4:	40023800 	.word	0x40023800
 80054e8:	00f42400 	.word	0x00f42400
 80054ec:	017d7840 	.word	0x017d7840

080054f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054f4:	4b03      	ldr	r3, [pc, #12]	@ (8005504 <HAL_RCC_GetHCLKFreq+0x14>)
 80054f6:	681b      	ldr	r3, [r3, #0]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	20000000 	.word	0x20000000

08005508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800550c:	f7ff fff0 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005510:	4602      	mov	r2, r0
 8005512:	4b05      	ldr	r3, [pc, #20]	@ (8005528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	0a9b      	lsrs	r3, r3, #10
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	4903      	ldr	r1, [pc, #12]	@ (800552c <HAL_RCC_GetPCLK1Freq+0x24>)
 800551e:	5ccb      	ldrb	r3, [r1, r3]
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005524:	4618      	mov	r0, r3
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40023800 	.word	0x40023800
 800552c:	0800a3e8 	.word	0x0800a3e8

08005530 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005534:	f7ff ffdc 	bl	80054f0 <HAL_RCC_GetHCLKFreq>
 8005538:	4602      	mov	r2, r0
 800553a:	4b05      	ldr	r3, [pc, #20]	@ (8005550 <HAL_RCC_GetPCLK2Freq+0x20>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	0b5b      	lsrs	r3, r3, #13
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	4903      	ldr	r1, [pc, #12]	@ (8005554 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005546:	5ccb      	ldrb	r3, [r1, r3]
 8005548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800554c:	4618      	mov	r0, r3
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40023800 	.word	0x40023800
 8005554:	0800a3e8 	.word	0x0800a3e8

08005558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d101      	bne.n	800556a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e041      	b.n	80055ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d106      	bne.n	8005584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7fc f8fc 	bl	800177c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f000 fa80 	bl	8005a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3708      	adds	r7, #8
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	d001      	beq.n	8005610 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e046      	b.n	800569e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a23      	ldr	r2, [pc, #140]	@ (80056ac <HAL_TIM_Base_Start+0xb4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d022      	beq.n	8005668 <HAL_TIM_Base_Start+0x70>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800562a:	d01d      	beq.n	8005668 <HAL_TIM_Base_Start+0x70>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a1f      	ldr	r2, [pc, #124]	@ (80056b0 <HAL_TIM_Base_Start+0xb8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d018      	beq.n	8005668 <HAL_TIM_Base_Start+0x70>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1e      	ldr	r2, [pc, #120]	@ (80056b4 <HAL_TIM_Base_Start+0xbc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d013      	beq.n	8005668 <HAL_TIM_Base_Start+0x70>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1c      	ldr	r2, [pc, #112]	@ (80056b8 <HAL_TIM_Base_Start+0xc0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00e      	beq.n	8005668 <HAL_TIM_Base_Start+0x70>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1b      	ldr	r2, [pc, #108]	@ (80056bc <HAL_TIM_Base_Start+0xc4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d009      	beq.n	8005668 <HAL_TIM_Base_Start+0x70>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a19      	ldr	r2, [pc, #100]	@ (80056c0 <HAL_TIM_Base_Start+0xc8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d004      	beq.n	8005668 <HAL_TIM_Base_Start+0x70>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a18      	ldr	r2, [pc, #96]	@ (80056c4 <HAL_TIM_Base_Start+0xcc>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d111      	bne.n	800568c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 0307 	and.w	r3, r3, #7
 8005672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b06      	cmp	r3, #6
 8005678:	d010      	beq.n	800569c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f042 0201 	orr.w	r2, r2, #1
 8005688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800568a:	e007      	b.n	800569c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40010000 	.word	0x40010000
 80056b0:	40000400 	.word	0x40000400
 80056b4:	40000800 	.word	0x40000800
 80056b8:	40000c00 	.word	0x40000c00
 80056bc:	40010400 	.word	0x40010400
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40001800 	.word	0x40001800

080056c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d020      	beq.n	800572c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01b      	beq.n	800572c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0202 	mvn.w	r2, #2
 80056fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699b      	ldr	r3, [r3, #24]
 800570a:	f003 0303 	and.w	r3, r3, #3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f9a3 	bl	8005a5e <HAL_TIM_IC_CaptureCallback>
 8005718:	e005      	b.n	8005726 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f995 	bl	8005a4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f9a6 	bl	8005a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	d020      	beq.n	8005778 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01b      	beq.n	8005778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0204 	mvn.w	r2, #4
 8005748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2202      	movs	r2, #2
 800574e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f97d 	bl	8005a5e <HAL_TIM_IC_CaptureCallback>
 8005764:	e005      	b.n	8005772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f96f 	bl	8005a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f980 	bl	8005a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 0308 	and.w	r3, r3, #8
 800577e:	2b00      	cmp	r3, #0
 8005780:	d020      	beq.n	80057c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f003 0308 	and.w	r3, r3, #8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01b      	beq.n	80057c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0208 	mvn.w	r2, #8
 8005794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2204      	movs	r2, #4
 800579a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f957 	bl	8005a5e <HAL_TIM_IC_CaptureCallback>
 80057b0:	e005      	b.n	80057be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f949 	bl	8005a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f95a 	bl	8005a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 0310 	and.w	r3, r3, #16
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d020      	beq.n	8005810 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 0310 	and.w	r3, r3, #16
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d01b      	beq.n	8005810 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f06f 0210 	mvn.w	r2, #16
 80057e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2208      	movs	r2, #8
 80057e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f931 	bl	8005a5e <HAL_TIM_IC_CaptureCallback>
 80057fc:	e005      	b.n	800580a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f923 	bl	8005a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f934 	bl	8005a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00c      	beq.n	8005834 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d007      	beq.n	8005834 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0201 	mvn.w	r2, #1
 800582c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f901 	bl	8005a36 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00c      	beq.n	8005858 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005844:	2b00      	cmp	r3, #0
 8005846:	d007      	beq.n	8005858 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 faee 	bl	8005e34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00c      	beq.n	800587c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005868:	2b00      	cmp	r3, #0
 800586a:	d007      	beq.n	800587c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f905 	bl	8005a86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00c      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d007      	beq.n	80058a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f06f 0220 	mvn.w	r2, #32
 8005898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fac0 	bl	8005e20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058a0:	bf00      	nop
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_TIM_ConfigClockSource+0x1c>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e0b4      	b.n	8005a2e <HAL_TIM_ConfigClockSource+0x186>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058fc:	d03e      	beq.n	800597c <HAL_TIM_ConfigClockSource+0xd4>
 80058fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005902:	f200 8087 	bhi.w	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800590a:	f000 8086 	beq.w	8005a1a <HAL_TIM_ConfigClockSource+0x172>
 800590e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005912:	d87f      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005914:	2b70      	cmp	r3, #112	@ 0x70
 8005916:	d01a      	beq.n	800594e <HAL_TIM_ConfigClockSource+0xa6>
 8005918:	2b70      	cmp	r3, #112	@ 0x70
 800591a:	d87b      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 800591c:	2b60      	cmp	r3, #96	@ 0x60
 800591e:	d050      	beq.n	80059c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005920:	2b60      	cmp	r3, #96	@ 0x60
 8005922:	d877      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005924:	2b50      	cmp	r3, #80	@ 0x50
 8005926:	d03c      	beq.n	80059a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005928:	2b50      	cmp	r3, #80	@ 0x50
 800592a:	d873      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 800592c:	2b40      	cmp	r3, #64	@ 0x40
 800592e:	d058      	beq.n	80059e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005930:	2b40      	cmp	r3, #64	@ 0x40
 8005932:	d86f      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005934:	2b30      	cmp	r3, #48	@ 0x30
 8005936:	d064      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x15a>
 8005938:	2b30      	cmp	r3, #48	@ 0x30
 800593a:	d86b      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 800593c:	2b20      	cmp	r3, #32
 800593e:	d060      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x15a>
 8005940:	2b20      	cmp	r3, #32
 8005942:	d867      	bhi.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
 8005944:	2b00      	cmp	r3, #0
 8005946:	d05c      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x15a>
 8005948:	2b10      	cmp	r3, #16
 800594a:	d05a      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0x15a>
 800594c:	e062      	b.n	8005a14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800595e:	f000 f9c3 	bl	8005ce8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	609a      	str	r2, [r3, #8]
      break;
 800597a:	e04f      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800598c:	f000 f9ac 	bl	8005ce8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800599e:	609a      	str	r2, [r3, #8]
      break;
 80059a0:	e03c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ae:	461a      	mov	r2, r3
 80059b0:	f000 f920 	bl	8005bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2150      	movs	r1, #80	@ 0x50
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 f979 	bl	8005cb2 <TIM_ITRx_SetConfig>
      break;
 80059c0:	e02c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059ce:	461a      	mov	r2, r3
 80059d0:	f000 f93f 	bl	8005c52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2160      	movs	r1, #96	@ 0x60
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 f969 	bl	8005cb2 <TIM_ITRx_SetConfig>
      break;
 80059e0:	e01c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ee:	461a      	mov	r2, r3
 80059f0:	f000 f900 	bl	8005bf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2140      	movs	r1, #64	@ 0x40
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 f959 	bl	8005cb2 <TIM_ITRx_SetConfig>
      break;
 8005a00:	e00c      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	f000 f950 	bl	8005cb2 <TIM_ITRx_SetConfig>
      break;
 8005a12:	e003      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	73fb      	strb	r3, [r7, #15]
      break;
 8005a18:	e000      	b.n	8005a1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr

08005a72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a72:	b480      	push	{r7}
 8005a74:	b083      	sub	sp, #12
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a86:	b480      	push	{r7}
 8005a88:	b083      	sub	sp, #12
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a46      	ldr	r2, [pc, #280]	@ (8005bc8 <TIM_Base_SetConfig+0x12c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d013      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aba:	d00f      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a43      	ldr	r2, [pc, #268]	@ (8005bcc <TIM_Base_SetConfig+0x130>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00b      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a42      	ldr	r2, [pc, #264]	@ (8005bd0 <TIM_Base_SetConfig+0x134>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d007      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a41      	ldr	r2, [pc, #260]	@ (8005bd4 <TIM_Base_SetConfig+0x138>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_Base_SetConfig+0x40>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a40      	ldr	r2, [pc, #256]	@ (8005bd8 <TIM_Base_SetConfig+0x13c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d108      	bne.n	8005aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a35      	ldr	r2, [pc, #212]	@ (8005bc8 <TIM_Base_SetConfig+0x12c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d02b      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005afc:	d027      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a32      	ldr	r2, [pc, #200]	@ (8005bcc <TIM_Base_SetConfig+0x130>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d023      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a31      	ldr	r2, [pc, #196]	@ (8005bd0 <TIM_Base_SetConfig+0x134>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d01f      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a30      	ldr	r2, [pc, #192]	@ (8005bd4 <TIM_Base_SetConfig+0x138>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d01b      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a2f      	ldr	r2, [pc, #188]	@ (8005bd8 <TIM_Base_SetConfig+0x13c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d017      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a2e      	ldr	r2, [pc, #184]	@ (8005bdc <TIM_Base_SetConfig+0x140>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a2d      	ldr	r2, [pc, #180]	@ (8005be0 <TIM_Base_SetConfig+0x144>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00f      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a2c      	ldr	r2, [pc, #176]	@ (8005be4 <TIM_Base_SetConfig+0x148>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00b      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a2b      	ldr	r2, [pc, #172]	@ (8005be8 <TIM_Base_SetConfig+0x14c>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d007      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a2a      	ldr	r2, [pc, #168]	@ (8005bec <TIM_Base_SetConfig+0x150>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_Base_SetConfig+0xb2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a29      	ldr	r2, [pc, #164]	@ (8005bf0 <TIM_Base_SetConfig+0x154>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d108      	bne.n	8005b60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a10      	ldr	r2, [pc, #64]	@ (8005bc8 <TIM_Base_SetConfig+0x12c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_Base_SetConfig+0xf8>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a12      	ldr	r2, [pc, #72]	@ (8005bd8 <TIM_Base_SetConfig+0x13c>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d103      	bne.n	8005b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	691a      	ldr	r2, [r3, #16]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d105      	bne.n	8005bba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f023 0201 	bic.w	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	611a      	str	r2, [r3, #16]
  }
}
 8005bba:	bf00      	nop
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40010000 	.word	0x40010000
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	40000c00 	.word	0x40000c00
 8005bd8:	40010400 	.word	0x40010400
 8005bdc:	40014000 	.word	0x40014000
 8005be0:	40014400 	.word	0x40014400
 8005be4:	40014800 	.word	0x40014800
 8005be8:	40001800 	.word	0x40001800
 8005bec:	40001c00 	.word	0x40001c00
 8005bf0:	40002000 	.word	0x40002000

08005bf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f023 0201 	bic.w	r2, r3, #1
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f023 030a 	bic.w	r3, r3, #10
 8005c30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	621a      	str	r2, [r3, #32]
}
 8005c46:	bf00      	nop
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr

08005c52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b087      	sub	sp, #28
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	60f8      	str	r0, [r7, #12]
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	f023 0210 	bic.w	r2, r3, #16
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	031b      	lsls	r3, r3, #12
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c8e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	011b      	lsls	r3, r3, #4
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	621a      	str	r2, [r3, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	371c      	adds	r7, #28
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b085      	sub	sp, #20
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f043 0307 	orr.w	r3, r3, #7
 8005cd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	609a      	str	r2, [r3, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	021a      	lsls	r2, r3, #8
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	609a      	str	r2, [r3, #8]
}
 8005d1c:	bf00      	nop
 8005d1e:	371c      	adds	r7, #28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e05a      	b.n	8005df6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a21      	ldr	r2, [pc, #132]	@ (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d022      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d8c:	d01d      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1d      	ldr	r2, [pc, #116]	@ (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d018      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a1a      	ldr	r2, [pc, #104]	@ (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d00e      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a18      	ldr	r2, [pc, #96]	@ (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d009      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a17      	ldr	r2, [pc, #92]	@ (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d004      	beq.n	8005dca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a15      	ldr	r2, [pc, #84]	@ (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d10c      	bne.n	8005de4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40010000 	.word	0x40010000
 8005e08:	40000400 	.word	0x40000400
 8005e0c:	40000800 	.word	0x40000800
 8005e10:	40000c00 	.word	0x40000c00
 8005e14:	40010400 	.word	0x40010400
 8005e18:	40014000 	.word	0x40014000
 8005e1c:	40001800 	.word	0x40001800

08005e20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e042      	b.n	8005ee0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d106      	bne.n	8005e74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7fb fd28 	bl	80018c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2224      	movs	r2, #36	@ 0x24
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 ff7b 	bl	8006d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	691a      	ldr	r2, [r3, #16]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ea0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695a      	ldr	r2, [r3, #20]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005eb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ec0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b08a      	sub	sp, #40	@ 0x28
 8005eec:	af02      	add	r7, sp, #8
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d175      	bne.n	8005ff4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <HAL_UART_Transmit+0x2c>
 8005f0e:	88fb      	ldrh	r3, [r7, #6]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e06e      	b.n	8005ff6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2221      	movs	r2, #33	@ 0x21
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f26:	f7fd ffcf 	bl	8003ec8 <HAL_GetTick>
 8005f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	88fa      	ldrh	r2, [r7, #6]
 8005f30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f40:	d108      	bne.n	8005f54 <HAL_UART_Transmit+0x6c>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d104      	bne.n	8005f54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	61bb      	str	r3, [r7, #24]
 8005f52:	e003      	b.n	8005f5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f5c:	e02e      	b.n	8005fbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2200      	movs	r2, #0
 8005f66:	2180      	movs	r1, #128	@ 0x80
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fc53 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e03a      	b.n	8005ff6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10b      	bne.n	8005f9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	3302      	adds	r3, #2
 8005f9a:	61bb      	str	r3, [r7, #24]
 8005f9c:	e007      	b.n	8005fae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	781a      	ldrb	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	3301      	adds	r3, #1
 8005fac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1cb      	bne.n	8005f5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2140      	movs	r1, #64	@ 0x40
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f000 fc1f 	bl	8006814 <UART_WaitOnFlagUntilTimeout>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e006      	b.n	8005ff6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	e000      	b.n	8005ff6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ff4:	2302      	movs	r3, #2
  }
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3720      	adds	r7, #32
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b08c      	sub	sp, #48	@ 0x30
 8006002:	af00      	add	r7, sp, #0
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	4613      	mov	r3, r2
 800600a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b20      	cmp	r3, #32
 8006016:	d14a      	bne.n	80060ae <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e043      	b.n	80060b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	461a      	mov	r2, r3
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fc44 	bl	80068c8 <UART_Start_Receive_DMA>
 8006040:	4603      	mov	r3, r0
 8006042:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8006046:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800604a:	2b00      	cmp	r3, #0
 800604c:	d12c      	bne.n	80060a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006052:	2b01      	cmp	r3, #1
 8006054:	d125      	bne.n	80060a2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	330c      	adds	r3, #12
 8006072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	e853 3f00 	ldrex	r3, [r3]
 800607a:	617b      	str	r3, [r7, #20]
   return(result);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f043 0310 	orr.w	r3, r3, #16
 8006082:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	330c      	adds	r3, #12
 800608a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800608c:	627a      	str	r2, [r7, #36]	@ 0x24
 800608e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006090:	6a39      	ldr	r1, [r7, #32]
 8006092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006094:	e841 2300 	strex	r3, r2, [r1]
 8006098:	61fb      	str	r3, [r7, #28]
   return(result);
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1e5      	bne.n	800606c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80060a0:	e002      	b.n	80060a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80060a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80060ac:	e000      	b.n	80060b0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80060ae:	2302      	movs	r3, #2
  }
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3730      	adds	r7, #48	@ 0x30
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b0ba      	sub	sp, #232	@ 0xe8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80060de:	2300      	movs	r3, #0
 80060e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80060f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10f      	bne.n	800611e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_UART_IRQHandler+0x66>
 800610a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800610e:	f003 0320 	and.w	r3, r3, #32
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fd77 	bl	8006c0a <UART_Receive_IT>
      return;
 800611c:	e25b      	b.n	80065d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800611e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006122:	2b00      	cmp	r3, #0
 8006124:	f000 80de 	beq.w	80062e4 <HAL_UART_IRQHandler+0x22c>
 8006128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d106      	bne.n	8006142 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006138:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 80d1 	beq.w	80062e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00b      	beq.n	8006166 <HAL_UART_IRQHandler+0xae>
 800614e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800615e:	f043 0201 	orr.w	r2, r3, #1
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <HAL_UART_IRQHandler+0xd2>
 8006172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006182:	f043 0202 	orr.w	r2, r3, #2
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800618a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00b      	beq.n	80061ae <HAL_UART_IRQHandler+0xf6>
 8006196:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a6:	f043 0204 	orr.w	r2, r3, #4
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d011      	beq.n	80061de <HAL_UART_IRQHandler+0x126>
 80061ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061be:	f003 0320 	and.w	r3, r3, #32
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d105      	bne.n	80061d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d005      	beq.n	80061de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d6:	f043 0208 	orr.w	r2, r3, #8
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	f000 81f2 	beq.w	80065cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ec:	f003 0320 	and.w	r3, r3, #32
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d008      	beq.n	8006206 <HAL_UART_IRQHandler+0x14e>
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fd02 	bl	8006c0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	695b      	ldr	r3, [r3, #20]
 800620c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006210:	2b40      	cmp	r3, #64	@ 0x40
 8006212:	bf0c      	ite	eq
 8006214:	2301      	moveq	r3, #1
 8006216:	2300      	movne	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d103      	bne.n	8006232 <HAL_UART_IRQHandler+0x17a>
 800622a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800622e:	2b00      	cmp	r3, #0
 8006230:	d04f      	beq.n	80062d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fc0a 	bl	8006a4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006242:	2b40      	cmp	r3, #64	@ 0x40
 8006244:	d141      	bne.n	80062ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3314      	adds	r3, #20
 800624c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800625c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006264:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3314      	adds	r3, #20
 800626e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006272:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006276:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800627e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006282:	e841 2300 	strex	r3, r2, [r1]
 8006286:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800628a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1d9      	bne.n	8006246 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006296:	2b00      	cmp	r3, #0
 8006298:	d013      	beq.n	80062c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629e:	4a7e      	ldr	r2, [pc, #504]	@ (8006498 <HAL_UART_IRQHandler+0x3e0>)
 80062a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe f8c6 	bl	8004438 <HAL_DMA_Abort_IT>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d016      	beq.n	80062e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062bc:	4610      	mov	r0, r2
 80062be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c0:	e00e      	b.n	80062e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fb f844 	bl	8001350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c8:	e00a      	b.n	80062e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fb f840 	bl	8001350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	e006      	b.n	80062e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fb f83c 	bl	8001350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80062de:	e175      	b.n	80065cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	bf00      	nop
    return;
 80062e2:	e173      	b.n	80065cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	f040 814f 	bne.w	800658c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062f2:	f003 0310 	and.w	r3, r3, #16
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 8148 	beq.w	800658c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006300:	f003 0310 	and.w	r3, r3, #16
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 8141 	beq.w	800658c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800630a:	2300      	movs	r3, #0
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	60bb      	str	r3, [r7, #8]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	60bb      	str	r3, [r7, #8]
 800631e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632a:	2b40      	cmp	r3, #64	@ 0x40
 800632c:	f040 80b6 	bne.w	800649c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800633c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 8145 	beq.w	80065d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800634a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800634e:	429a      	cmp	r2, r3
 8006350:	f080 813e 	bcs.w	80065d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800635a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006366:	f000 8088 	beq.w	800647a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006380:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006388:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	330c      	adds	r3, #12
 8006392:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006396:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800639a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800639e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063a6:	e841 2300 	strex	r3, r2, [r1]
 80063aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80063ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1d9      	bne.n	800636a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3314      	adds	r3, #20
 80063bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80063c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063c8:	f023 0301 	bic.w	r3, r3, #1
 80063cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3314      	adds	r3, #20
 80063d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80063da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80063de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80063e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80063ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e1      	bne.n	80063b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3314      	adds	r3, #20
 80063f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006402:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006404:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006408:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3314      	adds	r3, #20
 8006412:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006416:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006418:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800641c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006424:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e3      	bne.n	80063f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800644a:	f023 0310 	bic.w	r3, r3, #16
 800644e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800645c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800645e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006462:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800646a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e3      	bne.n	8006438 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006474:	4618      	mov	r0, r3
 8006476:	f7fd ff6f 	bl	8004358 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2202      	movs	r2, #2
 800647e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006488:	b29b      	uxth	r3, r3
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	b29b      	uxth	r3, r3
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7fa ff11 	bl	80012b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006496:	e09b      	b.n	80065d0 <HAL_UART_IRQHandler+0x518>
 8006498:	08006b13 	.word	0x08006b13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 808e 	beq.w	80065d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80064b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 8089 	beq.w	80065d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80064d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80064d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	330c      	adds	r3, #12
 80064e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80064e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80064e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80064ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1e3      	bne.n	80064c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3314      	adds	r3, #20
 8006500:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	623b      	str	r3, [r7, #32]
   return(result);
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3314      	adds	r3, #20
 800651a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800651e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006520:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006524:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800652c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e3      	bne.n	80064fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	330c      	adds	r3, #12
 8006546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0310 	bic.w	r3, r3, #16
 8006556:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	330c      	adds	r3, #12
 8006560:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006564:	61fa      	str	r2, [r7, #28]
 8006566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	69b9      	ldr	r1, [r7, #24]
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	617b      	str	r3, [r7, #20]
   return(result);
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e3      	bne.n	8006540 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800657e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7fa fe97 	bl	80012b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800658a:	e023      	b.n	80065d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800658c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006594:	2b00      	cmp	r3, #0
 8006596:	d009      	beq.n	80065ac <HAL_UART_IRQHandler+0x4f4>
 8006598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800659c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d003      	beq.n	80065ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fac8 	bl	8006b3a <UART_Transmit_IT>
    return;
 80065aa:	e014      	b.n	80065d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00e      	beq.n	80065d6 <HAL_UART_IRQHandler+0x51e>
 80065b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d008      	beq.n	80065d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fb08 	bl	8006bda <UART_EndTransmit_IT>
    return;
 80065ca:	e004      	b.n	80065d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80065cc:	bf00      	nop
 80065ce:	e002      	b.n	80065d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80065d0:	bf00      	nop
 80065d2:	e000      	b.n	80065d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80065d4:	bf00      	nop
  }
}
 80065d6:	37e8      	adds	r7, #232	@ 0xe8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b09c      	sub	sp, #112	@ 0x70
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006624:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006630:	2b00      	cmp	r3, #0
 8006632:	d172      	bne.n	800671a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006636:	2200      	movs	r2, #0
 8006638:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800663a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	330c      	adds	r3, #12
 8006640:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800664a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800664c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006650:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	330c      	adds	r3, #12
 8006658:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800665a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800665c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006660:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006668:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e5      	bne.n	800663a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3314      	adds	r3, #20
 8006674:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006678:	e853 3f00 	ldrex	r3, [r3]
 800667c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800667e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006680:	f023 0301 	bic.w	r3, r3, #1
 8006684:	667b      	str	r3, [r7, #100]	@ 0x64
 8006686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	3314      	adds	r3, #20
 800668c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800668e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006690:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006694:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800669c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e5      	bne.n	800666e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3314      	adds	r3, #20
 80066a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	623b      	str	r3, [r7, #32]
   return(result);
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80066ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3314      	adds	r3, #20
 80066c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80066c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80066c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ca:	e841 2300 	strex	r3, r2, [r1]
 80066ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e5      	bne.n	80066a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066d8:	2220      	movs	r2, #32
 80066da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d119      	bne.n	800671a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	330c      	adds	r3, #12
 80066ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	e853 3f00 	ldrex	r3, [r3]
 80066f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f023 0310 	bic.w	r3, r3, #16
 80066fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	330c      	adds	r3, #12
 8006704:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006706:	61fa      	str	r2, [r7, #28]
 8006708:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	69b9      	ldr	r1, [r7, #24]
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	617b      	str	r3, [r7, #20]
   return(result);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e5      	bne.n	80066e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800671a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800671c:	2200      	movs	r2, #0
 800671e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006720:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006724:	2b01      	cmp	r3, #1
 8006726:	d106      	bne.n	8006736 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800672a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800672c:	4619      	mov	r1, r3
 800672e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006730:	f7fa fdc2 	bl	80012b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006734:	e002      	b.n	800673c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006736:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006738:	f7ff ff5a 	bl	80065f0 <HAL_UART_RxCpltCallback>
}
 800673c:	bf00      	nop
 800673e:	3770      	adds	r7, #112	@ 0x70
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006750:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675c:	2b01      	cmp	r3, #1
 800675e:	d108      	bne.n	8006772 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006764:	085b      	lsrs	r3, r3, #1
 8006766:	b29b      	uxth	r3, r3
 8006768:	4619      	mov	r1, r3
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f7fa fda4 	bl	80012b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006770:	e002      	b.n	8006778 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f7ff ff46 	bl	8006604 <HAL_UART_RxHalfCpltCallback>
}
 8006778:	bf00      	nop
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006788:	2300      	movs	r3, #0
 800678a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006790:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679c:	2b80      	cmp	r3, #128	@ 0x80
 800679e:	bf0c      	ite	eq
 80067a0:	2301      	moveq	r3, #1
 80067a2:	2300      	movne	r3, #0
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	2b21      	cmp	r3, #33	@ 0x21
 80067b2:	d108      	bne.n	80067c6 <UART_DMAError+0x46>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d005      	beq.n	80067c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2200      	movs	r2, #0
 80067be:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80067c0:	68b8      	ldr	r0, [r7, #8]
 80067c2:	f000 f91b 	bl	80069fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d0:	2b40      	cmp	r3, #64	@ 0x40
 80067d2:	bf0c      	ite	eq
 80067d4:	2301      	moveq	r3, #1
 80067d6:	2300      	movne	r3, #0
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b22      	cmp	r3, #34	@ 0x22
 80067e6:	d108      	bne.n	80067fa <UART_DMAError+0x7a>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2200      	movs	r2, #0
 80067f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80067f4:	68b8      	ldr	r0, [r7, #8]
 80067f6:	f000 f929 	bl	8006a4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fe:	f043 0210 	orr.w	r2, r3, #16
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006806:	68b8      	ldr	r0, [r7, #8]
 8006808:	f7fa fda2 	bl	8001350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800680c:	bf00      	nop
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	4613      	mov	r3, r2
 8006822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006824:	e03b      	b.n	800689e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682c:	d037      	beq.n	800689e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800682e:	f7fd fb4b 	bl	8003ec8 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	6a3a      	ldr	r2, [r7, #32]
 800683a:	429a      	cmp	r2, r3
 800683c:	d302      	bcc.n	8006844 <UART_WaitOnFlagUntilTimeout+0x30>
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006844:	2303      	movs	r3, #3
 8006846:	e03a      	b.n	80068be <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d023      	beq.n	800689e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	2b80      	cmp	r3, #128	@ 0x80
 800685a:	d020      	beq.n	800689e <UART_WaitOnFlagUntilTimeout+0x8a>
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b40      	cmp	r3, #64	@ 0x40
 8006860:	d01d      	beq.n	800689e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b08      	cmp	r3, #8
 800686e:	d116      	bne.n	800689e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 f8e0 	bl	8006a4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2208      	movs	r2, #8
 8006890:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e00f      	b.n	80068be <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4013      	ands	r3, r2
 80068a8:	68ba      	ldr	r2, [r7, #8]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	bf0c      	ite	eq
 80068ae:	2301      	moveq	r3, #1
 80068b0:	2300      	movne	r3, #0
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	461a      	mov	r2, r3
 80068b6:	79fb      	ldrb	r3, [r7, #7]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d0b4      	beq.n	8006826 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
	...

080068c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b098      	sub	sp, #96	@ 0x60
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	4613      	mov	r3, r2
 80068d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	88fa      	ldrh	r2, [r7, #6]
 80068e0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2222      	movs	r2, #34	@ 0x22
 80068ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068f4:	4a3e      	ldr	r2, [pc, #248]	@ (80069f0 <UART_Start_Receive_DMA+0x128>)
 80068f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068fc:	4a3d      	ldr	r2, [pc, #244]	@ (80069f4 <UART_Start_Receive_DMA+0x12c>)
 80068fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006904:	4a3c      	ldr	r2, [pc, #240]	@ (80069f8 <UART_Start_Receive_DMA+0x130>)
 8006906:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690c:	2200      	movs	r2, #0
 800690e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006910:	f107 0308 	add.w	r3, r7, #8
 8006914:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	3304      	adds	r3, #4
 8006920:	4619      	mov	r1, r3
 8006922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	88fb      	ldrh	r3, [r7, #6]
 8006928:	f7fd fcbe 	bl	80042a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800692c:	2300      	movs	r3, #0
 800692e:	613b      	str	r3, [r7, #16]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	613b      	str	r3, [r7, #16]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	613b      	str	r3, [r7, #16]
 8006940:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d019      	beq.n	800697e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	330c      	adds	r3, #12
 8006950:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006954:	e853 3f00 	ldrex	r3, [r3]
 8006958:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800695a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800695c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006960:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	330c      	adds	r3, #12
 8006968:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800696a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800696c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006970:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e5      	bne.n	800694a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3314      	adds	r3, #20
 8006984:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800698e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006990:	f043 0301 	orr.w	r3, r3, #1
 8006994:	657b      	str	r3, [r7, #84]	@ 0x54
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3314      	adds	r3, #20
 800699c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800699e:	63ba      	str	r2, [r7, #56]	@ 0x38
 80069a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80069a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e5      	bne.n	800697e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3314      	adds	r3, #20
 80069b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	617b      	str	r3, [r7, #20]
   return(result);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3314      	adds	r3, #20
 80069d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80069d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80069d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	6a39      	ldr	r1, [r7, #32]
 80069d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	61fb      	str	r3, [r7, #28]
   return(result);
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1e5      	bne.n	80069b2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3760      	adds	r7, #96	@ 0x60
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	08006619 	.word	0x08006619
 80069f4:	08006745 	.word	0x08006745
 80069f8:	08006781 	.word	0x08006781

080069fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b089      	sub	sp, #36	@ 0x24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	330c      	adds	r3, #12
 8006a0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006a1a:	61fb      	str	r3, [r7, #28]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	330c      	adds	r3, #12
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	61ba      	str	r2, [r7, #24]
 8006a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	6979      	ldr	r1, [r7, #20]
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	613b      	str	r3, [r7, #16]
   return(result);
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e5      	bne.n	8006a04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006a40:	bf00      	nop
 8006a42:	3724      	adds	r7, #36	@ 0x24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b095      	sub	sp, #84	@ 0x54
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	330c      	adds	r3, #12
 8006a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	330c      	adds	r3, #12
 8006a72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a74:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e5      	bne.n	8006a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3314      	adds	r3, #20
 8006a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f023 0301 	bic.w	r3, r3, #1
 8006a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	3314      	adds	r3, #20
 8006aa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e5      	bne.n	8006a88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d119      	bne.n	8006af8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f023 0310 	bic.w	r3, r3, #16
 8006ada:	647b      	str	r3, [r7, #68]	@ 0x44
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	330c      	adds	r3, #12
 8006ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ae4:	61ba      	str	r2, [r7, #24]
 8006ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6979      	ldr	r1, [r7, #20]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	613b      	str	r3, [r7, #16]
   return(result);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e5      	bne.n	8006ac4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2220      	movs	r2, #32
 8006afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b06:	bf00      	nop
 8006b08:	3754      	adds	r7, #84	@ 0x54
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f7fa fc0f 	bl	8001350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b32:	bf00      	nop
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b21      	cmp	r3, #33	@ 0x21
 8006b4c:	d13e      	bne.n	8006bcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b56:	d114      	bne.n	8006b82 <UART_Transmit_IT+0x48>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d110      	bne.n	8006b82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	1c9a      	adds	r2, r3, #2
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	621a      	str	r2, [r3, #32]
 8006b80:	e008      	b.n	8006b94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	1c59      	adds	r1, r3, #1
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6211      	str	r1, [r2, #32]
 8006b8c:	781a      	ldrb	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10f      	bne.n	8006bc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	e000      	b.n	8006bce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bcc:	2302      	movs	r3, #2
  }
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68da      	ldr	r2, [r3, #12]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bf0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fcee 	bl	80065dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b08c      	sub	sp, #48	@ 0x30
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b22      	cmp	r3, #34	@ 0x22
 8006c1c:	f040 80ae 	bne.w	8006d7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c28:	d117      	bne.n	8006c5a <UART_Receive_IT+0x50>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d113      	bne.n	8006c5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c52:	1c9a      	adds	r2, r3, #2
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c58:	e026      	b.n	8006ca8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006c60:	2300      	movs	r3, #0
 8006c62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c6c:	d007      	beq.n	8006c7e <UART_Receive_IT+0x74>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d10a      	bne.n	8006c8c <UART_Receive_IT+0x82>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d106      	bne.n	8006c8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	e008      	b.n	8006c9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c98:	b2da      	uxtb	r2, r3
 8006c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca2:	1c5a      	adds	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d15d      	bne.n	8006d78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68da      	ldr	r2, [r3, #12]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0220 	bic.w	r2, r2, #32
 8006cca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	695a      	ldr	r2, [r3, #20]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0201 	bic.w	r2, r2, #1
 8006cea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d135      	bne.n	8006d6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	613b      	str	r3, [r7, #16]
   return(result);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f023 0310 	bic.w	r3, r3, #16
 8006d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	330c      	adds	r3, #12
 8006d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d28:	623a      	str	r2, [r7, #32]
 8006d2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	69f9      	ldr	r1, [r7, #28]
 8006d2e:	6a3a      	ldr	r2, [r7, #32]
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e5      	bne.n	8006d08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0310 	and.w	r3, r3, #16
 8006d46:	2b10      	cmp	r3, #16
 8006d48:	d10a      	bne.n	8006d60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	60fb      	str	r3, [r7, #12]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	60fb      	str	r3, [r7, #12]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7fa faa6 	bl	80012b8 <HAL_UARTEx_RxEventCallback>
 8006d6c:	e002      	b.n	8006d74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff fc3e 	bl	80065f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d74:	2300      	movs	r3, #0
 8006d76:	e002      	b.n	8006d7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	e000      	b.n	8006d7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d7c:	2302      	movs	r3, #2
  }
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3730      	adds	r7, #48	@ 0x30
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d8c:	b0c0      	sub	sp, #256	@ 0x100
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da4:	68d9      	ldr	r1, [r3, #12]
 8006da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	ea40 0301 	orr.w	r3, r0, r1
 8006db0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006de0:	f021 010c 	bic.w	r1, r1, #12
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dee:	430b      	orrs	r3, r1
 8006df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e02:	6999      	ldr	r1, [r3, #24]
 8006e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	ea40 0301 	orr.w	r3, r0, r1
 8006e0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	4b8f      	ldr	r3, [pc, #572]	@ (8007054 <UART_SetConfig+0x2cc>)
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d005      	beq.n	8006e28 <UART_SetConfig+0xa0>
 8006e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	4b8d      	ldr	r3, [pc, #564]	@ (8007058 <UART_SetConfig+0x2d0>)
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d104      	bne.n	8006e32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e28:	f7fe fb82 	bl	8005530 <HAL_RCC_GetPCLK2Freq>
 8006e2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e30:	e003      	b.n	8006e3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e32:	f7fe fb69 	bl	8005508 <HAL_RCC_GetPCLK1Freq>
 8006e36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e44:	f040 810c 	bne.w	8007060 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e5a:	4622      	mov	r2, r4
 8006e5c:	462b      	mov	r3, r5
 8006e5e:	1891      	adds	r1, r2, r2
 8006e60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e62:	415b      	adcs	r3, r3
 8006e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	eb12 0801 	adds.w	r8, r2, r1
 8006e70:	4629      	mov	r1, r5
 8006e72:	eb43 0901 	adc.w	r9, r3, r1
 8006e76:	f04f 0200 	mov.w	r2, #0
 8006e7a:	f04f 0300 	mov.w	r3, #0
 8006e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e8a:	4690      	mov	r8, r2
 8006e8c:	4699      	mov	r9, r3
 8006e8e:	4623      	mov	r3, r4
 8006e90:	eb18 0303 	adds.w	r3, r8, r3
 8006e94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e98:	462b      	mov	r3, r5
 8006e9a:	eb49 0303 	adc.w	r3, r9, r3
 8006e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006eae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006eb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	18db      	adds	r3, r3, r3
 8006eba:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	eb42 0303 	adc.w	r3, r2, r3
 8006ec2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ec4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ec8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ecc:	f7f9 fe7c 	bl	8000bc8 <__aeabi_uldivmod>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	460b      	mov	r3, r1
 8006ed4:	4b61      	ldr	r3, [pc, #388]	@ (800705c <UART_SetConfig+0x2d4>)
 8006ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eda:	095b      	lsrs	r3, r3, #5
 8006edc:	011c      	lsls	r4, r3, #4
 8006ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ee8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006eec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	464b      	mov	r3, r9
 8006ef4:	1891      	adds	r1, r2, r2
 8006ef6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ef8:	415b      	adcs	r3, r3
 8006efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006efc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006f00:	4641      	mov	r1, r8
 8006f02:	eb12 0a01 	adds.w	sl, r2, r1
 8006f06:	4649      	mov	r1, r9
 8006f08:	eb43 0b01 	adc.w	fp, r3, r1
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	f04f 0300 	mov.w	r3, #0
 8006f14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006f18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f20:	4692      	mov	sl, r2
 8006f22:	469b      	mov	fp, r3
 8006f24:	4643      	mov	r3, r8
 8006f26:	eb1a 0303 	adds.w	r3, sl, r3
 8006f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f2e:	464b      	mov	r3, r9
 8006f30:	eb4b 0303 	adc.w	r3, fp, r3
 8006f34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	18db      	adds	r3, r3, r3
 8006f50:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f52:	4613      	mov	r3, r2
 8006f54:	eb42 0303 	adc.w	r3, r2, r3
 8006f58:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f62:	f7f9 fe31 	bl	8000bc8 <__aeabi_uldivmod>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800705c <UART_SetConfig+0x2d4>)
 8006f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f72:	095b      	lsrs	r3, r3, #5
 8006f74:	2264      	movs	r2, #100	@ 0x64
 8006f76:	fb02 f303 	mul.w	r3, r2, r3
 8006f7a:	1acb      	subs	r3, r1, r3
 8006f7c:	00db      	lsls	r3, r3, #3
 8006f7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f82:	4b36      	ldr	r3, [pc, #216]	@ (800705c <UART_SetConfig+0x2d4>)
 8006f84:	fba3 2302 	umull	r2, r3, r3, r2
 8006f88:	095b      	lsrs	r3, r3, #5
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f90:	441c      	add	r4, r3
 8006f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f96:	2200      	movs	r2, #0
 8006f98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006fa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006fa4:	4642      	mov	r2, r8
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	1891      	adds	r1, r2, r2
 8006faa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006fac:	415b      	adcs	r3, r3
 8006fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006fb4:	4641      	mov	r1, r8
 8006fb6:	1851      	adds	r1, r2, r1
 8006fb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006fba:	4649      	mov	r1, r9
 8006fbc:	414b      	adcs	r3, r1
 8006fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fc0:	f04f 0200 	mov.w	r2, #0
 8006fc4:	f04f 0300 	mov.w	r3, #0
 8006fc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006fcc:	4659      	mov	r1, fp
 8006fce:	00cb      	lsls	r3, r1, #3
 8006fd0:	4651      	mov	r1, sl
 8006fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fd6:	4651      	mov	r1, sl
 8006fd8:	00ca      	lsls	r2, r1, #3
 8006fda:	4610      	mov	r0, r2
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4603      	mov	r3, r0
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	189b      	adds	r3, r3, r2
 8006fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fe8:	464b      	mov	r3, r9
 8006fea:	460a      	mov	r2, r1
 8006fec:	eb42 0303 	adc.w	r3, r2, r3
 8006ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007000:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007004:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007008:	460b      	mov	r3, r1
 800700a:	18db      	adds	r3, r3, r3
 800700c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800700e:	4613      	mov	r3, r2
 8007010:	eb42 0303 	adc.w	r3, r2, r3
 8007014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007016:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800701a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800701e:	f7f9 fdd3 	bl	8000bc8 <__aeabi_uldivmod>
 8007022:	4602      	mov	r2, r0
 8007024:	460b      	mov	r3, r1
 8007026:	4b0d      	ldr	r3, [pc, #52]	@ (800705c <UART_SetConfig+0x2d4>)
 8007028:	fba3 1302 	umull	r1, r3, r3, r2
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	2164      	movs	r1, #100	@ 0x64
 8007030:	fb01 f303 	mul.w	r3, r1, r3
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	3332      	adds	r3, #50	@ 0x32
 800703a:	4a08      	ldr	r2, [pc, #32]	@ (800705c <UART_SetConfig+0x2d4>)
 800703c:	fba2 2303 	umull	r2, r3, r2, r3
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	f003 0207 	and.w	r2, r3, #7
 8007046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4422      	add	r2, r4
 800704e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007050:	e106      	b.n	8007260 <UART_SetConfig+0x4d8>
 8007052:	bf00      	nop
 8007054:	40011000 	.word	0x40011000
 8007058:	40011400 	.word	0x40011400
 800705c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007064:	2200      	movs	r2, #0
 8007066:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800706a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800706e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007072:	4642      	mov	r2, r8
 8007074:	464b      	mov	r3, r9
 8007076:	1891      	adds	r1, r2, r2
 8007078:	6239      	str	r1, [r7, #32]
 800707a:	415b      	adcs	r3, r3
 800707c:	627b      	str	r3, [r7, #36]	@ 0x24
 800707e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007082:	4641      	mov	r1, r8
 8007084:	1854      	adds	r4, r2, r1
 8007086:	4649      	mov	r1, r9
 8007088:	eb43 0501 	adc.w	r5, r3, r1
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	f04f 0300 	mov.w	r3, #0
 8007094:	00eb      	lsls	r3, r5, #3
 8007096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800709a:	00e2      	lsls	r2, r4, #3
 800709c:	4614      	mov	r4, r2
 800709e:	461d      	mov	r5, r3
 80070a0:	4643      	mov	r3, r8
 80070a2:	18e3      	adds	r3, r4, r3
 80070a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070a8:	464b      	mov	r3, r9
 80070aa:	eb45 0303 	adc.w	r3, r5, r3
 80070ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070c2:	f04f 0200 	mov.w	r2, #0
 80070c6:	f04f 0300 	mov.w	r3, #0
 80070ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070ce:	4629      	mov	r1, r5
 80070d0:	008b      	lsls	r3, r1, #2
 80070d2:	4621      	mov	r1, r4
 80070d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070d8:	4621      	mov	r1, r4
 80070da:	008a      	lsls	r2, r1, #2
 80070dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070e0:	f7f9 fd72 	bl	8000bc8 <__aeabi_uldivmod>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4b60      	ldr	r3, [pc, #384]	@ (800726c <UART_SetConfig+0x4e4>)
 80070ea:	fba3 2302 	umull	r2, r3, r3, r2
 80070ee:	095b      	lsrs	r3, r3, #5
 80070f0:	011c      	lsls	r4, r3, #4
 80070f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007100:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007104:	4642      	mov	r2, r8
 8007106:	464b      	mov	r3, r9
 8007108:	1891      	adds	r1, r2, r2
 800710a:	61b9      	str	r1, [r7, #24]
 800710c:	415b      	adcs	r3, r3
 800710e:	61fb      	str	r3, [r7, #28]
 8007110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007114:	4641      	mov	r1, r8
 8007116:	1851      	adds	r1, r2, r1
 8007118:	6139      	str	r1, [r7, #16]
 800711a:	4649      	mov	r1, r9
 800711c:	414b      	adcs	r3, r1
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800712c:	4659      	mov	r1, fp
 800712e:	00cb      	lsls	r3, r1, #3
 8007130:	4651      	mov	r1, sl
 8007132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007136:	4651      	mov	r1, sl
 8007138:	00ca      	lsls	r2, r1, #3
 800713a:	4610      	mov	r0, r2
 800713c:	4619      	mov	r1, r3
 800713e:	4603      	mov	r3, r0
 8007140:	4642      	mov	r2, r8
 8007142:	189b      	adds	r3, r3, r2
 8007144:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007148:	464b      	mov	r3, r9
 800714a:	460a      	mov	r2, r1
 800714c:	eb42 0303 	adc.w	r3, r2, r3
 8007150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800715e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	f04f 0300 	mov.w	r3, #0
 8007168:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800716c:	4649      	mov	r1, r9
 800716e:	008b      	lsls	r3, r1, #2
 8007170:	4641      	mov	r1, r8
 8007172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007176:	4641      	mov	r1, r8
 8007178:	008a      	lsls	r2, r1, #2
 800717a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800717e:	f7f9 fd23 	bl	8000bc8 <__aeabi_uldivmod>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4611      	mov	r1, r2
 8007188:	4b38      	ldr	r3, [pc, #224]	@ (800726c <UART_SetConfig+0x4e4>)
 800718a:	fba3 2301 	umull	r2, r3, r3, r1
 800718e:	095b      	lsrs	r3, r3, #5
 8007190:	2264      	movs	r2, #100	@ 0x64
 8007192:	fb02 f303 	mul.w	r3, r2, r3
 8007196:	1acb      	subs	r3, r1, r3
 8007198:	011b      	lsls	r3, r3, #4
 800719a:	3332      	adds	r3, #50	@ 0x32
 800719c:	4a33      	ldr	r2, [pc, #204]	@ (800726c <UART_SetConfig+0x4e4>)
 800719e:	fba2 2303 	umull	r2, r3, r2, r3
 80071a2:	095b      	lsrs	r3, r3, #5
 80071a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80071a8:	441c      	add	r4, r3
 80071aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071ae:	2200      	movs	r2, #0
 80071b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80071b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80071b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80071b8:	4642      	mov	r2, r8
 80071ba:	464b      	mov	r3, r9
 80071bc:	1891      	adds	r1, r2, r2
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	415b      	adcs	r3, r3
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071c8:	4641      	mov	r1, r8
 80071ca:	1851      	adds	r1, r2, r1
 80071cc:	6039      	str	r1, [r7, #0]
 80071ce:	4649      	mov	r1, r9
 80071d0:	414b      	adcs	r3, r1
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	f04f 0200 	mov.w	r2, #0
 80071d8:	f04f 0300 	mov.w	r3, #0
 80071dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071e0:	4659      	mov	r1, fp
 80071e2:	00cb      	lsls	r3, r1, #3
 80071e4:	4651      	mov	r1, sl
 80071e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ea:	4651      	mov	r1, sl
 80071ec:	00ca      	lsls	r2, r1, #3
 80071ee:	4610      	mov	r0, r2
 80071f0:	4619      	mov	r1, r3
 80071f2:	4603      	mov	r3, r0
 80071f4:	4642      	mov	r2, r8
 80071f6:	189b      	adds	r3, r3, r2
 80071f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071fa:	464b      	mov	r3, r9
 80071fc:	460a      	mov	r2, r1
 80071fe:	eb42 0303 	adc.w	r3, r2, r3
 8007202:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	663b      	str	r3, [r7, #96]	@ 0x60
 800720e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007210:	f04f 0200 	mov.w	r2, #0
 8007214:	f04f 0300 	mov.w	r3, #0
 8007218:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800721c:	4649      	mov	r1, r9
 800721e:	008b      	lsls	r3, r1, #2
 8007220:	4641      	mov	r1, r8
 8007222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007226:	4641      	mov	r1, r8
 8007228:	008a      	lsls	r2, r1, #2
 800722a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800722e:	f7f9 fccb 	bl	8000bc8 <__aeabi_uldivmod>
 8007232:	4602      	mov	r2, r0
 8007234:	460b      	mov	r3, r1
 8007236:	4b0d      	ldr	r3, [pc, #52]	@ (800726c <UART_SetConfig+0x4e4>)
 8007238:	fba3 1302 	umull	r1, r3, r3, r2
 800723c:	095b      	lsrs	r3, r3, #5
 800723e:	2164      	movs	r1, #100	@ 0x64
 8007240:	fb01 f303 	mul.w	r3, r1, r3
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	3332      	adds	r3, #50	@ 0x32
 800724a:	4a08      	ldr	r2, [pc, #32]	@ (800726c <UART_SetConfig+0x4e4>)
 800724c:	fba2 2303 	umull	r2, r3, r2, r3
 8007250:	095b      	lsrs	r3, r3, #5
 8007252:	f003 020f 	and.w	r2, r3, #15
 8007256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4422      	add	r2, r4
 800725e:	609a      	str	r2, [r3, #8]
}
 8007260:	bf00      	nop
 8007262:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007266:	46bd      	mov	sp, r7
 8007268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800726c:	51eb851f 	.word	0x51eb851f

08007270 <atoi>:
 8007270:	220a      	movs	r2, #10
 8007272:	2100      	movs	r1, #0
 8007274:	f000 b96e 	b.w	8007554 <strtol>

08007278 <malloc>:
 8007278:	4b02      	ldr	r3, [pc, #8]	@ (8007284 <malloc+0xc>)
 800727a:	4601      	mov	r1, r0
 800727c:	6818      	ldr	r0, [r3, #0]
 800727e:	f000 b82d 	b.w	80072dc <_malloc_r>
 8007282:	bf00      	nop
 8007284:	20000018 	.word	0x20000018

08007288 <free>:
 8007288:	4b02      	ldr	r3, [pc, #8]	@ (8007294 <free+0xc>)
 800728a:	4601      	mov	r1, r0
 800728c:	6818      	ldr	r0, [r3, #0]
 800728e:	f001 beeb 	b.w	8009068 <_free_r>
 8007292:	bf00      	nop
 8007294:	20000018 	.word	0x20000018

08007298 <sbrk_aligned>:
 8007298:	b570      	push	{r4, r5, r6, lr}
 800729a:	4e0f      	ldr	r6, [pc, #60]	@ (80072d8 <sbrk_aligned+0x40>)
 800729c:	460c      	mov	r4, r1
 800729e:	6831      	ldr	r1, [r6, #0]
 80072a0:	4605      	mov	r5, r0
 80072a2:	b911      	cbnz	r1, 80072aa <sbrk_aligned+0x12>
 80072a4:	f001 f836 	bl	8008314 <_sbrk_r>
 80072a8:	6030      	str	r0, [r6, #0]
 80072aa:	4621      	mov	r1, r4
 80072ac:	4628      	mov	r0, r5
 80072ae:	f001 f831 	bl	8008314 <_sbrk_r>
 80072b2:	1c43      	adds	r3, r0, #1
 80072b4:	d103      	bne.n	80072be <sbrk_aligned+0x26>
 80072b6:	f04f 34ff 	mov.w	r4, #4294967295
 80072ba:	4620      	mov	r0, r4
 80072bc:	bd70      	pop	{r4, r5, r6, pc}
 80072be:	1cc4      	adds	r4, r0, #3
 80072c0:	f024 0403 	bic.w	r4, r4, #3
 80072c4:	42a0      	cmp	r0, r4
 80072c6:	d0f8      	beq.n	80072ba <sbrk_aligned+0x22>
 80072c8:	1a21      	subs	r1, r4, r0
 80072ca:	4628      	mov	r0, r5
 80072cc:	f001 f822 	bl	8008314 <_sbrk_r>
 80072d0:	3001      	adds	r0, #1
 80072d2:	d1f2      	bne.n	80072ba <sbrk_aligned+0x22>
 80072d4:	e7ef      	b.n	80072b6 <sbrk_aligned+0x1e>
 80072d6:	bf00      	nop
 80072d8:	20000b4c 	.word	0x20000b4c

080072dc <_malloc_r>:
 80072dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e0:	1ccd      	adds	r5, r1, #3
 80072e2:	f025 0503 	bic.w	r5, r5, #3
 80072e6:	3508      	adds	r5, #8
 80072e8:	2d0c      	cmp	r5, #12
 80072ea:	bf38      	it	cc
 80072ec:	250c      	movcc	r5, #12
 80072ee:	2d00      	cmp	r5, #0
 80072f0:	4606      	mov	r6, r0
 80072f2:	db01      	blt.n	80072f8 <_malloc_r+0x1c>
 80072f4:	42a9      	cmp	r1, r5
 80072f6:	d904      	bls.n	8007302 <_malloc_r+0x26>
 80072f8:	230c      	movs	r3, #12
 80072fa:	6033      	str	r3, [r6, #0]
 80072fc:	2000      	movs	r0, #0
 80072fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073d8 <_malloc_r+0xfc>
 8007306:	f000 f869 	bl	80073dc <__malloc_lock>
 800730a:	f8d8 3000 	ldr.w	r3, [r8]
 800730e:	461c      	mov	r4, r3
 8007310:	bb44      	cbnz	r4, 8007364 <_malloc_r+0x88>
 8007312:	4629      	mov	r1, r5
 8007314:	4630      	mov	r0, r6
 8007316:	f7ff ffbf 	bl	8007298 <sbrk_aligned>
 800731a:	1c43      	adds	r3, r0, #1
 800731c:	4604      	mov	r4, r0
 800731e:	d158      	bne.n	80073d2 <_malloc_r+0xf6>
 8007320:	f8d8 4000 	ldr.w	r4, [r8]
 8007324:	4627      	mov	r7, r4
 8007326:	2f00      	cmp	r7, #0
 8007328:	d143      	bne.n	80073b2 <_malloc_r+0xd6>
 800732a:	2c00      	cmp	r4, #0
 800732c:	d04b      	beq.n	80073c6 <_malloc_r+0xea>
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	4639      	mov	r1, r7
 8007332:	4630      	mov	r0, r6
 8007334:	eb04 0903 	add.w	r9, r4, r3
 8007338:	f000 ffec 	bl	8008314 <_sbrk_r>
 800733c:	4581      	cmp	r9, r0
 800733e:	d142      	bne.n	80073c6 <_malloc_r+0xea>
 8007340:	6821      	ldr	r1, [r4, #0]
 8007342:	1a6d      	subs	r5, r5, r1
 8007344:	4629      	mov	r1, r5
 8007346:	4630      	mov	r0, r6
 8007348:	f7ff ffa6 	bl	8007298 <sbrk_aligned>
 800734c:	3001      	adds	r0, #1
 800734e:	d03a      	beq.n	80073c6 <_malloc_r+0xea>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	442b      	add	r3, r5
 8007354:	6023      	str	r3, [r4, #0]
 8007356:	f8d8 3000 	ldr.w	r3, [r8]
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	bb62      	cbnz	r2, 80073b8 <_malloc_r+0xdc>
 800735e:	f8c8 7000 	str.w	r7, [r8]
 8007362:	e00f      	b.n	8007384 <_malloc_r+0xa8>
 8007364:	6822      	ldr	r2, [r4, #0]
 8007366:	1b52      	subs	r2, r2, r5
 8007368:	d420      	bmi.n	80073ac <_malloc_r+0xd0>
 800736a:	2a0b      	cmp	r2, #11
 800736c:	d917      	bls.n	800739e <_malloc_r+0xc2>
 800736e:	1961      	adds	r1, r4, r5
 8007370:	42a3      	cmp	r3, r4
 8007372:	6025      	str	r5, [r4, #0]
 8007374:	bf18      	it	ne
 8007376:	6059      	strne	r1, [r3, #4]
 8007378:	6863      	ldr	r3, [r4, #4]
 800737a:	bf08      	it	eq
 800737c:	f8c8 1000 	streq.w	r1, [r8]
 8007380:	5162      	str	r2, [r4, r5]
 8007382:	604b      	str	r3, [r1, #4]
 8007384:	4630      	mov	r0, r6
 8007386:	f000 f82f 	bl	80073e8 <__malloc_unlock>
 800738a:	f104 000b 	add.w	r0, r4, #11
 800738e:	1d23      	adds	r3, r4, #4
 8007390:	f020 0007 	bic.w	r0, r0, #7
 8007394:	1ac2      	subs	r2, r0, r3
 8007396:	bf1c      	itt	ne
 8007398:	1a1b      	subne	r3, r3, r0
 800739a:	50a3      	strne	r3, [r4, r2]
 800739c:	e7af      	b.n	80072fe <_malloc_r+0x22>
 800739e:	6862      	ldr	r2, [r4, #4]
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	bf0c      	ite	eq
 80073a4:	f8c8 2000 	streq.w	r2, [r8]
 80073a8:	605a      	strne	r2, [r3, #4]
 80073aa:	e7eb      	b.n	8007384 <_malloc_r+0xa8>
 80073ac:	4623      	mov	r3, r4
 80073ae:	6864      	ldr	r4, [r4, #4]
 80073b0:	e7ae      	b.n	8007310 <_malloc_r+0x34>
 80073b2:	463c      	mov	r4, r7
 80073b4:	687f      	ldr	r7, [r7, #4]
 80073b6:	e7b6      	b.n	8007326 <_malloc_r+0x4a>
 80073b8:	461a      	mov	r2, r3
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	42a3      	cmp	r3, r4
 80073be:	d1fb      	bne.n	80073b8 <_malloc_r+0xdc>
 80073c0:	2300      	movs	r3, #0
 80073c2:	6053      	str	r3, [r2, #4]
 80073c4:	e7de      	b.n	8007384 <_malloc_r+0xa8>
 80073c6:	230c      	movs	r3, #12
 80073c8:	6033      	str	r3, [r6, #0]
 80073ca:	4630      	mov	r0, r6
 80073cc:	f000 f80c 	bl	80073e8 <__malloc_unlock>
 80073d0:	e794      	b.n	80072fc <_malloc_r+0x20>
 80073d2:	6005      	str	r5, [r0, #0]
 80073d4:	e7d6      	b.n	8007384 <_malloc_r+0xa8>
 80073d6:	bf00      	nop
 80073d8:	20000b50 	.word	0x20000b50

080073dc <__malloc_lock>:
 80073dc:	4801      	ldr	r0, [pc, #4]	@ (80073e4 <__malloc_lock+0x8>)
 80073de:	f000 bfe6 	b.w	80083ae <__retarget_lock_acquire_recursive>
 80073e2:	bf00      	nop
 80073e4:	20000c94 	.word	0x20000c94

080073e8 <__malloc_unlock>:
 80073e8:	4801      	ldr	r0, [pc, #4]	@ (80073f0 <__malloc_unlock+0x8>)
 80073ea:	f000 bfe1 	b.w	80083b0 <__retarget_lock_release_recursive>
 80073ee:	bf00      	nop
 80073f0:	20000c94 	.word	0x20000c94

080073f4 <realloc>:
 80073f4:	4b02      	ldr	r3, [pc, #8]	@ (8007400 <realloc+0xc>)
 80073f6:	460a      	mov	r2, r1
 80073f8:	4601      	mov	r1, r0
 80073fa:	6818      	ldr	r0, [r3, #0]
 80073fc:	f000 b802 	b.w	8007404 <_realloc_r>
 8007400:	20000018 	.word	0x20000018

08007404 <_realloc_r>:
 8007404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007408:	4680      	mov	r8, r0
 800740a:	4615      	mov	r5, r2
 800740c:	460c      	mov	r4, r1
 800740e:	b921      	cbnz	r1, 800741a <_realloc_r+0x16>
 8007410:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007414:	4611      	mov	r1, r2
 8007416:	f7ff bf61 	b.w	80072dc <_malloc_r>
 800741a:	b92a      	cbnz	r2, 8007428 <_realloc_r+0x24>
 800741c:	f001 fe24 	bl	8009068 <_free_r>
 8007420:	2400      	movs	r4, #0
 8007422:	4620      	mov	r0, r4
 8007424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007428:	f002 f9ea 	bl	8009800 <_malloc_usable_size_r>
 800742c:	4285      	cmp	r5, r0
 800742e:	4606      	mov	r6, r0
 8007430:	d802      	bhi.n	8007438 <_realloc_r+0x34>
 8007432:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007436:	d8f4      	bhi.n	8007422 <_realloc_r+0x1e>
 8007438:	4629      	mov	r1, r5
 800743a:	4640      	mov	r0, r8
 800743c:	f7ff ff4e 	bl	80072dc <_malloc_r>
 8007440:	4607      	mov	r7, r0
 8007442:	2800      	cmp	r0, #0
 8007444:	d0ec      	beq.n	8007420 <_realloc_r+0x1c>
 8007446:	42b5      	cmp	r5, r6
 8007448:	462a      	mov	r2, r5
 800744a:	4621      	mov	r1, r4
 800744c:	bf28      	it	cs
 800744e:	4632      	movcs	r2, r6
 8007450:	f000 ffaf 	bl	80083b2 <memcpy>
 8007454:	4621      	mov	r1, r4
 8007456:	4640      	mov	r0, r8
 8007458:	f001 fe06 	bl	8009068 <_free_r>
 800745c:	463c      	mov	r4, r7
 800745e:	e7e0      	b.n	8007422 <_realloc_r+0x1e>

08007460 <_strtol_l.constprop.0>:
 8007460:	2b24      	cmp	r3, #36	@ 0x24
 8007462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007466:	4686      	mov	lr, r0
 8007468:	4690      	mov	r8, r2
 800746a:	d801      	bhi.n	8007470 <_strtol_l.constprop.0+0x10>
 800746c:	2b01      	cmp	r3, #1
 800746e:	d106      	bne.n	800747e <_strtol_l.constprop.0+0x1e>
 8007470:	f000 ff72 	bl	8008358 <__errno>
 8007474:	2316      	movs	r3, #22
 8007476:	6003      	str	r3, [r0, #0]
 8007478:	2000      	movs	r0, #0
 800747a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747e:	4834      	ldr	r0, [pc, #208]	@ (8007550 <_strtol_l.constprop.0+0xf0>)
 8007480:	460d      	mov	r5, r1
 8007482:	462a      	mov	r2, r5
 8007484:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007488:	5d06      	ldrb	r6, [r0, r4]
 800748a:	f016 0608 	ands.w	r6, r6, #8
 800748e:	d1f8      	bne.n	8007482 <_strtol_l.constprop.0+0x22>
 8007490:	2c2d      	cmp	r4, #45	@ 0x2d
 8007492:	d12d      	bne.n	80074f0 <_strtol_l.constprop.0+0x90>
 8007494:	782c      	ldrb	r4, [r5, #0]
 8007496:	2601      	movs	r6, #1
 8007498:	1c95      	adds	r5, r2, #2
 800749a:	f033 0210 	bics.w	r2, r3, #16
 800749e:	d109      	bne.n	80074b4 <_strtol_l.constprop.0+0x54>
 80074a0:	2c30      	cmp	r4, #48	@ 0x30
 80074a2:	d12a      	bne.n	80074fa <_strtol_l.constprop.0+0x9a>
 80074a4:	782a      	ldrb	r2, [r5, #0]
 80074a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80074aa:	2a58      	cmp	r2, #88	@ 0x58
 80074ac:	d125      	bne.n	80074fa <_strtol_l.constprop.0+0x9a>
 80074ae:	786c      	ldrb	r4, [r5, #1]
 80074b0:	2310      	movs	r3, #16
 80074b2:	3502      	adds	r5, #2
 80074b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80074b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80074bc:	2200      	movs	r2, #0
 80074be:	fbbc f9f3 	udiv	r9, ip, r3
 80074c2:	4610      	mov	r0, r2
 80074c4:	fb03 ca19 	mls	sl, r3, r9, ip
 80074c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80074cc:	2f09      	cmp	r7, #9
 80074ce:	d81b      	bhi.n	8007508 <_strtol_l.constprop.0+0xa8>
 80074d0:	463c      	mov	r4, r7
 80074d2:	42a3      	cmp	r3, r4
 80074d4:	dd27      	ble.n	8007526 <_strtol_l.constprop.0+0xc6>
 80074d6:	1c57      	adds	r7, r2, #1
 80074d8:	d007      	beq.n	80074ea <_strtol_l.constprop.0+0x8a>
 80074da:	4581      	cmp	r9, r0
 80074dc:	d320      	bcc.n	8007520 <_strtol_l.constprop.0+0xc0>
 80074de:	d101      	bne.n	80074e4 <_strtol_l.constprop.0+0x84>
 80074e0:	45a2      	cmp	sl, r4
 80074e2:	db1d      	blt.n	8007520 <_strtol_l.constprop.0+0xc0>
 80074e4:	fb00 4003 	mla	r0, r0, r3, r4
 80074e8:	2201      	movs	r2, #1
 80074ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80074ee:	e7eb      	b.n	80074c8 <_strtol_l.constprop.0+0x68>
 80074f0:	2c2b      	cmp	r4, #43	@ 0x2b
 80074f2:	bf04      	itt	eq
 80074f4:	782c      	ldrbeq	r4, [r5, #0]
 80074f6:	1c95      	addeq	r5, r2, #2
 80074f8:	e7cf      	b.n	800749a <_strtol_l.constprop.0+0x3a>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1da      	bne.n	80074b4 <_strtol_l.constprop.0+0x54>
 80074fe:	2c30      	cmp	r4, #48	@ 0x30
 8007500:	bf0c      	ite	eq
 8007502:	2308      	moveq	r3, #8
 8007504:	230a      	movne	r3, #10
 8007506:	e7d5      	b.n	80074b4 <_strtol_l.constprop.0+0x54>
 8007508:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800750c:	2f19      	cmp	r7, #25
 800750e:	d801      	bhi.n	8007514 <_strtol_l.constprop.0+0xb4>
 8007510:	3c37      	subs	r4, #55	@ 0x37
 8007512:	e7de      	b.n	80074d2 <_strtol_l.constprop.0+0x72>
 8007514:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007518:	2f19      	cmp	r7, #25
 800751a:	d804      	bhi.n	8007526 <_strtol_l.constprop.0+0xc6>
 800751c:	3c57      	subs	r4, #87	@ 0x57
 800751e:	e7d8      	b.n	80074d2 <_strtol_l.constprop.0+0x72>
 8007520:	f04f 32ff 	mov.w	r2, #4294967295
 8007524:	e7e1      	b.n	80074ea <_strtol_l.constprop.0+0x8a>
 8007526:	1c53      	adds	r3, r2, #1
 8007528:	d108      	bne.n	800753c <_strtol_l.constprop.0+0xdc>
 800752a:	2322      	movs	r3, #34	@ 0x22
 800752c:	f8ce 3000 	str.w	r3, [lr]
 8007530:	4660      	mov	r0, ip
 8007532:	f1b8 0f00 	cmp.w	r8, #0
 8007536:	d0a0      	beq.n	800747a <_strtol_l.constprop.0+0x1a>
 8007538:	1e69      	subs	r1, r5, #1
 800753a:	e006      	b.n	800754a <_strtol_l.constprop.0+0xea>
 800753c:	b106      	cbz	r6, 8007540 <_strtol_l.constprop.0+0xe0>
 800753e:	4240      	negs	r0, r0
 8007540:	f1b8 0f00 	cmp.w	r8, #0
 8007544:	d099      	beq.n	800747a <_strtol_l.constprop.0+0x1a>
 8007546:	2a00      	cmp	r2, #0
 8007548:	d1f6      	bne.n	8007538 <_strtol_l.constprop.0+0xd8>
 800754a:	f8c8 1000 	str.w	r1, [r8]
 800754e:	e794      	b.n	800747a <_strtol_l.constprop.0+0x1a>
 8007550:	0800a3f9 	.word	0x0800a3f9

08007554 <strtol>:
 8007554:	4613      	mov	r3, r2
 8007556:	460a      	mov	r2, r1
 8007558:	4601      	mov	r1, r0
 800755a:	4802      	ldr	r0, [pc, #8]	@ (8007564 <strtol+0x10>)
 800755c:	6800      	ldr	r0, [r0, #0]
 800755e:	f7ff bf7f 	b.w	8007460 <_strtol_l.constprop.0>
 8007562:	bf00      	nop
 8007564:	20000018 	.word	0x20000018

08007568 <__cvt>:
 8007568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800756c:	ec57 6b10 	vmov	r6, r7, d0
 8007570:	2f00      	cmp	r7, #0
 8007572:	460c      	mov	r4, r1
 8007574:	4619      	mov	r1, r3
 8007576:	463b      	mov	r3, r7
 8007578:	bfbb      	ittet	lt
 800757a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800757e:	461f      	movlt	r7, r3
 8007580:	2300      	movge	r3, #0
 8007582:	232d      	movlt	r3, #45	@ 0x2d
 8007584:	700b      	strb	r3, [r1, #0]
 8007586:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007588:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800758c:	4691      	mov	r9, r2
 800758e:	f023 0820 	bic.w	r8, r3, #32
 8007592:	bfbc      	itt	lt
 8007594:	4632      	movlt	r2, r6
 8007596:	4616      	movlt	r6, r2
 8007598:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800759c:	d005      	beq.n	80075aa <__cvt+0x42>
 800759e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80075a2:	d100      	bne.n	80075a6 <__cvt+0x3e>
 80075a4:	3401      	adds	r4, #1
 80075a6:	2102      	movs	r1, #2
 80075a8:	e000      	b.n	80075ac <__cvt+0x44>
 80075aa:	2103      	movs	r1, #3
 80075ac:	ab03      	add	r3, sp, #12
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	ab02      	add	r3, sp, #8
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	ec47 6b10 	vmov	d0, r6, r7
 80075b8:	4653      	mov	r3, sl
 80075ba:	4622      	mov	r2, r4
 80075bc:	f000 ff90 	bl	80084e0 <_dtoa_r>
 80075c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80075c4:	4605      	mov	r5, r0
 80075c6:	d119      	bne.n	80075fc <__cvt+0x94>
 80075c8:	f019 0f01 	tst.w	r9, #1
 80075cc:	d00e      	beq.n	80075ec <__cvt+0x84>
 80075ce:	eb00 0904 	add.w	r9, r0, r4
 80075d2:	2200      	movs	r2, #0
 80075d4:	2300      	movs	r3, #0
 80075d6:	4630      	mov	r0, r6
 80075d8:	4639      	mov	r1, r7
 80075da:	f7f9 fa85 	bl	8000ae8 <__aeabi_dcmpeq>
 80075de:	b108      	cbz	r0, 80075e4 <__cvt+0x7c>
 80075e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80075e4:	2230      	movs	r2, #48	@ 0x30
 80075e6:	9b03      	ldr	r3, [sp, #12]
 80075e8:	454b      	cmp	r3, r9
 80075ea:	d31e      	bcc.n	800762a <__cvt+0xc2>
 80075ec:	9b03      	ldr	r3, [sp, #12]
 80075ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075f0:	1b5b      	subs	r3, r3, r5
 80075f2:	4628      	mov	r0, r5
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	b004      	add	sp, #16
 80075f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007600:	eb00 0904 	add.w	r9, r0, r4
 8007604:	d1e5      	bne.n	80075d2 <__cvt+0x6a>
 8007606:	7803      	ldrb	r3, [r0, #0]
 8007608:	2b30      	cmp	r3, #48	@ 0x30
 800760a:	d10a      	bne.n	8007622 <__cvt+0xba>
 800760c:	2200      	movs	r2, #0
 800760e:	2300      	movs	r3, #0
 8007610:	4630      	mov	r0, r6
 8007612:	4639      	mov	r1, r7
 8007614:	f7f9 fa68 	bl	8000ae8 <__aeabi_dcmpeq>
 8007618:	b918      	cbnz	r0, 8007622 <__cvt+0xba>
 800761a:	f1c4 0401 	rsb	r4, r4, #1
 800761e:	f8ca 4000 	str.w	r4, [sl]
 8007622:	f8da 3000 	ldr.w	r3, [sl]
 8007626:	4499      	add	r9, r3
 8007628:	e7d3      	b.n	80075d2 <__cvt+0x6a>
 800762a:	1c59      	adds	r1, r3, #1
 800762c:	9103      	str	r1, [sp, #12]
 800762e:	701a      	strb	r2, [r3, #0]
 8007630:	e7d9      	b.n	80075e6 <__cvt+0x7e>

08007632 <__exponent>:
 8007632:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007634:	2900      	cmp	r1, #0
 8007636:	bfba      	itte	lt
 8007638:	4249      	neglt	r1, r1
 800763a:	232d      	movlt	r3, #45	@ 0x2d
 800763c:	232b      	movge	r3, #43	@ 0x2b
 800763e:	2909      	cmp	r1, #9
 8007640:	7002      	strb	r2, [r0, #0]
 8007642:	7043      	strb	r3, [r0, #1]
 8007644:	dd29      	ble.n	800769a <__exponent+0x68>
 8007646:	f10d 0307 	add.w	r3, sp, #7
 800764a:	461d      	mov	r5, r3
 800764c:	270a      	movs	r7, #10
 800764e:	461a      	mov	r2, r3
 8007650:	fbb1 f6f7 	udiv	r6, r1, r7
 8007654:	fb07 1416 	mls	r4, r7, r6, r1
 8007658:	3430      	adds	r4, #48	@ 0x30
 800765a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800765e:	460c      	mov	r4, r1
 8007660:	2c63      	cmp	r4, #99	@ 0x63
 8007662:	f103 33ff 	add.w	r3, r3, #4294967295
 8007666:	4631      	mov	r1, r6
 8007668:	dcf1      	bgt.n	800764e <__exponent+0x1c>
 800766a:	3130      	adds	r1, #48	@ 0x30
 800766c:	1e94      	subs	r4, r2, #2
 800766e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007672:	1c41      	adds	r1, r0, #1
 8007674:	4623      	mov	r3, r4
 8007676:	42ab      	cmp	r3, r5
 8007678:	d30a      	bcc.n	8007690 <__exponent+0x5e>
 800767a:	f10d 0309 	add.w	r3, sp, #9
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	42ac      	cmp	r4, r5
 8007682:	bf88      	it	hi
 8007684:	2300      	movhi	r3, #0
 8007686:	3302      	adds	r3, #2
 8007688:	4403      	add	r3, r0
 800768a:	1a18      	subs	r0, r3, r0
 800768c:	b003      	add	sp, #12
 800768e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007690:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007694:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007698:	e7ed      	b.n	8007676 <__exponent+0x44>
 800769a:	2330      	movs	r3, #48	@ 0x30
 800769c:	3130      	adds	r1, #48	@ 0x30
 800769e:	7083      	strb	r3, [r0, #2]
 80076a0:	70c1      	strb	r1, [r0, #3]
 80076a2:	1d03      	adds	r3, r0, #4
 80076a4:	e7f1      	b.n	800768a <__exponent+0x58>
	...

080076a8 <_printf_float>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	b08d      	sub	sp, #52	@ 0x34
 80076ae:	460c      	mov	r4, r1
 80076b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80076b4:	4616      	mov	r6, r2
 80076b6:	461f      	mov	r7, r3
 80076b8:	4605      	mov	r5, r0
 80076ba:	f000 fdf3 	bl	80082a4 <_localeconv_r>
 80076be:	6803      	ldr	r3, [r0, #0]
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7f8 fde4 	bl	8000290 <strlen>
 80076c8:	2300      	movs	r3, #0
 80076ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80076cc:	f8d8 3000 	ldr.w	r3, [r8]
 80076d0:	9005      	str	r0, [sp, #20]
 80076d2:	3307      	adds	r3, #7
 80076d4:	f023 0307 	bic.w	r3, r3, #7
 80076d8:	f103 0208 	add.w	r2, r3, #8
 80076dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80076e0:	f8d4 b000 	ldr.w	fp, [r4]
 80076e4:	f8c8 2000 	str.w	r2, [r8]
 80076e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80076f0:	9307      	str	r3, [sp, #28]
 80076f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80076f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80076fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076fe:	4b9c      	ldr	r3, [pc, #624]	@ (8007970 <_printf_float+0x2c8>)
 8007700:	f04f 32ff 	mov.w	r2, #4294967295
 8007704:	f7f9 fa22 	bl	8000b4c <__aeabi_dcmpun>
 8007708:	bb70      	cbnz	r0, 8007768 <_printf_float+0xc0>
 800770a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800770e:	4b98      	ldr	r3, [pc, #608]	@ (8007970 <_printf_float+0x2c8>)
 8007710:	f04f 32ff 	mov.w	r2, #4294967295
 8007714:	f7f9 f9fc 	bl	8000b10 <__aeabi_dcmple>
 8007718:	bb30      	cbnz	r0, 8007768 <_printf_float+0xc0>
 800771a:	2200      	movs	r2, #0
 800771c:	2300      	movs	r3, #0
 800771e:	4640      	mov	r0, r8
 8007720:	4649      	mov	r1, r9
 8007722:	f7f9 f9eb 	bl	8000afc <__aeabi_dcmplt>
 8007726:	b110      	cbz	r0, 800772e <_printf_float+0x86>
 8007728:	232d      	movs	r3, #45	@ 0x2d
 800772a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800772e:	4a91      	ldr	r2, [pc, #580]	@ (8007974 <_printf_float+0x2cc>)
 8007730:	4b91      	ldr	r3, [pc, #580]	@ (8007978 <_printf_float+0x2d0>)
 8007732:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007736:	bf94      	ite	ls
 8007738:	4690      	movls	r8, r2
 800773a:	4698      	movhi	r8, r3
 800773c:	2303      	movs	r3, #3
 800773e:	6123      	str	r3, [r4, #16]
 8007740:	f02b 0304 	bic.w	r3, fp, #4
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	f04f 0900 	mov.w	r9, #0
 800774a:	9700      	str	r7, [sp, #0]
 800774c:	4633      	mov	r3, r6
 800774e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007750:	4621      	mov	r1, r4
 8007752:	4628      	mov	r0, r5
 8007754:	f000 f9d2 	bl	8007afc <_printf_common>
 8007758:	3001      	adds	r0, #1
 800775a:	f040 808d 	bne.w	8007878 <_printf_float+0x1d0>
 800775e:	f04f 30ff 	mov.w	r0, #4294967295
 8007762:	b00d      	add	sp, #52	@ 0x34
 8007764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007768:	4642      	mov	r2, r8
 800776a:	464b      	mov	r3, r9
 800776c:	4640      	mov	r0, r8
 800776e:	4649      	mov	r1, r9
 8007770:	f7f9 f9ec 	bl	8000b4c <__aeabi_dcmpun>
 8007774:	b140      	cbz	r0, 8007788 <_printf_float+0xe0>
 8007776:	464b      	mov	r3, r9
 8007778:	2b00      	cmp	r3, #0
 800777a:	bfbc      	itt	lt
 800777c:	232d      	movlt	r3, #45	@ 0x2d
 800777e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007782:	4a7e      	ldr	r2, [pc, #504]	@ (800797c <_printf_float+0x2d4>)
 8007784:	4b7e      	ldr	r3, [pc, #504]	@ (8007980 <_printf_float+0x2d8>)
 8007786:	e7d4      	b.n	8007732 <_printf_float+0x8a>
 8007788:	6863      	ldr	r3, [r4, #4]
 800778a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800778e:	9206      	str	r2, [sp, #24]
 8007790:	1c5a      	adds	r2, r3, #1
 8007792:	d13b      	bne.n	800780c <_printf_float+0x164>
 8007794:	2306      	movs	r3, #6
 8007796:	6063      	str	r3, [r4, #4]
 8007798:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800779c:	2300      	movs	r3, #0
 800779e:	6022      	str	r2, [r4, #0]
 80077a0:	9303      	str	r3, [sp, #12]
 80077a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80077a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80077a8:	ab09      	add	r3, sp, #36	@ 0x24
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	6861      	ldr	r1, [r4, #4]
 80077ae:	ec49 8b10 	vmov	d0, r8, r9
 80077b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80077b6:	4628      	mov	r0, r5
 80077b8:	f7ff fed6 	bl	8007568 <__cvt>
 80077bc:	9b06      	ldr	r3, [sp, #24]
 80077be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077c0:	2b47      	cmp	r3, #71	@ 0x47
 80077c2:	4680      	mov	r8, r0
 80077c4:	d129      	bne.n	800781a <_printf_float+0x172>
 80077c6:	1cc8      	adds	r0, r1, #3
 80077c8:	db02      	blt.n	80077d0 <_printf_float+0x128>
 80077ca:	6863      	ldr	r3, [r4, #4]
 80077cc:	4299      	cmp	r1, r3
 80077ce:	dd41      	ble.n	8007854 <_printf_float+0x1ac>
 80077d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80077d4:	fa5f fa8a 	uxtb.w	sl, sl
 80077d8:	3901      	subs	r1, #1
 80077da:	4652      	mov	r2, sl
 80077dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80077e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80077e2:	f7ff ff26 	bl	8007632 <__exponent>
 80077e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077e8:	1813      	adds	r3, r2, r0
 80077ea:	2a01      	cmp	r2, #1
 80077ec:	4681      	mov	r9, r0
 80077ee:	6123      	str	r3, [r4, #16]
 80077f0:	dc02      	bgt.n	80077f8 <_printf_float+0x150>
 80077f2:	6822      	ldr	r2, [r4, #0]
 80077f4:	07d2      	lsls	r2, r2, #31
 80077f6:	d501      	bpl.n	80077fc <_printf_float+0x154>
 80077f8:	3301      	adds	r3, #1
 80077fa:	6123      	str	r3, [r4, #16]
 80077fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007800:	2b00      	cmp	r3, #0
 8007802:	d0a2      	beq.n	800774a <_printf_float+0xa2>
 8007804:	232d      	movs	r3, #45	@ 0x2d
 8007806:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800780a:	e79e      	b.n	800774a <_printf_float+0xa2>
 800780c:	9a06      	ldr	r2, [sp, #24]
 800780e:	2a47      	cmp	r2, #71	@ 0x47
 8007810:	d1c2      	bne.n	8007798 <_printf_float+0xf0>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1c0      	bne.n	8007798 <_printf_float+0xf0>
 8007816:	2301      	movs	r3, #1
 8007818:	e7bd      	b.n	8007796 <_printf_float+0xee>
 800781a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800781e:	d9db      	bls.n	80077d8 <_printf_float+0x130>
 8007820:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007824:	d118      	bne.n	8007858 <_printf_float+0x1b0>
 8007826:	2900      	cmp	r1, #0
 8007828:	6863      	ldr	r3, [r4, #4]
 800782a:	dd0b      	ble.n	8007844 <_printf_float+0x19c>
 800782c:	6121      	str	r1, [r4, #16]
 800782e:	b913      	cbnz	r3, 8007836 <_printf_float+0x18e>
 8007830:	6822      	ldr	r2, [r4, #0]
 8007832:	07d0      	lsls	r0, r2, #31
 8007834:	d502      	bpl.n	800783c <_printf_float+0x194>
 8007836:	3301      	adds	r3, #1
 8007838:	440b      	add	r3, r1
 800783a:	6123      	str	r3, [r4, #16]
 800783c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800783e:	f04f 0900 	mov.w	r9, #0
 8007842:	e7db      	b.n	80077fc <_printf_float+0x154>
 8007844:	b913      	cbnz	r3, 800784c <_printf_float+0x1a4>
 8007846:	6822      	ldr	r2, [r4, #0]
 8007848:	07d2      	lsls	r2, r2, #31
 800784a:	d501      	bpl.n	8007850 <_printf_float+0x1a8>
 800784c:	3302      	adds	r3, #2
 800784e:	e7f4      	b.n	800783a <_printf_float+0x192>
 8007850:	2301      	movs	r3, #1
 8007852:	e7f2      	b.n	800783a <_printf_float+0x192>
 8007854:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007858:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800785a:	4299      	cmp	r1, r3
 800785c:	db05      	blt.n	800786a <_printf_float+0x1c2>
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	6121      	str	r1, [r4, #16]
 8007862:	07d8      	lsls	r0, r3, #31
 8007864:	d5ea      	bpl.n	800783c <_printf_float+0x194>
 8007866:	1c4b      	adds	r3, r1, #1
 8007868:	e7e7      	b.n	800783a <_printf_float+0x192>
 800786a:	2900      	cmp	r1, #0
 800786c:	bfd4      	ite	le
 800786e:	f1c1 0202 	rsble	r2, r1, #2
 8007872:	2201      	movgt	r2, #1
 8007874:	4413      	add	r3, r2
 8007876:	e7e0      	b.n	800783a <_printf_float+0x192>
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	055a      	lsls	r2, r3, #21
 800787c:	d407      	bmi.n	800788e <_printf_float+0x1e6>
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	4642      	mov	r2, r8
 8007882:	4631      	mov	r1, r6
 8007884:	4628      	mov	r0, r5
 8007886:	47b8      	blx	r7
 8007888:	3001      	adds	r0, #1
 800788a:	d12b      	bne.n	80078e4 <_printf_float+0x23c>
 800788c:	e767      	b.n	800775e <_printf_float+0xb6>
 800788e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007892:	f240 80dd 	bls.w	8007a50 <_printf_float+0x3a8>
 8007896:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800789a:	2200      	movs	r2, #0
 800789c:	2300      	movs	r3, #0
 800789e:	f7f9 f923 	bl	8000ae8 <__aeabi_dcmpeq>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d033      	beq.n	800790e <_printf_float+0x266>
 80078a6:	4a37      	ldr	r2, [pc, #220]	@ (8007984 <_printf_float+0x2dc>)
 80078a8:	2301      	movs	r3, #1
 80078aa:	4631      	mov	r1, r6
 80078ac:	4628      	mov	r0, r5
 80078ae:	47b8      	blx	r7
 80078b0:	3001      	adds	r0, #1
 80078b2:	f43f af54 	beq.w	800775e <_printf_float+0xb6>
 80078b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80078ba:	4543      	cmp	r3, r8
 80078bc:	db02      	blt.n	80078c4 <_printf_float+0x21c>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	07d8      	lsls	r0, r3, #31
 80078c2:	d50f      	bpl.n	80078e4 <_printf_float+0x23c>
 80078c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078c8:	4631      	mov	r1, r6
 80078ca:	4628      	mov	r0, r5
 80078cc:	47b8      	blx	r7
 80078ce:	3001      	adds	r0, #1
 80078d0:	f43f af45 	beq.w	800775e <_printf_float+0xb6>
 80078d4:	f04f 0900 	mov.w	r9, #0
 80078d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80078dc:	f104 0a1a 	add.w	sl, r4, #26
 80078e0:	45c8      	cmp	r8, r9
 80078e2:	dc09      	bgt.n	80078f8 <_printf_float+0x250>
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	079b      	lsls	r3, r3, #30
 80078e8:	f100 8103 	bmi.w	8007af2 <_printf_float+0x44a>
 80078ec:	68e0      	ldr	r0, [r4, #12]
 80078ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078f0:	4298      	cmp	r0, r3
 80078f2:	bfb8      	it	lt
 80078f4:	4618      	movlt	r0, r3
 80078f6:	e734      	b.n	8007762 <_printf_float+0xba>
 80078f8:	2301      	movs	r3, #1
 80078fa:	4652      	mov	r2, sl
 80078fc:	4631      	mov	r1, r6
 80078fe:	4628      	mov	r0, r5
 8007900:	47b8      	blx	r7
 8007902:	3001      	adds	r0, #1
 8007904:	f43f af2b 	beq.w	800775e <_printf_float+0xb6>
 8007908:	f109 0901 	add.w	r9, r9, #1
 800790c:	e7e8      	b.n	80078e0 <_printf_float+0x238>
 800790e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007910:	2b00      	cmp	r3, #0
 8007912:	dc39      	bgt.n	8007988 <_printf_float+0x2e0>
 8007914:	4a1b      	ldr	r2, [pc, #108]	@ (8007984 <_printf_float+0x2dc>)
 8007916:	2301      	movs	r3, #1
 8007918:	4631      	mov	r1, r6
 800791a:	4628      	mov	r0, r5
 800791c:	47b8      	blx	r7
 800791e:	3001      	adds	r0, #1
 8007920:	f43f af1d 	beq.w	800775e <_printf_float+0xb6>
 8007924:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007928:	ea59 0303 	orrs.w	r3, r9, r3
 800792c:	d102      	bne.n	8007934 <_printf_float+0x28c>
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	07d9      	lsls	r1, r3, #31
 8007932:	d5d7      	bpl.n	80078e4 <_printf_float+0x23c>
 8007934:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007938:	4631      	mov	r1, r6
 800793a:	4628      	mov	r0, r5
 800793c:	47b8      	blx	r7
 800793e:	3001      	adds	r0, #1
 8007940:	f43f af0d 	beq.w	800775e <_printf_float+0xb6>
 8007944:	f04f 0a00 	mov.w	sl, #0
 8007948:	f104 0b1a 	add.w	fp, r4, #26
 800794c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800794e:	425b      	negs	r3, r3
 8007950:	4553      	cmp	r3, sl
 8007952:	dc01      	bgt.n	8007958 <_printf_float+0x2b0>
 8007954:	464b      	mov	r3, r9
 8007956:	e793      	b.n	8007880 <_printf_float+0x1d8>
 8007958:	2301      	movs	r3, #1
 800795a:	465a      	mov	r2, fp
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	f43f aefb 	beq.w	800775e <_printf_float+0xb6>
 8007968:	f10a 0a01 	add.w	sl, sl, #1
 800796c:	e7ee      	b.n	800794c <_printf_float+0x2a4>
 800796e:	bf00      	nop
 8007970:	7fefffff 	.word	0x7fefffff
 8007974:	0800a4f9 	.word	0x0800a4f9
 8007978:	0800a4fd 	.word	0x0800a4fd
 800797c:	0800a501 	.word	0x0800a501
 8007980:	0800a505 	.word	0x0800a505
 8007984:	0800a509 	.word	0x0800a509
 8007988:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800798a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800798e:	4553      	cmp	r3, sl
 8007990:	bfa8      	it	ge
 8007992:	4653      	movge	r3, sl
 8007994:	2b00      	cmp	r3, #0
 8007996:	4699      	mov	r9, r3
 8007998:	dc36      	bgt.n	8007a08 <_printf_float+0x360>
 800799a:	f04f 0b00 	mov.w	fp, #0
 800799e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079a2:	f104 021a 	add.w	r2, r4, #26
 80079a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079a8:	9306      	str	r3, [sp, #24]
 80079aa:	eba3 0309 	sub.w	r3, r3, r9
 80079ae:	455b      	cmp	r3, fp
 80079b0:	dc31      	bgt.n	8007a16 <_printf_float+0x36e>
 80079b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079b4:	459a      	cmp	sl, r3
 80079b6:	dc3a      	bgt.n	8007a2e <_printf_float+0x386>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	07da      	lsls	r2, r3, #31
 80079bc:	d437      	bmi.n	8007a2e <_printf_float+0x386>
 80079be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c0:	ebaa 0903 	sub.w	r9, sl, r3
 80079c4:	9b06      	ldr	r3, [sp, #24]
 80079c6:	ebaa 0303 	sub.w	r3, sl, r3
 80079ca:	4599      	cmp	r9, r3
 80079cc:	bfa8      	it	ge
 80079ce:	4699      	movge	r9, r3
 80079d0:	f1b9 0f00 	cmp.w	r9, #0
 80079d4:	dc33      	bgt.n	8007a3e <_printf_float+0x396>
 80079d6:	f04f 0800 	mov.w	r8, #0
 80079da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079de:	f104 0b1a 	add.w	fp, r4, #26
 80079e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079e4:	ebaa 0303 	sub.w	r3, sl, r3
 80079e8:	eba3 0309 	sub.w	r3, r3, r9
 80079ec:	4543      	cmp	r3, r8
 80079ee:	f77f af79 	ble.w	80078e4 <_printf_float+0x23c>
 80079f2:	2301      	movs	r3, #1
 80079f4:	465a      	mov	r2, fp
 80079f6:	4631      	mov	r1, r6
 80079f8:	4628      	mov	r0, r5
 80079fa:	47b8      	blx	r7
 80079fc:	3001      	adds	r0, #1
 80079fe:	f43f aeae 	beq.w	800775e <_printf_float+0xb6>
 8007a02:	f108 0801 	add.w	r8, r8, #1
 8007a06:	e7ec      	b.n	80079e2 <_printf_float+0x33a>
 8007a08:	4642      	mov	r2, r8
 8007a0a:	4631      	mov	r1, r6
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	47b8      	blx	r7
 8007a10:	3001      	adds	r0, #1
 8007a12:	d1c2      	bne.n	800799a <_printf_float+0x2f2>
 8007a14:	e6a3      	b.n	800775e <_printf_float+0xb6>
 8007a16:	2301      	movs	r3, #1
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	9206      	str	r2, [sp, #24]
 8007a1e:	47b8      	blx	r7
 8007a20:	3001      	adds	r0, #1
 8007a22:	f43f ae9c 	beq.w	800775e <_printf_float+0xb6>
 8007a26:	9a06      	ldr	r2, [sp, #24]
 8007a28:	f10b 0b01 	add.w	fp, fp, #1
 8007a2c:	e7bb      	b.n	80079a6 <_printf_float+0x2fe>
 8007a2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a32:	4631      	mov	r1, r6
 8007a34:	4628      	mov	r0, r5
 8007a36:	47b8      	blx	r7
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d1c0      	bne.n	80079be <_printf_float+0x316>
 8007a3c:	e68f      	b.n	800775e <_printf_float+0xb6>
 8007a3e:	9a06      	ldr	r2, [sp, #24]
 8007a40:	464b      	mov	r3, r9
 8007a42:	4442      	add	r2, r8
 8007a44:	4631      	mov	r1, r6
 8007a46:	4628      	mov	r0, r5
 8007a48:	47b8      	blx	r7
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	d1c3      	bne.n	80079d6 <_printf_float+0x32e>
 8007a4e:	e686      	b.n	800775e <_printf_float+0xb6>
 8007a50:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a54:	f1ba 0f01 	cmp.w	sl, #1
 8007a58:	dc01      	bgt.n	8007a5e <_printf_float+0x3b6>
 8007a5a:	07db      	lsls	r3, r3, #31
 8007a5c:	d536      	bpl.n	8007acc <_printf_float+0x424>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	4642      	mov	r2, r8
 8007a62:	4631      	mov	r1, r6
 8007a64:	4628      	mov	r0, r5
 8007a66:	47b8      	blx	r7
 8007a68:	3001      	adds	r0, #1
 8007a6a:	f43f ae78 	beq.w	800775e <_printf_float+0xb6>
 8007a6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a72:	4631      	mov	r1, r6
 8007a74:	4628      	mov	r0, r5
 8007a76:	47b8      	blx	r7
 8007a78:	3001      	adds	r0, #1
 8007a7a:	f43f ae70 	beq.w	800775e <_printf_float+0xb6>
 8007a7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a82:	2200      	movs	r2, #0
 8007a84:	2300      	movs	r3, #0
 8007a86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a8a:	f7f9 f82d 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a8e:	b9c0      	cbnz	r0, 8007ac2 <_printf_float+0x41a>
 8007a90:	4653      	mov	r3, sl
 8007a92:	f108 0201 	add.w	r2, r8, #1
 8007a96:	4631      	mov	r1, r6
 8007a98:	4628      	mov	r0, r5
 8007a9a:	47b8      	blx	r7
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d10c      	bne.n	8007aba <_printf_float+0x412>
 8007aa0:	e65d      	b.n	800775e <_printf_float+0xb6>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	465a      	mov	r2, fp
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	f43f ae56 	beq.w	800775e <_printf_float+0xb6>
 8007ab2:	f108 0801 	add.w	r8, r8, #1
 8007ab6:	45d0      	cmp	r8, sl
 8007ab8:	dbf3      	blt.n	8007aa2 <_printf_float+0x3fa>
 8007aba:	464b      	mov	r3, r9
 8007abc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007ac0:	e6df      	b.n	8007882 <_printf_float+0x1da>
 8007ac2:	f04f 0800 	mov.w	r8, #0
 8007ac6:	f104 0b1a 	add.w	fp, r4, #26
 8007aca:	e7f4      	b.n	8007ab6 <_printf_float+0x40e>
 8007acc:	2301      	movs	r3, #1
 8007ace:	4642      	mov	r2, r8
 8007ad0:	e7e1      	b.n	8007a96 <_printf_float+0x3ee>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	464a      	mov	r2, r9
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4628      	mov	r0, r5
 8007ada:	47b8      	blx	r7
 8007adc:	3001      	adds	r0, #1
 8007ade:	f43f ae3e 	beq.w	800775e <_printf_float+0xb6>
 8007ae2:	f108 0801 	add.w	r8, r8, #1
 8007ae6:	68e3      	ldr	r3, [r4, #12]
 8007ae8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007aea:	1a5b      	subs	r3, r3, r1
 8007aec:	4543      	cmp	r3, r8
 8007aee:	dcf0      	bgt.n	8007ad2 <_printf_float+0x42a>
 8007af0:	e6fc      	b.n	80078ec <_printf_float+0x244>
 8007af2:	f04f 0800 	mov.w	r8, #0
 8007af6:	f104 0919 	add.w	r9, r4, #25
 8007afa:	e7f4      	b.n	8007ae6 <_printf_float+0x43e>

08007afc <_printf_common>:
 8007afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b00:	4616      	mov	r6, r2
 8007b02:	4698      	mov	r8, r3
 8007b04:	688a      	ldr	r2, [r1, #8]
 8007b06:	690b      	ldr	r3, [r1, #16]
 8007b08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	bfb8      	it	lt
 8007b10:	4613      	movlt	r3, r2
 8007b12:	6033      	str	r3, [r6, #0]
 8007b14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b18:	4607      	mov	r7, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	b10a      	cbz	r2, 8007b22 <_printf_common+0x26>
 8007b1e:	3301      	adds	r3, #1
 8007b20:	6033      	str	r3, [r6, #0]
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	0699      	lsls	r1, r3, #26
 8007b26:	bf42      	ittt	mi
 8007b28:	6833      	ldrmi	r3, [r6, #0]
 8007b2a:	3302      	addmi	r3, #2
 8007b2c:	6033      	strmi	r3, [r6, #0]
 8007b2e:	6825      	ldr	r5, [r4, #0]
 8007b30:	f015 0506 	ands.w	r5, r5, #6
 8007b34:	d106      	bne.n	8007b44 <_printf_common+0x48>
 8007b36:	f104 0a19 	add.w	sl, r4, #25
 8007b3a:	68e3      	ldr	r3, [r4, #12]
 8007b3c:	6832      	ldr	r2, [r6, #0]
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	42ab      	cmp	r3, r5
 8007b42:	dc26      	bgt.n	8007b92 <_printf_common+0x96>
 8007b44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b48:	6822      	ldr	r2, [r4, #0]
 8007b4a:	3b00      	subs	r3, #0
 8007b4c:	bf18      	it	ne
 8007b4e:	2301      	movne	r3, #1
 8007b50:	0692      	lsls	r2, r2, #26
 8007b52:	d42b      	bmi.n	8007bac <_printf_common+0xb0>
 8007b54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b58:	4641      	mov	r1, r8
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	47c8      	blx	r9
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d01e      	beq.n	8007ba0 <_printf_common+0xa4>
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	6922      	ldr	r2, [r4, #16]
 8007b66:	f003 0306 	and.w	r3, r3, #6
 8007b6a:	2b04      	cmp	r3, #4
 8007b6c:	bf02      	ittt	eq
 8007b6e:	68e5      	ldreq	r5, [r4, #12]
 8007b70:	6833      	ldreq	r3, [r6, #0]
 8007b72:	1aed      	subeq	r5, r5, r3
 8007b74:	68a3      	ldr	r3, [r4, #8]
 8007b76:	bf0c      	ite	eq
 8007b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b7c:	2500      	movne	r5, #0
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	bfc4      	itt	gt
 8007b82:	1a9b      	subgt	r3, r3, r2
 8007b84:	18ed      	addgt	r5, r5, r3
 8007b86:	2600      	movs	r6, #0
 8007b88:	341a      	adds	r4, #26
 8007b8a:	42b5      	cmp	r5, r6
 8007b8c:	d11a      	bne.n	8007bc4 <_printf_common+0xc8>
 8007b8e:	2000      	movs	r0, #0
 8007b90:	e008      	b.n	8007ba4 <_printf_common+0xa8>
 8007b92:	2301      	movs	r3, #1
 8007b94:	4652      	mov	r2, sl
 8007b96:	4641      	mov	r1, r8
 8007b98:	4638      	mov	r0, r7
 8007b9a:	47c8      	blx	r9
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d103      	bne.n	8007ba8 <_printf_common+0xac>
 8007ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba8:	3501      	adds	r5, #1
 8007baa:	e7c6      	b.n	8007b3a <_printf_common+0x3e>
 8007bac:	18e1      	adds	r1, r4, r3
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	2030      	movs	r0, #48	@ 0x30
 8007bb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007bb6:	4422      	add	r2, r4
 8007bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007bbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007bc0:	3302      	adds	r3, #2
 8007bc2:	e7c7      	b.n	8007b54 <_printf_common+0x58>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4622      	mov	r2, r4
 8007bc8:	4641      	mov	r1, r8
 8007bca:	4638      	mov	r0, r7
 8007bcc:	47c8      	blx	r9
 8007bce:	3001      	adds	r0, #1
 8007bd0:	d0e6      	beq.n	8007ba0 <_printf_common+0xa4>
 8007bd2:	3601      	adds	r6, #1
 8007bd4:	e7d9      	b.n	8007b8a <_printf_common+0x8e>
	...

08007bd8 <_printf_i>:
 8007bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bdc:	7e0f      	ldrb	r7, [r1, #24]
 8007bde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007be0:	2f78      	cmp	r7, #120	@ 0x78
 8007be2:	4691      	mov	r9, r2
 8007be4:	4680      	mov	r8, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	469a      	mov	sl, r3
 8007bea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007bee:	d807      	bhi.n	8007c00 <_printf_i+0x28>
 8007bf0:	2f62      	cmp	r7, #98	@ 0x62
 8007bf2:	d80a      	bhi.n	8007c0a <_printf_i+0x32>
 8007bf4:	2f00      	cmp	r7, #0
 8007bf6:	f000 80d2 	beq.w	8007d9e <_printf_i+0x1c6>
 8007bfa:	2f58      	cmp	r7, #88	@ 0x58
 8007bfc:	f000 80b9 	beq.w	8007d72 <_printf_i+0x19a>
 8007c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c08:	e03a      	b.n	8007c80 <_printf_i+0xa8>
 8007c0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c0e:	2b15      	cmp	r3, #21
 8007c10:	d8f6      	bhi.n	8007c00 <_printf_i+0x28>
 8007c12:	a101      	add	r1, pc, #4	@ (adr r1, 8007c18 <_printf_i+0x40>)
 8007c14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c85 	.word	0x08007c85
 8007c20:	08007c01 	.word	0x08007c01
 8007c24:	08007c01 	.word	0x08007c01
 8007c28:	08007c01 	.word	0x08007c01
 8007c2c:	08007c01 	.word	0x08007c01
 8007c30:	08007c85 	.word	0x08007c85
 8007c34:	08007c01 	.word	0x08007c01
 8007c38:	08007c01 	.word	0x08007c01
 8007c3c:	08007c01 	.word	0x08007c01
 8007c40:	08007c01 	.word	0x08007c01
 8007c44:	08007d85 	.word	0x08007d85
 8007c48:	08007caf 	.word	0x08007caf
 8007c4c:	08007d3f 	.word	0x08007d3f
 8007c50:	08007c01 	.word	0x08007c01
 8007c54:	08007c01 	.word	0x08007c01
 8007c58:	08007da7 	.word	0x08007da7
 8007c5c:	08007c01 	.word	0x08007c01
 8007c60:	08007caf 	.word	0x08007caf
 8007c64:	08007c01 	.word	0x08007c01
 8007c68:	08007c01 	.word	0x08007c01
 8007c6c:	08007d47 	.word	0x08007d47
 8007c70:	6833      	ldr	r3, [r6, #0]
 8007c72:	1d1a      	adds	r2, r3, #4
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6032      	str	r2, [r6, #0]
 8007c78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c80:	2301      	movs	r3, #1
 8007c82:	e09d      	b.n	8007dc0 <_printf_i+0x1e8>
 8007c84:	6833      	ldr	r3, [r6, #0]
 8007c86:	6820      	ldr	r0, [r4, #0]
 8007c88:	1d19      	adds	r1, r3, #4
 8007c8a:	6031      	str	r1, [r6, #0]
 8007c8c:	0606      	lsls	r6, r0, #24
 8007c8e:	d501      	bpl.n	8007c94 <_printf_i+0xbc>
 8007c90:	681d      	ldr	r5, [r3, #0]
 8007c92:	e003      	b.n	8007c9c <_printf_i+0xc4>
 8007c94:	0645      	lsls	r5, r0, #25
 8007c96:	d5fb      	bpl.n	8007c90 <_printf_i+0xb8>
 8007c98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c9c:	2d00      	cmp	r5, #0
 8007c9e:	da03      	bge.n	8007ca8 <_printf_i+0xd0>
 8007ca0:	232d      	movs	r3, #45	@ 0x2d
 8007ca2:	426d      	negs	r5, r5
 8007ca4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ca8:	4859      	ldr	r0, [pc, #356]	@ (8007e10 <_printf_i+0x238>)
 8007caa:	230a      	movs	r3, #10
 8007cac:	e011      	b.n	8007cd2 <_printf_i+0xfa>
 8007cae:	6821      	ldr	r1, [r4, #0]
 8007cb0:	6833      	ldr	r3, [r6, #0]
 8007cb2:	0608      	lsls	r0, r1, #24
 8007cb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007cb8:	d402      	bmi.n	8007cc0 <_printf_i+0xe8>
 8007cba:	0649      	lsls	r1, r1, #25
 8007cbc:	bf48      	it	mi
 8007cbe:	b2ad      	uxthmi	r5, r5
 8007cc0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007cc2:	4853      	ldr	r0, [pc, #332]	@ (8007e10 <_printf_i+0x238>)
 8007cc4:	6033      	str	r3, [r6, #0]
 8007cc6:	bf14      	ite	ne
 8007cc8:	230a      	movne	r3, #10
 8007cca:	2308      	moveq	r3, #8
 8007ccc:	2100      	movs	r1, #0
 8007cce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007cd2:	6866      	ldr	r6, [r4, #4]
 8007cd4:	60a6      	str	r6, [r4, #8]
 8007cd6:	2e00      	cmp	r6, #0
 8007cd8:	bfa2      	ittt	ge
 8007cda:	6821      	ldrge	r1, [r4, #0]
 8007cdc:	f021 0104 	bicge.w	r1, r1, #4
 8007ce0:	6021      	strge	r1, [r4, #0]
 8007ce2:	b90d      	cbnz	r5, 8007ce8 <_printf_i+0x110>
 8007ce4:	2e00      	cmp	r6, #0
 8007ce6:	d04b      	beq.n	8007d80 <_printf_i+0x1a8>
 8007ce8:	4616      	mov	r6, r2
 8007cea:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cee:	fb03 5711 	mls	r7, r3, r1, r5
 8007cf2:	5dc7      	ldrb	r7, [r0, r7]
 8007cf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cf8:	462f      	mov	r7, r5
 8007cfa:	42bb      	cmp	r3, r7
 8007cfc:	460d      	mov	r5, r1
 8007cfe:	d9f4      	bls.n	8007cea <_printf_i+0x112>
 8007d00:	2b08      	cmp	r3, #8
 8007d02:	d10b      	bne.n	8007d1c <_printf_i+0x144>
 8007d04:	6823      	ldr	r3, [r4, #0]
 8007d06:	07df      	lsls	r7, r3, #31
 8007d08:	d508      	bpl.n	8007d1c <_printf_i+0x144>
 8007d0a:	6923      	ldr	r3, [r4, #16]
 8007d0c:	6861      	ldr	r1, [r4, #4]
 8007d0e:	4299      	cmp	r1, r3
 8007d10:	bfde      	ittt	le
 8007d12:	2330      	movle	r3, #48	@ 0x30
 8007d14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d1c:	1b92      	subs	r2, r2, r6
 8007d1e:	6122      	str	r2, [r4, #16]
 8007d20:	f8cd a000 	str.w	sl, [sp]
 8007d24:	464b      	mov	r3, r9
 8007d26:	aa03      	add	r2, sp, #12
 8007d28:	4621      	mov	r1, r4
 8007d2a:	4640      	mov	r0, r8
 8007d2c:	f7ff fee6 	bl	8007afc <_printf_common>
 8007d30:	3001      	adds	r0, #1
 8007d32:	d14a      	bne.n	8007dca <_printf_i+0x1f2>
 8007d34:	f04f 30ff 	mov.w	r0, #4294967295
 8007d38:	b004      	add	sp, #16
 8007d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	f043 0320 	orr.w	r3, r3, #32
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	4833      	ldr	r0, [pc, #204]	@ (8007e14 <_printf_i+0x23c>)
 8007d48:	2778      	movs	r7, #120	@ 0x78
 8007d4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	6831      	ldr	r1, [r6, #0]
 8007d52:	061f      	lsls	r7, r3, #24
 8007d54:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d58:	d402      	bmi.n	8007d60 <_printf_i+0x188>
 8007d5a:	065f      	lsls	r7, r3, #25
 8007d5c:	bf48      	it	mi
 8007d5e:	b2ad      	uxthmi	r5, r5
 8007d60:	6031      	str	r1, [r6, #0]
 8007d62:	07d9      	lsls	r1, r3, #31
 8007d64:	bf44      	itt	mi
 8007d66:	f043 0320 	orrmi.w	r3, r3, #32
 8007d6a:	6023      	strmi	r3, [r4, #0]
 8007d6c:	b11d      	cbz	r5, 8007d76 <_printf_i+0x19e>
 8007d6e:	2310      	movs	r3, #16
 8007d70:	e7ac      	b.n	8007ccc <_printf_i+0xf4>
 8007d72:	4827      	ldr	r0, [pc, #156]	@ (8007e10 <_printf_i+0x238>)
 8007d74:	e7e9      	b.n	8007d4a <_printf_i+0x172>
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	f023 0320 	bic.w	r3, r3, #32
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	e7f6      	b.n	8007d6e <_printf_i+0x196>
 8007d80:	4616      	mov	r6, r2
 8007d82:	e7bd      	b.n	8007d00 <_printf_i+0x128>
 8007d84:	6833      	ldr	r3, [r6, #0]
 8007d86:	6825      	ldr	r5, [r4, #0]
 8007d88:	6961      	ldr	r1, [r4, #20]
 8007d8a:	1d18      	adds	r0, r3, #4
 8007d8c:	6030      	str	r0, [r6, #0]
 8007d8e:	062e      	lsls	r6, r5, #24
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	d501      	bpl.n	8007d98 <_printf_i+0x1c0>
 8007d94:	6019      	str	r1, [r3, #0]
 8007d96:	e002      	b.n	8007d9e <_printf_i+0x1c6>
 8007d98:	0668      	lsls	r0, r5, #25
 8007d9a:	d5fb      	bpl.n	8007d94 <_printf_i+0x1bc>
 8007d9c:	8019      	strh	r1, [r3, #0]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	6123      	str	r3, [r4, #16]
 8007da2:	4616      	mov	r6, r2
 8007da4:	e7bc      	b.n	8007d20 <_printf_i+0x148>
 8007da6:	6833      	ldr	r3, [r6, #0]
 8007da8:	1d1a      	adds	r2, r3, #4
 8007daa:	6032      	str	r2, [r6, #0]
 8007dac:	681e      	ldr	r6, [r3, #0]
 8007dae:	6862      	ldr	r2, [r4, #4]
 8007db0:	2100      	movs	r1, #0
 8007db2:	4630      	mov	r0, r6
 8007db4:	f7f8 fa1c 	bl	80001f0 <memchr>
 8007db8:	b108      	cbz	r0, 8007dbe <_printf_i+0x1e6>
 8007dba:	1b80      	subs	r0, r0, r6
 8007dbc:	6060      	str	r0, [r4, #4]
 8007dbe:	6863      	ldr	r3, [r4, #4]
 8007dc0:	6123      	str	r3, [r4, #16]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dc8:	e7aa      	b.n	8007d20 <_printf_i+0x148>
 8007dca:	6923      	ldr	r3, [r4, #16]
 8007dcc:	4632      	mov	r2, r6
 8007dce:	4649      	mov	r1, r9
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	47d0      	blx	sl
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	d0ad      	beq.n	8007d34 <_printf_i+0x15c>
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	079b      	lsls	r3, r3, #30
 8007ddc:	d413      	bmi.n	8007e06 <_printf_i+0x22e>
 8007dde:	68e0      	ldr	r0, [r4, #12]
 8007de0:	9b03      	ldr	r3, [sp, #12]
 8007de2:	4298      	cmp	r0, r3
 8007de4:	bfb8      	it	lt
 8007de6:	4618      	movlt	r0, r3
 8007de8:	e7a6      	b.n	8007d38 <_printf_i+0x160>
 8007dea:	2301      	movs	r3, #1
 8007dec:	4632      	mov	r2, r6
 8007dee:	4649      	mov	r1, r9
 8007df0:	4640      	mov	r0, r8
 8007df2:	47d0      	blx	sl
 8007df4:	3001      	adds	r0, #1
 8007df6:	d09d      	beq.n	8007d34 <_printf_i+0x15c>
 8007df8:	3501      	adds	r5, #1
 8007dfa:	68e3      	ldr	r3, [r4, #12]
 8007dfc:	9903      	ldr	r1, [sp, #12]
 8007dfe:	1a5b      	subs	r3, r3, r1
 8007e00:	42ab      	cmp	r3, r5
 8007e02:	dcf2      	bgt.n	8007dea <_printf_i+0x212>
 8007e04:	e7eb      	b.n	8007dde <_printf_i+0x206>
 8007e06:	2500      	movs	r5, #0
 8007e08:	f104 0619 	add.w	r6, r4, #25
 8007e0c:	e7f5      	b.n	8007dfa <_printf_i+0x222>
 8007e0e:	bf00      	nop
 8007e10:	0800a50b 	.word	0x0800a50b
 8007e14:	0800a51c 	.word	0x0800a51c

08007e18 <std>:
 8007e18:	2300      	movs	r3, #0
 8007e1a:	b510      	push	{r4, lr}
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e26:	6083      	str	r3, [r0, #8]
 8007e28:	8181      	strh	r1, [r0, #12]
 8007e2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e2c:	81c2      	strh	r2, [r0, #14]
 8007e2e:	6183      	str	r3, [r0, #24]
 8007e30:	4619      	mov	r1, r3
 8007e32:	2208      	movs	r2, #8
 8007e34:	305c      	adds	r0, #92	@ 0x5c
 8007e36:	f000 fa1b 	bl	8008270 <memset>
 8007e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e70 <std+0x58>)
 8007e3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e74 <std+0x5c>)
 8007e40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e42:	4b0d      	ldr	r3, [pc, #52]	@ (8007e78 <std+0x60>)
 8007e44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e46:	4b0d      	ldr	r3, [pc, #52]	@ (8007e7c <std+0x64>)
 8007e48:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e80 <std+0x68>)
 8007e4c:	6224      	str	r4, [r4, #32]
 8007e4e:	429c      	cmp	r4, r3
 8007e50:	d006      	beq.n	8007e60 <std+0x48>
 8007e52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e56:	4294      	cmp	r4, r2
 8007e58:	d002      	beq.n	8007e60 <std+0x48>
 8007e5a:	33d0      	adds	r3, #208	@ 0xd0
 8007e5c:	429c      	cmp	r4, r3
 8007e5e:	d105      	bne.n	8007e6c <std+0x54>
 8007e60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e68:	f000 baa0 	b.w	80083ac <__retarget_lock_init_recursive>
 8007e6c:	bd10      	pop	{r4, pc}
 8007e6e:	bf00      	nop
 8007e70:	080080c1 	.word	0x080080c1
 8007e74:	080080e3 	.word	0x080080e3
 8007e78:	0800811b 	.word	0x0800811b
 8007e7c:	0800813f 	.word	0x0800813f
 8007e80:	20000b54 	.word	0x20000b54

08007e84 <stdio_exit_handler>:
 8007e84:	4a02      	ldr	r2, [pc, #8]	@ (8007e90 <stdio_exit_handler+0xc>)
 8007e86:	4903      	ldr	r1, [pc, #12]	@ (8007e94 <stdio_exit_handler+0x10>)
 8007e88:	4803      	ldr	r0, [pc, #12]	@ (8007e98 <stdio_exit_handler+0x14>)
 8007e8a:	f000 b869 	b.w	8007f60 <_fwalk_sglue>
 8007e8e:	bf00      	nop
 8007e90:	2000000c 	.word	0x2000000c
 8007e94:	08009bc9 	.word	0x08009bc9
 8007e98:	2000001c 	.word	0x2000001c

08007e9c <cleanup_stdio>:
 8007e9c:	6841      	ldr	r1, [r0, #4]
 8007e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed0 <cleanup_stdio+0x34>)
 8007ea0:	4299      	cmp	r1, r3
 8007ea2:	b510      	push	{r4, lr}
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	d001      	beq.n	8007eac <cleanup_stdio+0x10>
 8007ea8:	f001 fe8e 	bl	8009bc8 <_fflush_r>
 8007eac:	68a1      	ldr	r1, [r4, #8]
 8007eae:	4b09      	ldr	r3, [pc, #36]	@ (8007ed4 <cleanup_stdio+0x38>)
 8007eb0:	4299      	cmp	r1, r3
 8007eb2:	d002      	beq.n	8007eba <cleanup_stdio+0x1e>
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f001 fe87 	bl	8009bc8 <_fflush_r>
 8007eba:	68e1      	ldr	r1, [r4, #12]
 8007ebc:	4b06      	ldr	r3, [pc, #24]	@ (8007ed8 <cleanup_stdio+0x3c>)
 8007ebe:	4299      	cmp	r1, r3
 8007ec0:	d004      	beq.n	8007ecc <cleanup_stdio+0x30>
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec8:	f001 be7e 	b.w	8009bc8 <_fflush_r>
 8007ecc:	bd10      	pop	{r4, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000b54 	.word	0x20000b54
 8007ed4:	20000bbc 	.word	0x20000bbc
 8007ed8:	20000c24 	.word	0x20000c24

08007edc <global_stdio_init.part.0>:
 8007edc:	b510      	push	{r4, lr}
 8007ede:	4b0b      	ldr	r3, [pc, #44]	@ (8007f0c <global_stdio_init.part.0+0x30>)
 8007ee0:	4c0b      	ldr	r4, [pc, #44]	@ (8007f10 <global_stdio_init.part.0+0x34>)
 8007ee2:	4a0c      	ldr	r2, [pc, #48]	@ (8007f14 <global_stdio_init.part.0+0x38>)
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2104      	movs	r1, #4
 8007eec:	f7ff ff94 	bl	8007e18 <std>
 8007ef0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	2109      	movs	r1, #9
 8007ef8:	f7ff ff8e 	bl	8007e18 <std>
 8007efc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f00:	2202      	movs	r2, #2
 8007f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f06:	2112      	movs	r1, #18
 8007f08:	f7ff bf86 	b.w	8007e18 <std>
 8007f0c:	20000c8c 	.word	0x20000c8c
 8007f10:	20000b54 	.word	0x20000b54
 8007f14:	08007e85 	.word	0x08007e85

08007f18 <__sfp_lock_acquire>:
 8007f18:	4801      	ldr	r0, [pc, #4]	@ (8007f20 <__sfp_lock_acquire+0x8>)
 8007f1a:	f000 ba48 	b.w	80083ae <__retarget_lock_acquire_recursive>
 8007f1e:	bf00      	nop
 8007f20:	20000c95 	.word	0x20000c95

08007f24 <__sfp_lock_release>:
 8007f24:	4801      	ldr	r0, [pc, #4]	@ (8007f2c <__sfp_lock_release+0x8>)
 8007f26:	f000 ba43 	b.w	80083b0 <__retarget_lock_release_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	20000c95 	.word	0x20000c95

08007f30 <__sinit>:
 8007f30:	b510      	push	{r4, lr}
 8007f32:	4604      	mov	r4, r0
 8007f34:	f7ff fff0 	bl	8007f18 <__sfp_lock_acquire>
 8007f38:	6a23      	ldr	r3, [r4, #32]
 8007f3a:	b11b      	cbz	r3, 8007f44 <__sinit+0x14>
 8007f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f40:	f7ff bff0 	b.w	8007f24 <__sfp_lock_release>
 8007f44:	4b04      	ldr	r3, [pc, #16]	@ (8007f58 <__sinit+0x28>)
 8007f46:	6223      	str	r3, [r4, #32]
 8007f48:	4b04      	ldr	r3, [pc, #16]	@ (8007f5c <__sinit+0x2c>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1f5      	bne.n	8007f3c <__sinit+0xc>
 8007f50:	f7ff ffc4 	bl	8007edc <global_stdio_init.part.0>
 8007f54:	e7f2      	b.n	8007f3c <__sinit+0xc>
 8007f56:	bf00      	nop
 8007f58:	08007e9d 	.word	0x08007e9d
 8007f5c:	20000c8c 	.word	0x20000c8c

08007f60 <_fwalk_sglue>:
 8007f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f64:	4607      	mov	r7, r0
 8007f66:	4688      	mov	r8, r1
 8007f68:	4614      	mov	r4, r2
 8007f6a:	2600      	movs	r6, #0
 8007f6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f70:	f1b9 0901 	subs.w	r9, r9, #1
 8007f74:	d505      	bpl.n	8007f82 <_fwalk_sglue+0x22>
 8007f76:	6824      	ldr	r4, [r4, #0]
 8007f78:	2c00      	cmp	r4, #0
 8007f7a:	d1f7      	bne.n	8007f6c <_fwalk_sglue+0xc>
 8007f7c:	4630      	mov	r0, r6
 8007f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f82:	89ab      	ldrh	r3, [r5, #12]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d907      	bls.n	8007f98 <_fwalk_sglue+0x38>
 8007f88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	d003      	beq.n	8007f98 <_fwalk_sglue+0x38>
 8007f90:	4629      	mov	r1, r5
 8007f92:	4638      	mov	r0, r7
 8007f94:	47c0      	blx	r8
 8007f96:	4306      	orrs	r6, r0
 8007f98:	3568      	adds	r5, #104	@ 0x68
 8007f9a:	e7e9      	b.n	8007f70 <_fwalk_sglue+0x10>

08007f9c <_puts_r>:
 8007f9c:	6a03      	ldr	r3, [r0, #32]
 8007f9e:	b570      	push	{r4, r5, r6, lr}
 8007fa0:	6884      	ldr	r4, [r0, #8]
 8007fa2:	4605      	mov	r5, r0
 8007fa4:	460e      	mov	r6, r1
 8007fa6:	b90b      	cbnz	r3, 8007fac <_puts_r+0x10>
 8007fa8:	f7ff ffc2 	bl	8007f30 <__sinit>
 8007fac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fae:	07db      	lsls	r3, r3, #31
 8007fb0:	d405      	bmi.n	8007fbe <_puts_r+0x22>
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	0598      	lsls	r0, r3, #22
 8007fb6:	d402      	bmi.n	8007fbe <_puts_r+0x22>
 8007fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fba:	f000 f9f8 	bl	80083ae <__retarget_lock_acquire_recursive>
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	0719      	lsls	r1, r3, #28
 8007fc2:	d502      	bpl.n	8007fca <_puts_r+0x2e>
 8007fc4:	6923      	ldr	r3, [r4, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d135      	bne.n	8008036 <_puts_r+0x9a>
 8007fca:	4621      	mov	r1, r4
 8007fcc:	4628      	mov	r0, r5
 8007fce:	f000 f8f9 	bl	80081c4 <__swsetup_r>
 8007fd2:	b380      	cbz	r0, 8008036 <_puts_r+0x9a>
 8007fd4:	f04f 35ff 	mov.w	r5, #4294967295
 8007fd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fda:	07da      	lsls	r2, r3, #31
 8007fdc:	d405      	bmi.n	8007fea <_puts_r+0x4e>
 8007fde:	89a3      	ldrh	r3, [r4, #12]
 8007fe0:	059b      	lsls	r3, r3, #22
 8007fe2:	d402      	bmi.n	8007fea <_puts_r+0x4e>
 8007fe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fe6:	f000 f9e3 	bl	80083b0 <__retarget_lock_release_recursive>
 8007fea:	4628      	mov	r0, r5
 8007fec:	bd70      	pop	{r4, r5, r6, pc}
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	da04      	bge.n	8007ffc <_puts_r+0x60>
 8007ff2:	69a2      	ldr	r2, [r4, #24]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	dc17      	bgt.n	8008028 <_puts_r+0x8c>
 8007ff8:	290a      	cmp	r1, #10
 8007ffa:	d015      	beq.n	8008028 <_puts_r+0x8c>
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	6022      	str	r2, [r4, #0]
 8008002:	7019      	strb	r1, [r3, #0]
 8008004:	68a3      	ldr	r3, [r4, #8]
 8008006:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800800a:	3b01      	subs	r3, #1
 800800c:	60a3      	str	r3, [r4, #8]
 800800e:	2900      	cmp	r1, #0
 8008010:	d1ed      	bne.n	8007fee <_puts_r+0x52>
 8008012:	2b00      	cmp	r3, #0
 8008014:	da11      	bge.n	800803a <_puts_r+0x9e>
 8008016:	4622      	mov	r2, r4
 8008018:	210a      	movs	r1, #10
 800801a:	4628      	mov	r0, r5
 800801c:	f000 f893 	bl	8008146 <__swbuf_r>
 8008020:	3001      	adds	r0, #1
 8008022:	d0d7      	beq.n	8007fd4 <_puts_r+0x38>
 8008024:	250a      	movs	r5, #10
 8008026:	e7d7      	b.n	8007fd8 <_puts_r+0x3c>
 8008028:	4622      	mov	r2, r4
 800802a:	4628      	mov	r0, r5
 800802c:	f000 f88b 	bl	8008146 <__swbuf_r>
 8008030:	3001      	adds	r0, #1
 8008032:	d1e7      	bne.n	8008004 <_puts_r+0x68>
 8008034:	e7ce      	b.n	8007fd4 <_puts_r+0x38>
 8008036:	3e01      	subs	r6, #1
 8008038:	e7e4      	b.n	8008004 <_puts_r+0x68>
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	1c5a      	adds	r2, r3, #1
 800803e:	6022      	str	r2, [r4, #0]
 8008040:	220a      	movs	r2, #10
 8008042:	701a      	strb	r2, [r3, #0]
 8008044:	e7ee      	b.n	8008024 <_puts_r+0x88>
	...

08008048 <puts>:
 8008048:	4b02      	ldr	r3, [pc, #8]	@ (8008054 <puts+0xc>)
 800804a:	4601      	mov	r1, r0
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	f7ff bfa5 	b.w	8007f9c <_puts_r>
 8008052:	bf00      	nop
 8008054:	20000018 	.word	0x20000018

08008058 <sniprintf>:
 8008058:	b40c      	push	{r2, r3}
 800805a:	b530      	push	{r4, r5, lr}
 800805c:	4b17      	ldr	r3, [pc, #92]	@ (80080bc <sniprintf+0x64>)
 800805e:	1e0c      	subs	r4, r1, #0
 8008060:	681d      	ldr	r5, [r3, #0]
 8008062:	b09d      	sub	sp, #116	@ 0x74
 8008064:	da08      	bge.n	8008078 <sniprintf+0x20>
 8008066:	238b      	movs	r3, #139	@ 0x8b
 8008068:	602b      	str	r3, [r5, #0]
 800806a:	f04f 30ff 	mov.w	r0, #4294967295
 800806e:	b01d      	add	sp, #116	@ 0x74
 8008070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008074:	b002      	add	sp, #8
 8008076:	4770      	bx	lr
 8008078:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800807c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008080:	bf14      	ite	ne
 8008082:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008086:	4623      	moveq	r3, r4
 8008088:	9304      	str	r3, [sp, #16]
 800808a:	9307      	str	r3, [sp, #28]
 800808c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008090:	9002      	str	r0, [sp, #8]
 8008092:	9006      	str	r0, [sp, #24]
 8008094:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008098:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800809a:	ab21      	add	r3, sp, #132	@ 0x84
 800809c:	a902      	add	r1, sp, #8
 800809e:	4628      	mov	r0, r5
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	f001 fc11 	bl	80098c8 <_svfiprintf_r>
 80080a6:	1c43      	adds	r3, r0, #1
 80080a8:	bfbc      	itt	lt
 80080aa:	238b      	movlt	r3, #139	@ 0x8b
 80080ac:	602b      	strlt	r3, [r5, #0]
 80080ae:	2c00      	cmp	r4, #0
 80080b0:	d0dd      	beq.n	800806e <sniprintf+0x16>
 80080b2:	9b02      	ldr	r3, [sp, #8]
 80080b4:	2200      	movs	r2, #0
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	e7d9      	b.n	800806e <sniprintf+0x16>
 80080ba:	bf00      	nop
 80080bc:	20000018 	.word	0x20000018

080080c0 <__sread>:
 80080c0:	b510      	push	{r4, lr}
 80080c2:	460c      	mov	r4, r1
 80080c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c8:	f000 f912 	bl	80082f0 <_read_r>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	bfab      	itete	ge
 80080d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80080d2:	89a3      	ldrhlt	r3, [r4, #12]
 80080d4:	181b      	addge	r3, r3, r0
 80080d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80080da:	bfac      	ite	ge
 80080dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080de:	81a3      	strhlt	r3, [r4, #12]
 80080e0:	bd10      	pop	{r4, pc}

080080e2 <__swrite>:
 80080e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080e6:	461f      	mov	r7, r3
 80080e8:	898b      	ldrh	r3, [r1, #12]
 80080ea:	05db      	lsls	r3, r3, #23
 80080ec:	4605      	mov	r5, r0
 80080ee:	460c      	mov	r4, r1
 80080f0:	4616      	mov	r6, r2
 80080f2:	d505      	bpl.n	8008100 <__swrite+0x1e>
 80080f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f8:	2302      	movs	r3, #2
 80080fa:	2200      	movs	r2, #0
 80080fc:	f000 f8e6 	bl	80082cc <_lseek_r>
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008106:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800810a:	81a3      	strh	r3, [r4, #12]
 800810c:	4632      	mov	r2, r6
 800810e:	463b      	mov	r3, r7
 8008110:	4628      	mov	r0, r5
 8008112:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008116:	f000 b90d 	b.w	8008334 <_write_r>

0800811a <__sseek>:
 800811a:	b510      	push	{r4, lr}
 800811c:	460c      	mov	r4, r1
 800811e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008122:	f000 f8d3 	bl	80082cc <_lseek_r>
 8008126:	1c43      	adds	r3, r0, #1
 8008128:	89a3      	ldrh	r3, [r4, #12]
 800812a:	bf15      	itete	ne
 800812c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800812e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008132:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008136:	81a3      	strheq	r3, [r4, #12]
 8008138:	bf18      	it	ne
 800813a:	81a3      	strhne	r3, [r4, #12]
 800813c:	bd10      	pop	{r4, pc}

0800813e <__sclose>:
 800813e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008142:	f000 b8b3 	b.w	80082ac <_close_r>

08008146 <__swbuf_r>:
 8008146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008148:	460e      	mov	r6, r1
 800814a:	4614      	mov	r4, r2
 800814c:	4605      	mov	r5, r0
 800814e:	b118      	cbz	r0, 8008158 <__swbuf_r+0x12>
 8008150:	6a03      	ldr	r3, [r0, #32]
 8008152:	b90b      	cbnz	r3, 8008158 <__swbuf_r+0x12>
 8008154:	f7ff feec 	bl	8007f30 <__sinit>
 8008158:	69a3      	ldr	r3, [r4, #24]
 800815a:	60a3      	str	r3, [r4, #8]
 800815c:	89a3      	ldrh	r3, [r4, #12]
 800815e:	071a      	lsls	r2, r3, #28
 8008160:	d501      	bpl.n	8008166 <__swbuf_r+0x20>
 8008162:	6923      	ldr	r3, [r4, #16]
 8008164:	b943      	cbnz	r3, 8008178 <__swbuf_r+0x32>
 8008166:	4621      	mov	r1, r4
 8008168:	4628      	mov	r0, r5
 800816a:	f000 f82b 	bl	80081c4 <__swsetup_r>
 800816e:	b118      	cbz	r0, 8008178 <__swbuf_r+0x32>
 8008170:	f04f 37ff 	mov.w	r7, #4294967295
 8008174:	4638      	mov	r0, r7
 8008176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	6922      	ldr	r2, [r4, #16]
 800817c:	1a98      	subs	r0, r3, r2
 800817e:	6963      	ldr	r3, [r4, #20]
 8008180:	b2f6      	uxtb	r6, r6
 8008182:	4283      	cmp	r3, r0
 8008184:	4637      	mov	r7, r6
 8008186:	dc05      	bgt.n	8008194 <__swbuf_r+0x4e>
 8008188:	4621      	mov	r1, r4
 800818a:	4628      	mov	r0, r5
 800818c:	f001 fd1c 	bl	8009bc8 <_fflush_r>
 8008190:	2800      	cmp	r0, #0
 8008192:	d1ed      	bne.n	8008170 <__swbuf_r+0x2a>
 8008194:	68a3      	ldr	r3, [r4, #8]
 8008196:	3b01      	subs	r3, #1
 8008198:	60a3      	str	r3, [r4, #8]
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	1c5a      	adds	r2, r3, #1
 800819e:	6022      	str	r2, [r4, #0]
 80081a0:	701e      	strb	r6, [r3, #0]
 80081a2:	6962      	ldr	r2, [r4, #20]
 80081a4:	1c43      	adds	r3, r0, #1
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d004      	beq.n	80081b4 <__swbuf_r+0x6e>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	07db      	lsls	r3, r3, #31
 80081ae:	d5e1      	bpl.n	8008174 <__swbuf_r+0x2e>
 80081b0:	2e0a      	cmp	r6, #10
 80081b2:	d1df      	bne.n	8008174 <__swbuf_r+0x2e>
 80081b4:	4621      	mov	r1, r4
 80081b6:	4628      	mov	r0, r5
 80081b8:	f001 fd06 	bl	8009bc8 <_fflush_r>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d0d9      	beq.n	8008174 <__swbuf_r+0x2e>
 80081c0:	e7d6      	b.n	8008170 <__swbuf_r+0x2a>
	...

080081c4 <__swsetup_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4b29      	ldr	r3, [pc, #164]	@ (800826c <__swsetup_r+0xa8>)
 80081c8:	4605      	mov	r5, r0
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	460c      	mov	r4, r1
 80081ce:	b118      	cbz	r0, 80081d8 <__swsetup_r+0x14>
 80081d0:	6a03      	ldr	r3, [r0, #32]
 80081d2:	b90b      	cbnz	r3, 80081d8 <__swsetup_r+0x14>
 80081d4:	f7ff feac 	bl	8007f30 <__sinit>
 80081d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081dc:	0719      	lsls	r1, r3, #28
 80081de:	d422      	bmi.n	8008226 <__swsetup_r+0x62>
 80081e0:	06da      	lsls	r2, r3, #27
 80081e2:	d407      	bmi.n	80081f4 <__swsetup_r+0x30>
 80081e4:	2209      	movs	r2, #9
 80081e6:	602a      	str	r2, [r5, #0]
 80081e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081ec:	81a3      	strh	r3, [r4, #12]
 80081ee:	f04f 30ff 	mov.w	r0, #4294967295
 80081f2:	e033      	b.n	800825c <__swsetup_r+0x98>
 80081f4:	0758      	lsls	r0, r3, #29
 80081f6:	d512      	bpl.n	800821e <__swsetup_r+0x5a>
 80081f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081fa:	b141      	cbz	r1, 800820e <__swsetup_r+0x4a>
 80081fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008200:	4299      	cmp	r1, r3
 8008202:	d002      	beq.n	800820a <__swsetup_r+0x46>
 8008204:	4628      	mov	r0, r5
 8008206:	f000 ff2f 	bl	8009068 <_free_r>
 800820a:	2300      	movs	r3, #0
 800820c:	6363      	str	r3, [r4, #52]	@ 0x34
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008214:	81a3      	strh	r3, [r4, #12]
 8008216:	2300      	movs	r3, #0
 8008218:	6063      	str	r3, [r4, #4]
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	f043 0308 	orr.w	r3, r3, #8
 8008224:	81a3      	strh	r3, [r4, #12]
 8008226:	6923      	ldr	r3, [r4, #16]
 8008228:	b94b      	cbnz	r3, 800823e <__swsetup_r+0x7a>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008234:	d003      	beq.n	800823e <__swsetup_r+0x7a>
 8008236:	4621      	mov	r1, r4
 8008238:	4628      	mov	r0, r5
 800823a:	f001 fd13 	bl	8009c64 <__smakebuf_r>
 800823e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008242:	f013 0201 	ands.w	r2, r3, #1
 8008246:	d00a      	beq.n	800825e <__swsetup_r+0x9a>
 8008248:	2200      	movs	r2, #0
 800824a:	60a2      	str	r2, [r4, #8]
 800824c:	6962      	ldr	r2, [r4, #20]
 800824e:	4252      	negs	r2, r2
 8008250:	61a2      	str	r2, [r4, #24]
 8008252:	6922      	ldr	r2, [r4, #16]
 8008254:	b942      	cbnz	r2, 8008268 <__swsetup_r+0xa4>
 8008256:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800825a:	d1c5      	bne.n	80081e8 <__swsetup_r+0x24>
 800825c:	bd38      	pop	{r3, r4, r5, pc}
 800825e:	0799      	lsls	r1, r3, #30
 8008260:	bf58      	it	pl
 8008262:	6962      	ldrpl	r2, [r4, #20]
 8008264:	60a2      	str	r2, [r4, #8]
 8008266:	e7f4      	b.n	8008252 <__swsetup_r+0x8e>
 8008268:	2000      	movs	r0, #0
 800826a:	e7f7      	b.n	800825c <__swsetup_r+0x98>
 800826c:	20000018 	.word	0x20000018

08008270 <memset>:
 8008270:	4402      	add	r2, r0
 8008272:	4603      	mov	r3, r0
 8008274:	4293      	cmp	r3, r2
 8008276:	d100      	bne.n	800827a <memset+0xa>
 8008278:	4770      	bx	lr
 800827a:	f803 1b01 	strb.w	r1, [r3], #1
 800827e:	e7f9      	b.n	8008274 <memset+0x4>

08008280 <strncmp>:
 8008280:	b510      	push	{r4, lr}
 8008282:	b16a      	cbz	r2, 80082a0 <strncmp+0x20>
 8008284:	3901      	subs	r1, #1
 8008286:	1884      	adds	r4, r0, r2
 8008288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800828c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008290:	429a      	cmp	r2, r3
 8008292:	d103      	bne.n	800829c <strncmp+0x1c>
 8008294:	42a0      	cmp	r0, r4
 8008296:	d001      	beq.n	800829c <strncmp+0x1c>
 8008298:	2a00      	cmp	r2, #0
 800829a:	d1f5      	bne.n	8008288 <strncmp+0x8>
 800829c:	1ad0      	subs	r0, r2, r3
 800829e:	bd10      	pop	{r4, pc}
 80082a0:	4610      	mov	r0, r2
 80082a2:	e7fc      	b.n	800829e <strncmp+0x1e>

080082a4 <_localeconv_r>:
 80082a4:	4800      	ldr	r0, [pc, #0]	@ (80082a8 <_localeconv_r+0x4>)
 80082a6:	4770      	bx	lr
 80082a8:	20000158 	.word	0x20000158

080082ac <_close_r>:
 80082ac:	b538      	push	{r3, r4, r5, lr}
 80082ae:	4d06      	ldr	r5, [pc, #24]	@ (80082c8 <_close_r+0x1c>)
 80082b0:	2300      	movs	r3, #0
 80082b2:	4604      	mov	r4, r0
 80082b4:	4608      	mov	r0, r1
 80082b6:	602b      	str	r3, [r5, #0]
 80082b8:	f7f9 f998 	bl	80015ec <_close>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_close_r+0x1a>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_close_r+0x1a>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	20000c90 	.word	0x20000c90

080082cc <_lseek_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d07      	ldr	r5, [pc, #28]	@ (80082ec <_lseek_r+0x20>)
 80082d0:	4604      	mov	r4, r0
 80082d2:	4608      	mov	r0, r1
 80082d4:	4611      	mov	r1, r2
 80082d6:	2200      	movs	r2, #0
 80082d8:	602a      	str	r2, [r5, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	f7f9 f9ad 	bl	800163a <_lseek>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d102      	bne.n	80082ea <_lseek_r+0x1e>
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	b103      	cbz	r3, 80082ea <_lseek_r+0x1e>
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	20000c90 	.word	0x20000c90

080082f0 <_read_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d07      	ldr	r5, [pc, #28]	@ (8008310 <_read_r+0x20>)
 80082f4:	4604      	mov	r4, r0
 80082f6:	4608      	mov	r0, r1
 80082f8:	4611      	mov	r1, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	602a      	str	r2, [r5, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	f7f9 f93b 	bl	800157a <_read>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_read_r+0x1e>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_read_r+0x1e>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	20000c90 	.word	0x20000c90

08008314 <_sbrk_r>:
 8008314:	b538      	push	{r3, r4, r5, lr}
 8008316:	4d06      	ldr	r5, [pc, #24]	@ (8008330 <_sbrk_r+0x1c>)
 8008318:	2300      	movs	r3, #0
 800831a:	4604      	mov	r4, r0
 800831c:	4608      	mov	r0, r1
 800831e:	602b      	str	r3, [r5, #0]
 8008320:	f7f9 f998 	bl	8001654 <_sbrk>
 8008324:	1c43      	adds	r3, r0, #1
 8008326:	d102      	bne.n	800832e <_sbrk_r+0x1a>
 8008328:	682b      	ldr	r3, [r5, #0]
 800832a:	b103      	cbz	r3, 800832e <_sbrk_r+0x1a>
 800832c:	6023      	str	r3, [r4, #0]
 800832e:	bd38      	pop	{r3, r4, r5, pc}
 8008330:	20000c90 	.word	0x20000c90

08008334 <_write_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	4d07      	ldr	r5, [pc, #28]	@ (8008354 <_write_r+0x20>)
 8008338:	4604      	mov	r4, r0
 800833a:	4608      	mov	r0, r1
 800833c:	4611      	mov	r1, r2
 800833e:	2200      	movs	r2, #0
 8008340:	602a      	str	r2, [r5, #0]
 8008342:	461a      	mov	r2, r3
 8008344:	f7f9 f936 	bl	80015b4 <_write>
 8008348:	1c43      	adds	r3, r0, #1
 800834a:	d102      	bne.n	8008352 <_write_r+0x1e>
 800834c:	682b      	ldr	r3, [r5, #0]
 800834e:	b103      	cbz	r3, 8008352 <_write_r+0x1e>
 8008350:	6023      	str	r3, [r4, #0]
 8008352:	bd38      	pop	{r3, r4, r5, pc}
 8008354:	20000c90 	.word	0x20000c90

08008358 <__errno>:
 8008358:	4b01      	ldr	r3, [pc, #4]	@ (8008360 <__errno+0x8>)
 800835a:	6818      	ldr	r0, [r3, #0]
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	20000018 	.word	0x20000018

08008364 <__libc_init_array>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	4d0d      	ldr	r5, [pc, #52]	@ (800839c <__libc_init_array+0x38>)
 8008368:	4c0d      	ldr	r4, [pc, #52]	@ (80083a0 <__libc_init_array+0x3c>)
 800836a:	1b64      	subs	r4, r4, r5
 800836c:	10a4      	asrs	r4, r4, #2
 800836e:	2600      	movs	r6, #0
 8008370:	42a6      	cmp	r6, r4
 8008372:	d109      	bne.n	8008388 <__libc_init_array+0x24>
 8008374:	4d0b      	ldr	r5, [pc, #44]	@ (80083a4 <__libc_init_array+0x40>)
 8008376:	4c0c      	ldr	r4, [pc, #48]	@ (80083a8 <__libc_init_array+0x44>)
 8008378:	f001 fedc 	bl	800a134 <_init>
 800837c:	1b64      	subs	r4, r4, r5
 800837e:	10a4      	asrs	r4, r4, #2
 8008380:	2600      	movs	r6, #0
 8008382:	42a6      	cmp	r6, r4
 8008384:	d105      	bne.n	8008392 <__libc_init_array+0x2e>
 8008386:	bd70      	pop	{r4, r5, r6, pc}
 8008388:	f855 3b04 	ldr.w	r3, [r5], #4
 800838c:	4798      	blx	r3
 800838e:	3601      	adds	r6, #1
 8008390:	e7ee      	b.n	8008370 <__libc_init_array+0xc>
 8008392:	f855 3b04 	ldr.w	r3, [r5], #4
 8008396:	4798      	blx	r3
 8008398:	3601      	adds	r6, #1
 800839a:	e7f2      	b.n	8008382 <__libc_init_array+0x1e>
 800839c:	0800a770 	.word	0x0800a770
 80083a0:	0800a770 	.word	0x0800a770
 80083a4:	0800a770 	.word	0x0800a770
 80083a8:	0800a774 	.word	0x0800a774

080083ac <__retarget_lock_init_recursive>:
 80083ac:	4770      	bx	lr

080083ae <__retarget_lock_acquire_recursive>:
 80083ae:	4770      	bx	lr

080083b0 <__retarget_lock_release_recursive>:
 80083b0:	4770      	bx	lr

080083b2 <memcpy>:
 80083b2:	440a      	add	r2, r1
 80083b4:	4291      	cmp	r1, r2
 80083b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80083ba:	d100      	bne.n	80083be <memcpy+0xc>
 80083bc:	4770      	bx	lr
 80083be:	b510      	push	{r4, lr}
 80083c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083c8:	4291      	cmp	r1, r2
 80083ca:	d1f9      	bne.n	80083c0 <memcpy+0xe>
 80083cc:	bd10      	pop	{r4, pc}

080083ce <quorem>:
 80083ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d2:	6903      	ldr	r3, [r0, #16]
 80083d4:	690c      	ldr	r4, [r1, #16]
 80083d6:	42a3      	cmp	r3, r4
 80083d8:	4607      	mov	r7, r0
 80083da:	db7e      	blt.n	80084da <quorem+0x10c>
 80083dc:	3c01      	subs	r4, #1
 80083de:	f101 0814 	add.w	r8, r1, #20
 80083e2:	00a3      	lsls	r3, r4, #2
 80083e4:	f100 0514 	add.w	r5, r0, #20
 80083e8:	9300      	str	r3, [sp, #0]
 80083ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083f8:	3301      	adds	r3, #1
 80083fa:	429a      	cmp	r2, r3
 80083fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008400:	fbb2 f6f3 	udiv	r6, r2, r3
 8008404:	d32e      	bcc.n	8008464 <quorem+0x96>
 8008406:	f04f 0a00 	mov.w	sl, #0
 800840a:	46c4      	mov	ip, r8
 800840c:	46ae      	mov	lr, r5
 800840e:	46d3      	mov	fp, sl
 8008410:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008414:	b298      	uxth	r0, r3
 8008416:	fb06 a000 	mla	r0, r6, r0, sl
 800841a:	0c02      	lsrs	r2, r0, #16
 800841c:	0c1b      	lsrs	r3, r3, #16
 800841e:	fb06 2303 	mla	r3, r6, r3, r2
 8008422:	f8de 2000 	ldr.w	r2, [lr]
 8008426:	b280      	uxth	r0, r0
 8008428:	b292      	uxth	r2, r2
 800842a:	1a12      	subs	r2, r2, r0
 800842c:	445a      	add	r2, fp
 800842e:	f8de 0000 	ldr.w	r0, [lr]
 8008432:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008436:	b29b      	uxth	r3, r3
 8008438:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800843c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008440:	b292      	uxth	r2, r2
 8008442:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008446:	45e1      	cmp	r9, ip
 8008448:	f84e 2b04 	str.w	r2, [lr], #4
 800844c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008450:	d2de      	bcs.n	8008410 <quorem+0x42>
 8008452:	9b00      	ldr	r3, [sp, #0]
 8008454:	58eb      	ldr	r3, [r5, r3]
 8008456:	b92b      	cbnz	r3, 8008464 <quorem+0x96>
 8008458:	9b01      	ldr	r3, [sp, #4]
 800845a:	3b04      	subs	r3, #4
 800845c:	429d      	cmp	r5, r3
 800845e:	461a      	mov	r2, r3
 8008460:	d32f      	bcc.n	80084c2 <quorem+0xf4>
 8008462:	613c      	str	r4, [r7, #16]
 8008464:	4638      	mov	r0, r7
 8008466:	f001 f8c3 	bl	80095f0 <__mcmp>
 800846a:	2800      	cmp	r0, #0
 800846c:	db25      	blt.n	80084ba <quorem+0xec>
 800846e:	4629      	mov	r1, r5
 8008470:	2000      	movs	r0, #0
 8008472:	f858 2b04 	ldr.w	r2, [r8], #4
 8008476:	f8d1 c000 	ldr.w	ip, [r1]
 800847a:	fa1f fe82 	uxth.w	lr, r2
 800847e:	fa1f f38c 	uxth.w	r3, ip
 8008482:	eba3 030e 	sub.w	r3, r3, lr
 8008486:	4403      	add	r3, r0
 8008488:	0c12      	lsrs	r2, r2, #16
 800848a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800848e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008492:	b29b      	uxth	r3, r3
 8008494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008498:	45c1      	cmp	r9, r8
 800849a:	f841 3b04 	str.w	r3, [r1], #4
 800849e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80084a2:	d2e6      	bcs.n	8008472 <quorem+0xa4>
 80084a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084ac:	b922      	cbnz	r2, 80084b8 <quorem+0xea>
 80084ae:	3b04      	subs	r3, #4
 80084b0:	429d      	cmp	r5, r3
 80084b2:	461a      	mov	r2, r3
 80084b4:	d30b      	bcc.n	80084ce <quorem+0x100>
 80084b6:	613c      	str	r4, [r7, #16]
 80084b8:	3601      	adds	r6, #1
 80084ba:	4630      	mov	r0, r6
 80084bc:	b003      	add	sp, #12
 80084be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c2:	6812      	ldr	r2, [r2, #0]
 80084c4:	3b04      	subs	r3, #4
 80084c6:	2a00      	cmp	r2, #0
 80084c8:	d1cb      	bne.n	8008462 <quorem+0x94>
 80084ca:	3c01      	subs	r4, #1
 80084cc:	e7c6      	b.n	800845c <quorem+0x8e>
 80084ce:	6812      	ldr	r2, [r2, #0]
 80084d0:	3b04      	subs	r3, #4
 80084d2:	2a00      	cmp	r2, #0
 80084d4:	d1ef      	bne.n	80084b6 <quorem+0xe8>
 80084d6:	3c01      	subs	r4, #1
 80084d8:	e7ea      	b.n	80084b0 <quorem+0xe2>
 80084da:	2000      	movs	r0, #0
 80084dc:	e7ee      	b.n	80084bc <quorem+0xee>
	...

080084e0 <_dtoa_r>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	69c7      	ldr	r7, [r0, #28]
 80084e6:	b099      	sub	sp, #100	@ 0x64
 80084e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80084ec:	ec55 4b10 	vmov	r4, r5, d0
 80084f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80084f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80084f4:	4683      	mov	fp, r0
 80084f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80084f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084fa:	b97f      	cbnz	r7, 800851c <_dtoa_r+0x3c>
 80084fc:	2010      	movs	r0, #16
 80084fe:	f7fe febb 	bl	8007278 <malloc>
 8008502:	4602      	mov	r2, r0
 8008504:	f8cb 001c 	str.w	r0, [fp, #28]
 8008508:	b920      	cbnz	r0, 8008514 <_dtoa_r+0x34>
 800850a:	4ba7      	ldr	r3, [pc, #668]	@ (80087a8 <_dtoa_r+0x2c8>)
 800850c:	21ef      	movs	r1, #239	@ 0xef
 800850e:	48a7      	ldr	r0, [pc, #668]	@ (80087ac <_dtoa_r+0x2cc>)
 8008510:	f001 fc20 	bl	8009d54 <__assert_func>
 8008514:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008518:	6007      	str	r7, [r0, #0]
 800851a:	60c7      	str	r7, [r0, #12]
 800851c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008520:	6819      	ldr	r1, [r3, #0]
 8008522:	b159      	cbz	r1, 800853c <_dtoa_r+0x5c>
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	604a      	str	r2, [r1, #4]
 8008528:	2301      	movs	r3, #1
 800852a:	4093      	lsls	r3, r2
 800852c:	608b      	str	r3, [r1, #8]
 800852e:	4658      	mov	r0, fp
 8008530:	f000 fe24 	bl	800917c <_Bfree>
 8008534:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	1e2b      	subs	r3, r5, #0
 800853e:	bfb9      	ittee	lt
 8008540:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008544:	9303      	strlt	r3, [sp, #12]
 8008546:	2300      	movge	r3, #0
 8008548:	6033      	strge	r3, [r6, #0]
 800854a:	9f03      	ldr	r7, [sp, #12]
 800854c:	4b98      	ldr	r3, [pc, #608]	@ (80087b0 <_dtoa_r+0x2d0>)
 800854e:	bfbc      	itt	lt
 8008550:	2201      	movlt	r2, #1
 8008552:	6032      	strlt	r2, [r6, #0]
 8008554:	43bb      	bics	r3, r7
 8008556:	d112      	bne.n	800857e <_dtoa_r+0x9e>
 8008558:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800855a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008564:	4323      	orrs	r3, r4
 8008566:	f000 854d 	beq.w	8009004 <_dtoa_r+0xb24>
 800856a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800856c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80087c4 <_dtoa_r+0x2e4>
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 854f 	beq.w	8009014 <_dtoa_r+0xb34>
 8008576:	f10a 0303 	add.w	r3, sl, #3
 800857a:	f000 bd49 	b.w	8009010 <_dtoa_r+0xb30>
 800857e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008582:	2200      	movs	r2, #0
 8008584:	ec51 0b17 	vmov	r0, r1, d7
 8008588:	2300      	movs	r3, #0
 800858a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800858e:	f7f8 faab 	bl	8000ae8 <__aeabi_dcmpeq>
 8008592:	4680      	mov	r8, r0
 8008594:	b158      	cbz	r0, 80085ae <_dtoa_r+0xce>
 8008596:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008598:	2301      	movs	r3, #1
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800859e:	b113      	cbz	r3, 80085a6 <_dtoa_r+0xc6>
 80085a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80085a2:	4b84      	ldr	r3, [pc, #528]	@ (80087b4 <_dtoa_r+0x2d4>)
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80087c8 <_dtoa_r+0x2e8>
 80085aa:	f000 bd33 	b.w	8009014 <_dtoa_r+0xb34>
 80085ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80085b2:	aa16      	add	r2, sp, #88	@ 0x58
 80085b4:	a917      	add	r1, sp, #92	@ 0x5c
 80085b6:	4658      	mov	r0, fp
 80085b8:	f001 f8ca 	bl	8009750 <__d2b>
 80085bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80085c0:	4681      	mov	r9, r0
 80085c2:	2e00      	cmp	r6, #0
 80085c4:	d077      	beq.n	80086b6 <_dtoa_r+0x1d6>
 80085c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80085cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80085d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80085dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80085e0:	4619      	mov	r1, r3
 80085e2:	2200      	movs	r2, #0
 80085e4:	4b74      	ldr	r3, [pc, #464]	@ (80087b8 <_dtoa_r+0x2d8>)
 80085e6:	f7f7 fe5f 	bl	80002a8 <__aeabi_dsub>
 80085ea:	a369      	add	r3, pc, #420	@ (adr r3, 8008790 <_dtoa_r+0x2b0>)
 80085ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f0:	f7f8 f812 	bl	8000618 <__aeabi_dmul>
 80085f4:	a368      	add	r3, pc, #416	@ (adr r3, 8008798 <_dtoa_r+0x2b8>)
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	f7f7 fe57 	bl	80002ac <__adddf3>
 80085fe:	4604      	mov	r4, r0
 8008600:	4630      	mov	r0, r6
 8008602:	460d      	mov	r5, r1
 8008604:	f7f7 ff9e 	bl	8000544 <__aeabi_i2d>
 8008608:	a365      	add	r3, pc, #404	@ (adr r3, 80087a0 <_dtoa_r+0x2c0>)
 800860a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860e:	f7f8 f803 	bl	8000618 <__aeabi_dmul>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	4620      	mov	r0, r4
 8008618:	4629      	mov	r1, r5
 800861a:	f7f7 fe47 	bl	80002ac <__adddf3>
 800861e:	4604      	mov	r4, r0
 8008620:	460d      	mov	r5, r1
 8008622:	f7f8 faa9 	bl	8000b78 <__aeabi_d2iz>
 8008626:	2200      	movs	r2, #0
 8008628:	4607      	mov	r7, r0
 800862a:	2300      	movs	r3, #0
 800862c:	4620      	mov	r0, r4
 800862e:	4629      	mov	r1, r5
 8008630:	f7f8 fa64 	bl	8000afc <__aeabi_dcmplt>
 8008634:	b140      	cbz	r0, 8008648 <_dtoa_r+0x168>
 8008636:	4638      	mov	r0, r7
 8008638:	f7f7 ff84 	bl	8000544 <__aeabi_i2d>
 800863c:	4622      	mov	r2, r4
 800863e:	462b      	mov	r3, r5
 8008640:	f7f8 fa52 	bl	8000ae8 <__aeabi_dcmpeq>
 8008644:	b900      	cbnz	r0, 8008648 <_dtoa_r+0x168>
 8008646:	3f01      	subs	r7, #1
 8008648:	2f16      	cmp	r7, #22
 800864a:	d851      	bhi.n	80086f0 <_dtoa_r+0x210>
 800864c:	4b5b      	ldr	r3, [pc, #364]	@ (80087bc <_dtoa_r+0x2dc>)
 800864e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008656:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800865a:	f7f8 fa4f 	bl	8000afc <__aeabi_dcmplt>
 800865e:	2800      	cmp	r0, #0
 8008660:	d048      	beq.n	80086f4 <_dtoa_r+0x214>
 8008662:	3f01      	subs	r7, #1
 8008664:	2300      	movs	r3, #0
 8008666:	9312      	str	r3, [sp, #72]	@ 0x48
 8008668:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800866a:	1b9b      	subs	r3, r3, r6
 800866c:	1e5a      	subs	r2, r3, #1
 800866e:	bf44      	itt	mi
 8008670:	f1c3 0801 	rsbmi	r8, r3, #1
 8008674:	2300      	movmi	r3, #0
 8008676:	9208      	str	r2, [sp, #32]
 8008678:	bf54      	ite	pl
 800867a:	f04f 0800 	movpl.w	r8, #0
 800867e:	9308      	strmi	r3, [sp, #32]
 8008680:	2f00      	cmp	r7, #0
 8008682:	db39      	blt.n	80086f8 <_dtoa_r+0x218>
 8008684:	9b08      	ldr	r3, [sp, #32]
 8008686:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008688:	443b      	add	r3, r7
 800868a:	9308      	str	r3, [sp, #32]
 800868c:	2300      	movs	r3, #0
 800868e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008692:	2b09      	cmp	r3, #9
 8008694:	d864      	bhi.n	8008760 <_dtoa_r+0x280>
 8008696:	2b05      	cmp	r3, #5
 8008698:	bfc4      	itt	gt
 800869a:	3b04      	subgt	r3, #4
 800869c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800869e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a0:	f1a3 0302 	sub.w	r3, r3, #2
 80086a4:	bfcc      	ite	gt
 80086a6:	2400      	movgt	r4, #0
 80086a8:	2401      	movle	r4, #1
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d863      	bhi.n	8008776 <_dtoa_r+0x296>
 80086ae:	e8df f003 	tbb	[pc, r3]
 80086b2:	372a      	.short	0x372a
 80086b4:	5535      	.short	0x5535
 80086b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80086ba:	441e      	add	r6, r3
 80086bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80086c0:	2b20      	cmp	r3, #32
 80086c2:	bfc1      	itttt	gt
 80086c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80086c8:	409f      	lslgt	r7, r3
 80086ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80086ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80086d2:	bfd6      	itet	le
 80086d4:	f1c3 0320 	rsble	r3, r3, #32
 80086d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80086dc:	fa04 f003 	lslle.w	r0, r4, r3
 80086e0:	f7f7 ff20 	bl	8000524 <__aeabi_ui2d>
 80086e4:	2201      	movs	r2, #1
 80086e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80086ea:	3e01      	subs	r6, #1
 80086ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80086ee:	e777      	b.n	80085e0 <_dtoa_r+0x100>
 80086f0:	2301      	movs	r3, #1
 80086f2:	e7b8      	b.n	8008666 <_dtoa_r+0x186>
 80086f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80086f6:	e7b7      	b.n	8008668 <_dtoa_r+0x188>
 80086f8:	427b      	negs	r3, r7
 80086fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80086fc:	2300      	movs	r3, #0
 80086fe:	eba8 0807 	sub.w	r8, r8, r7
 8008702:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008704:	e7c4      	b.n	8008690 <_dtoa_r+0x1b0>
 8008706:	2300      	movs	r3, #0
 8008708:	930b      	str	r3, [sp, #44]	@ 0x2c
 800870a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800870c:	2b00      	cmp	r3, #0
 800870e:	dc35      	bgt.n	800877c <_dtoa_r+0x29c>
 8008710:	2301      	movs	r3, #1
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	9307      	str	r3, [sp, #28]
 8008716:	461a      	mov	r2, r3
 8008718:	920e      	str	r2, [sp, #56]	@ 0x38
 800871a:	e00b      	b.n	8008734 <_dtoa_r+0x254>
 800871c:	2301      	movs	r3, #1
 800871e:	e7f3      	b.n	8008708 <_dtoa_r+0x228>
 8008720:	2300      	movs	r3, #0
 8008722:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008726:	18fb      	adds	r3, r7, r3
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	3301      	adds	r3, #1
 800872c:	2b01      	cmp	r3, #1
 800872e:	9307      	str	r3, [sp, #28]
 8008730:	bfb8      	it	lt
 8008732:	2301      	movlt	r3, #1
 8008734:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008738:	2100      	movs	r1, #0
 800873a:	2204      	movs	r2, #4
 800873c:	f102 0514 	add.w	r5, r2, #20
 8008740:	429d      	cmp	r5, r3
 8008742:	d91f      	bls.n	8008784 <_dtoa_r+0x2a4>
 8008744:	6041      	str	r1, [r0, #4]
 8008746:	4658      	mov	r0, fp
 8008748:	f000 fcd8 	bl	80090fc <_Balloc>
 800874c:	4682      	mov	sl, r0
 800874e:	2800      	cmp	r0, #0
 8008750:	d13c      	bne.n	80087cc <_dtoa_r+0x2ec>
 8008752:	4b1b      	ldr	r3, [pc, #108]	@ (80087c0 <_dtoa_r+0x2e0>)
 8008754:	4602      	mov	r2, r0
 8008756:	f240 11af 	movw	r1, #431	@ 0x1af
 800875a:	e6d8      	b.n	800850e <_dtoa_r+0x2e>
 800875c:	2301      	movs	r3, #1
 800875e:	e7e0      	b.n	8008722 <_dtoa_r+0x242>
 8008760:	2401      	movs	r4, #1
 8008762:	2300      	movs	r3, #0
 8008764:	9309      	str	r3, [sp, #36]	@ 0x24
 8008766:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008768:	f04f 33ff 	mov.w	r3, #4294967295
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	9307      	str	r3, [sp, #28]
 8008770:	2200      	movs	r2, #0
 8008772:	2312      	movs	r3, #18
 8008774:	e7d0      	b.n	8008718 <_dtoa_r+0x238>
 8008776:	2301      	movs	r3, #1
 8008778:	930b      	str	r3, [sp, #44]	@ 0x2c
 800877a:	e7f5      	b.n	8008768 <_dtoa_r+0x288>
 800877c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	9307      	str	r3, [sp, #28]
 8008782:	e7d7      	b.n	8008734 <_dtoa_r+0x254>
 8008784:	3101      	adds	r1, #1
 8008786:	0052      	lsls	r2, r2, #1
 8008788:	e7d8      	b.n	800873c <_dtoa_r+0x25c>
 800878a:	bf00      	nop
 800878c:	f3af 8000 	nop.w
 8008790:	636f4361 	.word	0x636f4361
 8008794:	3fd287a7 	.word	0x3fd287a7
 8008798:	8b60c8b3 	.word	0x8b60c8b3
 800879c:	3fc68a28 	.word	0x3fc68a28
 80087a0:	509f79fb 	.word	0x509f79fb
 80087a4:	3fd34413 	.word	0x3fd34413
 80087a8:	0800a53a 	.word	0x0800a53a
 80087ac:	0800a551 	.word	0x0800a551
 80087b0:	7ff00000 	.word	0x7ff00000
 80087b4:	0800a50a 	.word	0x0800a50a
 80087b8:	3ff80000 	.word	0x3ff80000
 80087bc:	0800a648 	.word	0x0800a648
 80087c0:	0800a5a9 	.word	0x0800a5a9
 80087c4:	0800a536 	.word	0x0800a536
 80087c8:	0800a509 	.word	0x0800a509
 80087cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80087d0:	6018      	str	r0, [r3, #0]
 80087d2:	9b07      	ldr	r3, [sp, #28]
 80087d4:	2b0e      	cmp	r3, #14
 80087d6:	f200 80a4 	bhi.w	8008922 <_dtoa_r+0x442>
 80087da:	2c00      	cmp	r4, #0
 80087dc:	f000 80a1 	beq.w	8008922 <_dtoa_r+0x442>
 80087e0:	2f00      	cmp	r7, #0
 80087e2:	dd33      	ble.n	800884c <_dtoa_r+0x36c>
 80087e4:	4bad      	ldr	r3, [pc, #692]	@ (8008a9c <_dtoa_r+0x5bc>)
 80087e6:	f007 020f 	and.w	r2, r7, #15
 80087ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087ee:	ed93 7b00 	vldr	d7, [r3]
 80087f2:	05f8      	lsls	r0, r7, #23
 80087f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80087f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80087fc:	d516      	bpl.n	800882c <_dtoa_r+0x34c>
 80087fe:	4ba8      	ldr	r3, [pc, #672]	@ (8008aa0 <_dtoa_r+0x5c0>)
 8008800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008804:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008808:	f7f8 f830 	bl	800086c <__aeabi_ddiv>
 800880c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008810:	f004 040f 	and.w	r4, r4, #15
 8008814:	2603      	movs	r6, #3
 8008816:	4da2      	ldr	r5, [pc, #648]	@ (8008aa0 <_dtoa_r+0x5c0>)
 8008818:	b954      	cbnz	r4, 8008830 <_dtoa_r+0x350>
 800881a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800881e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008822:	f7f8 f823 	bl	800086c <__aeabi_ddiv>
 8008826:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800882a:	e028      	b.n	800887e <_dtoa_r+0x39e>
 800882c:	2602      	movs	r6, #2
 800882e:	e7f2      	b.n	8008816 <_dtoa_r+0x336>
 8008830:	07e1      	lsls	r1, r4, #31
 8008832:	d508      	bpl.n	8008846 <_dtoa_r+0x366>
 8008834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008838:	e9d5 2300 	ldrd	r2, r3, [r5]
 800883c:	f7f7 feec 	bl	8000618 <__aeabi_dmul>
 8008840:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008844:	3601      	adds	r6, #1
 8008846:	1064      	asrs	r4, r4, #1
 8008848:	3508      	adds	r5, #8
 800884a:	e7e5      	b.n	8008818 <_dtoa_r+0x338>
 800884c:	f000 80d2 	beq.w	80089f4 <_dtoa_r+0x514>
 8008850:	427c      	negs	r4, r7
 8008852:	4b92      	ldr	r3, [pc, #584]	@ (8008a9c <_dtoa_r+0x5bc>)
 8008854:	4d92      	ldr	r5, [pc, #584]	@ (8008aa0 <_dtoa_r+0x5c0>)
 8008856:	f004 020f 	and.w	r2, r4, #15
 800885a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800885e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008862:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008866:	f7f7 fed7 	bl	8000618 <__aeabi_dmul>
 800886a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800886e:	1124      	asrs	r4, r4, #4
 8008870:	2300      	movs	r3, #0
 8008872:	2602      	movs	r6, #2
 8008874:	2c00      	cmp	r4, #0
 8008876:	f040 80b2 	bne.w	80089de <_dtoa_r+0x4fe>
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1d3      	bne.n	8008826 <_dtoa_r+0x346>
 800887e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008880:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008884:	2b00      	cmp	r3, #0
 8008886:	f000 80b7 	beq.w	80089f8 <_dtoa_r+0x518>
 800888a:	4b86      	ldr	r3, [pc, #536]	@ (8008aa4 <_dtoa_r+0x5c4>)
 800888c:	2200      	movs	r2, #0
 800888e:	4620      	mov	r0, r4
 8008890:	4629      	mov	r1, r5
 8008892:	f7f8 f933 	bl	8000afc <__aeabi_dcmplt>
 8008896:	2800      	cmp	r0, #0
 8008898:	f000 80ae 	beq.w	80089f8 <_dtoa_r+0x518>
 800889c:	9b07      	ldr	r3, [sp, #28]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 80aa 	beq.w	80089f8 <_dtoa_r+0x518>
 80088a4:	9b00      	ldr	r3, [sp, #0]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	dd37      	ble.n	800891a <_dtoa_r+0x43a>
 80088aa:	1e7b      	subs	r3, r7, #1
 80088ac:	9304      	str	r3, [sp, #16]
 80088ae:	4620      	mov	r0, r4
 80088b0:	4b7d      	ldr	r3, [pc, #500]	@ (8008aa8 <_dtoa_r+0x5c8>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	4629      	mov	r1, r5
 80088b6:	f7f7 feaf 	bl	8000618 <__aeabi_dmul>
 80088ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088be:	9c00      	ldr	r4, [sp, #0]
 80088c0:	3601      	adds	r6, #1
 80088c2:	4630      	mov	r0, r6
 80088c4:	f7f7 fe3e 	bl	8000544 <__aeabi_i2d>
 80088c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088cc:	f7f7 fea4 	bl	8000618 <__aeabi_dmul>
 80088d0:	4b76      	ldr	r3, [pc, #472]	@ (8008aac <_dtoa_r+0x5cc>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	f7f7 fcea 	bl	80002ac <__adddf3>
 80088d8:	4605      	mov	r5, r0
 80088da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80088de:	2c00      	cmp	r4, #0
 80088e0:	f040 808d 	bne.w	80089fe <_dtoa_r+0x51e>
 80088e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088e8:	4b71      	ldr	r3, [pc, #452]	@ (8008ab0 <_dtoa_r+0x5d0>)
 80088ea:	2200      	movs	r2, #0
 80088ec:	f7f7 fcdc 	bl	80002a8 <__aeabi_dsub>
 80088f0:	4602      	mov	r2, r0
 80088f2:	460b      	mov	r3, r1
 80088f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80088f8:	462a      	mov	r2, r5
 80088fa:	4633      	mov	r3, r6
 80088fc:	f7f8 f91c 	bl	8000b38 <__aeabi_dcmpgt>
 8008900:	2800      	cmp	r0, #0
 8008902:	f040 828b 	bne.w	8008e1c <_dtoa_r+0x93c>
 8008906:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800890a:	462a      	mov	r2, r5
 800890c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008910:	f7f8 f8f4 	bl	8000afc <__aeabi_dcmplt>
 8008914:	2800      	cmp	r0, #0
 8008916:	f040 8128 	bne.w	8008b6a <_dtoa_r+0x68a>
 800891a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800891e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008922:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008924:	2b00      	cmp	r3, #0
 8008926:	f2c0 815a 	blt.w	8008bde <_dtoa_r+0x6fe>
 800892a:	2f0e      	cmp	r7, #14
 800892c:	f300 8157 	bgt.w	8008bde <_dtoa_r+0x6fe>
 8008930:	4b5a      	ldr	r3, [pc, #360]	@ (8008a9c <_dtoa_r+0x5bc>)
 8008932:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008936:	ed93 7b00 	vldr	d7, [r3]
 800893a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800893c:	2b00      	cmp	r3, #0
 800893e:	ed8d 7b00 	vstr	d7, [sp]
 8008942:	da03      	bge.n	800894c <_dtoa_r+0x46c>
 8008944:	9b07      	ldr	r3, [sp, #28]
 8008946:	2b00      	cmp	r3, #0
 8008948:	f340 8101 	ble.w	8008b4e <_dtoa_r+0x66e>
 800894c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008950:	4656      	mov	r6, sl
 8008952:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008956:	4620      	mov	r0, r4
 8008958:	4629      	mov	r1, r5
 800895a:	f7f7 ff87 	bl	800086c <__aeabi_ddiv>
 800895e:	f7f8 f90b 	bl	8000b78 <__aeabi_d2iz>
 8008962:	4680      	mov	r8, r0
 8008964:	f7f7 fdee 	bl	8000544 <__aeabi_i2d>
 8008968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800896c:	f7f7 fe54 	bl	8000618 <__aeabi_dmul>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4620      	mov	r0, r4
 8008976:	4629      	mov	r1, r5
 8008978:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800897c:	f7f7 fc94 	bl	80002a8 <__aeabi_dsub>
 8008980:	f806 4b01 	strb.w	r4, [r6], #1
 8008984:	9d07      	ldr	r5, [sp, #28]
 8008986:	eba6 040a 	sub.w	r4, r6, sl
 800898a:	42a5      	cmp	r5, r4
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	f040 8117 	bne.w	8008bc2 <_dtoa_r+0x6e2>
 8008994:	f7f7 fc8a 	bl	80002ac <__adddf3>
 8008998:	e9dd 2300 	ldrd	r2, r3, [sp]
 800899c:	4604      	mov	r4, r0
 800899e:	460d      	mov	r5, r1
 80089a0:	f7f8 f8ca 	bl	8000b38 <__aeabi_dcmpgt>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f040 80f9 	bne.w	8008b9c <_dtoa_r+0x6bc>
 80089aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089ae:	4620      	mov	r0, r4
 80089b0:	4629      	mov	r1, r5
 80089b2:	f7f8 f899 	bl	8000ae8 <__aeabi_dcmpeq>
 80089b6:	b118      	cbz	r0, 80089c0 <_dtoa_r+0x4e0>
 80089b8:	f018 0f01 	tst.w	r8, #1
 80089bc:	f040 80ee 	bne.w	8008b9c <_dtoa_r+0x6bc>
 80089c0:	4649      	mov	r1, r9
 80089c2:	4658      	mov	r0, fp
 80089c4:	f000 fbda 	bl	800917c <_Bfree>
 80089c8:	2300      	movs	r3, #0
 80089ca:	7033      	strb	r3, [r6, #0]
 80089cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089ce:	3701      	adds	r7, #1
 80089d0:	601f      	str	r7, [r3, #0]
 80089d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 831d 	beq.w	8009014 <_dtoa_r+0xb34>
 80089da:	601e      	str	r6, [r3, #0]
 80089dc:	e31a      	b.n	8009014 <_dtoa_r+0xb34>
 80089de:	07e2      	lsls	r2, r4, #31
 80089e0:	d505      	bpl.n	80089ee <_dtoa_r+0x50e>
 80089e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089e6:	f7f7 fe17 	bl	8000618 <__aeabi_dmul>
 80089ea:	3601      	adds	r6, #1
 80089ec:	2301      	movs	r3, #1
 80089ee:	1064      	asrs	r4, r4, #1
 80089f0:	3508      	adds	r5, #8
 80089f2:	e73f      	b.n	8008874 <_dtoa_r+0x394>
 80089f4:	2602      	movs	r6, #2
 80089f6:	e742      	b.n	800887e <_dtoa_r+0x39e>
 80089f8:	9c07      	ldr	r4, [sp, #28]
 80089fa:	9704      	str	r7, [sp, #16]
 80089fc:	e761      	b.n	80088c2 <_dtoa_r+0x3e2>
 80089fe:	4b27      	ldr	r3, [pc, #156]	@ (8008a9c <_dtoa_r+0x5bc>)
 8008a00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a0a:	4454      	add	r4, sl
 8008a0c:	2900      	cmp	r1, #0
 8008a0e:	d053      	beq.n	8008ab8 <_dtoa_r+0x5d8>
 8008a10:	4928      	ldr	r1, [pc, #160]	@ (8008ab4 <_dtoa_r+0x5d4>)
 8008a12:	2000      	movs	r0, #0
 8008a14:	f7f7 ff2a 	bl	800086c <__aeabi_ddiv>
 8008a18:	4633      	mov	r3, r6
 8008a1a:	462a      	mov	r2, r5
 8008a1c:	f7f7 fc44 	bl	80002a8 <__aeabi_dsub>
 8008a20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a24:	4656      	mov	r6, sl
 8008a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a2a:	f7f8 f8a5 	bl	8000b78 <__aeabi_d2iz>
 8008a2e:	4605      	mov	r5, r0
 8008a30:	f7f7 fd88 	bl	8000544 <__aeabi_i2d>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a3c:	f7f7 fc34 	bl	80002a8 <__aeabi_dsub>
 8008a40:	3530      	adds	r5, #48	@ 0x30
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a4a:	f806 5b01 	strb.w	r5, [r6], #1
 8008a4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a52:	f7f8 f853 	bl	8000afc <__aeabi_dcmplt>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d171      	bne.n	8008b3e <_dtoa_r+0x65e>
 8008a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a5e:	4911      	ldr	r1, [pc, #68]	@ (8008aa4 <_dtoa_r+0x5c4>)
 8008a60:	2000      	movs	r0, #0
 8008a62:	f7f7 fc21 	bl	80002a8 <__aeabi_dsub>
 8008a66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a6a:	f7f8 f847 	bl	8000afc <__aeabi_dcmplt>
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	f040 8095 	bne.w	8008b9e <_dtoa_r+0x6be>
 8008a74:	42a6      	cmp	r6, r4
 8008a76:	f43f af50 	beq.w	800891a <_dtoa_r+0x43a>
 8008a7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8008aa8 <_dtoa_r+0x5c8>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	f7f7 fdc9 	bl	8000618 <__aeabi_dmul>
 8008a86:	4b08      	ldr	r3, [pc, #32]	@ (8008aa8 <_dtoa_r+0x5c8>)
 8008a88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a92:	f7f7 fdc1 	bl	8000618 <__aeabi_dmul>
 8008a96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a9a:	e7c4      	b.n	8008a26 <_dtoa_r+0x546>
 8008a9c:	0800a648 	.word	0x0800a648
 8008aa0:	0800a620 	.word	0x0800a620
 8008aa4:	3ff00000 	.word	0x3ff00000
 8008aa8:	40240000 	.word	0x40240000
 8008aac:	401c0000 	.word	0x401c0000
 8008ab0:	40140000 	.word	0x40140000
 8008ab4:	3fe00000 	.word	0x3fe00000
 8008ab8:	4631      	mov	r1, r6
 8008aba:	4628      	mov	r0, r5
 8008abc:	f7f7 fdac 	bl	8000618 <__aeabi_dmul>
 8008ac0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ac4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008ac6:	4656      	mov	r6, sl
 8008ac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008acc:	f7f8 f854 	bl	8000b78 <__aeabi_d2iz>
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	f7f7 fd37 	bl	8000544 <__aeabi_i2d>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ade:	f7f7 fbe3 	bl	80002a8 <__aeabi_dsub>
 8008ae2:	3530      	adds	r5, #48	@ 0x30
 8008ae4:	f806 5b01 	strb.w	r5, [r6], #1
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	42a6      	cmp	r6, r4
 8008aee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008af2:	f04f 0200 	mov.w	r2, #0
 8008af6:	d124      	bne.n	8008b42 <_dtoa_r+0x662>
 8008af8:	4bac      	ldr	r3, [pc, #688]	@ (8008dac <_dtoa_r+0x8cc>)
 8008afa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008afe:	f7f7 fbd5 	bl	80002ac <__adddf3>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b0a:	f7f8 f815 	bl	8000b38 <__aeabi_dcmpgt>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d145      	bne.n	8008b9e <_dtoa_r+0x6be>
 8008b12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b16:	49a5      	ldr	r1, [pc, #660]	@ (8008dac <_dtoa_r+0x8cc>)
 8008b18:	2000      	movs	r0, #0
 8008b1a:	f7f7 fbc5 	bl	80002a8 <__aeabi_dsub>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b26:	f7f7 ffe9 	bl	8000afc <__aeabi_dcmplt>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	f43f aef5 	beq.w	800891a <_dtoa_r+0x43a>
 8008b30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008b32:	1e73      	subs	r3, r6, #1
 8008b34:	9315      	str	r3, [sp, #84]	@ 0x54
 8008b36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b3a:	2b30      	cmp	r3, #48	@ 0x30
 8008b3c:	d0f8      	beq.n	8008b30 <_dtoa_r+0x650>
 8008b3e:	9f04      	ldr	r7, [sp, #16]
 8008b40:	e73e      	b.n	80089c0 <_dtoa_r+0x4e0>
 8008b42:	4b9b      	ldr	r3, [pc, #620]	@ (8008db0 <_dtoa_r+0x8d0>)
 8008b44:	f7f7 fd68 	bl	8000618 <__aeabi_dmul>
 8008b48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b4c:	e7bc      	b.n	8008ac8 <_dtoa_r+0x5e8>
 8008b4e:	d10c      	bne.n	8008b6a <_dtoa_r+0x68a>
 8008b50:	4b98      	ldr	r3, [pc, #608]	@ (8008db4 <_dtoa_r+0x8d4>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b58:	f7f7 fd5e 	bl	8000618 <__aeabi_dmul>
 8008b5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b60:	f7f7 ffe0 	bl	8000b24 <__aeabi_dcmpge>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	f000 8157 	beq.w	8008e18 <_dtoa_r+0x938>
 8008b6a:	2400      	movs	r4, #0
 8008b6c:	4625      	mov	r5, r4
 8008b6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b70:	43db      	mvns	r3, r3
 8008b72:	9304      	str	r3, [sp, #16]
 8008b74:	4656      	mov	r6, sl
 8008b76:	2700      	movs	r7, #0
 8008b78:	4621      	mov	r1, r4
 8008b7a:	4658      	mov	r0, fp
 8008b7c:	f000 fafe 	bl	800917c <_Bfree>
 8008b80:	2d00      	cmp	r5, #0
 8008b82:	d0dc      	beq.n	8008b3e <_dtoa_r+0x65e>
 8008b84:	b12f      	cbz	r7, 8008b92 <_dtoa_r+0x6b2>
 8008b86:	42af      	cmp	r7, r5
 8008b88:	d003      	beq.n	8008b92 <_dtoa_r+0x6b2>
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	4658      	mov	r0, fp
 8008b8e:	f000 faf5 	bl	800917c <_Bfree>
 8008b92:	4629      	mov	r1, r5
 8008b94:	4658      	mov	r0, fp
 8008b96:	f000 faf1 	bl	800917c <_Bfree>
 8008b9a:	e7d0      	b.n	8008b3e <_dtoa_r+0x65e>
 8008b9c:	9704      	str	r7, [sp, #16]
 8008b9e:	4633      	mov	r3, r6
 8008ba0:	461e      	mov	r6, r3
 8008ba2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008ba6:	2a39      	cmp	r2, #57	@ 0x39
 8008ba8:	d107      	bne.n	8008bba <_dtoa_r+0x6da>
 8008baa:	459a      	cmp	sl, r3
 8008bac:	d1f8      	bne.n	8008ba0 <_dtoa_r+0x6c0>
 8008bae:	9a04      	ldr	r2, [sp, #16]
 8008bb0:	3201      	adds	r2, #1
 8008bb2:	9204      	str	r2, [sp, #16]
 8008bb4:	2230      	movs	r2, #48	@ 0x30
 8008bb6:	f88a 2000 	strb.w	r2, [sl]
 8008bba:	781a      	ldrb	r2, [r3, #0]
 8008bbc:	3201      	adds	r2, #1
 8008bbe:	701a      	strb	r2, [r3, #0]
 8008bc0:	e7bd      	b.n	8008b3e <_dtoa_r+0x65e>
 8008bc2:	4b7b      	ldr	r3, [pc, #492]	@ (8008db0 <_dtoa_r+0x8d0>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f7f7 fd27 	bl	8000618 <__aeabi_dmul>
 8008bca:	2200      	movs	r2, #0
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4604      	mov	r4, r0
 8008bd0:	460d      	mov	r5, r1
 8008bd2:	f7f7 ff89 	bl	8000ae8 <__aeabi_dcmpeq>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f43f aebb 	beq.w	8008952 <_dtoa_r+0x472>
 8008bdc:	e6f0      	b.n	80089c0 <_dtoa_r+0x4e0>
 8008bde:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008be0:	2a00      	cmp	r2, #0
 8008be2:	f000 80db 	beq.w	8008d9c <_dtoa_r+0x8bc>
 8008be6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008be8:	2a01      	cmp	r2, #1
 8008bea:	f300 80bf 	bgt.w	8008d6c <_dtoa_r+0x88c>
 8008bee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008bf0:	2a00      	cmp	r2, #0
 8008bf2:	f000 80b7 	beq.w	8008d64 <_dtoa_r+0x884>
 8008bf6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008bfa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008bfc:	4646      	mov	r6, r8
 8008bfe:	9a08      	ldr	r2, [sp, #32]
 8008c00:	2101      	movs	r1, #1
 8008c02:	441a      	add	r2, r3
 8008c04:	4658      	mov	r0, fp
 8008c06:	4498      	add	r8, r3
 8008c08:	9208      	str	r2, [sp, #32]
 8008c0a:	f000 fb6b 	bl	80092e4 <__i2b>
 8008c0e:	4605      	mov	r5, r0
 8008c10:	b15e      	cbz	r6, 8008c2a <_dtoa_r+0x74a>
 8008c12:	9b08      	ldr	r3, [sp, #32]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	dd08      	ble.n	8008c2a <_dtoa_r+0x74a>
 8008c18:	42b3      	cmp	r3, r6
 8008c1a:	9a08      	ldr	r2, [sp, #32]
 8008c1c:	bfa8      	it	ge
 8008c1e:	4633      	movge	r3, r6
 8008c20:	eba8 0803 	sub.w	r8, r8, r3
 8008c24:	1af6      	subs	r6, r6, r3
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	9308      	str	r3, [sp, #32]
 8008c2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c2c:	b1f3      	cbz	r3, 8008c6c <_dtoa_r+0x78c>
 8008c2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 80b7 	beq.w	8008da4 <_dtoa_r+0x8c4>
 8008c36:	b18c      	cbz	r4, 8008c5c <_dtoa_r+0x77c>
 8008c38:	4629      	mov	r1, r5
 8008c3a:	4622      	mov	r2, r4
 8008c3c:	4658      	mov	r0, fp
 8008c3e:	f000 fc11 	bl	8009464 <__pow5mult>
 8008c42:	464a      	mov	r2, r9
 8008c44:	4601      	mov	r1, r0
 8008c46:	4605      	mov	r5, r0
 8008c48:	4658      	mov	r0, fp
 8008c4a:	f000 fb61 	bl	8009310 <__multiply>
 8008c4e:	4649      	mov	r1, r9
 8008c50:	9004      	str	r0, [sp, #16]
 8008c52:	4658      	mov	r0, fp
 8008c54:	f000 fa92 	bl	800917c <_Bfree>
 8008c58:	9b04      	ldr	r3, [sp, #16]
 8008c5a:	4699      	mov	r9, r3
 8008c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c5e:	1b1a      	subs	r2, r3, r4
 8008c60:	d004      	beq.n	8008c6c <_dtoa_r+0x78c>
 8008c62:	4649      	mov	r1, r9
 8008c64:	4658      	mov	r0, fp
 8008c66:	f000 fbfd 	bl	8009464 <__pow5mult>
 8008c6a:	4681      	mov	r9, r0
 8008c6c:	2101      	movs	r1, #1
 8008c6e:	4658      	mov	r0, fp
 8008c70:	f000 fb38 	bl	80092e4 <__i2b>
 8008c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c76:	4604      	mov	r4, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 81cf 	beq.w	800901c <_dtoa_r+0xb3c>
 8008c7e:	461a      	mov	r2, r3
 8008c80:	4601      	mov	r1, r0
 8008c82:	4658      	mov	r0, fp
 8008c84:	f000 fbee 	bl	8009464 <__pow5mult>
 8008c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	f300 8095 	bgt.w	8008dbc <_dtoa_r+0x8dc>
 8008c92:	9b02      	ldr	r3, [sp, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f040 8087 	bne.w	8008da8 <_dtoa_r+0x8c8>
 8008c9a:	9b03      	ldr	r3, [sp, #12]
 8008c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f040 8089 	bne.w	8008db8 <_dtoa_r+0x8d8>
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008cac:	0d1b      	lsrs	r3, r3, #20
 8008cae:	051b      	lsls	r3, r3, #20
 8008cb0:	b12b      	cbz	r3, 8008cbe <_dtoa_r+0x7de>
 8008cb2:	9b08      	ldr	r3, [sp, #32]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	9308      	str	r3, [sp, #32]
 8008cb8:	f108 0801 	add.w	r8, r8, #1
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 81b0 	beq.w	8009028 <_dtoa_r+0xb48>
 8008cc8:	6923      	ldr	r3, [r4, #16]
 8008cca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008cce:	6918      	ldr	r0, [r3, #16]
 8008cd0:	f000 fabc 	bl	800924c <__hi0bits>
 8008cd4:	f1c0 0020 	rsb	r0, r0, #32
 8008cd8:	9b08      	ldr	r3, [sp, #32]
 8008cda:	4418      	add	r0, r3
 8008cdc:	f010 001f 	ands.w	r0, r0, #31
 8008ce0:	d077      	beq.n	8008dd2 <_dtoa_r+0x8f2>
 8008ce2:	f1c0 0320 	rsb	r3, r0, #32
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	dd6b      	ble.n	8008dc2 <_dtoa_r+0x8e2>
 8008cea:	9b08      	ldr	r3, [sp, #32]
 8008cec:	f1c0 001c 	rsb	r0, r0, #28
 8008cf0:	4403      	add	r3, r0
 8008cf2:	4480      	add	r8, r0
 8008cf4:	4406      	add	r6, r0
 8008cf6:	9308      	str	r3, [sp, #32]
 8008cf8:	f1b8 0f00 	cmp.w	r8, #0
 8008cfc:	dd05      	ble.n	8008d0a <_dtoa_r+0x82a>
 8008cfe:	4649      	mov	r1, r9
 8008d00:	4642      	mov	r2, r8
 8008d02:	4658      	mov	r0, fp
 8008d04:	f000 fc08 	bl	8009518 <__lshift>
 8008d08:	4681      	mov	r9, r0
 8008d0a:	9b08      	ldr	r3, [sp, #32]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dd05      	ble.n	8008d1c <_dtoa_r+0x83c>
 8008d10:	4621      	mov	r1, r4
 8008d12:	461a      	mov	r2, r3
 8008d14:	4658      	mov	r0, fp
 8008d16:	f000 fbff 	bl	8009518 <__lshift>
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d059      	beq.n	8008dd6 <_dtoa_r+0x8f6>
 8008d22:	4621      	mov	r1, r4
 8008d24:	4648      	mov	r0, r9
 8008d26:	f000 fc63 	bl	80095f0 <__mcmp>
 8008d2a:	2800      	cmp	r0, #0
 8008d2c:	da53      	bge.n	8008dd6 <_dtoa_r+0x8f6>
 8008d2e:	1e7b      	subs	r3, r7, #1
 8008d30:	9304      	str	r3, [sp, #16]
 8008d32:	4649      	mov	r1, r9
 8008d34:	2300      	movs	r3, #0
 8008d36:	220a      	movs	r2, #10
 8008d38:	4658      	mov	r0, fp
 8008d3a:	f000 fa41 	bl	80091c0 <__multadd>
 8008d3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d40:	4681      	mov	r9, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 8172 	beq.w	800902c <_dtoa_r+0xb4c>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	220a      	movs	r2, #10
 8008d4e:	4658      	mov	r0, fp
 8008d50:	f000 fa36 	bl	80091c0 <__multadd>
 8008d54:	9b00      	ldr	r3, [sp, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	4605      	mov	r5, r0
 8008d5a:	dc67      	bgt.n	8008e2c <_dtoa_r+0x94c>
 8008d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	dc41      	bgt.n	8008de6 <_dtoa_r+0x906>
 8008d62:	e063      	b.n	8008e2c <_dtoa_r+0x94c>
 8008d64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008d66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d6a:	e746      	b.n	8008bfa <_dtoa_r+0x71a>
 8008d6c:	9b07      	ldr	r3, [sp, #28]
 8008d6e:	1e5c      	subs	r4, r3, #1
 8008d70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d72:	42a3      	cmp	r3, r4
 8008d74:	bfbf      	itttt	lt
 8008d76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008d78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008d7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008d7c:	1ae3      	sublt	r3, r4, r3
 8008d7e:	bfb4      	ite	lt
 8008d80:	18d2      	addlt	r2, r2, r3
 8008d82:	1b1c      	subge	r4, r3, r4
 8008d84:	9b07      	ldr	r3, [sp, #28]
 8008d86:	bfbc      	itt	lt
 8008d88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008d8a:	2400      	movlt	r4, #0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	bfb5      	itete	lt
 8008d90:	eba8 0603 	sublt.w	r6, r8, r3
 8008d94:	9b07      	ldrge	r3, [sp, #28]
 8008d96:	2300      	movlt	r3, #0
 8008d98:	4646      	movge	r6, r8
 8008d9a:	e730      	b.n	8008bfe <_dtoa_r+0x71e>
 8008d9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008da0:	4646      	mov	r6, r8
 8008da2:	e735      	b.n	8008c10 <_dtoa_r+0x730>
 8008da4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008da6:	e75c      	b.n	8008c62 <_dtoa_r+0x782>
 8008da8:	2300      	movs	r3, #0
 8008daa:	e788      	b.n	8008cbe <_dtoa_r+0x7de>
 8008dac:	3fe00000 	.word	0x3fe00000
 8008db0:	40240000 	.word	0x40240000
 8008db4:	40140000 	.word	0x40140000
 8008db8:	9b02      	ldr	r3, [sp, #8]
 8008dba:	e780      	b.n	8008cbe <_dtoa_r+0x7de>
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dc0:	e782      	b.n	8008cc8 <_dtoa_r+0x7e8>
 8008dc2:	d099      	beq.n	8008cf8 <_dtoa_r+0x818>
 8008dc4:	9a08      	ldr	r2, [sp, #32]
 8008dc6:	331c      	adds	r3, #28
 8008dc8:	441a      	add	r2, r3
 8008dca:	4498      	add	r8, r3
 8008dcc:	441e      	add	r6, r3
 8008dce:	9208      	str	r2, [sp, #32]
 8008dd0:	e792      	b.n	8008cf8 <_dtoa_r+0x818>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	e7f6      	b.n	8008dc4 <_dtoa_r+0x8e4>
 8008dd6:	9b07      	ldr	r3, [sp, #28]
 8008dd8:	9704      	str	r7, [sp, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	dc20      	bgt.n	8008e20 <_dtoa_r+0x940>
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	dd1e      	ble.n	8008e24 <_dtoa_r+0x944>
 8008de6:	9b00      	ldr	r3, [sp, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f47f aec0 	bne.w	8008b6e <_dtoa_r+0x68e>
 8008dee:	4621      	mov	r1, r4
 8008df0:	2205      	movs	r2, #5
 8008df2:	4658      	mov	r0, fp
 8008df4:	f000 f9e4 	bl	80091c0 <__multadd>
 8008df8:	4601      	mov	r1, r0
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	4648      	mov	r0, r9
 8008dfe:	f000 fbf7 	bl	80095f0 <__mcmp>
 8008e02:	2800      	cmp	r0, #0
 8008e04:	f77f aeb3 	ble.w	8008b6e <_dtoa_r+0x68e>
 8008e08:	4656      	mov	r6, sl
 8008e0a:	2331      	movs	r3, #49	@ 0x31
 8008e0c:	f806 3b01 	strb.w	r3, [r6], #1
 8008e10:	9b04      	ldr	r3, [sp, #16]
 8008e12:	3301      	adds	r3, #1
 8008e14:	9304      	str	r3, [sp, #16]
 8008e16:	e6ae      	b.n	8008b76 <_dtoa_r+0x696>
 8008e18:	9c07      	ldr	r4, [sp, #28]
 8008e1a:	9704      	str	r7, [sp, #16]
 8008e1c:	4625      	mov	r5, r4
 8008e1e:	e7f3      	b.n	8008e08 <_dtoa_r+0x928>
 8008e20:	9b07      	ldr	r3, [sp, #28]
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f000 8104 	beq.w	8009034 <_dtoa_r+0xb54>
 8008e2c:	2e00      	cmp	r6, #0
 8008e2e:	dd05      	ble.n	8008e3c <_dtoa_r+0x95c>
 8008e30:	4629      	mov	r1, r5
 8008e32:	4632      	mov	r2, r6
 8008e34:	4658      	mov	r0, fp
 8008e36:	f000 fb6f 	bl	8009518 <__lshift>
 8008e3a:	4605      	mov	r5, r0
 8008e3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d05a      	beq.n	8008ef8 <_dtoa_r+0xa18>
 8008e42:	6869      	ldr	r1, [r5, #4]
 8008e44:	4658      	mov	r0, fp
 8008e46:	f000 f959 	bl	80090fc <_Balloc>
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	b928      	cbnz	r0, 8008e5a <_dtoa_r+0x97a>
 8008e4e:	4b84      	ldr	r3, [pc, #528]	@ (8009060 <_dtoa_r+0xb80>)
 8008e50:	4602      	mov	r2, r0
 8008e52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e56:	f7ff bb5a 	b.w	800850e <_dtoa_r+0x2e>
 8008e5a:	692a      	ldr	r2, [r5, #16]
 8008e5c:	3202      	adds	r2, #2
 8008e5e:	0092      	lsls	r2, r2, #2
 8008e60:	f105 010c 	add.w	r1, r5, #12
 8008e64:	300c      	adds	r0, #12
 8008e66:	f7ff faa4 	bl	80083b2 <memcpy>
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	4631      	mov	r1, r6
 8008e6e:	4658      	mov	r0, fp
 8008e70:	f000 fb52 	bl	8009518 <__lshift>
 8008e74:	f10a 0301 	add.w	r3, sl, #1
 8008e78:	9307      	str	r3, [sp, #28]
 8008e7a:	9b00      	ldr	r3, [sp, #0]
 8008e7c:	4453      	add	r3, sl
 8008e7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e80:	9b02      	ldr	r3, [sp, #8]
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	462f      	mov	r7, r5
 8008e88:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e8a:	4605      	mov	r5, r0
 8008e8c:	9b07      	ldr	r3, [sp, #28]
 8008e8e:	4621      	mov	r1, r4
 8008e90:	3b01      	subs	r3, #1
 8008e92:	4648      	mov	r0, r9
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	f7ff fa9a 	bl	80083ce <quorem>
 8008e9a:	4639      	mov	r1, r7
 8008e9c:	9002      	str	r0, [sp, #8]
 8008e9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008ea2:	4648      	mov	r0, r9
 8008ea4:	f000 fba4 	bl	80095f0 <__mcmp>
 8008ea8:	462a      	mov	r2, r5
 8008eaa:	9008      	str	r0, [sp, #32]
 8008eac:	4621      	mov	r1, r4
 8008eae:	4658      	mov	r0, fp
 8008eb0:	f000 fbba 	bl	8009628 <__mdiff>
 8008eb4:	68c2      	ldr	r2, [r0, #12]
 8008eb6:	4606      	mov	r6, r0
 8008eb8:	bb02      	cbnz	r2, 8008efc <_dtoa_r+0xa1c>
 8008eba:	4601      	mov	r1, r0
 8008ebc:	4648      	mov	r0, r9
 8008ebe:	f000 fb97 	bl	80095f0 <__mcmp>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4658      	mov	r0, fp
 8008ec8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008eca:	f000 f957 	bl	800917c <_Bfree>
 8008ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ed0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ed2:	9e07      	ldr	r6, [sp, #28]
 8008ed4:	ea43 0102 	orr.w	r1, r3, r2
 8008ed8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eda:	4319      	orrs	r1, r3
 8008edc:	d110      	bne.n	8008f00 <_dtoa_r+0xa20>
 8008ede:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ee2:	d029      	beq.n	8008f38 <_dtoa_r+0xa58>
 8008ee4:	9b08      	ldr	r3, [sp, #32]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	dd02      	ble.n	8008ef0 <_dtoa_r+0xa10>
 8008eea:	9b02      	ldr	r3, [sp, #8]
 8008eec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008ef0:	9b00      	ldr	r3, [sp, #0]
 8008ef2:	f883 8000 	strb.w	r8, [r3]
 8008ef6:	e63f      	b.n	8008b78 <_dtoa_r+0x698>
 8008ef8:	4628      	mov	r0, r5
 8008efa:	e7bb      	b.n	8008e74 <_dtoa_r+0x994>
 8008efc:	2201      	movs	r2, #1
 8008efe:	e7e1      	b.n	8008ec4 <_dtoa_r+0x9e4>
 8008f00:	9b08      	ldr	r3, [sp, #32]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	db04      	blt.n	8008f10 <_dtoa_r+0xa30>
 8008f06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f08:	430b      	orrs	r3, r1
 8008f0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	d120      	bne.n	8008f52 <_dtoa_r+0xa72>
 8008f10:	2a00      	cmp	r2, #0
 8008f12:	dded      	ble.n	8008ef0 <_dtoa_r+0xa10>
 8008f14:	4649      	mov	r1, r9
 8008f16:	2201      	movs	r2, #1
 8008f18:	4658      	mov	r0, fp
 8008f1a:	f000 fafd 	bl	8009518 <__lshift>
 8008f1e:	4621      	mov	r1, r4
 8008f20:	4681      	mov	r9, r0
 8008f22:	f000 fb65 	bl	80095f0 <__mcmp>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	dc03      	bgt.n	8008f32 <_dtoa_r+0xa52>
 8008f2a:	d1e1      	bne.n	8008ef0 <_dtoa_r+0xa10>
 8008f2c:	f018 0f01 	tst.w	r8, #1
 8008f30:	d0de      	beq.n	8008ef0 <_dtoa_r+0xa10>
 8008f32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f36:	d1d8      	bne.n	8008eea <_dtoa_r+0xa0a>
 8008f38:	9a00      	ldr	r2, [sp, #0]
 8008f3a:	2339      	movs	r3, #57	@ 0x39
 8008f3c:	7013      	strb	r3, [r2, #0]
 8008f3e:	4633      	mov	r3, r6
 8008f40:	461e      	mov	r6, r3
 8008f42:	3b01      	subs	r3, #1
 8008f44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f48:	2a39      	cmp	r2, #57	@ 0x39
 8008f4a:	d052      	beq.n	8008ff2 <_dtoa_r+0xb12>
 8008f4c:	3201      	adds	r2, #1
 8008f4e:	701a      	strb	r2, [r3, #0]
 8008f50:	e612      	b.n	8008b78 <_dtoa_r+0x698>
 8008f52:	2a00      	cmp	r2, #0
 8008f54:	dd07      	ble.n	8008f66 <_dtoa_r+0xa86>
 8008f56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f5a:	d0ed      	beq.n	8008f38 <_dtoa_r+0xa58>
 8008f5c:	9a00      	ldr	r2, [sp, #0]
 8008f5e:	f108 0301 	add.w	r3, r8, #1
 8008f62:	7013      	strb	r3, [r2, #0]
 8008f64:	e608      	b.n	8008b78 <_dtoa_r+0x698>
 8008f66:	9b07      	ldr	r3, [sp, #28]
 8008f68:	9a07      	ldr	r2, [sp, #28]
 8008f6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d028      	beq.n	8008fc6 <_dtoa_r+0xae6>
 8008f74:	4649      	mov	r1, r9
 8008f76:	2300      	movs	r3, #0
 8008f78:	220a      	movs	r2, #10
 8008f7a:	4658      	mov	r0, fp
 8008f7c:	f000 f920 	bl	80091c0 <__multadd>
 8008f80:	42af      	cmp	r7, r5
 8008f82:	4681      	mov	r9, r0
 8008f84:	f04f 0300 	mov.w	r3, #0
 8008f88:	f04f 020a 	mov.w	r2, #10
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	4658      	mov	r0, fp
 8008f90:	d107      	bne.n	8008fa2 <_dtoa_r+0xac2>
 8008f92:	f000 f915 	bl	80091c0 <__multadd>
 8008f96:	4607      	mov	r7, r0
 8008f98:	4605      	mov	r5, r0
 8008f9a:	9b07      	ldr	r3, [sp, #28]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	9307      	str	r3, [sp, #28]
 8008fa0:	e774      	b.n	8008e8c <_dtoa_r+0x9ac>
 8008fa2:	f000 f90d 	bl	80091c0 <__multadd>
 8008fa6:	4629      	mov	r1, r5
 8008fa8:	4607      	mov	r7, r0
 8008faa:	2300      	movs	r3, #0
 8008fac:	220a      	movs	r2, #10
 8008fae:	4658      	mov	r0, fp
 8008fb0:	f000 f906 	bl	80091c0 <__multadd>
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	e7f0      	b.n	8008f9a <_dtoa_r+0xaba>
 8008fb8:	9b00      	ldr	r3, [sp, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	bfcc      	ite	gt
 8008fbe:	461e      	movgt	r6, r3
 8008fc0:	2601      	movle	r6, #1
 8008fc2:	4456      	add	r6, sl
 8008fc4:	2700      	movs	r7, #0
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	2201      	movs	r2, #1
 8008fca:	4658      	mov	r0, fp
 8008fcc:	f000 faa4 	bl	8009518 <__lshift>
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	4681      	mov	r9, r0
 8008fd4:	f000 fb0c 	bl	80095f0 <__mcmp>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	dcb0      	bgt.n	8008f3e <_dtoa_r+0xa5e>
 8008fdc:	d102      	bne.n	8008fe4 <_dtoa_r+0xb04>
 8008fde:	f018 0f01 	tst.w	r8, #1
 8008fe2:	d1ac      	bne.n	8008f3e <_dtoa_r+0xa5e>
 8008fe4:	4633      	mov	r3, r6
 8008fe6:	461e      	mov	r6, r3
 8008fe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fec:	2a30      	cmp	r2, #48	@ 0x30
 8008fee:	d0fa      	beq.n	8008fe6 <_dtoa_r+0xb06>
 8008ff0:	e5c2      	b.n	8008b78 <_dtoa_r+0x698>
 8008ff2:	459a      	cmp	sl, r3
 8008ff4:	d1a4      	bne.n	8008f40 <_dtoa_r+0xa60>
 8008ff6:	9b04      	ldr	r3, [sp, #16]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	9304      	str	r3, [sp, #16]
 8008ffc:	2331      	movs	r3, #49	@ 0x31
 8008ffe:	f88a 3000 	strb.w	r3, [sl]
 8009002:	e5b9      	b.n	8008b78 <_dtoa_r+0x698>
 8009004:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009006:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009064 <_dtoa_r+0xb84>
 800900a:	b11b      	cbz	r3, 8009014 <_dtoa_r+0xb34>
 800900c:	f10a 0308 	add.w	r3, sl, #8
 8009010:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009012:	6013      	str	r3, [r2, #0]
 8009014:	4650      	mov	r0, sl
 8009016:	b019      	add	sp, #100	@ 0x64
 8009018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800901c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800901e:	2b01      	cmp	r3, #1
 8009020:	f77f ae37 	ble.w	8008c92 <_dtoa_r+0x7b2>
 8009024:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009026:	930a      	str	r3, [sp, #40]	@ 0x28
 8009028:	2001      	movs	r0, #1
 800902a:	e655      	b.n	8008cd8 <_dtoa_r+0x7f8>
 800902c:	9b00      	ldr	r3, [sp, #0]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f77f aed6 	ble.w	8008de0 <_dtoa_r+0x900>
 8009034:	4656      	mov	r6, sl
 8009036:	4621      	mov	r1, r4
 8009038:	4648      	mov	r0, r9
 800903a:	f7ff f9c8 	bl	80083ce <quorem>
 800903e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009042:	f806 8b01 	strb.w	r8, [r6], #1
 8009046:	9b00      	ldr	r3, [sp, #0]
 8009048:	eba6 020a 	sub.w	r2, r6, sl
 800904c:	4293      	cmp	r3, r2
 800904e:	ddb3      	ble.n	8008fb8 <_dtoa_r+0xad8>
 8009050:	4649      	mov	r1, r9
 8009052:	2300      	movs	r3, #0
 8009054:	220a      	movs	r2, #10
 8009056:	4658      	mov	r0, fp
 8009058:	f000 f8b2 	bl	80091c0 <__multadd>
 800905c:	4681      	mov	r9, r0
 800905e:	e7ea      	b.n	8009036 <_dtoa_r+0xb56>
 8009060:	0800a5a9 	.word	0x0800a5a9
 8009064:	0800a52d 	.word	0x0800a52d

08009068 <_free_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4605      	mov	r5, r0
 800906c:	2900      	cmp	r1, #0
 800906e:	d041      	beq.n	80090f4 <_free_r+0x8c>
 8009070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009074:	1f0c      	subs	r4, r1, #4
 8009076:	2b00      	cmp	r3, #0
 8009078:	bfb8      	it	lt
 800907a:	18e4      	addlt	r4, r4, r3
 800907c:	f7fe f9ae 	bl	80073dc <__malloc_lock>
 8009080:	4a1d      	ldr	r2, [pc, #116]	@ (80090f8 <_free_r+0x90>)
 8009082:	6813      	ldr	r3, [r2, #0]
 8009084:	b933      	cbnz	r3, 8009094 <_free_r+0x2c>
 8009086:	6063      	str	r3, [r4, #4]
 8009088:	6014      	str	r4, [r2, #0]
 800908a:	4628      	mov	r0, r5
 800908c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009090:	f7fe b9aa 	b.w	80073e8 <__malloc_unlock>
 8009094:	42a3      	cmp	r3, r4
 8009096:	d908      	bls.n	80090aa <_free_r+0x42>
 8009098:	6820      	ldr	r0, [r4, #0]
 800909a:	1821      	adds	r1, r4, r0
 800909c:	428b      	cmp	r3, r1
 800909e:	bf01      	itttt	eq
 80090a0:	6819      	ldreq	r1, [r3, #0]
 80090a2:	685b      	ldreq	r3, [r3, #4]
 80090a4:	1809      	addeq	r1, r1, r0
 80090a6:	6021      	streq	r1, [r4, #0]
 80090a8:	e7ed      	b.n	8009086 <_free_r+0x1e>
 80090aa:	461a      	mov	r2, r3
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	b10b      	cbz	r3, 80090b4 <_free_r+0x4c>
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	d9fa      	bls.n	80090aa <_free_r+0x42>
 80090b4:	6811      	ldr	r1, [r2, #0]
 80090b6:	1850      	adds	r0, r2, r1
 80090b8:	42a0      	cmp	r0, r4
 80090ba:	d10b      	bne.n	80090d4 <_free_r+0x6c>
 80090bc:	6820      	ldr	r0, [r4, #0]
 80090be:	4401      	add	r1, r0
 80090c0:	1850      	adds	r0, r2, r1
 80090c2:	4283      	cmp	r3, r0
 80090c4:	6011      	str	r1, [r2, #0]
 80090c6:	d1e0      	bne.n	800908a <_free_r+0x22>
 80090c8:	6818      	ldr	r0, [r3, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	6053      	str	r3, [r2, #4]
 80090ce:	4408      	add	r0, r1
 80090d0:	6010      	str	r0, [r2, #0]
 80090d2:	e7da      	b.n	800908a <_free_r+0x22>
 80090d4:	d902      	bls.n	80090dc <_free_r+0x74>
 80090d6:	230c      	movs	r3, #12
 80090d8:	602b      	str	r3, [r5, #0]
 80090da:	e7d6      	b.n	800908a <_free_r+0x22>
 80090dc:	6820      	ldr	r0, [r4, #0]
 80090de:	1821      	adds	r1, r4, r0
 80090e0:	428b      	cmp	r3, r1
 80090e2:	bf04      	itt	eq
 80090e4:	6819      	ldreq	r1, [r3, #0]
 80090e6:	685b      	ldreq	r3, [r3, #4]
 80090e8:	6063      	str	r3, [r4, #4]
 80090ea:	bf04      	itt	eq
 80090ec:	1809      	addeq	r1, r1, r0
 80090ee:	6021      	streq	r1, [r4, #0]
 80090f0:	6054      	str	r4, [r2, #4]
 80090f2:	e7ca      	b.n	800908a <_free_r+0x22>
 80090f4:	bd38      	pop	{r3, r4, r5, pc}
 80090f6:	bf00      	nop
 80090f8:	20000b50 	.word	0x20000b50

080090fc <_Balloc>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	69c6      	ldr	r6, [r0, #28]
 8009100:	4604      	mov	r4, r0
 8009102:	460d      	mov	r5, r1
 8009104:	b976      	cbnz	r6, 8009124 <_Balloc+0x28>
 8009106:	2010      	movs	r0, #16
 8009108:	f7fe f8b6 	bl	8007278 <malloc>
 800910c:	4602      	mov	r2, r0
 800910e:	61e0      	str	r0, [r4, #28]
 8009110:	b920      	cbnz	r0, 800911c <_Balloc+0x20>
 8009112:	4b18      	ldr	r3, [pc, #96]	@ (8009174 <_Balloc+0x78>)
 8009114:	4818      	ldr	r0, [pc, #96]	@ (8009178 <_Balloc+0x7c>)
 8009116:	216b      	movs	r1, #107	@ 0x6b
 8009118:	f000 fe1c 	bl	8009d54 <__assert_func>
 800911c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009120:	6006      	str	r6, [r0, #0]
 8009122:	60c6      	str	r6, [r0, #12]
 8009124:	69e6      	ldr	r6, [r4, #28]
 8009126:	68f3      	ldr	r3, [r6, #12]
 8009128:	b183      	cbz	r3, 800914c <_Balloc+0x50>
 800912a:	69e3      	ldr	r3, [r4, #28]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009132:	b9b8      	cbnz	r0, 8009164 <_Balloc+0x68>
 8009134:	2101      	movs	r1, #1
 8009136:	fa01 f605 	lsl.w	r6, r1, r5
 800913a:	1d72      	adds	r2, r6, #5
 800913c:	0092      	lsls	r2, r2, #2
 800913e:	4620      	mov	r0, r4
 8009140:	f000 fe26 	bl	8009d90 <_calloc_r>
 8009144:	b160      	cbz	r0, 8009160 <_Balloc+0x64>
 8009146:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800914a:	e00e      	b.n	800916a <_Balloc+0x6e>
 800914c:	2221      	movs	r2, #33	@ 0x21
 800914e:	2104      	movs	r1, #4
 8009150:	4620      	mov	r0, r4
 8009152:	f000 fe1d 	bl	8009d90 <_calloc_r>
 8009156:	69e3      	ldr	r3, [r4, #28]
 8009158:	60f0      	str	r0, [r6, #12]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1e4      	bne.n	800912a <_Balloc+0x2e>
 8009160:	2000      	movs	r0, #0
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	6802      	ldr	r2, [r0, #0]
 8009166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800916a:	2300      	movs	r3, #0
 800916c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009170:	e7f7      	b.n	8009162 <_Balloc+0x66>
 8009172:	bf00      	nop
 8009174:	0800a53a 	.word	0x0800a53a
 8009178:	0800a5ba 	.word	0x0800a5ba

0800917c <_Bfree>:
 800917c:	b570      	push	{r4, r5, r6, lr}
 800917e:	69c6      	ldr	r6, [r0, #28]
 8009180:	4605      	mov	r5, r0
 8009182:	460c      	mov	r4, r1
 8009184:	b976      	cbnz	r6, 80091a4 <_Bfree+0x28>
 8009186:	2010      	movs	r0, #16
 8009188:	f7fe f876 	bl	8007278 <malloc>
 800918c:	4602      	mov	r2, r0
 800918e:	61e8      	str	r0, [r5, #28]
 8009190:	b920      	cbnz	r0, 800919c <_Bfree+0x20>
 8009192:	4b09      	ldr	r3, [pc, #36]	@ (80091b8 <_Bfree+0x3c>)
 8009194:	4809      	ldr	r0, [pc, #36]	@ (80091bc <_Bfree+0x40>)
 8009196:	218f      	movs	r1, #143	@ 0x8f
 8009198:	f000 fddc 	bl	8009d54 <__assert_func>
 800919c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091a0:	6006      	str	r6, [r0, #0]
 80091a2:	60c6      	str	r6, [r0, #12]
 80091a4:	b13c      	cbz	r4, 80091b6 <_Bfree+0x3a>
 80091a6:	69eb      	ldr	r3, [r5, #28]
 80091a8:	6862      	ldr	r2, [r4, #4]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091b0:	6021      	str	r1, [r4, #0]
 80091b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091b6:	bd70      	pop	{r4, r5, r6, pc}
 80091b8:	0800a53a 	.word	0x0800a53a
 80091bc:	0800a5ba 	.word	0x0800a5ba

080091c0 <__multadd>:
 80091c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c4:	690d      	ldr	r5, [r1, #16]
 80091c6:	4607      	mov	r7, r0
 80091c8:	460c      	mov	r4, r1
 80091ca:	461e      	mov	r6, r3
 80091cc:	f101 0c14 	add.w	ip, r1, #20
 80091d0:	2000      	movs	r0, #0
 80091d2:	f8dc 3000 	ldr.w	r3, [ip]
 80091d6:	b299      	uxth	r1, r3
 80091d8:	fb02 6101 	mla	r1, r2, r1, r6
 80091dc:	0c1e      	lsrs	r6, r3, #16
 80091de:	0c0b      	lsrs	r3, r1, #16
 80091e0:	fb02 3306 	mla	r3, r2, r6, r3
 80091e4:	b289      	uxth	r1, r1
 80091e6:	3001      	adds	r0, #1
 80091e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091ec:	4285      	cmp	r5, r0
 80091ee:	f84c 1b04 	str.w	r1, [ip], #4
 80091f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091f6:	dcec      	bgt.n	80091d2 <__multadd+0x12>
 80091f8:	b30e      	cbz	r6, 800923e <__multadd+0x7e>
 80091fa:	68a3      	ldr	r3, [r4, #8]
 80091fc:	42ab      	cmp	r3, r5
 80091fe:	dc19      	bgt.n	8009234 <__multadd+0x74>
 8009200:	6861      	ldr	r1, [r4, #4]
 8009202:	4638      	mov	r0, r7
 8009204:	3101      	adds	r1, #1
 8009206:	f7ff ff79 	bl	80090fc <_Balloc>
 800920a:	4680      	mov	r8, r0
 800920c:	b928      	cbnz	r0, 800921a <__multadd+0x5a>
 800920e:	4602      	mov	r2, r0
 8009210:	4b0c      	ldr	r3, [pc, #48]	@ (8009244 <__multadd+0x84>)
 8009212:	480d      	ldr	r0, [pc, #52]	@ (8009248 <__multadd+0x88>)
 8009214:	21ba      	movs	r1, #186	@ 0xba
 8009216:	f000 fd9d 	bl	8009d54 <__assert_func>
 800921a:	6922      	ldr	r2, [r4, #16]
 800921c:	3202      	adds	r2, #2
 800921e:	f104 010c 	add.w	r1, r4, #12
 8009222:	0092      	lsls	r2, r2, #2
 8009224:	300c      	adds	r0, #12
 8009226:	f7ff f8c4 	bl	80083b2 <memcpy>
 800922a:	4621      	mov	r1, r4
 800922c:	4638      	mov	r0, r7
 800922e:	f7ff ffa5 	bl	800917c <_Bfree>
 8009232:	4644      	mov	r4, r8
 8009234:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009238:	3501      	adds	r5, #1
 800923a:	615e      	str	r6, [r3, #20]
 800923c:	6125      	str	r5, [r4, #16]
 800923e:	4620      	mov	r0, r4
 8009240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009244:	0800a5a9 	.word	0x0800a5a9
 8009248:	0800a5ba 	.word	0x0800a5ba

0800924c <__hi0bits>:
 800924c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009250:	4603      	mov	r3, r0
 8009252:	bf36      	itet	cc
 8009254:	0403      	lslcc	r3, r0, #16
 8009256:	2000      	movcs	r0, #0
 8009258:	2010      	movcc	r0, #16
 800925a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800925e:	bf3c      	itt	cc
 8009260:	021b      	lslcc	r3, r3, #8
 8009262:	3008      	addcc	r0, #8
 8009264:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009268:	bf3c      	itt	cc
 800926a:	011b      	lslcc	r3, r3, #4
 800926c:	3004      	addcc	r0, #4
 800926e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009272:	bf3c      	itt	cc
 8009274:	009b      	lslcc	r3, r3, #2
 8009276:	3002      	addcc	r0, #2
 8009278:	2b00      	cmp	r3, #0
 800927a:	db05      	blt.n	8009288 <__hi0bits+0x3c>
 800927c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009280:	f100 0001 	add.w	r0, r0, #1
 8009284:	bf08      	it	eq
 8009286:	2020      	moveq	r0, #32
 8009288:	4770      	bx	lr

0800928a <__lo0bits>:
 800928a:	6803      	ldr	r3, [r0, #0]
 800928c:	4602      	mov	r2, r0
 800928e:	f013 0007 	ands.w	r0, r3, #7
 8009292:	d00b      	beq.n	80092ac <__lo0bits+0x22>
 8009294:	07d9      	lsls	r1, r3, #31
 8009296:	d421      	bmi.n	80092dc <__lo0bits+0x52>
 8009298:	0798      	lsls	r0, r3, #30
 800929a:	bf49      	itett	mi
 800929c:	085b      	lsrmi	r3, r3, #1
 800929e:	089b      	lsrpl	r3, r3, #2
 80092a0:	2001      	movmi	r0, #1
 80092a2:	6013      	strmi	r3, [r2, #0]
 80092a4:	bf5c      	itt	pl
 80092a6:	6013      	strpl	r3, [r2, #0]
 80092a8:	2002      	movpl	r0, #2
 80092aa:	4770      	bx	lr
 80092ac:	b299      	uxth	r1, r3
 80092ae:	b909      	cbnz	r1, 80092b4 <__lo0bits+0x2a>
 80092b0:	0c1b      	lsrs	r3, r3, #16
 80092b2:	2010      	movs	r0, #16
 80092b4:	b2d9      	uxtb	r1, r3
 80092b6:	b909      	cbnz	r1, 80092bc <__lo0bits+0x32>
 80092b8:	3008      	adds	r0, #8
 80092ba:	0a1b      	lsrs	r3, r3, #8
 80092bc:	0719      	lsls	r1, r3, #28
 80092be:	bf04      	itt	eq
 80092c0:	091b      	lsreq	r3, r3, #4
 80092c2:	3004      	addeq	r0, #4
 80092c4:	0799      	lsls	r1, r3, #30
 80092c6:	bf04      	itt	eq
 80092c8:	089b      	lsreq	r3, r3, #2
 80092ca:	3002      	addeq	r0, #2
 80092cc:	07d9      	lsls	r1, r3, #31
 80092ce:	d403      	bmi.n	80092d8 <__lo0bits+0x4e>
 80092d0:	085b      	lsrs	r3, r3, #1
 80092d2:	f100 0001 	add.w	r0, r0, #1
 80092d6:	d003      	beq.n	80092e0 <__lo0bits+0x56>
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	4770      	bx	lr
 80092dc:	2000      	movs	r0, #0
 80092de:	4770      	bx	lr
 80092e0:	2020      	movs	r0, #32
 80092e2:	4770      	bx	lr

080092e4 <__i2b>:
 80092e4:	b510      	push	{r4, lr}
 80092e6:	460c      	mov	r4, r1
 80092e8:	2101      	movs	r1, #1
 80092ea:	f7ff ff07 	bl	80090fc <_Balloc>
 80092ee:	4602      	mov	r2, r0
 80092f0:	b928      	cbnz	r0, 80092fe <__i2b+0x1a>
 80092f2:	4b05      	ldr	r3, [pc, #20]	@ (8009308 <__i2b+0x24>)
 80092f4:	4805      	ldr	r0, [pc, #20]	@ (800930c <__i2b+0x28>)
 80092f6:	f240 1145 	movw	r1, #325	@ 0x145
 80092fa:	f000 fd2b 	bl	8009d54 <__assert_func>
 80092fe:	2301      	movs	r3, #1
 8009300:	6144      	str	r4, [r0, #20]
 8009302:	6103      	str	r3, [r0, #16]
 8009304:	bd10      	pop	{r4, pc}
 8009306:	bf00      	nop
 8009308:	0800a5a9 	.word	0x0800a5a9
 800930c:	0800a5ba 	.word	0x0800a5ba

08009310 <__multiply>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	4614      	mov	r4, r2
 8009316:	690a      	ldr	r2, [r1, #16]
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	429a      	cmp	r2, r3
 800931c:	bfa8      	it	ge
 800931e:	4623      	movge	r3, r4
 8009320:	460f      	mov	r7, r1
 8009322:	bfa4      	itt	ge
 8009324:	460c      	movge	r4, r1
 8009326:	461f      	movge	r7, r3
 8009328:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800932c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009330:	68a3      	ldr	r3, [r4, #8]
 8009332:	6861      	ldr	r1, [r4, #4]
 8009334:	eb0a 0609 	add.w	r6, sl, r9
 8009338:	42b3      	cmp	r3, r6
 800933a:	b085      	sub	sp, #20
 800933c:	bfb8      	it	lt
 800933e:	3101      	addlt	r1, #1
 8009340:	f7ff fedc 	bl	80090fc <_Balloc>
 8009344:	b930      	cbnz	r0, 8009354 <__multiply+0x44>
 8009346:	4602      	mov	r2, r0
 8009348:	4b44      	ldr	r3, [pc, #272]	@ (800945c <__multiply+0x14c>)
 800934a:	4845      	ldr	r0, [pc, #276]	@ (8009460 <__multiply+0x150>)
 800934c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009350:	f000 fd00 	bl	8009d54 <__assert_func>
 8009354:	f100 0514 	add.w	r5, r0, #20
 8009358:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800935c:	462b      	mov	r3, r5
 800935e:	2200      	movs	r2, #0
 8009360:	4543      	cmp	r3, r8
 8009362:	d321      	bcc.n	80093a8 <__multiply+0x98>
 8009364:	f107 0114 	add.w	r1, r7, #20
 8009368:	f104 0214 	add.w	r2, r4, #20
 800936c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009370:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009374:	9302      	str	r3, [sp, #8]
 8009376:	1b13      	subs	r3, r2, r4
 8009378:	3b15      	subs	r3, #21
 800937a:	f023 0303 	bic.w	r3, r3, #3
 800937e:	3304      	adds	r3, #4
 8009380:	f104 0715 	add.w	r7, r4, #21
 8009384:	42ba      	cmp	r2, r7
 8009386:	bf38      	it	cc
 8009388:	2304      	movcc	r3, #4
 800938a:	9301      	str	r3, [sp, #4]
 800938c:	9b02      	ldr	r3, [sp, #8]
 800938e:	9103      	str	r1, [sp, #12]
 8009390:	428b      	cmp	r3, r1
 8009392:	d80c      	bhi.n	80093ae <__multiply+0x9e>
 8009394:	2e00      	cmp	r6, #0
 8009396:	dd03      	ble.n	80093a0 <__multiply+0x90>
 8009398:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800939c:	2b00      	cmp	r3, #0
 800939e:	d05b      	beq.n	8009458 <__multiply+0x148>
 80093a0:	6106      	str	r6, [r0, #16]
 80093a2:	b005      	add	sp, #20
 80093a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a8:	f843 2b04 	str.w	r2, [r3], #4
 80093ac:	e7d8      	b.n	8009360 <__multiply+0x50>
 80093ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80093b2:	f1ba 0f00 	cmp.w	sl, #0
 80093b6:	d024      	beq.n	8009402 <__multiply+0xf2>
 80093b8:	f104 0e14 	add.w	lr, r4, #20
 80093bc:	46a9      	mov	r9, r5
 80093be:	f04f 0c00 	mov.w	ip, #0
 80093c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80093c6:	f8d9 3000 	ldr.w	r3, [r9]
 80093ca:	fa1f fb87 	uxth.w	fp, r7
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80093d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80093d8:	f8d9 7000 	ldr.w	r7, [r9]
 80093dc:	4463      	add	r3, ip
 80093de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80093e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80093f0:	4572      	cmp	r2, lr
 80093f2:	f849 3b04 	str.w	r3, [r9], #4
 80093f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80093fa:	d8e2      	bhi.n	80093c2 <__multiply+0xb2>
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	f845 c003 	str.w	ip, [r5, r3]
 8009402:	9b03      	ldr	r3, [sp, #12]
 8009404:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009408:	3104      	adds	r1, #4
 800940a:	f1b9 0f00 	cmp.w	r9, #0
 800940e:	d021      	beq.n	8009454 <__multiply+0x144>
 8009410:	682b      	ldr	r3, [r5, #0]
 8009412:	f104 0c14 	add.w	ip, r4, #20
 8009416:	46ae      	mov	lr, r5
 8009418:	f04f 0a00 	mov.w	sl, #0
 800941c:	f8bc b000 	ldrh.w	fp, [ip]
 8009420:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009424:	fb09 770b 	mla	r7, r9, fp, r7
 8009428:	4457      	add	r7, sl
 800942a:	b29b      	uxth	r3, r3
 800942c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009430:	f84e 3b04 	str.w	r3, [lr], #4
 8009434:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009438:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800943c:	f8be 3000 	ldrh.w	r3, [lr]
 8009440:	fb09 330a 	mla	r3, r9, sl, r3
 8009444:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009448:	4562      	cmp	r2, ip
 800944a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800944e:	d8e5      	bhi.n	800941c <__multiply+0x10c>
 8009450:	9f01      	ldr	r7, [sp, #4]
 8009452:	51eb      	str	r3, [r5, r7]
 8009454:	3504      	adds	r5, #4
 8009456:	e799      	b.n	800938c <__multiply+0x7c>
 8009458:	3e01      	subs	r6, #1
 800945a:	e79b      	b.n	8009394 <__multiply+0x84>
 800945c:	0800a5a9 	.word	0x0800a5a9
 8009460:	0800a5ba 	.word	0x0800a5ba

08009464 <__pow5mult>:
 8009464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009468:	4615      	mov	r5, r2
 800946a:	f012 0203 	ands.w	r2, r2, #3
 800946e:	4607      	mov	r7, r0
 8009470:	460e      	mov	r6, r1
 8009472:	d007      	beq.n	8009484 <__pow5mult+0x20>
 8009474:	4c25      	ldr	r4, [pc, #148]	@ (800950c <__pow5mult+0xa8>)
 8009476:	3a01      	subs	r2, #1
 8009478:	2300      	movs	r3, #0
 800947a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800947e:	f7ff fe9f 	bl	80091c0 <__multadd>
 8009482:	4606      	mov	r6, r0
 8009484:	10ad      	asrs	r5, r5, #2
 8009486:	d03d      	beq.n	8009504 <__pow5mult+0xa0>
 8009488:	69fc      	ldr	r4, [r7, #28]
 800948a:	b97c      	cbnz	r4, 80094ac <__pow5mult+0x48>
 800948c:	2010      	movs	r0, #16
 800948e:	f7fd fef3 	bl	8007278 <malloc>
 8009492:	4602      	mov	r2, r0
 8009494:	61f8      	str	r0, [r7, #28]
 8009496:	b928      	cbnz	r0, 80094a4 <__pow5mult+0x40>
 8009498:	4b1d      	ldr	r3, [pc, #116]	@ (8009510 <__pow5mult+0xac>)
 800949a:	481e      	ldr	r0, [pc, #120]	@ (8009514 <__pow5mult+0xb0>)
 800949c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80094a0:	f000 fc58 	bl	8009d54 <__assert_func>
 80094a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094a8:	6004      	str	r4, [r0, #0]
 80094aa:	60c4      	str	r4, [r0, #12]
 80094ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80094b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094b4:	b94c      	cbnz	r4, 80094ca <__pow5mult+0x66>
 80094b6:	f240 2171 	movw	r1, #625	@ 0x271
 80094ba:	4638      	mov	r0, r7
 80094bc:	f7ff ff12 	bl	80092e4 <__i2b>
 80094c0:	2300      	movs	r3, #0
 80094c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80094c6:	4604      	mov	r4, r0
 80094c8:	6003      	str	r3, [r0, #0]
 80094ca:	f04f 0900 	mov.w	r9, #0
 80094ce:	07eb      	lsls	r3, r5, #31
 80094d0:	d50a      	bpl.n	80094e8 <__pow5mult+0x84>
 80094d2:	4631      	mov	r1, r6
 80094d4:	4622      	mov	r2, r4
 80094d6:	4638      	mov	r0, r7
 80094d8:	f7ff ff1a 	bl	8009310 <__multiply>
 80094dc:	4631      	mov	r1, r6
 80094de:	4680      	mov	r8, r0
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7ff fe4b 	bl	800917c <_Bfree>
 80094e6:	4646      	mov	r6, r8
 80094e8:	106d      	asrs	r5, r5, #1
 80094ea:	d00b      	beq.n	8009504 <__pow5mult+0xa0>
 80094ec:	6820      	ldr	r0, [r4, #0]
 80094ee:	b938      	cbnz	r0, 8009500 <__pow5mult+0x9c>
 80094f0:	4622      	mov	r2, r4
 80094f2:	4621      	mov	r1, r4
 80094f4:	4638      	mov	r0, r7
 80094f6:	f7ff ff0b 	bl	8009310 <__multiply>
 80094fa:	6020      	str	r0, [r4, #0]
 80094fc:	f8c0 9000 	str.w	r9, [r0]
 8009500:	4604      	mov	r4, r0
 8009502:	e7e4      	b.n	80094ce <__pow5mult+0x6a>
 8009504:	4630      	mov	r0, r6
 8009506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800950a:	bf00      	nop
 800950c:	0800a614 	.word	0x0800a614
 8009510:	0800a53a 	.word	0x0800a53a
 8009514:	0800a5ba 	.word	0x0800a5ba

08009518 <__lshift>:
 8009518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800951c:	460c      	mov	r4, r1
 800951e:	6849      	ldr	r1, [r1, #4]
 8009520:	6923      	ldr	r3, [r4, #16]
 8009522:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009526:	68a3      	ldr	r3, [r4, #8]
 8009528:	4607      	mov	r7, r0
 800952a:	4691      	mov	r9, r2
 800952c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009530:	f108 0601 	add.w	r6, r8, #1
 8009534:	42b3      	cmp	r3, r6
 8009536:	db0b      	blt.n	8009550 <__lshift+0x38>
 8009538:	4638      	mov	r0, r7
 800953a:	f7ff fddf 	bl	80090fc <_Balloc>
 800953e:	4605      	mov	r5, r0
 8009540:	b948      	cbnz	r0, 8009556 <__lshift+0x3e>
 8009542:	4602      	mov	r2, r0
 8009544:	4b28      	ldr	r3, [pc, #160]	@ (80095e8 <__lshift+0xd0>)
 8009546:	4829      	ldr	r0, [pc, #164]	@ (80095ec <__lshift+0xd4>)
 8009548:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800954c:	f000 fc02 	bl	8009d54 <__assert_func>
 8009550:	3101      	adds	r1, #1
 8009552:	005b      	lsls	r3, r3, #1
 8009554:	e7ee      	b.n	8009534 <__lshift+0x1c>
 8009556:	2300      	movs	r3, #0
 8009558:	f100 0114 	add.w	r1, r0, #20
 800955c:	f100 0210 	add.w	r2, r0, #16
 8009560:	4618      	mov	r0, r3
 8009562:	4553      	cmp	r3, sl
 8009564:	db33      	blt.n	80095ce <__lshift+0xb6>
 8009566:	6920      	ldr	r0, [r4, #16]
 8009568:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800956c:	f104 0314 	add.w	r3, r4, #20
 8009570:	f019 091f 	ands.w	r9, r9, #31
 8009574:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009578:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800957c:	d02b      	beq.n	80095d6 <__lshift+0xbe>
 800957e:	f1c9 0e20 	rsb	lr, r9, #32
 8009582:	468a      	mov	sl, r1
 8009584:	2200      	movs	r2, #0
 8009586:	6818      	ldr	r0, [r3, #0]
 8009588:	fa00 f009 	lsl.w	r0, r0, r9
 800958c:	4310      	orrs	r0, r2
 800958e:	f84a 0b04 	str.w	r0, [sl], #4
 8009592:	f853 2b04 	ldr.w	r2, [r3], #4
 8009596:	459c      	cmp	ip, r3
 8009598:	fa22 f20e 	lsr.w	r2, r2, lr
 800959c:	d8f3      	bhi.n	8009586 <__lshift+0x6e>
 800959e:	ebac 0304 	sub.w	r3, ip, r4
 80095a2:	3b15      	subs	r3, #21
 80095a4:	f023 0303 	bic.w	r3, r3, #3
 80095a8:	3304      	adds	r3, #4
 80095aa:	f104 0015 	add.w	r0, r4, #21
 80095ae:	4584      	cmp	ip, r0
 80095b0:	bf38      	it	cc
 80095b2:	2304      	movcc	r3, #4
 80095b4:	50ca      	str	r2, [r1, r3]
 80095b6:	b10a      	cbz	r2, 80095bc <__lshift+0xa4>
 80095b8:	f108 0602 	add.w	r6, r8, #2
 80095bc:	3e01      	subs	r6, #1
 80095be:	4638      	mov	r0, r7
 80095c0:	612e      	str	r6, [r5, #16]
 80095c2:	4621      	mov	r1, r4
 80095c4:	f7ff fdda 	bl	800917c <_Bfree>
 80095c8:	4628      	mov	r0, r5
 80095ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80095d2:	3301      	adds	r3, #1
 80095d4:	e7c5      	b.n	8009562 <__lshift+0x4a>
 80095d6:	3904      	subs	r1, #4
 80095d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80095e0:	459c      	cmp	ip, r3
 80095e2:	d8f9      	bhi.n	80095d8 <__lshift+0xc0>
 80095e4:	e7ea      	b.n	80095bc <__lshift+0xa4>
 80095e6:	bf00      	nop
 80095e8:	0800a5a9 	.word	0x0800a5a9
 80095ec:	0800a5ba 	.word	0x0800a5ba

080095f0 <__mcmp>:
 80095f0:	690a      	ldr	r2, [r1, #16]
 80095f2:	4603      	mov	r3, r0
 80095f4:	6900      	ldr	r0, [r0, #16]
 80095f6:	1a80      	subs	r0, r0, r2
 80095f8:	b530      	push	{r4, r5, lr}
 80095fa:	d10e      	bne.n	800961a <__mcmp+0x2a>
 80095fc:	3314      	adds	r3, #20
 80095fe:	3114      	adds	r1, #20
 8009600:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009604:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009608:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800960c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009610:	4295      	cmp	r5, r2
 8009612:	d003      	beq.n	800961c <__mcmp+0x2c>
 8009614:	d205      	bcs.n	8009622 <__mcmp+0x32>
 8009616:	f04f 30ff 	mov.w	r0, #4294967295
 800961a:	bd30      	pop	{r4, r5, pc}
 800961c:	42a3      	cmp	r3, r4
 800961e:	d3f3      	bcc.n	8009608 <__mcmp+0x18>
 8009620:	e7fb      	b.n	800961a <__mcmp+0x2a>
 8009622:	2001      	movs	r0, #1
 8009624:	e7f9      	b.n	800961a <__mcmp+0x2a>
	...

08009628 <__mdiff>:
 8009628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	4689      	mov	r9, r1
 800962e:	4606      	mov	r6, r0
 8009630:	4611      	mov	r1, r2
 8009632:	4648      	mov	r0, r9
 8009634:	4614      	mov	r4, r2
 8009636:	f7ff ffdb 	bl	80095f0 <__mcmp>
 800963a:	1e05      	subs	r5, r0, #0
 800963c:	d112      	bne.n	8009664 <__mdiff+0x3c>
 800963e:	4629      	mov	r1, r5
 8009640:	4630      	mov	r0, r6
 8009642:	f7ff fd5b 	bl	80090fc <_Balloc>
 8009646:	4602      	mov	r2, r0
 8009648:	b928      	cbnz	r0, 8009656 <__mdiff+0x2e>
 800964a:	4b3f      	ldr	r3, [pc, #252]	@ (8009748 <__mdiff+0x120>)
 800964c:	f240 2137 	movw	r1, #567	@ 0x237
 8009650:	483e      	ldr	r0, [pc, #248]	@ (800974c <__mdiff+0x124>)
 8009652:	f000 fb7f 	bl	8009d54 <__assert_func>
 8009656:	2301      	movs	r3, #1
 8009658:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800965c:	4610      	mov	r0, r2
 800965e:	b003      	add	sp, #12
 8009660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009664:	bfbc      	itt	lt
 8009666:	464b      	movlt	r3, r9
 8009668:	46a1      	movlt	r9, r4
 800966a:	4630      	mov	r0, r6
 800966c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009670:	bfba      	itte	lt
 8009672:	461c      	movlt	r4, r3
 8009674:	2501      	movlt	r5, #1
 8009676:	2500      	movge	r5, #0
 8009678:	f7ff fd40 	bl	80090fc <_Balloc>
 800967c:	4602      	mov	r2, r0
 800967e:	b918      	cbnz	r0, 8009688 <__mdiff+0x60>
 8009680:	4b31      	ldr	r3, [pc, #196]	@ (8009748 <__mdiff+0x120>)
 8009682:	f240 2145 	movw	r1, #581	@ 0x245
 8009686:	e7e3      	b.n	8009650 <__mdiff+0x28>
 8009688:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800968c:	6926      	ldr	r6, [r4, #16]
 800968e:	60c5      	str	r5, [r0, #12]
 8009690:	f109 0310 	add.w	r3, r9, #16
 8009694:	f109 0514 	add.w	r5, r9, #20
 8009698:	f104 0e14 	add.w	lr, r4, #20
 800969c:	f100 0b14 	add.w	fp, r0, #20
 80096a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80096a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80096a8:	9301      	str	r3, [sp, #4]
 80096aa:	46d9      	mov	r9, fp
 80096ac:	f04f 0c00 	mov.w	ip, #0
 80096b0:	9b01      	ldr	r3, [sp, #4]
 80096b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80096b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80096ba:	9301      	str	r3, [sp, #4]
 80096bc:	fa1f f38a 	uxth.w	r3, sl
 80096c0:	4619      	mov	r1, r3
 80096c2:	b283      	uxth	r3, r0
 80096c4:	1acb      	subs	r3, r1, r3
 80096c6:	0c00      	lsrs	r0, r0, #16
 80096c8:	4463      	add	r3, ip
 80096ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80096ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096d8:	4576      	cmp	r6, lr
 80096da:	f849 3b04 	str.w	r3, [r9], #4
 80096de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096e2:	d8e5      	bhi.n	80096b0 <__mdiff+0x88>
 80096e4:	1b33      	subs	r3, r6, r4
 80096e6:	3b15      	subs	r3, #21
 80096e8:	f023 0303 	bic.w	r3, r3, #3
 80096ec:	3415      	adds	r4, #21
 80096ee:	3304      	adds	r3, #4
 80096f0:	42a6      	cmp	r6, r4
 80096f2:	bf38      	it	cc
 80096f4:	2304      	movcc	r3, #4
 80096f6:	441d      	add	r5, r3
 80096f8:	445b      	add	r3, fp
 80096fa:	461e      	mov	r6, r3
 80096fc:	462c      	mov	r4, r5
 80096fe:	4544      	cmp	r4, r8
 8009700:	d30e      	bcc.n	8009720 <__mdiff+0xf8>
 8009702:	f108 0103 	add.w	r1, r8, #3
 8009706:	1b49      	subs	r1, r1, r5
 8009708:	f021 0103 	bic.w	r1, r1, #3
 800970c:	3d03      	subs	r5, #3
 800970e:	45a8      	cmp	r8, r5
 8009710:	bf38      	it	cc
 8009712:	2100      	movcc	r1, #0
 8009714:	440b      	add	r3, r1
 8009716:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800971a:	b191      	cbz	r1, 8009742 <__mdiff+0x11a>
 800971c:	6117      	str	r7, [r2, #16]
 800971e:	e79d      	b.n	800965c <__mdiff+0x34>
 8009720:	f854 1b04 	ldr.w	r1, [r4], #4
 8009724:	46e6      	mov	lr, ip
 8009726:	0c08      	lsrs	r0, r1, #16
 8009728:	fa1c fc81 	uxtah	ip, ip, r1
 800972c:	4471      	add	r1, lr
 800972e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009732:	b289      	uxth	r1, r1
 8009734:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009738:	f846 1b04 	str.w	r1, [r6], #4
 800973c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009740:	e7dd      	b.n	80096fe <__mdiff+0xd6>
 8009742:	3f01      	subs	r7, #1
 8009744:	e7e7      	b.n	8009716 <__mdiff+0xee>
 8009746:	bf00      	nop
 8009748:	0800a5a9 	.word	0x0800a5a9
 800974c:	0800a5ba 	.word	0x0800a5ba

08009750 <__d2b>:
 8009750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009754:	460f      	mov	r7, r1
 8009756:	2101      	movs	r1, #1
 8009758:	ec59 8b10 	vmov	r8, r9, d0
 800975c:	4616      	mov	r6, r2
 800975e:	f7ff fccd 	bl	80090fc <_Balloc>
 8009762:	4604      	mov	r4, r0
 8009764:	b930      	cbnz	r0, 8009774 <__d2b+0x24>
 8009766:	4602      	mov	r2, r0
 8009768:	4b23      	ldr	r3, [pc, #140]	@ (80097f8 <__d2b+0xa8>)
 800976a:	4824      	ldr	r0, [pc, #144]	@ (80097fc <__d2b+0xac>)
 800976c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009770:	f000 faf0 	bl	8009d54 <__assert_func>
 8009774:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009778:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800977c:	b10d      	cbz	r5, 8009782 <__d2b+0x32>
 800977e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	f1b8 0300 	subs.w	r3, r8, #0
 8009788:	d023      	beq.n	80097d2 <__d2b+0x82>
 800978a:	4668      	mov	r0, sp
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	f7ff fd7c 	bl	800928a <__lo0bits>
 8009792:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009796:	b1d0      	cbz	r0, 80097ce <__d2b+0x7e>
 8009798:	f1c0 0320 	rsb	r3, r0, #32
 800979c:	fa02 f303 	lsl.w	r3, r2, r3
 80097a0:	430b      	orrs	r3, r1
 80097a2:	40c2      	lsrs	r2, r0
 80097a4:	6163      	str	r3, [r4, #20]
 80097a6:	9201      	str	r2, [sp, #4]
 80097a8:	9b01      	ldr	r3, [sp, #4]
 80097aa:	61a3      	str	r3, [r4, #24]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	bf0c      	ite	eq
 80097b0:	2201      	moveq	r2, #1
 80097b2:	2202      	movne	r2, #2
 80097b4:	6122      	str	r2, [r4, #16]
 80097b6:	b1a5      	cbz	r5, 80097e2 <__d2b+0x92>
 80097b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80097bc:	4405      	add	r5, r0
 80097be:	603d      	str	r5, [r7, #0]
 80097c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80097c4:	6030      	str	r0, [r6, #0]
 80097c6:	4620      	mov	r0, r4
 80097c8:	b003      	add	sp, #12
 80097ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097ce:	6161      	str	r1, [r4, #20]
 80097d0:	e7ea      	b.n	80097a8 <__d2b+0x58>
 80097d2:	a801      	add	r0, sp, #4
 80097d4:	f7ff fd59 	bl	800928a <__lo0bits>
 80097d8:	9b01      	ldr	r3, [sp, #4]
 80097da:	6163      	str	r3, [r4, #20]
 80097dc:	3020      	adds	r0, #32
 80097de:	2201      	movs	r2, #1
 80097e0:	e7e8      	b.n	80097b4 <__d2b+0x64>
 80097e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80097ea:	6038      	str	r0, [r7, #0]
 80097ec:	6918      	ldr	r0, [r3, #16]
 80097ee:	f7ff fd2d 	bl	800924c <__hi0bits>
 80097f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097f6:	e7e5      	b.n	80097c4 <__d2b+0x74>
 80097f8:	0800a5a9 	.word	0x0800a5a9
 80097fc:	0800a5ba 	.word	0x0800a5ba

08009800 <_malloc_usable_size_r>:
 8009800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009804:	1f18      	subs	r0, r3, #4
 8009806:	2b00      	cmp	r3, #0
 8009808:	bfbc      	itt	lt
 800980a:	580b      	ldrlt	r3, [r1, r0]
 800980c:	18c0      	addlt	r0, r0, r3
 800980e:	4770      	bx	lr

08009810 <__ssputs_r>:
 8009810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009814:	688e      	ldr	r6, [r1, #8]
 8009816:	461f      	mov	r7, r3
 8009818:	42be      	cmp	r6, r7
 800981a:	680b      	ldr	r3, [r1, #0]
 800981c:	4682      	mov	sl, r0
 800981e:	460c      	mov	r4, r1
 8009820:	4690      	mov	r8, r2
 8009822:	d82d      	bhi.n	8009880 <__ssputs_r+0x70>
 8009824:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009828:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800982c:	d026      	beq.n	800987c <__ssputs_r+0x6c>
 800982e:	6965      	ldr	r5, [r4, #20]
 8009830:	6909      	ldr	r1, [r1, #16]
 8009832:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009836:	eba3 0901 	sub.w	r9, r3, r1
 800983a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800983e:	1c7b      	adds	r3, r7, #1
 8009840:	444b      	add	r3, r9
 8009842:	106d      	asrs	r5, r5, #1
 8009844:	429d      	cmp	r5, r3
 8009846:	bf38      	it	cc
 8009848:	461d      	movcc	r5, r3
 800984a:	0553      	lsls	r3, r2, #21
 800984c:	d527      	bpl.n	800989e <__ssputs_r+0x8e>
 800984e:	4629      	mov	r1, r5
 8009850:	f7fd fd44 	bl	80072dc <_malloc_r>
 8009854:	4606      	mov	r6, r0
 8009856:	b360      	cbz	r0, 80098b2 <__ssputs_r+0xa2>
 8009858:	6921      	ldr	r1, [r4, #16]
 800985a:	464a      	mov	r2, r9
 800985c:	f7fe fda9 	bl	80083b2 <memcpy>
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800986a:	81a3      	strh	r3, [r4, #12]
 800986c:	6126      	str	r6, [r4, #16]
 800986e:	6165      	str	r5, [r4, #20]
 8009870:	444e      	add	r6, r9
 8009872:	eba5 0509 	sub.w	r5, r5, r9
 8009876:	6026      	str	r6, [r4, #0]
 8009878:	60a5      	str	r5, [r4, #8]
 800987a:	463e      	mov	r6, r7
 800987c:	42be      	cmp	r6, r7
 800987e:	d900      	bls.n	8009882 <__ssputs_r+0x72>
 8009880:	463e      	mov	r6, r7
 8009882:	6820      	ldr	r0, [r4, #0]
 8009884:	4632      	mov	r2, r6
 8009886:	4641      	mov	r1, r8
 8009888:	f000 fa28 	bl	8009cdc <memmove>
 800988c:	68a3      	ldr	r3, [r4, #8]
 800988e:	1b9b      	subs	r3, r3, r6
 8009890:	60a3      	str	r3, [r4, #8]
 8009892:	6823      	ldr	r3, [r4, #0]
 8009894:	4433      	add	r3, r6
 8009896:	6023      	str	r3, [r4, #0]
 8009898:	2000      	movs	r0, #0
 800989a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800989e:	462a      	mov	r2, r5
 80098a0:	f7fd fdb0 	bl	8007404 <_realloc_r>
 80098a4:	4606      	mov	r6, r0
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d1e0      	bne.n	800986c <__ssputs_r+0x5c>
 80098aa:	6921      	ldr	r1, [r4, #16]
 80098ac:	4650      	mov	r0, sl
 80098ae:	f7ff fbdb 	bl	8009068 <_free_r>
 80098b2:	230c      	movs	r3, #12
 80098b4:	f8ca 3000 	str.w	r3, [sl]
 80098b8:	89a3      	ldrh	r3, [r4, #12]
 80098ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098be:	81a3      	strh	r3, [r4, #12]
 80098c0:	f04f 30ff 	mov.w	r0, #4294967295
 80098c4:	e7e9      	b.n	800989a <__ssputs_r+0x8a>
	...

080098c8 <_svfiprintf_r>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	4698      	mov	r8, r3
 80098ce:	898b      	ldrh	r3, [r1, #12]
 80098d0:	061b      	lsls	r3, r3, #24
 80098d2:	b09d      	sub	sp, #116	@ 0x74
 80098d4:	4607      	mov	r7, r0
 80098d6:	460d      	mov	r5, r1
 80098d8:	4614      	mov	r4, r2
 80098da:	d510      	bpl.n	80098fe <_svfiprintf_r+0x36>
 80098dc:	690b      	ldr	r3, [r1, #16]
 80098de:	b973      	cbnz	r3, 80098fe <_svfiprintf_r+0x36>
 80098e0:	2140      	movs	r1, #64	@ 0x40
 80098e2:	f7fd fcfb 	bl	80072dc <_malloc_r>
 80098e6:	6028      	str	r0, [r5, #0]
 80098e8:	6128      	str	r0, [r5, #16]
 80098ea:	b930      	cbnz	r0, 80098fa <_svfiprintf_r+0x32>
 80098ec:	230c      	movs	r3, #12
 80098ee:	603b      	str	r3, [r7, #0]
 80098f0:	f04f 30ff 	mov.w	r0, #4294967295
 80098f4:	b01d      	add	sp, #116	@ 0x74
 80098f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fa:	2340      	movs	r3, #64	@ 0x40
 80098fc:	616b      	str	r3, [r5, #20]
 80098fe:	2300      	movs	r3, #0
 8009900:	9309      	str	r3, [sp, #36]	@ 0x24
 8009902:	2320      	movs	r3, #32
 8009904:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009908:	f8cd 800c 	str.w	r8, [sp, #12]
 800990c:	2330      	movs	r3, #48	@ 0x30
 800990e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009aac <_svfiprintf_r+0x1e4>
 8009912:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009916:	f04f 0901 	mov.w	r9, #1
 800991a:	4623      	mov	r3, r4
 800991c:	469a      	mov	sl, r3
 800991e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009922:	b10a      	cbz	r2, 8009928 <_svfiprintf_r+0x60>
 8009924:	2a25      	cmp	r2, #37	@ 0x25
 8009926:	d1f9      	bne.n	800991c <_svfiprintf_r+0x54>
 8009928:	ebba 0b04 	subs.w	fp, sl, r4
 800992c:	d00b      	beq.n	8009946 <_svfiprintf_r+0x7e>
 800992e:	465b      	mov	r3, fp
 8009930:	4622      	mov	r2, r4
 8009932:	4629      	mov	r1, r5
 8009934:	4638      	mov	r0, r7
 8009936:	f7ff ff6b 	bl	8009810 <__ssputs_r>
 800993a:	3001      	adds	r0, #1
 800993c:	f000 80a7 	beq.w	8009a8e <_svfiprintf_r+0x1c6>
 8009940:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009942:	445a      	add	r2, fp
 8009944:	9209      	str	r2, [sp, #36]	@ 0x24
 8009946:	f89a 3000 	ldrb.w	r3, [sl]
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 809f 	beq.w	8009a8e <_svfiprintf_r+0x1c6>
 8009950:	2300      	movs	r3, #0
 8009952:	f04f 32ff 	mov.w	r2, #4294967295
 8009956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800995a:	f10a 0a01 	add.w	sl, sl, #1
 800995e:	9304      	str	r3, [sp, #16]
 8009960:	9307      	str	r3, [sp, #28]
 8009962:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009966:	931a      	str	r3, [sp, #104]	@ 0x68
 8009968:	4654      	mov	r4, sl
 800996a:	2205      	movs	r2, #5
 800996c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009970:	484e      	ldr	r0, [pc, #312]	@ (8009aac <_svfiprintf_r+0x1e4>)
 8009972:	f7f6 fc3d 	bl	80001f0 <memchr>
 8009976:	9a04      	ldr	r2, [sp, #16]
 8009978:	b9d8      	cbnz	r0, 80099b2 <_svfiprintf_r+0xea>
 800997a:	06d0      	lsls	r0, r2, #27
 800997c:	bf44      	itt	mi
 800997e:	2320      	movmi	r3, #32
 8009980:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009984:	0711      	lsls	r1, r2, #28
 8009986:	bf44      	itt	mi
 8009988:	232b      	movmi	r3, #43	@ 0x2b
 800998a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800998e:	f89a 3000 	ldrb.w	r3, [sl]
 8009992:	2b2a      	cmp	r3, #42	@ 0x2a
 8009994:	d015      	beq.n	80099c2 <_svfiprintf_r+0xfa>
 8009996:	9a07      	ldr	r2, [sp, #28]
 8009998:	4654      	mov	r4, sl
 800999a:	2000      	movs	r0, #0
 800999c:	f04f 0c0a 	mov.w	ip, #10
 80099a0:	4621      	mov	r1, r4
 80099a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099a6:	3b30      	subs	r3, #48	@ 0x30
 80099a8:	2b09      	cmp	r3, #9
 80099aa:	d94b      	bls.n	8009a44 <_svfiprintf_r+0x17c>
 80099ac:	b1b0      	cbz	r0, 80099dc <_svfiprintf_r+0x114>
 80099ae:	9207      	str	r2, [sp, #28]
 80099b0:	e014      	b.n	80099dc <_svfiprintf_r+0x114>
 80099b2:	eba0 0308 	sub.w	r3, r0, r8
 80099b6:	fa09 f303 	lsl.w	r3, r9, r3
 80099ba:	4313      	orrs	r3, r2
 80099bc:	9304      	str	r3, [sp, #16]
 80099be:	46a2      	mov	sl, r4
 80099c0:	e7d2      	b.n	8009968 <_svfiprintf_r+0xa0>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	1d19      	adds	r1, r3, #4
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	9103      	str	r1, [sp, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bfbb      	ittet	lt
 80099ce:	425b      	neglt	r3, r3
 80099d0:	f042 0202 	orrlt.w	r2, r2, #2
 80099d4:	9307      	strge	r3, [sp, #28]
 80099d6:	9307      	strlt	r3, [sp, #28]
 80099d8:	bfb8      	it	lt
 80099da:	9204      	strlt	r2, [sp, #16]
 80099dc:	7823      	ldrb	r3, [r4, #0]
 80099de:	2b2e      	cmp	r3, #46	@ 0x2e
 80099e0:	d10a      	bne.n	80099f8 <_svfiprintf_r+0x130>
 80099e2:	7863      	ldrb	r3, [r4, #1]
 80099e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80099e6:	d132      	bne.n	8009a4e <_svfiprintf_r+0x186>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	1d1a      	adds	r2, r3, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	9203      	str	r2, [sp, #12]
 80099f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099f4:	3402      	adds	r4, #2
 80099f6:	9305      	str	r3, [sp, #20]
 80099f8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009abc <_svfiprintf_r+0x1f4>
 80099fc:	7821      	ldrb	r1, [r4, #0]
 80099fe:	2203      	movs	r2, #3
 8009a00:	4650      	mov	r0, sl
 8009a02:	f7f6 fbf5 	bl	80001f0 <memchr>
 8009a06:	b138      	cbz	r0, 8009a18 <_svfiprintf_r+0x150>
 8009a08:	9b04      	ldr	r3, [sp, #16]
 8009a0a:	eba0 000a 	sub.w	r0, r0, sl
 8009a0e:	2240      	movs	r2, #64	@ 0x40
 8009a10:	4082      	lsls	r2, r0
 8009a12:	4313      	orrs	r3, r2
 8009a14:	3401      	adds	r4, #1
 8009a16:	9304      	str	r3, [sp, #16]
 8009a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a1c:	4824      	ldr	r0, [pc, #144]	@ (8009ab0 <_svfiprintf_r+0x1e8>)
 8009a1e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a22:	2206      	movs	r2, #6
 8009a24:	f7f6 fbe4 	bl	80001f0 <memchr>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d036      	beq.n	8009a9a <_svfiprintf_r+0x1d2>
 8009a2c:	4b21      	ldr	r3, [pc, #132]	@ (8009ab4 <_svfiprintf_r+0x1ec>)
 8009a2e:	bb1b      	cbnz	r3, 8009a78 <_svfiprintf_r+0x1b0>
 8009a30:	9b03      	ldr	r3, [sp, #12]
 8009a32:	3307      	adds	r3, #7
 8009a34:	f023 0307 	bic.w	r3, r3, #7
 8009a38:	3308      	adds	r3, #8
 8009a3a:	9303      	str	r3, [sp, #12]
 8009a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a3e:	4433      	add	r3, r6
 8009a40:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a42:	e76a      	b.n	800991a <_svfiprintf_r+0x52>
 8009a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a48:	460c      	mov	r4, r1
 8009a4a:	2001      	movs	r0, #1
 8009a4c:	e7a8      	b.n	80099a0 <_svfiprintf_r+0xd8>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	3401      	adds	r4, #1
 8009a52:	9305      	str	r3, [sp, #20]
 8009a54:	4619      	mov	r1, r3
 8009a56:	f04f 0c0a 	mov.w	ip, #10
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a60:	3a30      	subs	r2, #48	@ 0x30
 8009a62:	2a09      	cmp	r2, #9
 8009a64:	d903      	bls.n	8009a6e <_svfiprintf_r+0x1a6>
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0c6      	beq.n	80099f8 <_svfiprintf_r+0x130>
 8009a6a:	9105      	str	r1, [sp, #20]
 8009a6c:	e7c4      	b.n	80099f8 <_svfiprintf_r+0x130>
 8009a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a72:	4604      	mov	r4, r0
 8009a74:	2301      	movs	r3, #1
 8009a76:	e7f0      	b.n	8009a5a <_svfiprintf_r+0x192>
 8009a78:	ab03      	add	r3, sp, #12
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	462a      	mov	r2, r5
 8009a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ab8 <_svfiprintf_r+0x1f0>)
 8009a80:	a904      	add	r1, sp, #16
 8009a82:	4638      	mov	r0, r7
 8009a84:	f7fd fe10 	bl	80076a8 <_printf_float>
 8009a88:	1c42      	adds	r2, r0, #1
 8009a8a:	4606      	mov	r6, r0
 8009a8c:	d1d6      	bne.n	8009a3c <_svfiprintf_r+0x174>
 8009a8e:	89ab      	ldrh	r3, [r5, #12]
 8009a90:	065b      	lsls	r3, r3, #25
 8009a92:	f53f af2d 	bmi.w	80098f0 <_svfiprintf_r+0x28>
 8009a96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a98:	e72c      	b.n	80098f4 <_svfiprintf_r+0x2c>
 8009a9a:	ab03      	add	r3, sp, #12
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	462a      	mov	r2, r5
 8009aa0:	4b05      	ldr	r3, [pc, #20]	@ (8009ab8 <_svfiprintf_r+0x1f0>)
 8009aa2:	a904      	add	r1, sp, #16
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	f7fe f897 	bl	8007bd8 <_printf_i>
 8009aaa:	e7ed      	b.n	8009a88 <_svfiprintf_r+0x1c0>
 8009aac:	0800a710 	.word	0x0800a710
 8009ab0:	0800a71a 	.word	0x0800a71a
 8009ab4:	080076a9 	.word	0x080076a9
 8009ab8:	08009811 	.word	0x08009811
 8009abc:	0800a716 	.word	0x0800a716

08009ac0 <__sflush_r>:
 8009ac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac8:	0716      	lsls	r6, r2, #28
 8009aca:	4605      	mov	r5, r0
 8009acc:	460c      	mov	r4, r1
 8009ace:	d454      	bmi.n	8009b7a <__sflush_r+0xba>
 8009ad0:	684b      	ldr	r3, [r1, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	dc02      	bgt.n	8009adc <__sflush_r+0x1c>
 8009ad6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dd48      	ble.n	8009b6e <__sflush_r+0xae>
 8009adc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ade:	2e00      	cmp	r6, #0
 8009ae0:	d045      	beq.n	8009b6e <__sflush_r+0xae>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ae8:	682f      	ldr	r7, [r5, #0]
 8009aea:	6a21      	ldr	r1, [r4, #32]
 8009aec:	602b      	str	r3, [r5, #0]
 8009aee:	d030      	beq.n	8009b52 <__sflush_r+0x92>
 8009af0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	0759      	lsls	r1, r3, #29
 8009af6:	d505      	bpl.n	8009b04 <__sflush_r+0x44>
 8009af8:	6863      	ldr	r3, [r4, #4]
 8009afa:	1ad2      	subs	r2, r2, r3
 8009afc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009afe:	b10b      	cbz	r3, 8009b04 <__sflush_r+0x44>
 8009b00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b02:	1ad2      	subs	r2, r2, r3
 8009b04:	2300      	movs	r3, #0
 8009b06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b08:	6a21      	ldr	r1, [r4, #32]
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	47b0      	blx	r6
 8009b0e:	1c43      	adds	r3, r0, #1
 8009b10:	89a3      	ldrh	r3, [r4, #12]
 8009b12:	d106      	bne.n	8009b22 <__sflush_r+0x62>
 8009b14:	6829      	ldr	r1, [r5, #0]
 8009b16:	291d      	cmp	r1, #29
 8009b18:	d82b      	bhi.n	8009b72 <__sflush_r+0xb2>
 8009b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8009bc4 <__sflush_r+0x104>)
 8009b1c:	410a      	asrs	r2, r1
 8009b1e:	07d6      	lsls	r6, r2, #31
 8009b20:	d427      	bmi.n	8009b72 <__sflush_r+0xb2>
 8009b22:	2200      	movs	r2, #0
 8009b24:	6062      	str	r2, [r4, #4]
 8009b26:	04d9      	lsls	r1, r3, #19
 8009b28:	6922      	ldr	r2, [r4, #16]
 8009b2a:	6022      	str	r2, [r4, #0]
 8009b2c:	d504      	bpl.n	8009b38 <__sflush_r+0x78>
 8009b2e:	1c42      	adds	r2, r0, #1
 8009b30:	d101      	bne.n	8009b36 <__sflush_r+0x76>
 8009b32:	682b      	ldr	r3, [r5, #0]
 8009b34:	b903      	cbnz	r3, 8009b38 <__sflush_r+0x78>
 8009b36:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b3a:	602f      	str	r7, [r5, #0]
 8009b3c:	b1b9      	cbz	r1, 8009b6e <__sflush_r+0xae>
 8009b3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b42:	4299      	cmp	r1, r3
 8009b44:	d002      	beq.n	8009b4c <__sflush_r+0x8c>
 8009b46:	4628      	mov	r0, r5
 8009b48:	f7ff fa8e 	bl	8009068 <_free_r>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b50:	e00d      	b.n	8009b6e <__sflush_r+0xae>
 8009b52:	2301      	movs	r3, #1
 8009b54:	4628      	mov	r0, r5
 8009b56:	47b0      	blx	r6
 8009b58:	4602      	mov	r2, r0
 8009b5a:	1c50      	adds	r0, r2, #1
 8009b5c:	d1c9      	bne.n	8009af2 <__sflush_r+0x32>
 8009b5e:	682b      	ldr	r3, [r5, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d0c6      	beq.n	8009af2 <__sflush_r+0x32>
 8009b64:	2b1d      	cmp	r3, #29
 8009b66:	d001      	beq.n	8009b6c <__sflush_r+0xac>
 8009b68:	2b16      	cmp	r3, #22
 8009b6a:	d11e      	bne.n	8009baa <__sflush_r+0xea>
 8009b6c:	602f      	str	r7, [r5, #0]
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e022      	b.n	8009bb8 <__sflush_r+0xf8>
 8009b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b76:	b21b      	sxth	r3, r3
 8009b78:	e01b      	b.n	8009bb2 <__sflush_r+0xf2>
 8009b7a:	690f      	ldr	r7, [r1, #16]
 8009b7c:	2f00      	cmp	r7, #0
 8009b7e:	d0f6      	beq.n	8009b6e <__sflush_r+0xae>
 8009b80:	0793      	lsls	r3, r2, #30
 8009b82:	680e      	ldr	r6, [r1, #0]
 8009b84:	bf08      	it	eq
 8009b86:	694b      	ldreq	r3, [r1, #20]
 8009b88:	600f      	str	r7, [r1, #0]
 8009b8a:	bf18      	it	ne
 8009b8c:	2300      	movne	r3, #0
 8009b8e:	eba6 0807 	sub.w	r8, r6, r7
 8009b92:	608b      	str	r3, [r1, #8]
 8009b94:	f1b8 0f00 	cmp.w	r8, #0
 8009b98:	dde9      	ble.n	8009b6e <__sflush_r+0xae>
 8009b9a:	6a21      	ldr	r1, [r4, #32]
 8009b9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b9e:	4643      	mov	r3, r8
 8009ba0:	463a      	mov	r2, r7
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b0      	blx	r6
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	dc08      	bgt.n	8009bbc <__sflush_r+0xfc>
 8009baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bb2:	81a3      	strh	r3, [r4, #12]
 8009bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bbc:	4407      	add	r7, r0
 8009bbe:	eba8 0800 	sub.w	r8, r8, r0
 8009bc2:	e7e7      	b.n	8009b94 <__sflush_r+0xd4>
 8009bc4:	dfbffffe 	.word	0xdfbffffe

08009bc8 <_fflush_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	690b      	ldr	r3, [r1, #16]
 8009bcc:	4605      	mov	r5, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	b913      	cbnz	r3, 8009bd8 <_fflush_r+0x10>
 8009bd2:	2500      	movs	r5, #0
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	bd38      	pop	{r3, r4, r5, pc}
 8009bd8:	b118      	cbz	r0, 8009be2 <_fflush_r+0x1a>
 8009bda:	6a03      	ldr	r3, [r0, #32]
 8009bdc:	b90b      	cbnz	r3, 8009be2 <_fflush_r+0x1a>
 8009bde:	f7fe f9a7 	bl	8007f30 <__sinit>
 8009be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d0f3      	beq.n	8009bd2 <_fflush_r+0xa>
 8009bea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bec:	07d0      	lsls	r0, r2, #31
 8009bee:	d404      	bmi.n	8009bfa <_fflush_r+0x32>
 8009bf0:	0599      	lsls	r1, r3, #22
 8009bf2:	d402      	bmi.n	8009bfa <_fflush_r+0x32>
 8009bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bf6:	f7fe fbda 	bl	80083ae <__retarget_lock_acquire_recursive>
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	f7ff ff5f 	bl	8009ac0 <__sflush_r>
 8009c02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c04:	07da      	lsls	r2, r3, #31
 8009c06:	4605      	mov	r5, r0
 8009c08:	d4e4      	bmi.n	8009bd4 <_fflush_r+0xc>
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	059b      	lsls	r3, r3, #22
 8009c0e:	d4e1      	bmi.n	8009bd4 <_fflush_r+0xc>
 8009c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c12:	f7fe fbcd 	bl	80083b0 <__retarget_lock_release_recursive>
 8009c16:	e7dd      	b.n	8009bd4 <_fflush_r+0xc>

08009c18 <__swhatbuf_r>:
 8009c18:	b570      	push	{r4, r5, r6, lr}
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c20:	2900      	cmp	r1, #0
 8009c22:	b096      	sub	sp, #88	@ 0x58
 8009c24:	4615      	mov	r5, r2
 8009c26:	461e      	mov	r6, r3
 8009c28:	da0d      	bge.n	8009c46 <__swhatbuf_r+0x2e>
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c30:	f04f 0100 	mov.w	r1, #0
 8009c34:	bf14      	ite	ne
 8009c36:	2340      	movne	r3, #64	@ 0x40
 8009c38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	6031      	str	r1, [r6, #0]
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	b016      	add	sp, #88	@ 0x58
 8009c44:	bd70      	pop	{r4, r5, r6, pc}
 8009c46:	466a      	mov	r2, sp
 8009c48:	f000 f862 	bl	8009d10 <_fstat_r>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	dbec      	blt.n	8009c2a <__swhatbuf_r+0x12>
 8009c50:	9901      	ldr	r1, [sp, #4]
 8009c52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c5a:	4259      	negs	r1, r3
 8009c5c:	4159      	adcs	r1, r3
 8009c5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c62:	e7eb      	b.n	8009c3c <__swhatbuf_r+0x24>

08009c64 <__smakebuf_r>:
 8009c64:	898b      	ldrh	r3, [r1, #12]
 8009c66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c68:	079d      	lsls	r5, r3, #30
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	d507      	bpl.n	8009c80 <__smakebuf_r+0x1c>
 8009c70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	6123      	str	r3, [r4, #16]
 8009c78:	2301      	movs	r3, #1
 8009c7a:	6163      	str	r3, [r4, #20]
 8009c7c:	b003      	add	sp, #12
 8009c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c80:	ab01      	add	r3, sp, #4
 8009c82:	466a      	mov	r2, sp
 8009c84:	f7ff ffc8 	bl	8009c18 <__swhatbuf_r>
 8009c88:	9f00      	ldr	r7, [sp, #0]
 8009c8a:	4605      	mov	r5, r0
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f7fd fb24 	bl	80072dc <_malloc_r>
 8009c94:	b948      	cbnz	r0, 8009caa <__smakebuf_r+0x46>
 8009c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c9a:	059a      	lsls	r2, r3, #22
 8009c9c:	d4ee      	bmi.n	8009c7c <__smakebuf_r+0x18>
 8009c9e:	f023 0303 	bic.w	r3, r3, #3
 8009ca2:	f043 0302 	orr.w	r3, r3, #2
 8009ca6:	81a3      	strh	r3, [r4, #12]
 8009ca8:	e7e2      	b.n	8009c70 <__smakebuf_r+0xc>
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	6020      	str	r0, [r4, #0]
 8009cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cb2:	81a3      	strh	r3, [r4, #12]
 8009cb4:	9b01      	ldr	r3, [sp, #4]
 8009cb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009cba:	b15b      	cbz	r3, 8009cd4 <__smakebuf_r+0x70>
 8009cbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f000 f837 	bl	8009d34 <_isatty_r>
 8009cc6:	b128      	cbz	r0, 8009cd4 <__smakebuf_r+0x70>
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	f023 0303 	bic.w	r3, r3, #3
 8009cce:	f043 0301 	orr.w	r3, r3, #1
 8009cd2:	81a3      	strh	r3, [r4, #12]
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	431d      	orrs	r5, r3
 8009cd8:	81a5      	strh	r5, [r4, #12]
 8009cda:	e7cf      	b.n	8009c7c <__smakebuf_r+0x18>

08009cdc <memmove>:
 8009cdc:	4288      	cmp	r0, r1
 8009cde:	b510      	push	{r4, lr}
 8009ce0:	eb01 0402 	add.w	r4, r1, r2
 8009ce4:	d902      	bls.n	8009cec <memmove+0x10>
 8009ce6:	4284      	cmp	r4, r0
 8009ce8:	4623      	mov	r3, r4
 8009cea:	d807      	bhi.n	8009cfc <memmove+0x20>
 8009cec:	1e43      	subs	r3, r0, #1
 8009cee:	42a1      	cmp	r1, r4
 8009cf0:	d008      	beq.n	8009d04 <memmove+0x28>
 8009cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cfa:	e7f8      	b.n	8009cee <memmove+0x12>
 8009cfc:	4402      	add	r2, r0
 8009cfe:	4601      	mov	r1, r0
 8009d00:	428a      	cmp	r2, r1
 8009d02:	d100      	bne.n	8009d06 <memmove+0x2a>
 8009d04:	bd10      	pop	{r4, pc}
 8009d06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d0e:	e7f7      	b.n	8009d00 <memmove+0x24>

08009d10 <_fstat_r>:
 8009d10:	b538      	push	{r3, r4, r5, lr}
 8009d12:	4d07      	ldr	r5, [pc, #28]	@ (8009d30 <_fstat_r+0x20>)
 8009d14:	2300      	movs	r3, #0
 8009d16:	4604      	mov	r4, r0
 8009d18:	4608      	mov	r0, r1
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	602b      	str	r3, [r5, #0]
 8009d1e:	f7f7 fc71 	bl	8001604 <_fstat>
 8009d22:	1c43      	adds	r3, r0, #1
 8009d24:	d102      	bne.n	8009d2c <_fstat_r+0x1c>
 8009d26:	682b      	ldr	r3, [r5, #0]
 8009d28:	b103      	cbz	r3, 8009d2c <_fstat_r+0x1c>
 8009d2a:	6023      	str	r3, [r4, #0]
 8009d2c:	bd38      	pop	{r3, r4, r5, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000c90 	.word	0x20000c90

08009d34 <_isatty_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4d06      	ldr	r5, [pc, #24]	@ (8009d50 <_isatty_r+0x1c>)
 8009d38:	2300      	movs	r3, #0
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	602b      	str	r3, [r5, #0]
 8009d40:	f7f7 fc70 	bl	8001624 <_isatty>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d102      	bne.n	8009d4e <_isatty_r+0x1a>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	b103      	cbz	r3, 8009d4e <_isatty_r+0x1a>
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	bd38      	pop	{r3, r4, r5, pc}
 8009d50:	20000c90 	.word	0x20000c90

08009d54 <__assert_func>:
 8009d54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d56:	4614      	mov	r4, r2
 8009d58:	461a      	mov	r2, r3
 8009d5a:	4b09      	ldr	r3, [pc, #36]	@ (8009d80 <__assert_func+0x2c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4605      	mov	r5, r0
 8009d60:	68d8      	ldr	r0, [r3, #12]
 8009d62:	b954      	cbnz	r4, 8009d7a <__assert_func+0x26>
 8009d64:	4b07      	ldr	r3, [pc, #28]	@ (8009d84 <__assert_func+0x30>)
 8009d66:	461c      	mov	r4, r3
 8009d68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d6c:	9100      	str	r1, [sp, #0]
 8009d6e:	462b      	mov	r3, r5
 8009d70:	4905      	ldr	r1, [pc, #20]	@ (8009d88 <__assert_func+0x34>)
 8009d72:	f000 f841 	bl	8009df8 <fiprintf>
 8009d76:	f000 f851 	bl	8009e1c <abort>
 8009d7a:	4b04      	ldr	r3, [pc, #16]	@ (8009d8c <__assert_func+0x38>)
 8009d7c:	e7f4      	b.n	8009d68 <__assert_func+0x14>
 8009d7e:	bf00      	nop
 8009d80:	20000018 	.word	0x20000018
 8009d84:	0800a766 	.word	0x0800a766
 8009d88:	0800a738 	.word	0x0800a738
 8009d8c:	0800a72b 	.word	0x0800a72b

08009d90 <_calloc_r>:
 8009d90:	b570      	push	{r4, r5, r6, lr}
 8009d92:	fba1 5402 	umull	r5, r4, r1, r2
 8009d96:	b93c      	cbnz	r4, 8009da8 <_calloc_r+0x18>
 8009d98:	4629      	mov	r1, r5
 8009d9a:	f7fd fa9f 	bl	80072dc <_malloc_r>
 8009d9e:	4606      	mov	r6, r0
 8009da0:	b928      	cbnz	r0, 8009dae <_calloc_r+0x1e>
 8009da2:	2600      	movs	r6, #0
 8009da4:	4630      	mov	r0, r6
 8009da6:	bd70      	pop	{r4, r5, r6, pc}
 8009da8:	220c      	movs	r2, #12
 8009daa:	6002      	str	r2, [r0, #0]
 8009dac:	e7f9      	b.n	8009da2 <_calloc_r+0x12>
 8009dae:	462a      	mov	r2, r5
 8009db0:	4621      	mov	r1, r4
 8009db2:	f7fe fa5d 	bl	8008270 <memset>
 8009db6:	e7f5      	b.n	8009da4 <_calloc_r+0x14>

08009db8 <__ascii_mbtowc>:
 8009db8:	b082      	sub	sp, #8
 8009dba:	b901      	cbnz	r1, 8009dbe <__ascii_mbtowc+0x6>
 8009dbc:	a901      	add	r1, sp, #4
 8009dbe:	b142      	cbz	r2, 8009dd2 <__ascii_mbtowc+0x1a>
 8009dc0:	b14b      	cbz	r3, 8009dd6 <__ascii_mbtowc+0x1e>
 8009dc2:	7813      	ldrb	r3, [r2, #0]
 8009dc4:	600b      	str	r3, [r1, #0]
 8009dc6:	7812      	ldrb	r2, [r2, #0]
 8009dc8:	1e10      	subs	r0, r2, #0
 8009dca:	bf18      	it	ne
 8009dcc:	2001      	movne	r0, #1
 8009dce:	b002      	add	sp, #8
 8009dd0:	4770      	bx	lr
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	e7fb      	b.n	8009dce <__ascii_mbtowc+0x16>
 8009dd6:	f06f 0001 	mvn.w	r0, #1
 8009dda:	e7f8      	b.n	8009dce <__ascii_mbtowc+0x16>

08009ddc <__ascii_wctomb>:
 8009ddc:	4603      	mov	r3, r0
 8009dde:	4608      	mov	r0, r1
 8009de0:	b141      	cbz	r1, 8009df4 <__ascii_wctomb+0x18>
 8009de2:	2aff      	cmp	r2, #255	@ 0xff
 8009de4:	d904      	bls.n	8009df0 <__ascii_wctomb+0x14>
 8009de6:	228a      	movs	r2, #138	@ 0x8a
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	f04f 30ff 	mov.w	r0, #4294967295
 8009dee:	4770      	bx	lr
 8009df0:	700a      	strb	r2, [r1, #0]
 8009df2:	2001      	movs	r0, #1
 8009df4:	4770      	bx	lr
	...

08009df8 <fiprintf>:
 8009df8:	b40e      	push	{r1, r2, r3}
 8009dfa:	b503      	push	{r0, r1, lr}
 8009dfc:	4601      	mov	r1, r0
 8009dfe:	ab03      	add	r3, sp, #12
 8009e00:	4805      	ldr	r0, [pc, #20]	@ (8009e18 <fiprintf+0x20>)
 8009e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e06:	6800      	ldr	r0, [r0, #0]
 8009e08:	9301      	str	r3, [sp, #4]
 8009e0a:	f000 f837 	bl	8009e7c <_vfiprintf_r>
 8009e0e:	b002      	add	sp, #8
 8009e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e14:	b003      	add	sp, #12
 8009e16:	4770      	bx	lr
 8009e18:	20000018 	.word	0x20000018

08009e1c <abort>:
 8009e1c:	b508      	push	{r3, lr}
 8009e1e:	2006      	movs	r0, #6
 8009e20:	f000 f96c 	bl	800a0fc <raise>
 8009e24:	2001      	movs	r0, #1
 8009e26:	f7f7 fb9d 	bl	8001564 <_exit>

08009e2a <__sfputc_r>:
 8009e2a:	6893      	ldr	r3, [r2, #8]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	b410      	push	{r4}
 8009e32:	6093      	str	r3, [r2, #8]
 8009e34:	da08      	bge.n	8009e48 <__sfputc_r+0x1e>
 8009e36:	6994      	ldr	r4, [r2, #24]
 8009e38:	42a3      	cmp	r3, r4
 8009e3a:	db01      	blt.n	8009e40 <__sfputc_r+0x16>
 8009e3c:	290a      	cmp	r1, #10
 8009e3e:	d103      	bne.n	8009e48 <__sfputc_r+0x1e>
 8009e40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e44:	f7fe b97f 	b.w	8008146 <__swbuf_r>
 8009e48:	6813      	ldr	r3, [r2, #0]
 8009e4a:	1c58      	adds	r0, r3, #1
 8009e4c:	6010      	str	r0, [r2, #0]
 8009e4e:	7019      	strb	r1, [r3, #0]
 8009e50:	4608      	mov	r0, r1
 8009e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <__sfputs_r>:
 8009e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	460f      	mov	r7, r1
 8009e5e:	4614      	mov	r4, r2
 8009e60:	18d5      	adds	r5, r2, r3
 8009e62:	42ac      	cmp	r4, r5
 8009e64:	d101      	bne.n	8009e6a <__sfputs_r+0x12>
 8009e66:	2000      	movs	r0, #0
 8009e68:	e007      	b.n	8009e7a <__sfputs_r+0x22>
 8009e6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e6e:	463a      	mov	r2, r7
 8009e70:	4630      	mov	r0, r6
 8009e72:	f7ff ffda 	bl	8009e2a <__sfputc_r>
 8009e76:	1c43      	adds	r3, r0, #1
 8009e78:	d1f3      	bne.n	8009e62 <__sfputs_r+0xa>
 8009e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e7c <_vfiprintf_r>:
 8009e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e80:	460d      	mov	r5, r1
 8009e82:	b09d      	sub	sp, #116	@ 0x74
 8009e84:	4614      	mov	r4, r2
 8009e86:	4698      	mov	r8, r3
 8009e88:	4606      	mov	r6, r0
 8009e8a:	b118      	cbz	r0, 8009e94 <_vfiprintf_r+0x18>
 8009e8c:	6a03      	ldr	r3, [r0, #32]
 8009e8e:	b90b      	cbnz	r3, 8009e94 <_vfiprintf_r+0x18>
 8009e90:	f7fe f84e 	bl	8007f30 <__sinit>
 8009e94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e96:	07d9      	lsls	r1, r3, #31
 8009e98:	d405      	bmi.n	8009ea6 <_vfiprintf_r+0x2a>
 8009e9a:	89ab      	ldrh	r3, [r5, #12]
 8009e9c:	059a      	lsls	r2, r3, #22
 8009e9e:	d402      	bmi.n	8009ea6 <_vfiprintf_r+0x2a>
 8009ea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ea2:	f7fe fa84 	bl	80083ae <__retarget_lock_acquire_recursive>
 8009ea6:	89ab      	ldrh	r3, [r5, #12]
 8009ea8:	071b      	lsls	r3, r3, #28
 8009eaa:	d501      	bpl.n	8009eb0 <_vfiprintf_r+0x34>
 8009eac:	692b      	ldr	r3, [r5, #16]
 8009eae:	b99b      	cbnz	r3, 8009ed8 <_vfiprintf_r+0x5c>
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f7fe f986 	bl	80081c4 <__swsetup_r>
 8009eb8:	b170      	cbz	r0, 8009ed8 <_vfiprintf_r+0x5c>
 8009eba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ebc:	07dc      	lsls	r4, r3, #31
 8009ebe:	d504      	bpl.n	8009eca <_vfiprintf_r+0x4e>
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec4:	b01d      	add	sp, #116	@ 0x74
 8009ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eca:	89ab      	ldrh	r3, [r5, #12]
 8009ecc:	0598      	lsls	r0, r3, #22
 8009ece:	d4f7      	bmi.n	8009ec0 <_vfiprintf_r+0x44>
 8009ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ed2:	f7fe fa6d 	bl	80083b0 <__retarget_lock_release_recursive>
 8009ed6:	e7f3      	b.n	8009ec0 <_vfiprintf_r+0x44>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	9309      	str	r3, [sp, #36]	@ 0x24
 8009edc:	2320      	movs	r3, #32
 8009ede:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ee2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ee6:	2330      	movs	r3, #48	@ 0x30
 8009ee8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a098 <_vfiprintf_r+0x21c>
 8009eec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ef0:	f04f 0901 	mov.w	r9, #1
 8009ef4:	4623      	mov	r3, r4
 8009ef6:	469a      	mov	sl, r3
 8009ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009efc:	b10a      	cbz	r2, 8009f02 <_vfiprintf_r+0x86>
 8009efe:	2a25      	cmp	r2, #37	@ 0x25
 8009f00:	d1f9      	bne.n	8009ef6 <_vfiprintf_r+0x7a>
 8009f02:	ebba 0b04 	subs.w	fp, sl, r4
 8009f06:	d00b      	beq.n	8009f20 <_vfiprintf_r+0xa4>
 8009f08:	465b      	mov	r3, fp
 8009f0a:	4622      	mov	r2, r4
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	4630      	mov	r0, r6
 8009f10:	f7ff ffa2 	bl	8009e58 <__sfputs_r>
 8009f14:	3001      	adds	r0, #1
 8009f16:	f000 80a7 	beq.w	800a068 <_vfiprintf_r+0x1ec>
 8009f1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f1c:	445a      	add	r2, fp
 8009f1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f20:	f89a 3000 	ldrb.w	r3, [sl]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	f000 809f 	beq.w	800a068 <_vfiprintf_r+0x1ec>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f34:	f10a 0a01 	add.w	sl, sl, #1
 8009f38:	9304      	str	r3, [sp, #16]
 8009f3a:	9307      	str	r3, [sp, #28]
 8009f3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f40:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f42:	4654      	mov	r4, sl
 8009f44:	2205      	movs	r2, #5
 8009f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f4a:	4853      	ldr	r0, [pc, #332]	@ (800a098 <_vfiprintf_r+0x21c>)
 8009f4c:	f7f6 f950 	bl	80001f0 <memchr>
 8009f50:	9a04      	ldr	r2, [sp, #16]
 8009f52:	b9d8      	cbnz	r0, 8009f8c <_vfiprintf_r+0x110>
 8009f54:	06d1      	lsls	r1, r2, #27
 8009f56:	bf44      	itt	mi
 8009f58:	2320      	movmi	r3, #32
 8009f5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f5e:	0713      	lsls	r3, r2, #28
 8009f60:	bf44      	itt	mi
 8009f62:	232b      	movmi	r3, #43	@ 0x2b
 8009f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f68:	f89a 3000 	ldrb.w	r3, [sl]
 8009f6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f6e:	d015      	beq.n	8009f9c <_vfiprintf_r+0x120>
 8009f70:	9a07      	ldr	r2, [sp, #28]
 8009f72:	4654      	mov	r4, sl
 8009f74:	2000      	movs	r0, #0
 8009f76:	f04f 0c0a 	mov.w	ip, #10
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f80:	3b30      	subs	r3, #48	@ 0x30
 8009f82:	2b09      	cmp	r3, #9
 8009f84:	d94b      	bls.n	800a01e <_vfiprintf_r+0x1a2>
 8009f86:	b1b0      	cbz	r0, 8009fb6 <_vfiprintf_r+0x13a>
 8009f88:	9207      	str	r2, [sp, #28]
 8009f8a:	e014      	b.n	8009fb6 <_vfiprintf_r+0x13a>
 8009f8c:	eba0 0308 	sub.w	r3, r0, r8
 8009f90:	fa09 f303 	lsl.w	r3, r9, r3
 8009f94:	4313      	orrs	r3, r2
 8009f96:	9304      	str	r3, [sp, #16]
 8009f98:	46a2      	mov	sl, r4
 8009f9a:	e7d2      	b.n	8009f42 <_vfiprintf_r+0xc6>
 8009f9c:	9b03      	ldr	r3, [sp, #12]
 8009f9e:	1d19      	adds	r1, r3, #4
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	9103      	str	r1, [sp, #12]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	bfbb      	ittet	lt
 8009fa8:	425b      	neglt	r3, r3
 8009faa:	f042 0202 	orrlt.w	r2, r2, #2
 8009fae:	9307      	strge	r3, [sp, #28]
 8009fb0:	9307      	strlt	r3, [sp, #28]
 8009fb2:	bfb8      	it	lt
 8009fb4:	9204      	strlt	r2, [sp, #16]
 8009fb6:	7823      	ldrb	r3, [r4, #0]
 8009fb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fba:	d10a      	bne.n	8009fd2 <_vfiprintf_r+0x156>
 8009fbc:	7863      	ldrb	r3, [r4, #1]
 8009fbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fc0:	d132      	bne.n	800a028 <_vfiprintf_r+0x1ac>
 8009fc2:	9b03      	ldr	r3, [sp, #12]
 8009fc4:	1d1a      	adds	r2, r3, #4
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	9203      	str	r2, [sp, #12]
 8009fca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fce:	3402      	adds	r4, #2
 8009fd0:	9305      	str	r3, [sp, #20]
 8009fd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a0a8 <_vfiprintf_r+0x22c>
 8009fd6:	7821      	ldrb	r1, [r4, #0]
 8009fd8:	2203      	movs	r2, #3
 8009fda:	4650      	mov	r0, sl
 8009fdc:	f7f6 f908 	bl	80001f0 <memchr>
 8009fe0:	b138      	cbz	r0, 8009ff2 <_vfiprintf_r+0x176>
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	eba0 000a 	sub.w	r0, r0, sl
 8009fe8:	2240      	movs	r2, #64	@ 0x40
 8009fea:	4082      	lsls	r2, r0
 8009fec:	4313      	orrs	r3, r2
 8009fee:	3401      	adds	r4, #1
 8009ff0:	9304      	str	r3, [sp, #16]
 8009ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff6:	4829      	ldr	r0, [pc, #164]	@ (800a09c <_vfiprintf_r+0x220>)
 8009ff8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ffc:	2206      	movs	r2, #6
 8009ffe:	f7f6 f8f7 	bl	80001f0 <memchr>
 800a002:	2800      	cmp	r0, #0
 800a004:	d03f      	beq.n	800a086 <_vfiprintf_r+0x20a>
 800a006:	4b26      	ldr	r3, [pc, #152]	@ (800a0a0 <_vfiprintf_r+0x224>)
 800a008:	bb1b      	cbnz	r3, 800a052 <_vfiprintf_r+0x1d6>
 800a00a:	9b03      	ldr	r3, [sp, #12]
 800a00c:	3307      	adds	r3, #7
 800a00e:	f023 0307 	bic.w	r3, r3, #7
 800a012:	3308      	adds	r3, #8
 800a014:	9303      	str	r3, [sp, #12]
 800a016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a018:	443b      	add	r3, r7
 800a01a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a01c:	e76a      	b.n	8009ef4 <_vfiprintf_r+0x78>
 800a01e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a022:	460c      	mov	r4, r1
 800a024:	2001      	movs	r0, #1
 800a026:	e7a8      	b.n	8009f7a <_vfiprintf_r+0xfe>
 800a028:	2300      	movs	r3, #0
 800a02a:	3401      	adds	r4, #1
 800a02c:	9305      	str	r3, [sp, #20]
 800a02e:	4619      	mov	r1, r3
 800a030:	f04f 0c0a 	mov.w	ip, #10
 800a034:	4620      	mov	r0, r4
 800a036:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a03a:	3a30      	subs	r2, #48	@ 0x30
 800a03c:	2a09      	cmp	r2, #9
 800a03e:	d903      	bls.n	800a048 <_vfiprintf_r+0x1cc>
 800a040:	2b00      	cmp	r3, #0
 800a042:	d0c6      	beq.n	8009fd2 <_vfiprintf_r+0x156>
 800a044:	9105      	str	r1, [sp, #20]
 800a046:	e7c4      	b.n	8009fd2 <_vfiprintf_r+0x156>
 800a048:	fb0c 2101 	mla	r1, ip, r1, r2
 800a04c:	4604      	mov	r4, r0
 800a04e:	2301      	movs	r3, #1
 800a050:	e7f0      	b.n	800a034 <_vfiprintf_r+0x1b8>
 800a052:	ab03      	add	r3, sp, #12
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	462a      	mov	r2, r5
 800a058:	4b12      	ldr	r3, [pc, #72]	@ (800a0a4 <_vfiprintf_r+0x228>)
 800a05a:	a904      	add	r1, sp, #16
 800a05c:	4630      	mov	r0, r6
 800a05e:	f7fd fb23 	bl	80076a8 <_printf_float>
 800a062:	4607      	mov	r7, r0
 800a064:	1c78      	adds	r0, r7, #1
 800a066:	d1d6      	bne.n	800a016 <_vfiprintf_r+0x19a>
 800a068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a06a:	07d9      	lsls	r1, r3, #31
 800a06c:	d405      	bmi.n	800a07a <_vfiprintf_r+0x1fe>
 800a06e:	89ab      	ldrh	r3, [r5, #12]
 800a070:	059a      	lsls	r2, r3, #22
 800a072:	d402      	bmi.n	800a07a <_vfiprintf_r+0x1fe>
 800a074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a076:	f7fe f99b 	bl	80083b0 <__retarget_lock_release_recursive>
 800a07a:	89ab      	ldrh	r3, [r5, #12]
 800a07c:	065b      	lsls	r3, r3, #25
 800a07e:	f53f af1f 	bmi.w	8009ec0 <_vfiprintf_r+0x44>
 800a082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a084:	e71e      	b.n	8009ec4 <_vfiprintf_r+0x48>
 800a086:	ab03      	add	r3, sp, #12
 800a088:	9300      	str	r3, [sp, #0]
 800a08a:	462a      	mov	r2, r5
 800a08c:	4b05      	ldr	r3, [pc, #20]	@ (800a0a4 <_vfiprintf_r+0x228>)
 800a08e:	a904      	add	r1, sp, #16
 800a090:	4630      	mov	r0, r6
 800a092:	f7fd fda1 	bl	8007bd8 <_printf_i>
 800a096:	e7e4      	b.n	800a062 <_vfiprintf_r+0x1e6>
 800a098:	0800a710 	.word	0x0800a710
 800a09c:	0800a71a 	.word	0x0800a71a
 800a0a0:	080076a9 	.word	0x080076a9
 800a0a4:	08009e59 	.word	0x08009e59
 800a0a8:	0800a716 	.word	0x0800a716

0800a0ac <_raise_r>:
 800a0ac:	291f      	cmp	r1, #31
 800a0ae:	b538      	push	{r3, r4, r5, lr}
 800a0b0:	4605      	mov	r5, r0
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	d904      	bls.n	800a0c0 <_raise_r+0x14>
 800a0b6:	2316      	movs	r3, #22
 800a0b8:	6003      	str	r3, [r0, #0]
 800a0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a0be:	bd38      	pop	{r3, r4, r5, pc}
 800a0c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a0c2:	b112      	cbz	r2, 800a0ca <_raise_r+0x1e>
 800a0c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0c8:	b94b      	cbnz	r3, 800a0de <_raise_r+0x32>
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f000 f830 	bl	800a130 <_getpid_r>
 800a0d0:	4622      	mov	r2, r4
 800a0d2:	4601      	mov	r1, r0
 800a0d4:	4628      	mov	r0, r5
 800a0d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0da:	f000 b817 	b.w	800a10c <_kill_r>
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d00a      	beq.n	800a0f8 <_raise_r+0x4c>
 800a0e2:	1c59      	adds	r1, r3, #1
 800a0e4:	d103      	bne.n	800a0ee <_raise_r+0x42>
 800a0e6:	2316      	movs	r3, #22
 800a0e8:	6003      	str	r3, [r0, #0]
 800a0ea:	2001      	movs	r0, #1
 800a0ec:	e7e7      	b.n	800a0be <_raise_r+0x12>
 800a0ee:	2100      	movs	r1, #0
 800a0f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	4798      	blx	r3
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	e7e0      	b.n	800a0be <_raise_r+0x12>

0800a0fc <raise>:
 800a0fc:	4b02      	ldr	r3, [pc, #8]	@ (800a108 <raise+0xc>)
 800a0fe:	4601      	mov	r1, r0
 800a100:	6818      	ldr	r0, [r3, #0]
 800a102:	f7ff bfd3 	b.w	800a0ac <_raise_r>
 800a106:	bf00      	nop
 800a108:	20000018 	.word	0x20000018

0800a10c <_kill_r>:
 800a10c:	b538      	push	{r3, r4, r5, lr}
 800a10e:	4d07      	ldr	r5, [pc, #28]	@ (800a12c <_kill_r+0x20>)
 800a110:	2300      	movs	r3, #0
 800a112:	4604      	mov	r4, r0
 800a114:	4608      	mov	r0, r1
 800a116:	4611      	mov	r1, r2
 800a118:	602b      	str	r3, [r5, #0]
 800a11a:	f7f7 fa13 	bl	8001544 <_kill>
 800a11e:	1c43      	adds	r3, r0, #1
 800a120:	d102      	bne.n	800a128 <_kill_r+0x1c>
 800a122:	682b      	ldr	r3, [r5, #0]
 800a124:	b103      	cbz	r3, 800a128 <_kill_r+0x1c>
 800a126:	6023      	str	r3, [r4, #0]
 800a128:	bd38      	pop	{r3, r4, r5, pc}
 800a12a:	bf00      	nop
 800a12c:	20000c90 	.word	0x20000c90

0800a130 <_getpid_r>:
 800a130:	f7f7 ba00 	b.w	8001534 <_getpid>

0800a134 <_init>:
 800a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a136:	bf00      	nop
 800a138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13a:	bc08      	pop	{r3}
 800a13c:	469e      	mov	lr, r3
 800a13e:	4770      	bx	lr

0800a140 <_fini>:
 800a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a142:	bf00      	nop
 800a144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a146:	bc08      	pop	{r3}
 800a148:	469e      	mov	lr, r3
 800a14a:	4770      	bx	lr
