
prz-telemetry-box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c698  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  0800c848  0800c848  0000d848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d088  0800d088  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d088  0800d088  0000e088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d090  0800d090  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d090  0800d090  0000e090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d094  0800d094  0000e094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d098  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f1d4  2**0
                  CONTENTS
 10 .bss          00002310  200001d4  200001d4  0000f1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200024e4  200024e4  0000f1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018597  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a71  00000000  00000000  0002779b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001440  00000000  00000000  0002b210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa6  00000000  00000000  0002c650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002845c  00000000  00000000  0002d5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bbce  00000000  00000000  00055a52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6f0d  00000000  00000000  00071620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015852d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006594  00000000  00000000  00158570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0015eb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c830 	.word	0x0800c830

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	0800c830 	.word	0x0800c830

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	@ 0x28
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8000f74 <MX_CAN1_Init+0xbc>)
 8000ec2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000eca:	4b29      	ldr	r3, [pc, #164]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ed0:	4b27      	ldr	r3, [pc, #156]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000ed8:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000edc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ede:	4b24      	ldr	r3, [pc, #144]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000ee0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000ee4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ee6:	4b22      	ldr	r3, [pc, #136]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000eec:	4b20      	ldr	r3, [pc, #128]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000efe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000f04:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000f0a:	4819      	ldr	r0, [pc, #100]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000f0c:	f004 f8d0 	bl	80050b0 <HAL_CAN_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000f16:	f000 fd87 	bl	8001a28 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */


	CAN_FilterTypeDef canFilterConfig;

	canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
	canFilterConfig.FilterBank = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
	canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
	canFilterConfig.FilterIdHigh = 0x3F0 << 5;
 8000f26:	f44f 43fc 	mov.w	r3, #32256	@ 0x7e00
 8000f2a:	603b      	str	r3, [r7, #0]
	canFilterConfig.FilterIdLow = 0x0000;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
	canFilterConfig.FilterMaskIdHigh = 0xFFF << 5;
 8000f30:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <MX_CAN1_Init+0xc0>)
 8000f32:	60bb      	str	r3, [r7, #8]
	canFilterConfig.FilterMaskIdLow = 0x0000;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
	canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	61fb      	str	r3, [r7, #28]
	canFilterConfig.SlaveStartFilterBank = 14;
 8000f40:	230e      	movs	r3, #14
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 8000f44:	463b      	mov	r3, r7
 8000f46:	4619      	mov	r1, r3
 8000f48:	4809      	ldr	r0, [pc, #36]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000f4a:	f004 f9ad 	bl	80052a8 <HAL_CAN_ConfigFilter>

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000f4e:	2102      	movs	r1, #2
 8000f50:	4807      	ldr	r0, [pc, #28]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000f52:	f004 fcbf 	bl	80058d4 <HAL_CAN_ActivateNotification>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_CAN1_Init+0xa8>
		Error_Handler();
 8000f5c:	f000 fd64 	bl	8001a28 <Error_Handler>
	}

	HAL_CAN_Start(&hcan1);
 8000f60:	4803      	ldr	r0, [pc, #12]	@ (8000f70 <MX_CAN1_Init+0xb8>)
 8000f62:	f004 fa81 	bl	8005468 <HAL_CAN_Start>

  /* USER CODE END CAN1_Init 2 */

}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	@ 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200001f0 	.word	0x200001f0
 8000f74:	40006400 	.word	0x40006400
 8000f78:	0001ffe0 	.word	0x0001ffe0

08000f7c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000f82:	4b2c      	ldr	r3, [pc, #176]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8000f84:	4a2c      	ldr	r2, [pc, #176]	@ (8001038 <MX_CAN2_Init+0xbc>)
 8000f86:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000f88:	4b2a      	ldr	r3, [pc, #168]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000f8e:	4b29      	ldr	r3, [pc, #164]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000f9a:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8000f9c:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 8000fa0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fa2:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8000fa4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000fa8:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000faa:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000fb0:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000fce:	4819      	ldr	r0, [pc, #100]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8000fd0:	f004 f86e 	bl	80050b0 <HAL_CAN_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000fda:	f000 fd25 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

	CAN_FilterTypeDef canFilterConfig;

	canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	623b      	str	r3, [r7, #32]
	canFilterConfig.FilterBank = 14;
 8000fe2:	230e      	movs	r3, #14
 8000fe4:	617b      	str	r3, [r7, #20]
	canFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
	canFilterConfig.FilterIdHigh = 0x300 << 5;
 8000fea:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000fee:	603b      	str	r3, [r7, #0]
	canFilterConfig.FilterIdLow = 0x0000;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
	canFilterConfig.FilterMaskIdHigh = 0xF00 << 5;
 8000ff4:	f44f 33f0 	mov.w	r3, #122880	@ 0x1e000
 8000ff8:	60bb      	str	r3, [r7, #8]
	canFilterConfig.FilterMaskIdLow = 0x0000;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
	canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001002:	2301      	movs	r3, #1
 8001004:	61fb      	str	r3, [r7, #28]
	canFilterConfig.SlaveStartFilterBank = 14;
 8001006:	230e      	movs	r3, #14
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan2, &canFilterConfig);
 800100a:	463b      	mov	r3, r7
 800100c:	4619      	mov	r1, r3
 800100e:	4809      	ldr	r0, [pc, #36]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8001010:	f004 f94a 	bl	80052a8 <HAL_CAN_ConfigFilter>

	if(HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001014:	2102      	movs	r1, #2
 8001016:	4807      	ldr	r0, [pc, #28]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8001018:	f004 fc5c 	bl	80058d4 <HAL_CAN_ActivateNotification>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_CAN2_Init+0xaa>
		Error_Handler();
 8001022:	f000 fd01 	bl	8001a28 <Error_Handler>
	}

	HAL_CAN_Start(&hcan2);
 8001026:	4803      	ldr	r0, [pc, #12]	@ (8001034 <MX_CAN2_Init+0xb8>)
 8001028:	f004 fa1e 	bl	8005468 <HAL_CAN_Start>

  /* USER CODE END CAN2_Init 2 */

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	@ 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000218 	.word	0x20000218
 8001038:	40006800 	.word	0x40006800

0800103c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	@ 0x30
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 031c 	add.w	r3, r7, #28
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a5b      	ldr	r2, [pc, #364]	@ (80011c8 <HAL_CAN_MspInit+0x18c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d14e      	bne.n	80010fc <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800105e:	4b5b      	ldr	r3, [pc, #364]	@ (80011cc <HAL_CAN_MspInit+0x190>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	4a59      	ldr	r2, [pc, #356]	@ (80011cc <HAL_CAN_MspInit+0x190>)
 8001066:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001068:	4b58      	ldr	r3, [pc, #352]	@ (80011cc <HAL_CAN_MspInit+0x190>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d10d      	bne.n	800108c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
 8001074:	4b56      	ldr	r3, [pc, #344]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	4a55      	ldr	r2, [pc, #340]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 800107a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800107e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001080:	4b53      	ldr	r3, [pc, #332]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001088:	61bb      	str	r3, [r7, #24]
 800108a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	4b4f      	ldr	r3, [pc, #316]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	4a4e      	ldr	r2, [pc, #312]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6313      	str	r3, [r2, #48]	@ 0x30
 800109c:	4b4c      	ldr	r3, [pc, #304]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	617b      	str	r3, [r7, #20]
 80010a6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010a8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010ba:	2309      	movs	r3, #9
 80010bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4843      	ldr	r0, [pc, #268]	@ (80011d4 <HAL_CAN_MspInit+0x198>)
 80010c6:	f005 fb6f 	bl	80067a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2014      	movs	r0, #20
 80010d0:	f004 ff31 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010d4:	2014      	movs	r0, #20
 80010d6:	f004 ff4a 	bl	8005f6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2015      	movs	r0, #21
 80010e0:	f004 ff29 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80010e4:	2015      	movs	r0, #21
 80010e6:	f004 ff42 	bl	8005f6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2016      	movs	r0, #22
 80010f0:	f004 ff21 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80010f4:	2016      	movs	r0, #22
 80010f6:	f004 ff3a 	bl	8005f6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80010fa:	e060      	b.n	80011be <HAL_CAN_MspInit+0x182>
  else if(canHandle->Instance==CAN2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a35      	ldr	r2, [pc, #212]	@ (80011d8 <HAL_CAN_MspInit+0x19c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d15b      	bne.n	80011be <HAL_CAN_MspInit+0x182>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b31      	ldr	r3, [pc, #196]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	4a30      	ldr	r2, [pc, #192]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 8001110:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40
 8001116:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001122:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <HAL_CAN_MspInit+0x190>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	4a28      	ldr	r2, [pc, #160]	@ (80011cc <HAL_CAN_MspInit+0x190>)
 800112a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800112c:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <HAL_CAN_MspInit+0x190>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d10d      	bne.n	8001150 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	4b25      	ldr	r3, [pc, #148]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	4a24      	ldr	r2, [pc, #144]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 800113e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001142:	6413      	str	r3, [r2, #64]	@ 0x40
 8001144:	4b22      	ldr	r3, [pc, #136]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001158:	4a1d      	ldr	r2, [pc, #116]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001160:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <HAL_CAN_MspInit+0x194>)
 8001162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800116c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800117e:	2309      	movs	r3, #9
 8001180:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	4814      	ldr	r0, [pc, #80]	@ (80011dc <HAL_CAN_MspInit+0x1a0>)
 800118a:	f005 fb0d 	bl	80067a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2040      	movs	r0, #64	@ 0x40
 8001194:	f004 fecf 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001198:	2040      	movs	r0, #64	@ 0x40
 800119a:	f004 fee8 	bl	8005f6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2041      	movs	r0, #65	@ 0x41
 80011a4:	f004 fec7 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80011a8:	2041      	movs	r0, #65	@ 0x41
 80011aa:	f004 fee0 	bl	8005f6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2042      	movs	r0, #66	@ 0x42
 80011b4:	f004 febf 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 80011b8:	2042      	movs	r0, #66	@ 0x42
 80011ba:	f004 fed8 	bl	8005f6e <HAL_NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3730      	adds	r7, #48	@ 0x30
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40006400 	.word	0x40006400
 80011cc:	20000240 	.word	0x20000240
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40020000 	.word	0x40020000
 80011d8:	40006800 	.word	0x40006800
 80011dc:	40020400 	.word	0x40020400

080011e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001258 <MX_DMA_Init+0x78>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001258 <MX_DMA_Init+0x78>)
 80011f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <MX_DMA_Init+0x78>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <MX_DMA_Init+0x78>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a13      	ldr	r2, [pc, #76]	@ (8001258 <MX_DMA_Init+0x78>)
 800120c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b11      	ldr	r3, [pc, #68]	@ (8001258 <MX_DMA_Init+0x78>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	200e      	movs	r0, #14
 8001224:	f004 fe87 	bl	8005f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001228:	200e      	movs	r0, #14
 800122a:	f004 fea0 	bl	8005f6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2010      	movs	r0, #16
 8001234:	f004 fe7f 	bl	8005f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001238:	2010      	movs	r0, #16
 800123a:	f004 fe98 	bl	8005f6e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	203a      	movs	r0, #58	@ 0x3a
 8001244:	f004 fe77 	bl	8005f36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001248:	203a      	movs	r0, #58	@ 0x3a
 800124a:	f004 fe90 	bl	8005f6e <HAL_NVIC_EnableIRQ>

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <MX_GPIO_Init+0x84>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a1d      	ldr	r2, [pc, #116]	@ (80012e0 <MX_GPIO_Init+0x84>)
 800126c:	f043 0320 	orr.w	r3, r3, #32
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <MX_GPIO_Init+0x84>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0320 	and.w	r3, r3, #32
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <MX_GPIO_Init+0x84>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a16      	ldr	r2, [pc, #88]	@ (80012e0 <MX_GPIO_Init+0x84>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <MX_GPIO_Init+0x84>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <MX_GPIO_Init+0x84>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a0f      	ldr	r2, [pc, #60]	@ (80012e0 <MX_GPIO_Init+0x84>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <MX_GPIO_Init+0x84>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <MX_GPIO_Init+0x84>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a08      	ldr	r2, [pc, #32]	@ (80012e0 <MX_GPIO_Init+0x84>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <MX_GPIO_Init+0x84>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800

080012e4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012e8:	f3bf 8f4f 	dsb	sy
}
 80012ec:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80012ee:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <__NVIC_SystemReset+0x24>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80012f6:	4904      	ldr	r1, [pc, #16]	@ (8001308 <__NVIC_SystemReset+0x24>)
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <__NVIC_SystemReset+0x28>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80012fe:	f3bf 8f4f 	dsb	sy
}
 8001302:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001304:	bf00      	nop
 8001306:	e7fd      	b.n	8001304 <__NVIC_SystemReset+0x20>
 8001308:	e000ed00 	.word	0xe000ed00
 800130c:	05fa0004 	.word	0x05fa0004

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	b091      	sub	sp, #68	@ 0x44
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001316:	f003 fe35 	bl	8004f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800131a:	f000 fa5f 	bl	80017dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131e:	f7ff ff9d 	bl	800125c <MX_GPIO_Init>
  MX_DMA_Init();
 8001322:	f7ff ff5d 	bl	80011e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001326:	f000 fe7d 	bl	8002024 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800132a:	f000 fea5 	bl	8002078 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800132e:	f000 fddd 	bl	8001eec <MX_TIM2_Init>
  MX_UART7_Init();
 8001332:	f000 fe4d 	bl	8001fd0 <MX_UART7_Init>
  MX_CAN1_Init();
 8001336:	f7ff fdbf 	bl	8000eb8 <MX_CAN1_Init>
  MX_CAN2_Init();
 800133a:	f7ff fe1f 	bl	8000f7c <MX_CAN2_Init>
  MX_RTC_Init();
 800133e:	f000 fb83 	bl	8001a48 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	UartRcvr_init(&usart1_rcvr, &huart1);
 8001342:	49aa      	ldr	r1, [pc, #680]	@ (80015ec <main+0x2dc>)
 8001344:	48aa      	ldr	r0, [pc, #680]	@ (80015f0 <main+0x2e0>)
 8001346:	f003 fb27 	bl	8004998 <UartRcvr_init>
	UartRcvr_init(&usart2_rcvr, &huart2);
 800134a:	49aa      	ldr	r1, [pc, #680]	@ (80015f4 <main+0x2e4>)
 800134c:	48aa      	ldr	r0, [pc, #680]	@ (80015f8 <main+0x2e8>)
 800134e:	f003 fb23 	bl	8004998 <UartRcvr_init>
	UartRcvr_init(&uart7_rcvr, &huart7);
 8001352:	49aa      	ldr	r1, [pc, #680]	@ (80015fc <main+0x2ec>)
 8001354:	48aa      	ldr	r0, [pc, #680]	@ (8001600 <main+0x2f0>)
 8001356:	f003 fb1f 	bl	8004998 <UartRcvr_init>

	prints("PRz Telemetry Box 4.0\r\n");
 800135a:	48aa      	ldr	r0, [pc, #680]	@ (8001604 <main+0x2f4>)
 800135c:	f000 fb54 	bl	8001a08 <prints>

	HAL_Delay(1000);
 8001360:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001364:	f003 fe80 	bl	8005068 <HAL_Delay>
//	if (FC_Init(&fc) == 0) {
//		prints("FC_Init failed\r\n");
//		Error_Handler();
//	}

	FT_ERR ft_err = FT_InitCustom(&ft, &huart1, &htim2, 10000);
 8001368:	f242 7310 	movw	r3, #10000	@ 0x2710
 800136c:	4aa6      	ldr	r2, [pc, #664]	@ (8001608 <main+0x2f8>)
 800136e:	499f      	ldr	r1, [pc, #636]	@ (80015ec <main+0x2dc>)
 8001370:	48a6      	ldr	r0, [pc, #664]	@ (800160c <main+0x2fc>)
 8001372:	f001 f91b 	bl	80025ac <FT_InitCustom>
 8001376:	4603      	mov	r3, r0
 8001378:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	if(ft_err != FT_OK)
 800137a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800137c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001380:	d004      	beq.n	800138c <main+0x7c>
	{
		prints("FT_InitCustom failed\r\n");
 8001382:	48a3      	ldr	r0, [pc, #652]	@ (8001610 <main+0x300>)
 8001384:	f000 fb40 	bl	8001a08 <prints>
		Error_Handler();
 8001388:	f000 fb4e 	bl	8001a28 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	FT_PrintConfiguration(ft, (char*)str, 2048);
 800138c:	4b9f      	ldr	r3, [pc, #636]	@ (800160c <main+0x2fc>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001394:	499f      	ldr	r1, [pc, #636]	@ (8001614 <main+0x304>)
 8001396:	4618      	mov	r0, r3
 8001398:	f001 fe08 	bl	8002fac <FT_PrintConfiguration>
	prints((char*) str);
 800139c:	489d      	ldr	r0, [pc, #628]	@ (8001614 <main+0x304>)
 800139e:	f000 fb33 	bl	8001a08 <prints>

	GSM_ERR gsm_err = GSM_Init(&gsm, ft, &usart2_rcvr, &usart1_rcvr);
 80013a2:	4b9a      	ldr	r3, [pc, #616]	@ (800160c <main+0x2fc>)
 80013a4:	6819      	ldr	r1, [r3, #0]
 80013a6:	4b92      	ldr	r3, [pc, #584]	@ (80015f0 <main+0x2e0>)
 80013a8:	4a93      	ldr	r2, [pc, #588]	@ (80015f8 <main+0x2e8>)
 80013aa:	489b      	ldr	r0, [pc, #620]	@ (8001618 <main+0x308>)
 80013ac:	f002 ffb1 	bl	8004312 <GSM_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	if (gsm_err != GSM_OK) {
 80013b4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80013b6:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 80013ba:	d004      	beq.n	80013c6 <main+0xb6>
		prints("GSM_Init failed\r\n");
 80013bc:	4897      	ldr	r0, [pc, #604]	@ (800161c <main+0x30c>)
 80013be:	f000 fb23 	bl	8001a08 <prints>
		Error_Handler();
 80013c2:	f000 fb31 	bl	8001a28 <Error_Handler>
	}

	CAN_TxHeaderTypeDef can_tx_header;
	uint8_t can_tx_data[8];

	can_tx_header.StdId = 0x123;
 80013c6:	f240 1323 	movw	r3, #291	@ 0x123
 80013ca:	623b      	str	r3, [r7, #32]
	can_tx_header.ExtId = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	@ 0x24
	can_tx_header.DLC = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	633b      	str	r3, [r7, #48]	@ 0x30
	can_tx_header.IDE = CAN_ID_STD;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	can_tx_header.RTR = CAN_RTR_DATA;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	can_tx_header.TransmitGlobalTime = DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

	can_tx_data[0] = 0xAA;
 80013e2:	23aa      	movs	r3, #170	@ 0xaa
 80013e4:	763b      	strb	r3, [r7, #24]

	uint32_t can_tx_mailbox1, can_tx_mailbox2;

	prints("Sending CAN messages\r\n");
 80013e6:	488e      	ldr	r0, [pc, #568]	@ (8001620 <main+0x310>)
 80013e8:	f000 fb0e 	bl	8001a08 <prints>
	HAL_CAN_AddTxMessage(&hcan1, &can_tx_header, can_tx_data, &can_tx_mailbox1);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	f107 0218 	add.w	r2, r7, #24
 80013f4:	f107 0120 	add.w	r1, r7, #32
 80013f8:	488a      	ldr	r0, [pc, #552]	@ (8001624 <main+0x314>)
 80013fa:	f004 f879 	bl	80054f0 <HAL_CAN_AddTxMessage>
	HAL_CAN_AddTxMessage(&hcan2, &can_tx_header, can_tx_data, &can_tx_mailbox2);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	f107 0218 	add.w	r2, r7, #24
 8001406:	f107 0120 	add.w	r1, r7, #32
 800140a:	4887      	ldr	r0, [pc, #540]	@ (8001628 <main+0x318>)
 800140c:	f004 f870 	bl	80054f0 <HAL_CAN_AddTxMessage>




	// let the GSM module initialize
	while ((gsm_err = GSM_Feed(&gsm)) != GSM_IDLE) {
 8001410:	e00c      	b.n	800142c <main+0x11c>
		if (gsm_err == GSM_NOT_INITIALIZED || gsm_err == GSM_INVALID_ARGUMENT) {
 8001412:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001414:	f249 0201 	movw	r2, #36865	@ 0x9001
 8001418:	4293      	cmp	r3, r2
 800141a:	d004      	beq.n	8001426 <main+0x116>
 800141c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800141e:	f249 0203 	movw	r2, #36867	@ 0x9003
 8001422:	4293      	cmp	r3, r2
 8001424:	d102      	bne.n	800142c <main+0x11c>
			prints("GSM_Feed failed\r\n");
 8001426:	4881      	ldr	r0, [pc, #516]	@ (800162c <main+0x31c>)
 8001428:	f000 faee 	bl	8001a08 <prints>
	while ((gsm_err = GSM_Feed(&gsm)) != GSM_IDLE) {
 800142c:	487a      	ldr	r0, [pc, #488]	@ (8001618 <main+0x308>)
 800142e:	f002 f9db 	bl	80037e8 <GSM_Feed>
 8001432:	4603      	mov	r3, r0
 8001434:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8001436:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001438:	f249 0204 	movw	r2, #36868	@ 0x9004
 800143c:	4293      	cmp	r3, r2
 800143e:	d1e8      	bne.n	8001412 <main+0x102>
	}

	can_frame_t can_frame;
	while (1)
	{
		while (CFCB_Pop(&can_frames_cb, &can_frame) == 1)
 8001440:	e0ca      	b.n	80015d8 <main+0x2c8>
		{
			//FC_FeedFrame(&fc, can_frame.id, can_frame.len, can_frame.data);
			if (udp_buffer[udp_buffer_head].len + can_frame.len + 3 >= UDP_BUFFER_SIZE) {
 8001442:	4b7b      	ldr	r3, [pc, #492]	@ (8001630 <main+0x320>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	4a7a      	ldr	r2, [pc, #488]	@ (8001634 <main+0x324>)
 800144a:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 800144e:	fb01 f303 	mul.w	r3, r1, r3
 8001452:	4413      	add	r3, r2
 8001454:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	79bb      	ldrb	r3, [r7, #6]
 800145e:	4413      	add	r3, r2
 8001460:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
 8001464:	dd31      	ble.n	80014ca <main+0x1ba>
				if ((udp_buffer_head + 1) % UDP_BUFFER_COUNT == udp_buffer_tail)
 8001466:	4b72      	ldr	r3, [pc, #456]	@ (8001630 <main+0x320>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	1c59      	adds	r1, r3, #1
 800146c:	4b72      	ldr	r3, [pc, #456]	@ (8001638 <main+0x328>)
 800146e:	fb83 2301 	smull	r2, r3, r3, r1
 8001472:	109a      	asrs	r2, r3, #2
 8001474:	17cb      	asrs	r3, r1, #31
 8001476:	1ad2      	subs	r2, r2, r3
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	1aca      	subs	r2, r1, r3
 8001482:	4b6e      	ldr	r3, [pc, #440]	@ (800163c <main+0x32c>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	429a      	cmp	r2, r3
 8001488:	f000 80dc 	beq.w	8001644 <main+0x334>
				{
					//prints("UDP buffer full\r\n");
					break;
				}
				udp_buffer_head = (udp_buffer_head + 1) % UDP_BUFFER_COUNT;
 800148c:	4b68      	ldr	r3, [pc, #416]	@ (8001630 <main+0x320>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	4b69      	ldr	r3, [pc, #420]	@ (8001638 <main+0x328>)
 8001494:	fb83 1302 	smull	r1, r3, r3, r2
 8001498:	1099      	asrs	r1, r3, #2
 800149a:	17d3      	asrs	r3, r2, #31
 800149c:	1ac9      	subs	r1, r1, r3
 800149e:	460b      	mov	r3, r1
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	440b      	add	r3, r1
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	1ad1      	subs	r1, r2, r3
 80014a8:	b2ca      	uxtb	r2, r1
 80014aa:	4b61      	ldr	r3, [pc, #388]	@ (8001630 <main+0x320>)
 80014ac:	701a      	strb	r2, [r3, #0]
				udp_buffer[udp_buffer_head].len = 0;
 80014ae:	4b60      	ldr	r3, [pc, #384]	@ (8001630 <main+0x320>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	4a5f      	ldr	r2, [pc, #380]	@ (8001634 <main+0x324>)
 80014b6:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	4413      	add	r3, r2
 80014c0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80014c4:	2200      	movs	r2, #0
 80014c6:	801a      	strh	r2, [r3, #0]
 80014c8:	e086      	b.n	80015d8 <main+0x2c8>
			}
			else
			{
				udp_buffer[udp_buffer_head].data[udp_buffer[udp_buffer_head].len++] = can_frame.id & 0xFF;
 80014ca:	88bd      	ldrh	r5, [r7, #4]
 80014cc:	4b58      	ldr	r3, [pc, #352]	@ (8001630 <main+0x320>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	461c      	mov	r4, r3
 80014d2:	4b57      	ldr	r3, [pc, #348]	@ (8001630 <main+0x320>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	4956      	ldr	r1, [pc, #344]	@ (8001634 <main+0x324>)
 80014da:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	440b      	add	r3, r1
 80014e4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	1c59      	adds	r1, r3, #1
 80014ec:	b28e      	uxth	r6, r1
 80014ee:	4951      	ldr	r1, [pc, #324]	@ (8001634 <main+0x324>)
 80014f0:	f44f 70fb 	mov.w	r0, #502	@ 0x1f6
 80014f4:	fb00 f202 	mul.w	r2, r0, r2
 80014f8:	440a      	add	r2, r1
 80014fa:	f502 72fa 	add.w	r2, r2, #500	@ 0x1f4
 80014fe:	4631      	mov	r1, r6
 8001500:	8011      	strh	r1, [r2, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	b2e9      	uxtb	r1, r5
 8001506:	4a4b      	ldr	r2, [pc, #300]	@ (8001634 <main+0x324>)
 8001508:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 800150c:	fb04 f303 	mul.w	r3, r4, r3
 8001510:	4413      	add	r3, r2
 8001512:	4403      	add	r3, r0
 8001514:	460a      	mov	r2, r1
 8001516:	701a      	strb	r2, [r3, #0]
				udp_buffer[udp_buffer_head].data[udp_buffer[udp_buffer_head].len++] = can_frame.len & 0xFF;
 8001518:	4b45      	ldr	r3, [pc, #276]	@ (8001630 <main+0x320>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461c      	mov	r4, r3
 800151e:	4b44      	ldr	r3, [pc, #272]	@ (8001630 <main+0x320>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	4943      	ldr	r1, [pc, #268]	@ (8001634 <main+0x324>)
 8001526:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	440b      	add	r3, r1
 8001530:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001534:	881b      	ldrh	r3, [r3, #0]
 8001536:	1c59      	adds	r1, r3, #1
 8001538:	b28d      	uxth	r5, r1
 800153a:	493e      	ldr	r1, [pc, #248]	@ (8001634 <main+0x324>)
 800153c:	f44f 70fb 	mov.w	r0, #502	@ 0x1f6
 8001540:	fb00 f202 	mul.w	r2, r0, r2
 8001544:	440a      	add	r2, r1
 8001546:	f502 72fa 	add.w	r2, r2, #500	@ 0x1f4
 800154a:	4629      	mov	r1, r5
 800154c:	8011      	strh	r1, [r2, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	79b9      	ldrb	r1, [r7, #6]
 8001552:	4a38      	ldr	r2, [pc, #224]	@ (8001634 <main+0x324>)
 8001554:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 8001558:	fb04 f303 	mul.w	r3, r4, r3
 800155c:	4413      	add	r3, r2
 800155e:	4403      	add	r3, r0
 8001560:	460a      	mov	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]
				memcpy(udp_buffer[udp_buffer_head].data + udp_buffer[udp_buffer_head].len, can_frame.data, can_frame.len);
 8001564:	4b32      	ldr	r3, [pc, #200]	@ (8001630 <main+0x320>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4a30      	ldr	r2, [pc, #192]	@ (8001634 <main+0x324>)
 8001574:	4413      	add	r3, r2
 8001576:	4a2e      	ldr	r2, [pc, #184]	@ (8001630 <main+0x320>)
 8001578:	7812      	ldrb	r2, [r2, #0]
 800157a:	4610      	mov	r0, r2
 800157c:	492d      	ldr	r1, [pc, #180]	@ (8001634 <main+0x324>)
 800157e:	f44f 72fb 	mov.w	r2, #502	@ 0x1f6
 8001582:	fb00 f202 	mul.w	r2, r0, r2
 8001586:	440a      	add	r2, r1
 8001588:	f502 72fa 	add.w	r2, r2, #500	@ 0x1f4
 800158c:	8812      	ldrh	r2, [r2, #0]
 800158e:	1898      	adds	r0, r3, r2
 8001590:	79bb      	ldrb	r3, [r7, #6]
 8001592:	461a      	mov	r2, r3
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	3303      	adds	r3, #3
 8001598:	4619      	mov	r1, r3
 800159a:	f009 fa88 	bl	800aaae <memcpy>
				udp_buffer[udp_buffer_head].len += can_frame.len;
 800159e:	4b24      	ldr	r3, [pc, #144]	@ (8001630 <main+0x320>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	4619      	mov	r1, r3
 80015a4:	4a23      	ldr	r2, [pc, #140]	@ (8001634 <main+0x324>)
 80015a6:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 80015aa:	fb01 f303 	mul.w	r3, r1, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	79ba      	ldrb	r2, [r7, #6]
 80015b8:	4611      	mov	r1, r2
 80015ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001630 <main+0x320>)
 80015bc:	7812      	ldrb	r2, [r2, #0]
 80015be:	4610      	mov	r0, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	b299      	uxth	r1, r3
 80015c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001634 <main+0x324>)
 80015c6:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 80015ca:	fb00 f303 	mul.w	r3, r0, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80015d4:	460a      	mov	r2, r1
 80015d6:	801a      	strh	r2, [r3, #0]
		while (CFCB_Pop(&can_frames_cb, &can_frame) == 1)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	4818      	ldr	r0, [pc, #96]	@ (8001640 <main+0x330>)
 80015de:	f000 ff8b 	bl	80024f8 <CFCB_Pop>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	f43f af2c 	beq.w	8001442 <main+0x132>
 80015ea:	e02c      	b.n	8001646 <main+0x336>
 80015ec:	200021e0 	.word	0x200021e0
 80015f0:	20000244 	.word	0x20000244
 80015f4:	20002228 	.word	0x20002228
 80015f8:	20000288 	.word	0x20000288
 80015fc:	20002198 	.word	0x20002198
 8001600:	200002cc 	.word	0x200002cc
 8001604:	0800c848 	.word	0x0800c848
 8001608:	20002150 	.word	0x20002150
 800160c:	20002390 	.word	0x20002390
 8001610:	0800c860 	.word	0x0800c860
 8001614:	20000ae0 	.word	0x20000ae0
 8001618:	20000310 	.word	0x20000310
 800161c:	0800c878 	.word	0x0800c878
 8001620:	0800c88c 	.word	0x0800c88c
 8001624:	200001f0 	.word	0x200001f0
 8001628:	20000218 	.word	0x20000218
 800162c:	0800c8a4 	.word	0x0800c8a4
 8001630:	20002128 	.word	0x20002128
 8001634:	20000d8c 	.word	0x20000d8c
 8001638:	66666667 	.word	0x66666667
 800163c:	20002129 	.word	0x20002129
 8001640:	20000d08 	.word	0x20000d08
					break;
 8001644:	bf00      	nop
			}
		}

		gsm_err = GSM_Feed(&gsm);
 8001646:	4856      	ldr	r0, [pc, #344]	@ (80017a0 <main+0x490>)
 8001648:	f002 f8ce 	bl	80037e8 <GSM_Feed>
 800164c:	4603      	mov	r3, r0
 800164e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		if(gsm_err == GSM_IDLE)
 8001650:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8001652:	f249 0204 	movw	r2, #36868	@ 0x9004
 8001656:	4293      	cmp	r3, r2
 8001658:	d12f      	bne.n	80016ba <main+0x3aa>
		{
			if (udp_buffer_head != udp_buffer_tail)
 800165a:	4b52      	ldr	r3, [pc, #328]	@ (80017a4 <main+0x494>)
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	4b52      	ldr	r3, [pc, #328]	@ (80017a8 <main+0x498>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d029      	beq.n	80016ba <main+0x3aa>
			{
				GSM_SendUDP(&gsm, udp_buffer[udp_buffer_tail].data, udp_buffer[udp_buffer_tail].len);
 8001666:	4b50      	ldr	r3, [pc, #320]	@ (80017a8 <main+0x498>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 8001670:	fb02 f303 	mul.w	r3, r2, r3
 8001674:	4a4d      	ldr	r2, [pc, #308]	@ (80017ac <main+0x49c>)
 8001676:	1899      	adds	r1, r3, r2
 8001678:	4b4b      	ldr	r3, [pc, #300]	@ (80017a8 <main+0x498>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	4a4b      	ldr	r2, [pc, #300]	@ (80017ac <main+0x49c>)
 8001680:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 8001684:	fb00 f303 	mul.w	r3, r0, r3
 8001688:	4413      	add	r3, r2
 800168a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4843      	ldr	r0, [pc, #268]	@ (80017a0 <main+0x490>)
 8001694:	f003 f91c 	bl	80048d0 <GSM_SendUDP>
				udp_buffer_tail = (udp_buffer_tail + 1) % UDP_BUFFER_COUNT;
 8001698:	4b43      	ldr	r3, [pc, #268]	@ (80017a8 <main+0x498>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	4b44      	ldr	r3, [pc, #272]	@ (80017b0 <main+0x4a0>)
 80016a0:	fb83 1302 	smull	r1, r3, r3, r2
 80016a4:	1099      	asrs	r1, r3, #2
 80016a6:	17d3      	asrs	r3, r2, #31
 80016a8:	1ac9      	subs	r1, r1, r3
 80016aa:	460b      	mov	r3, r1
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	1ad1      	subs	r1, r2, r3
 80016b4:	b2ca      	uxtb	r2, r1
 80016b6:	4b3c      	ldr	r3, [pc, #240]	@ (80017a8 <main+0x498>)
 80016b8:	701a      	strb	r2, [r3, #0]
			}
			//GSM_SendUDPString(&gsm, "ABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZabcdefghijklmnopqrstuvwxzABCDEFGHIJKLMNOPRSTUVWXYZ");
		}

		if(UartRcvr_available(&usart1_rcvr))
 80016ba:	483e      	ldr	r0, [pc, #248]	@ (80017b4 <main+0x4a4>)
 80016bc:	f003 f9ee 	bl	8004a9c <UartRcvr_available>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d088      	beq.n	80015d8 <main+0x2c8>
		{
			len = UartRcvr_get_input(&usart1_rcvr, rx_buf + rx_index, RX_BUF_SIZE - rx_index - 1);
 80016c6:	4b3c      	ldr	r3, [pc, #240]	@ (80017b8 <main+0x4a8>)
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b3b      	ldr	r3, [pc, #236]	@ (80017bc <main+0x4ac>)
 80016ce:	18d1      	adds	r1, r2, r3
 80016d0:	4b39      	ldr	r3, [pc, #228]	@ (80017b8 <main+0x4a8>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	f1c3 03fe 	rsb	r3, r3, #254	@ 0xfe
 80016d8:	b29b      	uxth	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	4835      	ldr	r0, [pc, #212]	@ (80017b4 <main+0x4a4>)
 80016de:	f003 fa1b 	bl	8004b18 <UartRcvr_get_input>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b36      	ldr	r3, [pc, #216]	@ (80017c0 <main+0x4b0>)
 80016e8:	801a      	strh	r2, [r3, #0]
			if(len == 0) continue;
 80016ea:	4b35      	ldr	r3, [pc, #212]	@ (80017c0 <main+0x4b0>)
 80016ec:	881b      	ldrh	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d052      	beq.n	8001798 <main+0x488>
			rx_index += len;
 80016f2:	4b31      	ldr	r3, [pc, #196]	@ (80017b8 <main+0x4a8>)
 80016f4:	881a      	ldrh	r2, [r3, #0]
 80016f6:	4b32      	ldr	r3, [pc, #200]	@ (80017c0 <main+0x4b0>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	4b2e      	ldr	r3, [pc, #184]	@ (80017b8 <main+0x4a8>)
 8001700:	801a      	strh	r2, [r3, #0]
			if (rx_buf[rx_index - 1] == '\n' || rx_buf[rx_index - 1] == '\r') {
 8001702:	4b2d      	ldr	r3, [pc, #180]	@ (80017b8 <main+0x4a8>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	3b01      	subs	r3, #1
 8001708:	4a2c      	ldr	r2, [pc, #176]	@ (80017bc <main+0x4ac>)
 800170a:	5cd3      	ldrb	r3, [r2, r3]
 800170c:	2b0a      	cmp	r3, #10
 800170e:	d006      	beq.n	800171e <main+0x40e>
 8001710:	4b29      	ldr	r3, [pc, #164]	@ (80017b8 <main+0x4a8>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	3b01      	subs	r3, #1
 8001716:	4a29      	ldr	r2, [pc, #164]	@ (80017bc <main+0x4ac>)
 8001718:	5cd3      	ldrb	r3, [r2, r3]
 800171a:	2b0d      	cmp	r3, #13
 800171c:	d13e      	bne.n	800179c <main+0x48c>
				rx_buf[rx_index - 1] = 0;
 800171e:	4b26      	ldr	r3, [pc, #152]	@ (80017b8 <main+0x4a8>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	3b01      	subs	r3, #1
 8001724:	4a25      	ldr	r2, [pc, #148]	@ (80017bc <main+0x4ac>)
 8001726:	2100      	movs	r1, #0
 8001728:	54d1      	strb	r1, [r2, r3]
				rx_index = 0;
 800172a:	4b23      	ldr	r3, [pc, #140]	@ (80017b8 <main+0x4a8>)
 800172c:	2200      	movs	r2, #0
 800172e:	801a      	strh	r2, [r3, #0]
			}
			else continue;

			prints("U1: ");
 8001730:	4824      	ldr	r0, [pc, #144]	@ (80017c4 <main+0x4b4>)
 8001732:	f000 f969 	bl	8001a08 <prints>
			prints((char*) rx_buf);
 8001736:	4821      	ldr	r0, [pc, #132]	@ (80017bc <main+0x4ac>)
 8001738:	f000 f966 	bl	8001a08 <prints>
			prints("\r\n");
 800173c:	4822      	ldr	r0, [pc, #136]	@ (80017c8 <main+0x4b8>)
 800173e:	f000 f963 	bl	8001a08 <prints>

			uint32_t baud_rate = atoi((char*) rx_buf);
 8001742:	481e      	ldr	r0, [pc, #120]	@ (80017bc <main+0x4ac>)
 8001744:	f008 f912 	bl	800996c <atoi>
 8001748:	4603      	mov	r3, r0
 800174a:	63bb      	str	r3, [r7, #56]	@ 0x38
			if (baud_rate == 115200 || baud_rate == 921600)
 800174c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800174e:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 8001752:	d003      	beq.n	800175c <main+0x44c>
 8001754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001756:	f5b3 2f61 	cmp.w	r3, #921600	@ 0xe1000
 800175a:	d10e      	bne.n	800177a <main+0x46a>
			{
				snprintf((char*) str, STR_BUF_SIZE, "Changing baud rate to %ld\r\n", baud_rate);
 800175c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800175e:	4a1b      	ldr	r2, [pc, #108]	@ (80017cc <main+0x4bc>)
 8001760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001764:	481a      	ldr	r0, [pc, #104]	@ (80017d0 <main+0x4c0>)
 8001766:	f008 fff5 	bl	800a754 <sniprintf>
				prints((char*) str);
 800176a:	4819      	ldr	r0, [pc, #100]	@ (80017d0 <main+0x4c0>)
 800176c:	f000 f94c 	bl	8001a08 <prints>
				UartRcvr_set_baud_rate(&usart2_rcvr, baud_rate);
 8001770:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001772:	4818      	ldr	r0, [pc, #96]	@ (80017d4 <main+0x4c4>)
 8001774:	f003 fa62 	bl	8004c3c <UartRcvr_set_baud_rate>
 8001778:	e011      	b.n	800179e <main+0x48e>
			}
			else
			{
				//while ((gsm_err = GSM_Feed(&gsm)) != GSM_IDLE) {}

				snprintf((char*) str, STR_BUF_SIZE, "%s\r\n", rx_buf);
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <main+0x4ac>)
 800177c:	4a16      	ldr	r2, [pc, #88]	@ (80017d8 <main+0x4c8>)
 800177e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001782:	4813      	ldr	r0, [pc, #76]	@ (80017d0 <main+0x4c0>)
 8001784:	f008 ffe6 	bl	800a754 <sniprintf>
				GSM_at(&gsm, (const char*)str, 0, 1000);
 8001788:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178c:	2200      	movs	r2, #0
 800178e:	4910      	ldr	r1, [pc, #64]	@ (80017d0 <main+0x4c0>)
 8001790:	4803      	ldr	r0, [pc, #12]	@ (80017a0 <main+0x490>)
 8001792:	f002 f80f 	bl	80037b4 <GSM_at>
 8001796:	e71f      	b.n	80015d8 <main+0x2c8>
			if(len == 0) continue;
 8001798:	bf00      	nop
 800179a:	e71d      	b.n	80015d8 <main+0x2c8>
			else continue;
 800179c:	bf00      	nop
		while (CFCB_Pop(&can_frames_cb, &can_frame) == 1)
 800179e:	e71b      	b.n	80015d8 <main+0x2c8>
 80017a0:	20000310 	.word	0x20000310
 80017a4:	20002128 	.word	0x20002128
 80017a8:	20002129 	.word	0x20002129
 80017ac:	20000d8c 	.word	0x20000d8c
 80017b0:	66666667 	.word	0x66666667
 80017b4:	20000244 	.word	0x20000244
 80017b8:	20000adc 	.word	0x20000adc
 80017bc:	200009dc 	.word	0x200009dc
 80017c0:	20000ce0 	.word	0x20000ce0
 80017c4:	0800c8b8 	.word	0x0800c8b8
 80017c8:	0800c8c0 	.word	0x0800c8c0
 80017cc:	0800c8c4 	.word	0x0800c8c4
 80017d0:	20000ae0 	.word	0x20000ae0
 80017d4:	20000288 	.word	0x20000288
 80017d8:	0800c8e0 	.word	0x0800c8e0

080017dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b094      	sub	sp, #80	@ 0x50
 80017e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e2:	f107 0320 	add.w	r3, r7, #32
 80017e6:	2230      	movs	r2, #48	@ 0x30
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f009 f8be 	bl	800a96c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <SystemClock_Config+0xe0>)
 8001806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001808:	4a2c      	ldr	r2, [pc, #176]	@ (80018bc <SystemClock_Config+0xe0>)
 800180a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800180e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001810:	4b2a      	ldr	r3, [pc, #168]	@ (80018bc <SystemClock_Config+0xe0>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800181c:	2300      	movs	r3, #0
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	4b27      	ldr	r3, [pc, #156]	@ (80018c0 <SystemClock_Config+0xe4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001828:	4a25      	ldr	r2, [pc, #148]	@ (80018c0 <SystemClock_Config+0xe4>)
 800182a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b23      	ldr	r3, [pc, #140]	@ (80018c0 <SystemClock_Config+0xe4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800183c:	230a      	movs	r3, #10
 800183e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001840:	2301      	movs	r3, #1
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001844:	2310      	movs	r3, #16
 8001846:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184c:	2302      	movs	r3, #2
 800184e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001850:	2300      	movs	r3, #0
 8001852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001854:	2308      	movs	r3, #8
 8001856:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001858:	235a      	movs	r3, #90	@ 0x5a
 800185a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800185c:	2302      	movs	r3, #2
 800185e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001860:	2304      	movs	r3, #4
 8001862:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001864:	f107 0320 	add.w	r3, r7, #32
 8001868:	4618      	mov	r0, r3
 800186a:	f005 f999 	bl	8006ba0 <HAL_RCC_OscConfig>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001874:	f000 f8d8 	bl	8001a28 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001878:	f005 f942 	bl	8006b00 <HAL_PWREx_EnableOverDrive>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001882:	f000 f8d1 	bl	8001a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001886:	230f      	movs	r3, #15
 8001888:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800188a:	2302      	movs	r3, #2
 800188c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001898:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800189c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	2102      	movs	r1, #2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f005 fbf3 	bl	8007090 <HAL_RCC_ClockConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80018b0:	f000 f8ba 	bl	8001a28 <Error_Handler>
  }
}
 80018b4:	bf00      	nop
 80018b6:	3750      	adds	r7, #80	@ 0x50
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40007000 	.word	0x40007000

080018c4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_rx_data) == HAL_OK)
 80018cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80018ce:	4a0f      	ldr	r2, [pc, #60]	@ (800190c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80018d0:	2100      	movs	r1, #0
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f003 fedc 	bl	8005690 <HAL_CAN_GetRxMessage>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d111      	bne.n	8001902 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
	{
		if (CFCB_IsFull(&can_frames_cb))
 80018de:	480c      	ldr	r0, [pc, #48]	@ (8001910 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80018e0:	f000 fd9d 	bl	800241e <CFCB_IsFull>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10a      	bne.n	8001900 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>
		{
			//prints("CAN frames buffer full\r\n");
			return;
		}

		if(CFCB_Push(&can_frames_cb, can_rx_header.StdId, can_rx_header.DLC, can_rx_data) == 0)
 80018ea:	4b08      	ldr	r3, [pc, #32]	@ (800190c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	b299      	uxth	r1, r3
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 80018f8:	4805      	ldr	r0, [pc, #20]	@ (8001910 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80018fa:	f000 fdb2 	bl	8002462 <CFCB_Push>
 80018fe:	e000      	b.n	8001902 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
			return;
 8001900:	bf00      	nop
		{
			//prints("GCB_Push failed\r\n");
		}
	}

}
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000d00 	.word	0x20000d00
 800190c:	20000ce4 	.word	0x20000ce4
 8001910:	20000d08 	.word	0x20000d08

08001914 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
    if(huart->Instance == USART1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a1b      	ldr	r2, [pc, #108]	@ (8001994 <HAL_UARTEx_RxEventCallback+0x80>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10c      	bne.n	8001944 <HAL_UARTEx_RxEventCallback+0x30>
    {
    	UartRcvr_it_trigger(&usart1_rcvr, size);
 800192a:	887b      	ldrh	r3, [r7, #2]
 800192c:	4619      	mov	r1, r3
 800192e:	481a      	ldr	r0, [pc, #104]	@ (8001998 <HAL_UARTEx_RxEventCallback+0x84>)
 8001930:	f003 facd 	bl	8004ece <UartRcvr_it_trigger>
    	if(huart->RxEventType == HAL_UART_RXEVENT_IDLE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001938:	2b02      	cmp	r3, #2
 800193a:	d126      	bne.n	800198a <HAL_UARTEx_RxEventCallback+0x76>
    	{
    		UartRcvr_it_swap(&usart1_rcvr);
 800193c:	4816      	ldr	r0, [pc, #88]	@ (8001998 <HAL_UARTEx_RxEventCallback+0x84>)
 800193e:	f003 fa17 	bl	8004d70 <UartRcvr_it_swap>
		if (huart->RxEventType == HAL_UART_RXEVENT_IDLE)
		{
			UartRcvr_it_swap(&uart7_rcvr);
		}
	}
}
 8001942:	e022      	b.n	800198a <HAL_UARTEx_RxEventCallback+0x76>
    else if (huart->Instance == USART2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a14      	ldr	r2, [pc, #80]	@ (800199c <HAL_UARTEx_RxEventCallback+0x88>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d10c      	bne.n	8001968 <HAL_UARTEx_RxEventCallback+0x54>
    	UartRcvr_it_trigger(&usart2_rcvr, size);
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	4619      	mov	r1, r3
 8001952:	4813      	ldr	r0, [pc, #76]	@ (80019a0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8001954:	f003 fabb 	bl	8004ece <UartRcvr_it_trigger>
    	if(huart->RxEventType == HAL_UART_RXEVENT_IDLE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800195c:	2b02      	cmp	r3, #2
 800195e:	d114      	bne.n	800198a <HAL_UARTEx_RxEventCallback+0x76>
    		UartRcvr_it_swap(&usart2_rcvr);
 8001960:	480f      	ldr	r0, [pc, #60]	@ (80019a0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8001962:	f003 fa05 	bl	8004d70 <UartRcvr_it_swap>
}
 8001966:	e010      	b.n	800198a <HAL_UARTEx_RxEventCallback+0x76>
    else if (huart->Instance == UART7) {
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0d      	ldr	r2, [pc, #52]	@ (80019a4 <HAL_UARTEx_RxEventCallback+0x90>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d10b      	bne.n	800198a <HAL_UARTEx_RxEventCallback+0x76>
		UartRcvr_it_trigger(&uart7_rcvr, size);
 8001972:	887b      	ldrh	r3, [r7, #2]
 8001974:	4619      	mov	r1, r3
 8001976:	480c      	ldr	r0, [pc, #48]	@ (80019a8 <HAL_UARTEx_RxEventCallback+0x94>)
 8001978:	f003 faa9 	bl	8004ece <UartRcvr_it_trigger>
		if (huart->RxEventType == HAL_UART_RXEVENT_IDLE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001980:	2b02      	cmp	r3, #2
 8001982:	d102      	bne.n	800198a <HAL_UARTEx_RxEventCallback+0x76>
			UartRcvr_it_swap(&uart7_rcvr);
 8001984:	4808      	ldr	r0, [pc, #32]	@ (80019a8 <HAL_UARTEx_RxEventCallback+0x94>)
 8001986:	f003 f9f3 	bl	8004d70 <UartRcvr_it_swap>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40011000 	.word	0x40011000
 8001998:	20000244 	.word	0x20000244
 800199c:	40004400 	.word	0x40004400
 80019a0:	20000288 	.word	0x20000288
 80019a4:	40007800 	.word	0x40007800
 80019a8:	200002cc 	.word	0x200002cc

080019ac <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <HAL_UART_ErrorCallback+0x44>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d103      	bne.n	80019c6 <HAL_UART_ErrorCallback+0x1a>
		UartRcvr_it_error(&usart1_rcvr);
 80019be:	480d      	ldr	r0, [pc, #52]	@ (80019f4 <HAL_UART_ErrorCallback+0x48>)
 80019c0:	f003 fac4 	bl	8004f4c <UartRcvr_it_error>
	} else if (huart->Instance == USART2) {
		UartRcvr_it_error(&usart2_rcvr);
	} else if (huart->Instance == UART7) {
		UartRcvr_it_error(&uart7_rcvr);
	}
}
 80019c4:	e010      	b.n	80019e8 <HAL_UART_ErrorCallback+0x3c>
	} else if (huart->Instance == USART2) {
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a0b      	ldr	r2, [pc, #44]	@ (80019f8 <HAL_UART_ErrorCallback+0x4c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d103      	bne.n	80019d8 <HAL_UART_ErrorCallback+0x2c>
		UartRcvr_it_error(&usart2_rcvr);
 80019d0:	480a      	ldr	r0, [pc, #40]	@ (80019fc <HAL_UART_ErrorCallback+0x50>)
 80019d2:	f003 fabb 	bl	8004f4c <UartRcvr_it_error>
}
 80019d6:	e007      	b.n	80019e8 <HAL_UART_ErrorCallback+0x3c>
	} else if (huart->Instance == UART7) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a08      	ldr	r2, [pc, #32]	@ (8001a00 <HAL_UART_ErrorCallback+0x54>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d102      	bne.n	80019e8 <HAL_UART_ErrorCallback+0x3c>
		UartRcvr_it_error(&uart7_rcvr);
 80019e2:	4808      	ldr	r0, [pc, #32]	@ (8001a04 <HAL_UART_ErrorCallback+0x58>)
 80019e4:	f003 fab2 	bl	8004f4c <UartRcvr_it_error>
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40011000 	.word	0x40011000
 80019f4:	20000244 	.word	0x20000244
 80019f8:	40004400 	.word	0x40004400
 80019fc:	20000288 	.word	0x20000288
 8001a00:	40007800 	.word	0x40007800
 8001a04:	200002cc 	.word	0x200002cc

08001a08 <prints>:


HAL_StatusTypeDef prints(const char* str)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	return UartRcvr_print(&usart1_rcvr, str);
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <prints+0x1c>)
 8001a14:	f003 f997 	bl	8004d46 <UartRcvr_print>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000244 	.word	0x20000244

08001a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	prints("Error_Handler\r\n");
 8001a30:	4804      	ldr	r0, [pc, #16]	@ (8001a44 <Error_Handler+0x1c>)
 8001a32:	f7ff ffe9 	bl	8001a08 <prints>
	HAL_Delay(10000);
 8001a36:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001a3a:	f003 fb15 	bl	8005068 <HAL_Delay>
	// restart the MCU
	NVIC_SystemReset();
 8001a3e:	f7ff fc51 	bl	80012e4 <__NVIC_SystemReset>
 8001a42:	bf00      	nop
 8001a44:	0800c8e8 	.word	0x0800c8e8

08001a48 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a60:	4b24      	ldr	r3, [pc, #144]	@ (8001af4 <MX_RTC_Init+0xac>)
 8001a62:	4a25      	ldr	r2, [pc, #148]	@ (8001af8 <MX_RTC_Init+0xb0>)
 8001a64:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a66:	4b23      	ldr	r3, [pc, #140]	@ (8001af4 <MX_RTC_Init+0xac>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a6c:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <MX_RTC_Init+0xac>)
 8001a6e:	227f      	movs	r2, #127	@ 0x7f
 8001a70:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a72:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <MX_RTC_Init+0xac>)
 8001a74:	22ff      	movs	r2, #255	@ 0xff
 8001a76:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a78:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <MX_RTC_Init+0xac>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_RTC_Init+0xac>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <MX_RTC_Init+0xac>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a8a:	481a      	ldr	r0, [pc, #104]	@ (8001af4 <MX_RTC_Init+0xac>)
 8001a8c:	f005 fea0 	bl	80077d0 <HAL_RTC_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001a96:	f7ff ffc7 	bl	8001a28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480f      	ldr	r0, [pc, #60]	@ (8001af4 <MX_RTC_Init+0xac>)
 8001ab6:	f005 ff0e 	bl	80078d6 <HAL_RTC_SetTime>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001ac0:	f7ff ffb2 	bl	8001a28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001acc:	2301      	movs	r3, #1
 8001ace:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4806      	ldr	r0, [pc, #24]	@ (8001af4 <MX_RTC_Init+0xac>)
 8001adc:	f005 ff95 	bl	8007a0a <HAL_RTC_SetDate>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001ae6:	f7ff ff9f 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	2000212c 	.word	0x2000212c
 8001af8:	40002800 	.word	0x40002800

08001afc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08e      	sub	sp, #56	@ 0x38
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	2230      	movs	r2, #48	@ 0x30
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f008 ff2d 	bl	800a96c <memset>
  if(rtcHandle->Instance==RTC)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a0c      	ldr	r2, [pc, #48]	@ (8001b48 <HAL_RTC_MspInit+0x4c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d111      	bne.n	8001b40 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b1c:	2320      	movs	r3, #32
 8001b1e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b24:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b26:	f107 0308 	add.w	r3, r7, #8
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f005 fc90 	bl	8007450 <HAL_RCCEx_PeriphCLKConfig>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001b36:	f7ff ff77 	bl	8001a28 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b3a:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <HAL_RTC_MspInit+0x50>)
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b40:	bf00      	nop
 8001b42:	3738      	adds	r7, #56	@ 0x38
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40002800 	.word	0x40002800
 8001b4c:	42470e3c 	.word	0x42470e3c

08001b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	4b10      	ldr	r3, [pc, #64]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b66:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	4b09      	ldr	r3, [pc, #36]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	4a08      	ldr	r2, [pc, #32]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b82:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <HAL_MspInit+0x4c>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <__NVIC_SystemReset>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba4:	f3bf 8f4f 	dsb	sy
}
 8001ba8:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001baa:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <__NVIC_SystemReset+0x24>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001bb2:	4904      	ldr	r1, [pc, #16]	@ (8001bc4 <__NVIC_SystemReset+0x24>)
 8001bb4:	4b04      	ldr	r3, [pc, #16]	@ (8001bc8 <__NVIC_SystemReset+0x28>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bba:	f3bf 8f4f 	dsb	sy
}
 8001bbe:	bf00      	nop
    __NOP();
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <__NVIC_SystemReset+0x20>
 8001bc4:	e000ed00 	.word	0xe000ed00
 8001bc8:	05fa0004 	.word	0x05fa0004

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	NVIC_SystemReset();
 8001bd8:	f7ff ffe2 	bl	8001ba0 <__NVIC_SystemReset>

08001bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	NVIC_SystemReset();
 8001be0:	f7ff ffde 	bl	8001ba0 <__NVIC_SystemReset>

08001be4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	NVIC_SystemReset();
 8001be8:	f7ff ffda 	bl	8001ba0 <__NVIC_SystemReset>

08001bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	NVIC_SystemReset();
 8001bf0:	f7ff ffd6 	bl	8001ba0 <__NVIC_SystemReset>

08001bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c22:	f003 fa01 	bl	8005028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <DMA1_Stream3_IRQHandler+0x10>)
 8001c32:	f004 fb4f 	bl	80062d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20002270 	.word	0x20002270

08001c40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <DMA1_Stream5_IRQHandler+0x10>)
 8001c46:	f004 fb45 	bl	80062d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20002330 	.word	0x20002330

08001c54 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c58:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <CAN1_RX0_IRQHandler+0x10>)
 8001c5a:	f003 fe61 	bl	8005920 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200001f0 	.word	0x200001f0

08001c68 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <CAN1_RX1_IRQHandler+0x10>)
 8001c6e:	f003 fe57 	bl	8005920 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200001f0 	.word	0x200001f0

08001c7c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c80:	4802      	ldr	r0, [pc, #8]	@ (8001c8c <CAN1_SCE_IRQHandler+0x10>)
 8001c82:	f003 fe4d 	bl	8005920 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200001f0 	.word	0x200001f0

08001c90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	FT_IT_Feed(ft);
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <TIM2_IRQHandler+0x18>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f000 fc70 	bl	800257e <FT_IT_Feed>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c9e:	4803      	ldr	r0, [pc, #12]	@ (8001cac <TIM2_IRQHandler+0x1c>)
 8001ca0:	f006 f890 	bl	8007dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20002390 	.word	0x20002390
 8001cac:	20002150 	.word	0x20002150

08001cb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <USART1_IRQHandler+0x10>)
 8001cb6:	f006 fd7d 	bl	80087b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200021e0 	.word	0x200021e0

08001cc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cc8:	4802      	ldr	r0, [pc, #8]	@ (8001cd4 <USART2_IRQHandler+0x10>)
 8001cca:	f006 fd73 	bl	80087b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20002228 	.word	0x20002228

08001cd8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cdc:	4802      	ldr	r0, [pc, #8]	@ (8001ce8 <DMA2_Stream2_IRQHandler+0x10>)
 8001cde:	f004 faf9 	bl	80062d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	200022d0 	.word	0x200022d0

08001cec <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001cf0:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <CAN2_RX0_IRQHandler+0x10>)
 8001cf2:	f003 fe15 	bl	8005920 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000218 	.word	0x20000218

08001d00 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001d04:	4802      	ldr	r0, [pc, #8]	@ (8001d10 <CAN2_RX1_IRQHandler+0x10>)
 8001d06:	f003 fe0b 	bl	8005920 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000218 	.word	0x20000218

08001d14 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <CAN2_SCE_IRQHandler+0x10>)
 8001d1a:	f003 fe01 	bl	8005920 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000218 	.word	0x20000218

08001d28 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <UART7_IRQHandler+0x10>)
 8001d2e:	f006 fd41 	bl	80087b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20002198 	.word	0x20002198

08001d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_kill>:

int _kill(int pid, int sig)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d56:	f008 fe7d 	bl	800aa54 <__errno>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2216      	movs	r2, #22
 8001d5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <_exit>:

void _exit (int status)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d74:	f04f 31ff 	mov.w	r1, #4294967295
 8001d78:	6878      	ldr	r0, [r7, #4]
 8001d7a:	f7ff ffe7 	bl	8001d4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d7e:	bf00      	nop
 8001d80:	e7fd      	b.n	8001d7e <_exit+0x12>

08001d82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b086      	sub	sp, #24
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e00a      	b.n	8001daa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d94:	f3af 8000 	nop.w
 8001d98:	4601      	mov	r1, r0
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	60ba      	str	r2, [r7, #8]
 8001da0:	b2ca      	uxtb	r2, r1
 8001da2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	3301      	adds	r3, #1
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	dbf0      	blt.n	8001d94 <_read+0x12>
  }

  return len;
 8001db2:	687b      	ldr	r3, [r7, #4]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	e009      	b.n	8001de2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	60ba      	str	r2, [r7, #8]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	3301      	adds	r3, #1
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	dbf1      	blt.n	8001dce <_write+0x12>
  }
  return len;
 8001dea:	687b      	ldr	r3, [r7, #4]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3718      	adds	r7, #24
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <_close>:

int _close(int file)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e1c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_isatty>:

int _isatty(int file)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e34:	2301      	movs	r3, #1
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b085      	sub	sp, #20
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e64:	4a14      	ldr	r2, [pc, #80]	@ (8001eb8 <_sbrk+0x5c>)
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <_sbrk+0x60>)
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e70:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <_sbrk+0x64>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e78:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <_sbrk+0x64>)
 8001e7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ec4 <_sbrk+0x68>)
 8001e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d207      	bcs.n	8001e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e8c:	f008 fde2 	bl	800aa54 <__errno>
 8001e90:	4603      	mov	r3, r0
 8001e92:	220c      	movs	r2, #12
 8001e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	e009      	b.n	8001eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea2:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <_sbrk+0x64>)
 8001eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eae:	68fb      	ldr	r3, [r7, #12]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20030000 	.word	0x20030000
 8001ebc:	00000400 	.word	0x00000400
 8001ec0:	2000214c 	.word	0x2000214c
 8001ec4:	200024e8 	.word	0x200024e8

08001ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ecc:	4b06      	ldr	r3, [pc, #24]	@ (8001ee8 <SystemInit+0x20>)
 8001ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ed2:	4a05      	ldr	r2, [pc, #20]	@ (8001ee8 <SystemInit+0x20>)
 8001ed4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f00:	463b      	mov	r3, r7
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f08:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <MX_TIM2_Init+0x94>)
 8001f0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <MX_TIM2_Init+0x94>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f16:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <MX_TIM2_Init+0x94>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f1c:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <MX_TIM2_Init+0x94>)
 8001f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f24:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <MX_TIM2_Init+0x94>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2a:	4b15      	ldr	r3, [pc, #84]	@ (8001f80 <MX_TIM2_Init+0x94>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f30:	4813      	ldr	r0, [pc, #76]	@ (8001f80 <MX_TIM2_Init+0x94>)
 8001f32:	f005 fe8f 	bl	8007c54 <HAL_TIM_Base_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001f3c:	f7ff fd74 	bl	8001a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f46:	f107 0308 	add.w	r3, r7, #8
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480c      	ldr	r0, [pc, #48]	@ (8001f80 <MX_TIM2_Init+0x94>)
 8001f4e:	f006 f829 	bl	8007fa4 <HAL_TIM_ConfigClockSource>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001f58:	f7ff fd66 	bl	8001a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f64:	463b      	mov	r3, r7
 8001f66:	4619      	mov	r1, r3
 8001f68:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <MX_TIM2_Init+0x94>)
 8001f6a:	f006 fa5b 	bl	8008424 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f74:	f7ff fd58 	bl	8001a28 <Error_Handler>

  //HAL_TIM_Base_Start(&htim2);

  /* USER CODE END TIM2_Init 2 */

}
 8001f78:	bf00      	nop
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20002150 	.word	0x20002150

08001f84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f94:	d115      	bne.n	8001fc2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001fcc <HAL_TIM_Base_MspInit+0x48>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001fcc <HAL_TIM_Base_MspInit+0x48>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa6:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <HAL_TIM_Base_MspInit+0x48>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	201c      	movs	r0, #28
 8001fb8:	f003 ffbd 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fbc:	201c      	movs	r0, #28
 8001fbe:	f003 ffd6 	bl	8005f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <MX_UART7_Init+0x4c>)
 8001fd6:	4a12      	ldr	r2, [pc, #72]	@ (8002020 <MX_UART7_Init+0x50>)
 8001fd8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001fda:	4b10      	ldr	r3, [pc, #64]	@ (800201c <MX_UART7_Init+0x4c>)
 8001fdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fe0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800201c <MX_UART7_Init+0x4c>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <MX_UART7_Init+0x4c>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <MX_UART7_Init+0x4c>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	@ (800201c <MX_UART7_Init+0x4c>)
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <MX_UART7_Init+0x4c>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <MX_UART7_Init+0x4c>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	@ (800201c <MX_UART7_Init+0x4c>)
 8002008:	f006 fa9c 	bl	8008544 <HAL_UART_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8002012:	f7ff fd09 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20002198 	.word	0x20002198
 8002020:	40007800 	.word	0x40007800

08002024 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002028:	4b11      	ldr	r3, [pc, #68]	@ (8002070 <MX_USART1_UART_Init+0x4c>)
 800202a:	4a12      	ldr	r2, [pc, #72]	@ (8002074 <MX_USART1_UART_Init+0x50>)
 800202c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800202e:	4b10      	ldr	r3, [pc, #64]	@ (8002070 <MX_USART1_UART_Init+0x4c>)
 8002030:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8002034:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002036:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <MX_USART1_UART_Init+0x4c>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800203c:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <MX_USART1_UART_Init+0x4c>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002042:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <MX_USART1_UART_Init+0x4c>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002048:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <MX_USART1_UART_Init+0x4c>)
 800204a:	220c      	movs	r2, #12
 800204c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204e:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <MX_USART1_UART_Init+0x4c>)
 8002050:	2200      	movs	r2, #0
 8002052:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <MX_USART1_UART_Init+0x4c>)
 8002056:	2200      	movs	r2, #0
 8002058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800205a:	4805      	ldr	r0, [pc, #20]	@ (8002070 <MX_USART1_UART_Init+0x4c>)
 800205c:	f006 fa72 	bl	8008544 <HAL_UART_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002066:	f7ff fcdf 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200021e0 	.word	0x200021e0
 8002074:	40011000 	.word	0x40011000

08002078 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800207c:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 800207e:	4a12      	ldr	r2, [pc, #72]	@ (80020c8 <MX_USART2_UART_Init+0x50>)
 8002080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002082:	4b10      	ldr	r3, [pc, #64]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 8002084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002096:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ae:	4805      	ldr	r0, [pc, #20]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 80020b0:	f006 fa48 	bl	8008544 <HAL_UART_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ba:	f7ff fcb5 	bl	8001a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20002228 	.word	0x20002228
 80020c8:	40004400 	.word	0x40004400

080020cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08e      	sub	sp, #56	@ 0x38
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a9e      	ldr	r2, [pc, #632]	@ (8002364 <HAL_UART_MspInit+0x298>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d163      	bne.n	80021b6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
 80020f2:	4b9d      	ldr	r3, [pc, #628]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	4a9c      	ldr	r2, [pc, #624]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 80020f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80020fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fe:	4b9a      	ldr	r3, [pc, #616]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002106:	623b      	str	r3, [r7, #32]
 8002108:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	4b96      	ldr	r3, [pc, #600]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a95      	ldr	r2, [pc, #596]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 8002114:	f043 0320 	orr.w	r3, r3, #32
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b93      	ldr	r3, [pc, #588]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002126:	23c0      	movs	r3, #192	@ 0xc0
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002136:	2308      	movs	r3, #8
 8002138:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800213a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800213e:	4619      	mov	r1, r3
 8002140:	488a      	ldr	r0, [pc, #552]	@ (800236c <HAL_UART_MspInit+0x2a0>)
 8002142:	f004 fb31 	bl	80067a8 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8002146:	4b8a      	ldr	r3, [pc, #552]	@ (8002370 <HAL_UART_MspInit+0x2a4>)
 8002148:	4a8a      	ldr	r2, [pc, #552]	@ (8002374 <HAL_UART_MspInit+0x2a8>)
 800214a:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 800214c:	4b88      	ldr	r3, [pc, #544]	@ (8002370 <HAL_UART_MspInit+0x2a4>)
 800214e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002152:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002154:	4b86      	ldr	r3, [pc, #536]	@ (8002370 <HAL_UART_MspInit+0x2a4>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800215a:	4b85      	ldr	r3, [pc, #532]	@ (8002370 <HAL_UART_MspInit+0x2a4>)
 800215c:	2200      	movs	r2, #0
 800215e:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002160:	4b83      	ldr	r3, [pc, #524]	@ (8002370 <HAL_UART_MspInit+0x2a4>)
 8002162:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002166:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002168:	4b81      	ldr	r3, [pc, #516]	@ (8002370 <HAL_UART_MspInit+0x2a4>)
 800216a:	2200      	movs	r2, #0
 800216c:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216e:	4b80      	ldr	r3, [pc, #512]	@ (8002370 <HAL_UART_MspInit+0x2a4>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8002174:	4b7e      	ldr	r3, [pc, #504]	@ (8002370 <HAL_UART_MspInit+0x2a4>)
 8002176:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800217a:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800217c:	4b7c      	ldr	r3, [pc, #496]	@ (8002370 <HAL_UART_MspInit+0x2a4>)
 800217e:	2200      	movs	r2, #0
 8002180:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002182:	4b7b      	ldr	r3, [pc, #492]	@ (8002370 <HAL_UART_MspInit+0x2a4>)
 8002184:	2200      	movs	r2, #0
 8002186:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8002188:	4879      	ldr	r0, [pc, #484]	@ (8002370 <HAL_UART_MspInit+0x2a4>)
 800218a:	f003 ff0b 	bl	8005fa4 <HAL_DMA_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002194:	f7ff fc48 	bl	8001a28 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a75      	ldr	r2, [pc, #468]	@ (8002370 <HAL_UART_MspInit+0x2a4>)
 800219c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800219e:	4a74      	ldr	r2, [pc, #464]	@ (8002370 <HAL_UART_MspInit+0x2a4>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80021a4:	2200      	movs	r2, #0
 80021a6:	2100      	movs	r1, #0
 80021a8:	2052      	movs	r0, #82	@ 0x52
 80021aa:	f003 fec4 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80021ae:	2052      	movs	r0, #82	@ 0x52
 80021b0:	f003 fedd 	bl	8005f6e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80021b4:	e0d2      	b.n	800235c <HAL_UART_MspInit+0x290>
  else if(uartHandle->Instance==USART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6f      	ldr	r2, [pc, #444]	@ (8002378 <HAL_UART_MspInit+0x2ac>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d164      	bne.n	800228a <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	61bb      	str	r3, [r7, #24]
 80021c4:	4b68      	ldr	r3, [pc, #416]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 80021c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c8:	4a67      	ldr	r2, [pc, #412]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 80021ca:	f043 0310 	orr.w	r3, r3, #16
 80021ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80021d0:	4b65      	ldr	r3, [pc, #404]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	4b61      	ldr	r3, [pc, #388]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 80021e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e4:	4a60      	ldr	r2, [pc, #384]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021f8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800220a:	2307      	movs	r3, #7
 800220c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002212:	4619      	mov	r1, r3
 8002214:	4859      	ldr	r0, [pc, #356]	@ (800237c <HAL_UART_MspInit+0x2b0>)
 8002216:	f004 fac7 	bl	80067a8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800221a:	4b59      	ldr	r3, [pc, #356]	@ (8002380 <HAL_UART_MspInit+0x2b4>)
 800221c:	4a59      	ldr	r2, [pc, #356]	@ (8002384 <HAL_UART_MspInit+0x2b8>)
 800221e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002220:	4b57      	ldr	r3, [pc, #348]	@ (8002380 <HAL_UART_MspInit+0x2b4>)
 8002222:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002226:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002228:	4b55      	ldr	r3, [pc, #340]	@ (8002380 <HAL_UART_MspInit+0x2b4>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800222e:	4b54      	ldr	r3, [pc, #336]	@ (8002380 <HAL_UART_MspInit+0x2b4>)
 8002230:	2200      	movs	r2, #0
 8002232:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002234:	4b52      	ldr	r3, [pc, #328]	@ (8002380 <HAL_UART_MspInit+0x2b4>)
 8002236:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800223a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800223c:	4b50      	ldr	r3, [pc, #320]	@ (8002380 <HAL_UART_MspInit+0x2b4>)
 800223e:	2200      	movs	r2, #0
 8002240:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002242:	4b4f      	ldr	r3, [pc, #316]	@ (8002380 <HAL_UART_MspInit+0x2b4>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002248:	4b4d      	ldr	r3, [pc, #308]	@ (8002380 <HAL_UART_MspInit+0x2b4>)
 800224a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800224e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002250:	4b4b      	ldr	r3, [pc, #300]	@ (8002380 <HAL_UART_MspInit+0x2b4>)
 8002252:	2200      	movs	r2, #0
 8002254:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002256:	4b4a      	ldr	r3, [pc, #296]	@ (8002380 <HAL_UART_MspInit+0x2b4>)
 8002258:	2200      	movs	r2, #0
 800225a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800225c:	4848      	ldr	r0, [pc, #288]	@ (8002380 <HAL_UART_MspInit+0x2b4>)
 800225e:	f003 fea1 	bl	8005fa4 <HAL_DMA_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8002268:	f7ff fbde 	bl	8001a28 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a44      	ldr	r2, [pc, #272]	@ (8002380 <HAL_UART_MspInit+0x2b4>)
 8002270:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002272:	4a43      	ldr	r2, [pc, #268]	@ (8002380 <HAL_UART_MspInit+0x2b4>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	2025      	movs	r0, #37	@ 0x25
 800227e:	f003 fe5a 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002282:	2025      	movs	r0, #37	@ 0x25
 8002284:	f003 fe73 	bl	8005f6e <HAL_NVIC_EnableIRQ>
}
 8002288:	e068      	b.n	800235c <HAL_UART_MspInit+0x290>
  else if(uartHandle->Instance==USART2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a3e      	ldr	r2, [pc, #248]	@ (8002388 <HAL_UART_MspInit+0x2bc>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d163      	bne.n	800235c <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002294:	2300      	movs	r3, #0
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	4b33      	ldr	r3, [pc, #204]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 800229a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229c:	4a32      	ldr	r2, [pc, #200]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 800229e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a4:	4b30      	ldr	r3, [pc, #192]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 80022a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 80022ba:	f043 0308 	orr.w	r3, r3, #8
 80022be:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c0:	4b29      	ldr	r3, [pc, #164]	@ (8002368 <HAL_UART_MspInit+0x29c>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022cc:	2360      	movs	r3, #96	@ 0x60
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022dc:	2307      	movs	r3, #7
 80022de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022e4:	4619      	mov	r1, r3
 80022e6:	4829      	ldr	r0, [pc, #164]	@ (800238c <HAL_UART_MspInit+0x2c0>)
 80022e8:	f004 fa5e 	bl	80067a8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80022ec:	4b28      	ldr	r3, [pc, #160]	@ (8002390 <HAL_UART_MspInit+0x2c4>)
 80022ee:	4a29      	ldr	r2, [pc, #164]	@ (8002394 <HAL_UART_MspInit+0x2c8>)
 80022f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80022f2:	4b27      	ldr	r3, [pc, #156]	@ (8002390 <HAL_UART_MspInit+0x2c4>)
 80022f4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80022f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022fa:	4b25      	ldr	r3, [pc, #148]	@ (8002390 <HAL_UART_MspInit+0x2c4>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002300:	4b23      	ldr	r3, [pc, #140]	@ (8002390 <HAL_UART_MspInit+0x2c4>)
 8002302:	2200      	movs	r2, #0
 8002304:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002306:	4b22      	ldr	r3, [pc, #136]	@ (8002390 <HAL_UART_MspInit+0x2c4>)
 8002308:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800230c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800230e:	4b20      	ldr	r3, [pc, #128]	@ (8002390 <HAL_UART_MspInit+0x2c4>)
 8002310:	2200      	movs	r2, #0
 8002312:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002314:	4b1e      	ldr	r3, [pc, #120]	@ (8002390 <HAL_UART_MspInit+0x2c4>)
 8002316:	2200      	movs	r2, #0
 8002318:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800231a:	4b1d      	ldr	r3, [pc, #116]	@ (8002390 <HAL_UART_MspInit+0x2c4>)
 800231c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002320:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002322:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <HAL_UART_MspInit+0x2c4>)
 8002324:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002328:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800232a:	4b19      	ldr	r3, [pc, #100]	@ (8002390 <HAL_UART_MspInit+0x2c4>)
 800232c:	2200      	movs	r2, #0
 800232e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002330:	4817      	ldr	r0, [pc, #92]	@ (8002390 <HAL_UART_MspInit+0x2c4>)
 8002332:	f003 fe37 	bl	8005fa4 <HAL_DMA_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_UART_MspInit+0x274>
      Error_Handler();
 800233c:	f7ff fb74 	bl	8001a28 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a13      	ldr	r2, [pc, #76]	@ (8002390 <HAL_UART_MspInit+0x2c4>)
 8002344:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002346:	4a12      	ldr	r2, [pc, #72]	@ (8002390 <HAL_UART_MspInit+0x2c4>)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800234c:	2200      	movs	r2, #0
 800234e:	2100      	movs	r1, #0
 8002350:	2026      	movs	r0, #38	@ 0x26
 8002352:	f003 fdf0 	bl	8005f36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002356:	2026      	movs	r0, #38	@ 0x26
 8002358:	f003 fe09 	bl	8005f6e <HAL_NVIC_EnableIRQ>
}
 800235c:	bf00      	nop
 800235e:	3738      	adds	r7, #56	@ 0x38
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40007800 	.word	0x40007800
 8002368:	40023800 	.word	0x40023800
 800236c:	40021400 	.word	0x40021400
 8002370:	20002270 	.word	0x20002270
 8002374:	40026058 	.word	0x40026058
 8002378:	40011000 	.word	0x40011000
 800237c:	40020000 	.word	0x40020000
 8002380:	200022d0 	.word	0x200022d0
 8002384:	40026440 	.word	0x40026440
 8002388:	40004400 	.word	0x40004400
 800238c:	40020c00 	.word	0x40020c00
 8002390:	20002330 	.word	0x20002330
 8002394:	40026088 	.word	0x40026088

08002398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800239c:	f7ff fd94 	bl	8001ec8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023a0:	480c      	ldr	r0, [pc, #48]	@ (80023d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023a2:	490d      	ldr	r1, [pc, #52]	@ (80023d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023a4:	4a0d      	ldr	r2, [pc, #52]	@ (80023dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023a8:	e002      	b.n	80023b0 <LoopCopyDataInit>

080023aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ae:	3304      	adds	r3, #4

080023b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b4:	d3f9      	bcc.n	80023aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023b6:	4a0a      	ldr	r2, [pc, #40]	@ (80023e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023b8:	4c0a      	ldr	r4, [pc, #40]	@ (80023e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023bc:	e001      	b.n	80023c2 <LoopFillZerobss>

080023be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c0:	3204      	adds	r2, #4

080023c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c4:	d3fb      	bcc.n	80023be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80023c6:	f008 fb4b 	bl	800aa60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ca:	f7fe ffa1 	bl	8001310 <main>
  bx  lr    
 80023ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80023d0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80023d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80023dc:	0800d098 	.word	0x0800d098
  ldr r2, =_sbss
 80023e0:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80023e4:	200024e4 	.word	0x200024e4

080023e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e8:	e7fe      	b.n	80023e8 <ADC_IRQHandler>

080023ea <CFCB_IsEmpty>:
	cfcb->tail = 0;
	return 1;
}

uint8_t CFCB_IsEmpty(can_frames_cb_t *cfcb)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
	if (cfcb == NULL) return 1;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <CFCB_IsEmpty+0x12>
 80023f8:	2301      	movs	r3, #1
 80023fa:	e00a      	b.n	8002412 <CFCB_IsEmpty+0x28>
	return cfcb->head == cfcb->tail;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f8b3 2080 	ldrh.w	r2, [r3, #128]	@ 0x80
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8002408:	429a      	cmp	r2, r3
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
}
 8002412:	4618      	mov	r0, r3
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <CFCB_IsFull>:

uint8_t CFCB_IsFull(can_frames_cb_t *cfcb)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
	if (cfcb == NULL) return 1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <CFCB_IsFull+0x12>
 800242c:	2301      	movs	r3, #1
 800242e:	e012      	b.n	8002456 <CFCB_IsFull+0x38>
	return (cfcb->head + 1) % GCB_MAX_CAN_FRAMES == cfcb->tail;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8002436:	3301      	adds	r3, #1
 8002438:	425a      	negs	r2, r3
 800243a:	f003 031f 	and.w	r3, r3, #31
 800243e:	f002 021f 	and.w	r2, r2, #31
 8002442:	bf58      	it	pl
 8002444:	4253      	negpl	r3, r2
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	f8b2 2082 	ldrh.w	r2, [r2, #130]	@ 0x82
 800244c:	4293      	cmp	r3, r2
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <CFCB_Push>:
	if (cfcb == NULL) return 0;
	return (cfcb->head - cfcb->tail + GCB_MAX_CAN_FRAMES) % GCB_MAX_CAN_FRAMES;
}

uint8_t CFCB_Push(can_frames_cb_t *cfcb, uint16_t id, uint8_t len, uint8_t *data)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	817b      	strh	r3, [r7, #10]
 8002470:	4613      	mov	r3, r2
 8002472:	727b      	strb	r3, [r7, #9]
	if (cfcb == NULL || CFCB_IsFull(cfcb)) return 0;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <CFCB_Push+0x24>
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f7ff ffcf 	bl	800241e <CFCB_IsFull>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <CFCB_Push+0x28>
 8002486:	2300      	movs	r3, #0
 8002488:	e032      	b.n	80024f0 <CFCB_Push+0x8e>
  __ASM volatile ("cpsid i" : : : "memory");
 800248a:	b672      	cpsid	i
}
 800248c:	bf00      	nop
	__disable_irq();
	can_frame_t *can_frame = (can_frame_t *)malloc(sizeof(can_frame_t));
 800248e:	200c      	movs	r0, #12
 8002490:	f007 fa70 	bl	8009974 <malloc>
 8002494:	4603      	mov	r3, r0
 8002496:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsie i" : : : "memory");
 8002498:	b662      	cpsie	i
}
 800249a:	bf00      	nop
	__enable_irq();
	if (can_frame == NULL) return 0;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <CFCB_Push+0x44>
 80024a2:	2300      	movs	r3, #0
 80024a4:	e024      	b.n	80024f0 <CFCB_Push+0x8e>

	can_frame->id = id;
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	897a      	ldrh	r2, [r7, #10]
 80024aa:	801a      	strh	r2, [r3, #0]
	can_frame->len = len;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	7a7a      	ldrb	r2, [r7, #9]
 80024b0:	709a      	strb	r2, [r3, #2]
	memcpy(can_frame->data, data, len);
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3303      	adds	r3, #3
 80024b6:	7a7a      	ldrb	r2, [r7, #9]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f008 faf7 	bl	800aaae <memcpy>

	cfcb->elements[cfcb->head] = can_frame;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80024c6:	4619      	mov	r1, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	cfcb->head = (cfcb->head + 1) % GCB_MAX_CAN_FRAMES;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80024d6:	3301      	adds	r3, #1
 80024d8:	425a      	negs	r2, r3
 80024da:	f003 031f 	and.w	r3, r3, #31
 80024de:	f002 021f 	and.w	r2, r2, #31
 80024e2:	bf58      	it	pl
 80024e4:	4253      	negpl	r3, r2
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	return 1;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <CFCB_Pop>:

uint8_t CFCB_Pop(can_frames_cb_t *cfcb, can_frame_t *can_frame)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
	if (cfcb == NULL || CFCB_IsEmpty(cfcb) || can_frame == NULL) return 0;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d008      	beq.n	800251a <CFCB_Pop+0x22>
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff6e 	bl	80023ea <CFCB_IsEmpty>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <CFCB_Pop+0x22>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <CFCB_Pop+0x26>
 800251a:	2300      	movs	r3, #0
 800251c:	e02b      	b.n	8002576 <CFCB_Pop+0x7e>
	can_frame_t *frame = cfcb->elements[cfcb->tail];
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8002524:	461a      	mov	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252c:	60fb      	str	r3, [r7, #12]
    can_frame->id = frame->id;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	881a      	ldrh	r2, [r3, #0]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	801a      	strh	r2, [r3, #0]
    can_frame->len = frame->len;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	789a      	ldrb	r2, [r3, #2]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	709a      	strb	r2, [r3, #2]
    memcpy(can_frame->data, frame->data, frame->len);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	1cd8      	adds	r0, r3, #3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1cd9      	adds	r1, r3, #3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	789b      	ldrb	r3, [r3, #2]
 800254a:	461a      	mov	r2, r3
 800254c:	f008 faaf 	bl	800aaae <memcpy>
    free(frame);
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f007 fa17 	bl	8009984 <free>
	cfcb->tail = (cfcb->tail + 1) % GCB_MAX_CAN_FRAMES;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 800255c:	3301      	adds	r3, #1
 800255e:	425a      	negs	r2, r3
 8002560:	f003 031f 	and.w	r3, r3, #31
 8002564:	f002 021f 	and.w	r2, r2, #31
 8002568:	bf58      	it	pl
 800256a:	4253      	negpl	r3, r2
 800256c:	b29a      	uxth	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
	return 1;
 8002574:	2301      	movs	r3, #1
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <FT_IT_Feed>:
#include "../fancy_timer/fancy_timer.h"

FT_base* ft = NULL;

FT_ERR FT_IT_Feed(FT_base* ft)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
	if(ft == NULL) return FT_INVALID_ARGUMENT;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <FT_IT_Feed+0x14>
 800258c:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002590:	e006      	b.n	80025a0 <FT_IT_Feed+0x22>
	ft->SRCR++;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	645a      	str	r2, [r3, #68]	@ 0x44
	return FT_OK;
 800259c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <FT_InitCustom>:
	if(target_frequency == 0) return FT_INVALID_ARGUMENT;
	return FT_InitCustom(ft, huart, htim, target_frequency);
}

FT_ERR FT_InitCustom(FT_base** ftimer, UART_HandleTypeDef *huart, TIM_HandleTypeDef* htim, uint32_t target_frequency)
{
 80025ac:	b5b0      	push	{r4, r5, r7, lr}
 80025ae:	b098      	sub	sp, #96	@ 0x60
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
	if(ftimer == NULL || htim == NULL || target_frequency == 0)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <FT_InitCustom+0x20>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <FT_InitCustom+0x20>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <FT_InitCustom+0x26>
	{
		return FT_INVALID_ARGUMENT;
 80025cc:	f241 0303 	movw	r3, #4099	@ 0x1003
 80025d0:	e117      	b.n	8002802 <FT_InitCustom+0x256>
	}

	ft_timebase timebase = FT_TB_UNKNOWN;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if(target_frequency == 1) timebase = FT_TB_SEC;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d102      	bne.n	80025e4 <FT_InitCustom+0x38>
 80025de:	2303      	movs	r3, #3
 80025e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if(target_frequency == 1000) timebase = FT_TB_MS;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025ea:	d102      	bne.n	80025f2 <FT_InitCustom+0x46>
 80025ec:	2302      	movs	r3, #2
 80025ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if(target_frequency == 1000000) timebase = FT_TB_US;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	4a85      	ldr	r2, [pc, #532]	@ (800280c <FT_InitCustom+0x260>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d102      	bne.n	8002600 <FT_InitCustom+0x54>
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	ft_source source = FT_GetSource(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fda1 	bl	8003148 <FT_GetSource>
 8002606:	4603      	mov	r3, r0
 8002608:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	ft_type type = FT_GetType(htim);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fd29 	bl	8003064 <FT_GetType>
 8002612:	4603      	mov	r3, r0
 8002614:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	ft_resolution resolution = FT_GetResolution(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fe05 	bl	8003228 <FT_GetResolution>
 800261e:	4603      	mov	r3, r0
 8002620:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	ft_prescaler_range prescaler_range = FT_GetPrescalerRange(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fe6f 	bl	8003308 <FT_GetPrescalerRange>
 800262a:	4603      	mov	r3, r0
 800262c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	if(source == FT_SRC_UNKNOWN ||
 8002630:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00b      	beq.n	8002650 <FT_InitCustom+0xa4>
 8002638:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800263c:	2b00      	cmp	r3, #0
 800263e:	d007      	beq.n	8002650 <FT_InitCustom+0xa4>
		type == FT_TYPE_UNKNOWN ||
 8002640:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <FT_InitCustom+0xa4>
		resolution == FT_RES_UNKNOWN ||
 8002648:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <FT_InitCustom+0xaa>
		prescaler_range == FT_PRE_UNKNOWN )
	{
		return FT_INVALID_TIM_INSTANCE;
 8002650:	f241 0310 	movw	r3, #4112	@ 0x1010
 8002654:	e0d5      	b.n	8002802 <FT_InitCustom+0x256>
	}

	uint32_t src_freq = FT_GetFrequency(source);
 8002656:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fe60 	bl	8003320 <FT_GetFrequency>
 8002660:	6538      	str	r0, [r7, #80]	@ 0x50
	if(src_freq == 0)
 8002662:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002664:	2b00      	cmp	r3, #0
 8002666:	d102      	bne.n	800266e <FT_InitCustom+0xc2>
	{
		return FT_INVALID_TIM_INSTANCE;
 8002668:	f241 0310 	movw	r3, #4112	@ 0x1010
 800266c:	e0c9      	b.n	8002802 <FT_InitCustom+0x256>
	}

	uint32_t max_prescaler;
	switch(prescaler_range)
 800266e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002672:	2b01      	cmp	r3, #1
 8002674:	d108      	bne.n	8002688 <FT_InitCustom+0xdc>
	{
	case FT_PRE_1_65536: max_prescaler = 65536; break;
 8002676:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800267a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800267c:	bf00      	nop
	default: return FT_INVALID_TIM_INSTANCE;
	}

	uint32_t counter_period;
	switch(resolution)
 800267e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8002682:	2b03      	cmp	r3, #3
 8002684:	d011      	beq.n	80026aa <FT_InitCustom+0xfe>
 8002686:	e002      	b.n	800268e <FT_InitCustom+0xe2>
	default: return FT_INVALID_TIM_INSTANCE;
 8002688:	f241 0310 	movw	r3, #4112	@ 0x1010
 800268c:	e0b9      	b.n	8002802 <FT_InitCustom+0x256>
	switch(resolution)
 800268e:	2b03      	cmp	r3, #3
 8002690:	dc0f      	bgt.n	80026b2 <FT_InitCustom+0x106>
 8002692:	2b01      	cmp	r3, #1
 8002694:	d002      	beq.n	800269c <FT_InitCustom+0xf0>
 8002696:	2b02      	cmp	r3, #2
 8002698:	d003      	beq.n	80026a2 <FT_InitCustom+0xf6>
 800269a:	e00a      	b.n	80026b2 <FT_InitCustom+0x106>
	{
	case FT_RES_8: counter_period = UINT8_MAX; break;
 800269c:	23ff      	movs	r3, #255	@ 0xff
 800269e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026a0:	e00a      	b.n	80026b8 <FT_InitCustom+0x10c>
	case FT_RES_16: counter_period = UINT16_MAX; break;
 80026a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026a8:	e006      	b.n	80026b8 <FT_InitCustom+0x10c>
	case FT_RES_32: counter_period = UINT32_MAX; break;
 80026aa:	f04f 33ff 	mov.w	r3, #4294967295
 80026ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026b0:	e002      	b.n	80026b8 <FT_InitCustom+0x10c>
	default: return FT_INVALID_TIM_INSTANCE;
 80026b2:	f241 0310 	movw	r3, #4112	@ 0x1010
 80026b6:	e0a4      	b.n	8002802 <FT_InitCustom+0x256>
	}

	if(target_frequency > src_freq)
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026bc:	429a      	cmp	r2, r3
 80026be:	d902      	bls.n	80026c6 <FT_InitCustom+0x11a>
	{
		return FT_INVALID_ARGUMENT;
 80026c0:	f241 0303 	movw	r3, #4099	@ 0x1003
 80026c4:	e09d      	b.n	8002802 <FT_InitCustom+0x256>
	}


	ft_config config;
	config.timebase = timebase;
 80026c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80026ca:	753b      	strb	r3, [r7, #20]
	config.src_freq = src_freq;
 80026cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026ce:	61bb      	str	r3, [r7, #24]
	config.des_freq = target_frequency;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	61fb      	str	r3, [r7, #28]
	config.max_prescaler = max_prescaler;
 80026d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	config.counter_period = counter_period;
 80026d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026da:	637b      	str	r3, [r7, #52]	@ 0x34

	FT_ERR res = FT_GetTimerConfiguration(&config);
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	4618      	mov	r0, r3
 80026e2:	f000 fe4b 	bl	800337c <FT_GetTimerConfiguration>
 80026e6:	4603      	mov	r3, r0
 80026e8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

	if(res != FT_OK) return res;
 80026ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026f4:	d002      	beq.n	80026fc <FT_InitCustom+0x150>
 80026f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026fa:	e082      	b.n	8002802 <FT_InitCustom+0x256>

	if(*ftimer != NULL) {
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d007      	beq.n	8002714 <FT_InitCustom+0x168>
		FT_Free(*ftimer);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f885 	bl	8002818 <FT_Free>
		*ftimer = NULL;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
	}

	FT_base* ft = (FT_base*)malloc(sizeof(FT_base));
 8002714:	2058      	movs	r0, #88	@ 0x58
 8002716:	f007 f92d 	bl	8009974 <malloc>
 800271a:	4603      	mov	r3, r0
 800271c:	647b      	str	r3, [r7, #68]	@ 0x44
	if(ft == NULL) return FT_OUT_OF_MEMORY;
 800271e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <FT_InitCustom+0x17e>
 8002724:	f241 0302 	movw	r3, #4098	@ 0x1002
 8002728:	e06b      	b.n	8002802 <FT_InitCustom+0x256>
	memset(ft, 0, sizeof(FT_base));
 800272a:	2258      	movs	r2, #88	@ 0x58
 800272c:	2100      	movs	r1, #0
 800272e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002730:	f008 f91c 	bl	800a96c <memset>


	ft->timers_count = 0;
 8002734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002736:	2200      	movs	r2, #0
 8002738:	87da      	strh	r2, [r3, #62]	@ 0x3e
	ft->timers_size = FT_DEFAULT_SIZE;
 800273a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800273c:	2204      	movs	r2, #4
 800273e:	879a      	strh	r2, [r3, #60]	@ 0x3c
	ft->timers = (ft_def**)malloc(sizeof(ft_def*) * ft->timers_size);
 8002740:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002742:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4618      	mov	r0, r3
 8002748:	f007 f914 	bl	8009974 <malloc>
 800274c:	4603      	mov	r3, r0
 800274e:	461a      	mov	r2, r3
 8002750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002752:	639a      	str	r2, [r3, #56]	@ 0x38
	if(ft->timers == NULL) {
 8002754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <FT_InitCustom+0x1bc>
		free(ft);
 800275c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800275e:	f007 f911 	bl	8009984 <free>
		return FT_OUT_OF_MEMORY;
 8002762:	f241 0302 	movw	r3, #4098	@ 0x1002
 8002766:	e04c      	b.n	8002802 <FT_InitCustom+0x256>
	}
	memset(ft->timers, 0, sizeof(ft_def*) * ft->timers_size);
 8002768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800276a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800276c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800276e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	461a      	mov	r2, r3
 8002774:	2100      	movs	r1, #0
 8002776:	f008 f8f9 	bl	800a96c <memset>

	ft->source = source;
 800277a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800277c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8002780:	715a      	strb	r2, [r3, #5]
	ft->type = type;
 8002782:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002784:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8002788:	711a      	strb	r2, [r3, #4]
	ft->resolution = resolution;
 800278a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800278c:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002790:	719a      	strb	r2, [r3, #6]

	// that's software now
	//ft->has_repetition_counter = IS_TIM_REPETITION_COUNTER_INSTANCE(htim->Instance);

	ft->ticks_remainder = 0;
 8002792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002794:	2200      	movs	r2, #0
 8002796:	641a      	str	r2, [r3, #64]	@ 0x40

	ft->config = config;
 8002798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800279a:	f103 0408 	add.w	r4, r3, #8
 800279e:	f107 0514 	add.w	r5, r7, #20
 80027a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027aa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	ft->htimer = htim;
 80027b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	601a      	str	r2, [r3, #0]
	ft->huart = huart;
 80027b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	651a      	str	r2, [r3, #80]	@ 0x50

	*ftimer = ft;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027c2:	601a      	str	r2, [r3, #0]

	// update timer configuration
	htim->Instance->PSC = config.prescaler;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027ca:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = config.counter_period;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	{
		// enable repetition counter (if available)
		htim->Instance->RCR = FT_REPETITION_COUNTER;
	}*/

	if(IS_TIM_REPETITION_COUNTER_INSTANCE(htim->Instance))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002810 <FT_InitCustom+0x264>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <FT_InitCustom+0x23c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002814 <FT_InitCustom+0x268>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d103      	bne.n	80027f0 <FT_InitCustom+0x244>
	{
		htim->Instance->RCR = 0;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	// set flag to update prescaler and repetition counter
	htim->Instance->EGR = TIM_EGR_UG;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2201      	movs	r2, #1
 80027f6:	615a      	str	r2, [r3, #20]

	// start timer
	HAL_TIM_Base_Start(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f005 fa7b 	bl	8007cf4 <HAL_TIM_Base_Start>

	return FT_OK;
 80027fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8002802:	4618      	mov	r0, r3
 8002804:	3760      	adds	r7, #96	@ 0x60
 8002806:	46bd      	mov	sp, r7
 8002808:	bdb0      	pop	{r4, r5, r7, pc}
 800280a:	bf00      	nop
 800280c:	000f4240 	.word	0x000f4240
 8002810:	40010000 	.word	0x40010000
 8002814:	40010400 	.word	0x40010400

08002818 <FT_Free>:

void FT_Free(FT_base* ft)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
	if(ft == NULL) return;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <FT_Free+0x20>
	free(ft->timers);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800282a:	4618      	mov	r0, r3
 800282c:	f007 f8aa 	bl	8009984 <free>
	free(ft);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f007 f8a7 	bl	8009984 <free>
 8002836:	e000      	b.n	800283a <FT_Free+0x22>
	if(ft == NULL) return;
 8002838:	bf00      	nop
}
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <FT_ProcessTimer>:


FT_ERR FT_ProcessTimer(FT_base* ft, uint32_t feed_time, ft_def* timer)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
	if(ft == NULL || timer == NULL) return FT_INVALID_ARGUMENT;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <FT_ProcessTimer+0x18>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <FT_ProcessTimer+0x1e>
 8002858:	f241 0303 	movw	r3, #4099	@ 0x1003
 800285c:	e05f      	b.n	800291e <FT_ProcessTimer+0xde>
	if(timer->paused) return FT_OK;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	791b      	ldrb	r3, [r3, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <FT_ProcessTimer+0x2c>
 8002866:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800286a:	e058      	b.n	800291e <FT_ProcessTimer+0xde>

	uint8_t triggered = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	75fb      	strb	r3, [r7, #23]
		//dbgprnt = 1;
	}

	// Long delay
	// ~> Timer triggered in one cycle
	if(feed_time >= timer->requested_time) {
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	d315      	bcc.n	80028a6 <FT_ProcessTimer+0x66>
		uint32_t tgc = feed_time / timer->requested_time;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	fbb2 f3f3 	udiv	r3, r2, r3
 8002884:	613b      	str	r3, [r7, #16]
		feed_time -= tgc * timer->requested_time;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	fb02 f303 	mul.w	r3, r2, r3
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	60bb      	str	r3, [r7, #8]
		timer->trigger_counter += tgc;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	441a      	add	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	609a      	str	r2, [r3, #8]
		triggered = 1;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
//	}

	// Overflow
	// ~> At least UINT32_MAX elapsed since timer started
	// ~> At least one requested_time got fulfilled
	if(timer->elapsed_time + feed_time < timer->elapsed_time)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	441a      	add	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d210      	bcs.n	80028d8 <FT_ProcessTimer+0x98>
	{
		timer->elapsed_time += feed_time - timer->requested_time;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	1acb      	subs	r3, r1, r3
 80028c2:	441a      	add	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	611a      	str	r2, [r3, #16]
		timer->trigger_counter++;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	1c5a      	adds	r2, r3, #1
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	609a      	str	r2, [r3, #8]
		triggered = 1;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
 80028d6:	e01a      	b.n	800290e <FT_ProcessTimer+0xce>
//			FT_Print(ft, print_buf);
//		}
	}
	else
	{
		timer->elapsed_time += feed_time;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	441a      	add	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	611a      	str	r2, [r3, #16]

		// Regular trigger
		while(timer->elapsed_time >= timer->requested_time)
 80028e4:	e00d      	b.n	8002902 <FT_ProcessTimer+0xc2>
		{
			timer->elapsed_time -= timer->requested_time;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	1ad2      	subs	r2, r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]
			timer->trigger_counter++;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	609a      	str	r2, [r3, #8]
			triggered = 1;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
		while(timer->elapsed_time >= timer->requested_time)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691a      	ldr	r2, [r3, #16]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	429a      	cmp	r2, r3
 800290c:	d2eb      	bcs.n	80028e6 <FT_ProcessTimer+0xa6>
//		snprintf(print_buf, sizeof(print_buf), "feed_time: %lu, requested_time: %lu, trigger_counter: %lu, elapsed: %lu\r\n",
//						feed_time, timer->requested_time, timer->trigger_counter, timer->elapsed_time);
//		FT_Print(ft, print_buf);
//	}

	if(triggered) return FT_TRIGGERED;
 800290e:	7dfb      	ldrb	r3, [r7, #23]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <FT_ProcessTimer+0xda>
 8002914:	f241 0350 	movw	r3, #4176	@ 0x1050
 8002918:	e001      	b.n	800291e <FT_ProcessTimer+0xde>
	//else if(errored) return FT_ERRORED;
	return FT_OK;
 800291a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 800291e:	4618      	mov	r0, r3
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <FT_Feed>:
	ft->SRCR = 0;
	return FT_OK;
}

FT_ERR FT_Feed(FT_base* ft)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b086      	sub	sp, #24
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
	if(ft == NULL) return FT_INVALID_ARGUMENT;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <FT_Feed+0x14>
 8002938:	f241 0303 	movw	r3, #4099	@ 0x1003
 800293c:	e090      	b.n	8002a60 <FT_Feed+0x136>

	// recalculate existing timers

	uint8_t timers_triggered = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	75fb      	strb	r3, [r7, #23]
	uint8_t timers_errored = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	75bb      	strb	r3, [r7, #22]
	FT_ERR res;


	uint32_t feed_time = ft->htimer->Instance->CNT; //__HAL_TIM_GET_COUNTER(ft->htimer)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294e:	613b      	str	r3, [r7, #16]

	if(feed_time) ft->htimer->Instance->CNT = 0;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <FT_Feed+0x36>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2200      	movs	r2, #0
 800295e:	625a      	str	r2, [r3, #36]	@ 0x24


	if(ft->config.divider > 1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	2b01      	cmp	r3, #1
 8002966:	d914      	bls.n	8002992 <FT_Feed+0x68>
	{
		feed_time += ft->ticks_remainder;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	613b      	str	r3, [r7, #16]

		ft->ticks_remainder = feed_time % ft->config.divider;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	fbb3 f1f2 	udiv	r1, r3, r2
 800297c:	fb01 f202 	mul.w	r2, r1, r2
 8002980:	1a9a      	subs	r2, r3, r2
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	641a      	str	r2, [r3, #64]	@ 0x40

		feed_time /= ft->config.divider;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	613b      	str	r3, [r7, #16]
	}

	if(ft->SRCR)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00b      	beq.n	80029b2 <FT_Feed+0x88>
	{
		feed_time += ft->SRCR * ft->config.counter_period;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]

		ft->SRCR = 0;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	645a      	str	r2, [r3, #68]	@ 0x44
	}

	if(feed_time == 0) return FT_OK;
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d102      	bne.n	80029be <FT_Feed+0x94>
 80029b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029bc:	e050      	b.n	8002a60 <FT_Feed+0x136>


	for(uint16_t i = 0; i < ft->timers_count; i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	81fb      	strh	r3, [r7, #14]
 80029c2:	e03a      	b.n	8002a3a <FT_Feed+0x110>
	{
		if(ft->timers[i] != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029c8:	89fb      	ldrh	r3, [r7, #14]
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d02f      	beq.n	8002a34 <FT_Feed+0x10a>
		{
			res = FT_ProcessTimer(ft, feed_time, ft->timers[i]);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029d8:	89fb      	ldrh	r3, [r7, #14]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	461a      	mov	r2, r3
 80029e2:	6939      	ldr	r1, [r7, #16]
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff2b 	bl	8002840 <FT_ProcessTimer>
 80029ea:	4603      	mov	r3, r0
 80029ec:	81bb      	strh	r3, [r7, #12]

			if(res == FT_ERRORED)
 80029ee:	89bb      	ldrh	r3, [r7, #12]
 80029f0:	f241 0251 	movw	r2, #4177	@ 0x1051
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d103      	bne.n	8002a00 <FT_Feed+0xd6>
			{
				timers_errored++;
 80029f8:	7dbb      	ldrb	r3, [r7, #22]
 80029fa:	3301      	adds	r3, #1
 80029fc:	75bb      	strb	r3, [r7, #22]
 80029fe:	e019      	b.n	8002a34 <FT_Feed+0x10a>
			}
			else
			{
				if(ft->timers[i]->trigger_counter) timers_triggered++;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a04:	89fb      	ldrh	r3, [r7, #14]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <FT_Feed+0xf0>
 8002a12:	7dfb      	ldrb	r3, [r7, #23]
 8002a14:	3301      	adds	r3, #1
 8002a16:	75fb      	strb	r3, [r7, #23]
 8002a18:	e00c      	b.n	8002a34 <FT_Feed+0x10a>
				else if(ft->timers[i]->last_error != FT_OK) timers_errored++;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a1e:	89fb      	ldrh	r3, [r7, #14]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	8a9b      	ldrh	r3, [r3, #20]
 8002a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a2c:	d002      	beq.n	8002a34 <FT_Feed+0x10a>
 8002a2e:	7dbb      	ldrb	r3, [r7, #22]
 8002a30:	3301      	adds	r3, #1
 8002a32:	75bb      	strb	r3, [r7, #22]
	for(uint16_t i = 0; i < ft->timers_count; i++)
 8002a34:	89fb      	ldrh	r3, [r7, #14]
 8002a36:	3301      	adds	r3, #1
 8002a38:	81fb      	strh	r3, [r7, #14]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a3e:	89fa      	ldrh	r2, [r7, #14]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d3bf      	bcc.n	80029c4 <FT_Feed+0x9a>
			}
		}
	}

	if(timers_triggered) return FT_TRIGGERED;
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <FT_Feed+0x126>
 8002a4a:	f241 0350 	movw	r3, #4176	@ 0x1050
 8002a4e:	e007      	b.n	8002a60 <FT_Feed+0x136>
	if(timers_errored) return FT_ERRORED;
 8002a50:	7dbb      	ldrb	r3, [r7, #22]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <FT_Feed+0x132>
 8002a56:	f241 0351 	movw	r3, #4177	@ 0x1051
 8002a5a:	e001      	b.n	8002a60 <FT_Feed+0x136>
	return FT_OK;
 8002a5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <FT_GetTimerPauseState>:
	}
	return res;
}

FT_ERR FT_GetTimerPauseState(FT_base* ft, uint16_t timer_id, uint8_t* state)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	460b      	mov	r3, r1
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	817b      	strh	r3, [r7, #10]
	if (ft == NULL || state == NULL) return FT_INVALID_ARGUMENT;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <FT_GetTimerPauseState+0x1a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d102      	bne.n	8002a88 <FT_GetTimerPauseState+0x20>
 8002a82:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002a86:	e013      	b.n	8002ab0 <FT_GetTimerPauseState+0x48>
	ft_def *timer = NULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	613b      	str	r3, [r7, #16]
	FT_ERR res = FT_GetTimer_(ft, timer_id, &timer);
 8002a8c:	f107 0210 	add.w	r2, r7, #16
 8002a90:	897b      	ldrh	r3, [r7, #10]
 8002a92:	4619      	mov	r1, r3
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fa51 	bl	8002f3c <FT_GetTimer_>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	82fb      	strh	r3, [r7, #22]
	if (res == FT_OK) {
 8002a9e:	8afb      	ldrh	r3, [r7, #22]
 8002aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aa4:	d103      	bne.n	8002aae <FT_GetTimerPauseState+0x46>
		*state = timer->paused;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	791a      	ldrb	r2, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	701a      	strb	r2, [r3, #0]
	}
	return res;
 8002aae:	8afb      	ldrh	r3, [r7, #22]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <FT_GetTriggeredTimer>:

FT_ERR FT_GetTriggeredTimer(FT_base* ft, uint16_t* id, uint32_t* trigger_count)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
	if(ft == NULL || id == NULL) return FT_INVALID_ARGUMENT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <FT_GetTriggeredTimer+0x18>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d102      	bne.n	8002ad6 <FT_GetTriggeredTimer+0x1e>
 8002ad0:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002ad4:	e05a      	b.n	8002b8c <FT_GetTriggeredTimer+0xd4>

	uint32_t timer_i = UINT32_MAX;
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	617b      	str	r3, [r7, #20]
	uint16_t priority = 0;
 8002adc:	2300      	movs	r3, #0
 8002ade:	827b      	strh	r3, [r7, #18]

	for(uint16_t i = 0; i < ft->timers_count; i++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	823b      	strh	r3, [r7, #16]
 8002ae4:	e027      	b.n	8002b36 <FT_GetTriggeredTimer+0x7e>
	{
		if(ft->timers[i] != NULL && ft->timers[i]->trigger_counter && ft->timers[i]->priority > priority)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002aea:	8a3b      	ldrh	r3, [r7, #16]
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d01c      	beq.n	8002b30 <FT_GetTriggeredTimer+0x78>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002afa:	8a3b      	ldrh	r3, [r7, #16]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <FT_GetTriggeredTimer+0x78>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b0c:	8a3b      	ldrh	r3, [r7, #16]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	885b      	ldrh	r3, [r3, #2]
 8002b16:	8a7a      	ldrh	r2, [r7, #18]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d209      	bcs.n	8002b30 <FT_GetTriggeredTimer+0x78>
		{
			timer_i = i;
 8002b1c:	8a3b      	ldrh	r3, [r7, #16]
 8002b1e:	617b      	str	r3, [r7, #20]
			priority = ft->timers[i]->priority;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b24:	8a3b      	ldrh	r3, [r7, #16]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	885b      	ldrh	r3, [r3, #2]
 8002b2e:	827b      	strh	r3, [r7, #18]
	for(uint16_t i = 0; i < ft->timers_count; i++)
 8002b30:	8a3b      	ldrh	r3, [r7, #16]
 8002b32:	3301      	adds	r3, #1
 8002b34:	823b      	strh	r3, [r7, #16]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b3a:	8a3a      	ldrh	r2, [r7, #16]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d3d2      	bcc.n	8002ae6 <FT_GetTriggeredTimer+0x2e>
		}
	}

	if(timer_i != UINT32_MAX) {
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b46:	d01f      	beq.n	8002b88 <FT_GetTriggeredTimer+0xd0>
		*id = ft->timers[timer_i]->timer_id;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	881a      	ldrh	r2, [r3, #0]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	801a      	strh	r2, [r3, #0]
		if(trigger_count != NULL) *trigger_count = ft->timers[timer_i]->trigger_counter;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <FT_GetTriggeredTimer+0xba>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	601a      	str	r2, [r3, #0]
		ft->timers[timer_i]->trigger_counter = 0;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
		return FT_OK;
 8002b82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b86:	e001      	b.n	8002b8c <FT_GetTriggeredTimer+0xd4>
	}
	return FT_NO_TIMER;
 8002b88:	f241 0352 	movw	r3, #4178	@ 0x1052
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <FT_SetTimerInterval>:
	}
	return FT_NO_TIMER;
}

FT_ERR FT_SetTimerInterval(FT_base* ft, uint16_t timer_id, uint32_t interval)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	817b      	strh	r3, [r7, #10]
	if (ft == NULL) return FT_INVALID_ARGUMENT;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <FT_SetTimerInterval+0x1a>
 8002bac:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002bb0:	e015      	b.n	8002bde <FT_SetTimerInterval+0x46>
	ft_def *timer = NULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
	FT_ERR res = FT_GetTimer_(ft, timer_id, &timer);
 8002bb6:	f107 0210 	add.w	r2, r7, #16
 8002bba:	897b      	ldrh	r3, [r7, #10]
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f9bc 	bl	8002f3c <FT_GetTimer_>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	82fb      	strh	r3, [r7, #22]
	if (res == FT_OK) {
 8002bc8:	8afb      	ldrh	r3, [r7, #22]
 8002bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bce:	d105      	bne.n	8002bdc <FT_SetTimerInterval+0x44>
		timer->requested_time = interval;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	60da      	str	r2, [r3, #12]
		return FT_OK;
 8002bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002bda:	e000      	b.n	8002bde <FT_SetTimerInterval+0x46>
	}
	return res;
 8002bdc:	8afb      	ldrh	r3, [r7, #22]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <FT_StartTimer>:
{
	return FT_SetTimerPauseState(ft, timer_id, 0);
}

FT_ERR FT_StartTimer(FT_base* ft, uint16_t timer_id)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	807b      	strh	r3, [r7, #2]
	if(ft == NULL) return FT_INVALID_ARGUMENT;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <FT_StartTimer+0x18>
 8002bf8:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002bfc:	e01f      	b.n	8002c3e <FT_StartTimer+0x58>
	ft_def* timer = NULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
	FT_ERR res = FT_GetTimer_(ft, timer_id, &timer);
 8002c02:	f107 0208 	add.w	r2, r7, #8
 8002c06:	887b      	ldrh	r3, [r7, #2]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f996 	bl	8002f3c <FT_GetTimer_>
 8002c10:	4603      	mov	r3, r0
 8002c12:	81fb      	strh	r3, [r7, #14]
	if (res == FT_OK) {
 8002c14:	89fb      	ldrh	r3, [r7, #14]
 8002c16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c1a:	d10f      	bne.n	8002c3c <FT_StartTimer+0x56>
		timer->elapsed_time = 0;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
		timer->trigger_counter = 0;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2200      	movs	r2, #0
 8002c26:	609a      	str	r2, [r3, #8]
		timer->last_error = FT_OK;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c2e:	829a      	strh	r2, [r3, #20]
		timer->paused = 0;
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2200      	movs	r2, #0
 8002c34:	711a      	strb	r2, [r3, #4]
		return FT_OK;
 8002c36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c3a:	e000      	b.n	8002c3e <FT_StartTimer+0x58>
	}
	return res;
 8002c3c:	89fb      	ldrh	r3, [r7, #14]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <FT_StopTimer>:

FT_ERR FT_StopTimer(FT_base* ft, uint16_t timer_id)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	460b      	mov	r3, r1
 8002c50:	807b      	strh	r3, [r7, #2]
	if (ft == NULL) return FT_INVALID_ARGUMENT;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <FT_StopTimer+0x18>
 8002c58:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002c5c:	e01f      	b.n	8002c9e <FT_StopTimer+0x58>
	ft_def *timer = NULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
	FT_ERR res = FT_GetTimer_(ft, timer_id, &timer);
 8002c62:	f107 0208 	add.w	r2, r7, #8
 8002c66:	887b      	ldrh	r3, [r7, #2]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f966 	bl	8002f3c <FT_GetTimer_>
 8002c70:	4603      	mov	r3, r0
 8002c72:	81fb      	strh	r3, [r7, #14]
	if (res == FT_OK) {
 8002c74:	89fb      	ldrh	r3, [r7, #14]
 8002c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c7a:	d10f      	bne.n	8002c9c <FT_StopTimer+0x56>
		timer->elapsed_time = 0;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	611a      	str	r2, [r3, #16]
		timer->trigger_counter = 0;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
		timer->last_error = FT_OK;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c8e:	829a      	strh	r2, [r3, #20]
		timer->paused = 1;
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2201      	movs	r2, #1
 8002c94:	711a      	strb	r2, [r3, #4]
		return FT_OK;
 8002c96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c9a:	e000      	b.n	8002c9e <FT_StopTimer+0x58>
	}
	return res;
 8002c9c:	89fb      	ldrh	r3, [r7, #14]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <FT_NewTimer>:

FT_ERR FT_NewTimer(FT_base* ft, uint32_t time, uint16_t priority, uint16_t* timer_id)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60f8      	str	r0, [r7, #12]
 8002cae:	60b9      	str	r1, [r7, #8]
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	80fb      	strh	r3, [r7, #6]
	if(ft == NULL || ft->timers_count == UINT16_MAX - 1) return FT_INVALID_ARGUMENT;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <FT_NewTimer+0x22>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cc0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d102      	bne.n	8002cce <FT_NewTimer+0x28>
 8002cc8:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002ccc:	e05c      	b.n	8002d88 <FT_NewTimer+0xe2>


	if(ft->timers_count == ft->timers_size)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d120      	bne.n	8002d1c <FT_NewTimer+0x76>
	{
		if(ft->timers_size == UINT16_MAX) return FT_OUT_OF_MEMORY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002cde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d102      	bne.n	8002cec <FT_NewTimer+0x46>
 8002ce6:	f241 0302 	movw	r3, #4098	@ 0x1002
 8002cea:	e04d      	b.n	8002d88 <FT_NewTimer+0xe2>

		ft->timers_size *= 2;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	879a      	strh	r2, [r3, #60]	@ 0x3c
		ft->timers = (ft_def**)realloc(ft->timers, sizeof(ft_def*) * ft->timers_size);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4619      	mov	r1, r3
 8002d04:	4610      	mov	r0, r2
 8002d06:	f006 fef3 	bl	8009af0 <realloc>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	639a      	str	r2, [r3, #56]	@ 0x38
		if(ft->timers == NULL) return 0;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <FT_NewTimer+0x76>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e035      	b.n	8002d88 <FT_NewTimer+0xe2>
	}

	ft_def* new_timer = (ft_def*)malloc(sizeof(ft_def));
 8002d1c:	2018      	movs	r0, #24
 8002d1e:	f006 fe29 	bl	8009974 <malloc>
 8002d22:	4603      	mov	r3, r0
 8002d24:	617b      	str	r3, [r7, #20]
	if(new_timer == NULL) return FT_OUT_OF_MEMORY;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d102      	bne.n	8002d32 <FT_NewTimer+0x8c>
 8002d2c:	f241 0302 	movw	r3, #4098	@ 0x1002
 8002d30:	e02a      	b.n	8002d88 <FT_NewTimer+0xe2>

	memset(new_timer, 0, sizeof(ft_def));
 8002d32:	2218      	movs	r2, #24
 8002d34:	2100      	movs	r1, #0
 8002d36:	6978      	ldr	r0, [r7, #20]
 8002d38:	f007 fe18 	bl	800a96c <memset>

	new_timer->timer_id = FT_NewTimerID_(ft);
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f87e 	bl	8002e3e <FT_NewTimerID_>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461a      	mov	r2, r3
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	801a      	strh	r2, [r3, #0]
	new_timer->requested_time = time;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	60da      	str	r2, [r3, #12]
	new_timer->last_error = FT_OK;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d56:	829a      	strh	r2, [r3, #20]
	new_timer->priority = priority;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	88fa      	ldrh	r2, [r7, #6]
 8002d5c:	805a      	strh	r2, [r3, #2]

	if(timer_id != NULL) *timer_id = new_timer->timer_id;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <FT_NewTimer+0xc6>
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	881a      	ldrh	r2, [r3, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	801a      	strh	r2, [r3, #0]

	ft->timers[ft->timers_count++] = new_timer;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d74:	1c59      	adds	r1, r3, #1
 8002d76:	b288      	uxth	r0, r1
 8002d78:	68f9      	ldr	r1, [r7, #12]
 8002d7a:	87c8      	strh	r0, [r1, #62]	@ 0x3e
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	601a      	str	r2, [r3, #0]
	return FT_OK;
 8002d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <FT_KillTimer>:

FT_ERR FT_KillTimer(FT_base* ft, uint16_t id)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
	if(ft == NULL) return FT_INVALID_ARGUMENT;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d102      	bne.n	8002da8 <FT_KillTimer+0x18>
 8002da2:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002da6:	e046      	b.n	8002e36 <FT_KillTimer+0xa6>
	for(uint16_t i = 0; i < ft->timers_count; i++)
 8002da8:	2300      	movs	r3, #0
 8002daa:	81fb      	strh	r3, [r7, #14]
 8002dac:	e03c      	b.n	8002e28 <FT_KillTimer+0x98>
	{
		if(ft->timers[i]->timer_id == id) {
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002db2:	89fb      	ldrh	r3, [r7, #14]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	887a      	ldrh	r2, [r7, #2]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d12f      	bne.n	8002e22 <FT_KillTimer+0x92>
			free(ft->timers[i]);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dc6:	89fb      	ldrh	r3, [r7, #14]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f006 fdd8 	bl	8009984 <free>
			ft->timers_count--;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	87da      	strh	r2, [r3, #62]	@ 0x3e
			if(ft->timers_count && i < ft->timers_count)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d019      	beq.n	8002e1c <FT_KillTimer+0x8c>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dec:	89fa      	ldrh	r2, [r7, #14]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d214      	bcs.n	8002e1c <FT_KillTimer+0x8c>
			{
				// Swap empty index with last timer
				ft->timers[i] = ft->timers[ft->timers_count];
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	441a      	add	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002e02:	89fb      	ldrh	r3, [r7, #14]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	601a      	str	r2, [r3, #0]
				ft->timers[ft->timers_count] = NULL;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
			}
			return FT_OK;
 8002e1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e20:	e009      	b.n	8002e36 <FT_KillTimer+0xa6>
	for(uint16_t i = 0; i < ft->timers_count; i++)
 8002e22:	89fb      	ldrh	r3, [r7, #14]
 8002e24:	3301      	adds	r3, #1
 8002e26:	81fb      	strh	r3, [r7, #14]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e2c:	89fa      	ldrh	r2, [r7, #14]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d3bd      	bcc.n	8002dae <FT_KillTimer+0x1e>
		}
	}
	return FT_INVALID_ID;
 8002e32:	f241 0305 	movw	r3, #4101	@ 0x1005
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <FT_NewTimerID_>:

uint16_t FT_NewTimerID_(FT_base* ft)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
	if(ft == NULL || ft->timers_count == UINT16_MAX - 1) return 0;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <FT_NewTimerID_+0x1a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e50:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d101      	bne.n	8002e5c <FT_NewTimerID_+0x1e>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e069      	b.n	8002f30 <FT_NewTimerID_+0xf2>

	// get highest id and increment it
	uint16_t max_id = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	81fb      	strh	r3, [r7, #14]
	uint16_t timer_i;
	for(timer_i = 0; timer_i < ft->timers_count; timer_i++)
 8002e60:	2300      	movs	r3, #0
 8002e62:	81bb      	strh	r3, [r7, #12]
 8002e64:	e01e      	b.n	8002ea4 <FT_NewTimerID_+0x66>
	{
		if(ft->timers[timer_i] == NULL) continue;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e6a:	89bb      	ldrh	r3, [r7, #12]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d012      	beq.n	8002e9c <FT_NewTimerID_+0x5e>
		if(ft->timers[timer_i]->timer_id >= max_id) {
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e7a:	89bb      	ldrh	r3, [r7, #12]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	89fa      	ldrh	r2, [r7, #14]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d809      	bhi.n	8002e9e <FT_NewTimerID_+0x60>
			max_id = ft->timers[timer_i]->timer_id;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e8e:	89bb      	ldrh	r3, [r7, #12]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	81fb      	strh	r3, [r7, #14]
 8002e9a:	e000      	b.n	8002e9e <FT_NewTimerID_+0x60>
		if(ft->timers[timer_i] == NULL) continue;
 8002e9c:	bf00      	nop
	for(timer_i = 0; timer_i < ft->timers_count; timer_i++)
 8002e9e:	89bb      	ldrh	r3, [r7, #12]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	81bb      	strh	r3, [r7, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ea8:	89ba      	ldrh	r2, [r7, #12]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d3db      	bcc.n	8002e66 <FT_NewTimerID_+0x28>
		}
	}
	if(max_id < UINT16_MAX) return max_id + 1;
 8002eae:	89fb      	ldrh	r3, [r7, #14]
 8002eb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <FT_NewTimerID_+0x82>
 8002eb8:	89fb      	ldrh	r3, [r7, #14]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	e037      	b.n	8002f30 <FT_NewTimerID_+0xf2>

	// if ran out of new ids, try to reuse old one
	uint16_t new_id = 1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	817b      	strh	r3, [r7, #10]
	uint16_t timers_compared = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	813b      	strh	r3, [r7, #8]
	timer_i = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	81bb      	strh	r3, [r7, #12]
	while(timers_compared < ft->timers_count)
 8002ecc:	e021      	b.n	8002f12 <FT_NewTimerID_+0xd4>
	{
		if(ft->timers[timer_i] == NULL) continue;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ed2:	89bb      	ldrh	r3, [r7, #12]
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d018      	beq.n	8002f10 <FT_NewTimerID_+0xd2>
		if(ft->timers[timer_i]->timer_id == new_id)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ee2:	89bb      	ldrh	r3, [r7, #12]
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	897a      	ldrh	r2, [r7, #10]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d10a      	bne.n	8002f08 <FT_NewTimerID_+0xca>
		{
			new_id++;
 8002ef2:	897b      	ldrh	r3, [r7, #10]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	817b      	strh	r3, [r7, #10]
			if(new_id == UINT16_MAX) break;
 8002ef8:	897b      	ldrh	r3, [r7, #10]
 8002efa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00d      	beq.n	8002f1e <FT_NewTimerID_+0xe0>
			timer_i = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	81bb      	strh	r3, [r7, #12]
 8002f06:	e004      	b.n	8002f12 <FT_NewTimerID_+0xd4>
		}
		else timer_i++;
 8002f08:	89bb      	ldrh	r3, [r7, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	81bb      	strh	r3, [r7, #12]
 8002f0e:	e000      	b.n	8002f12 <FT_NewTimerID_+0xd4>
		if(ft->timers[timer_i] == NULL) continue;
 8002f10:	bf00      	nop
	while(timers_compared < ft->timers_count)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f16:	893a      	ldrh	r2, [r7, #8]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d3d8      	bcc.n	8002ece <FT_NewTimerID_+0x90>
 8002f1c:	e000      	b.n	8002f20 <FT_NewTimerID_+0xe2>
			if(new_id == UINT16_MAX) break;
 8002f1e:	bf00      	nop
	}
	if(new_id < UINT16_MAX) return new_id;
 8002f20:	897b      	ldrh	r3, [r7, #10]
 8002f22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d001      	beq.n	8002f2e <FT_NewTimerID_+0xf0>
 8002f2a:	897b      	ldrh	r3, [r7, #10]
 8002f2c:	e000      	b.n	8002f30 <FT_NewTimerID_+0xf2>
	return 0;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <FT_GetTimer_>:

FT_ERR FT_GetTimer_(FT_base* ft, uint16_t timer_id, ft_def** timer)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	460b      	mov	r3, r1
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	817b      	strh	r3, [r7, #10]
	if(ft == NULL || timer == NULL) return FT_INVALID_ARGUMENT;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <FT_GetTimer_+0x1a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <FT_GetTimer_+0x20>
 8002f56:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002f5a:	e021      	b.n	8002fa0 <FT_GetTimer_+0x64>

	for(uint16_t i = 0; i < ft->timers_count; i++)
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	82fb      	strh	r3, [r7, #22]
 8002f60:	e017      	b.n	8002f92 <FT_GetTimer_+0x56>
	{
		if(ft->timers[i]->timer_id == timer_id)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f66:	8afb      	ldrh	r3, [r7, #22]
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	897a      	ldrh	r2, [r7, #10]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d10a      	bne.n	8002f8c <FT_GetTimer_+0x50>
		{
			*timer = ft->timers[i];
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f7a:	8afb      	ldrh	r3, [r7, #22]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	601a      	str	r2, [r3, #0]
			return FT_OK;
 8002f86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f8a:	e009      	b.n	8002fa0 <FT_GetTimer_+0x64>
	for(uint16_t i = 0; i < ft->timers_count; i++)
 8002f8c:	8afb      	ldrh	r3, [r7, #22]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	82fb      	strh	r3, [r7, #22]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f96:	8afa      	ldrh	r2, [r7, #22]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d3e2      	bcc.n	8002f62 <FT_GetTimer_+0x26>
		}
	}
	return FT_INVALID_ID;
 8002f9c:	f241 0305 	movw	r3, #4101	@ 0x1005
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	371c      	adds	r7, #28
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <FT_PrintConfiguration>:

FT_ERR FT_PrintConfiguration(FT_base* ft, char* str, uint32_t max_length)
{
 8002fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fb0:	b093      	sub	sp, #76	@ 0x4c
 8002fb2:	af0c      	add	r7, sp, #48	@ 0x30
 8002fb4:	6178      	str	r0, [r7, #20]
 8002fb6:	6139      	str	r1, [r7, #16]
 8002fb8:	60fa      	str	r2, [r7, #12]
	if(ft == NULL || str == NULL || max_length == 0) return FT_INVALID_ARGUMENT;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <FT_PrintConfiguration+0x20>
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <FT_PrintConfiguration+0x20>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <FT_PrintConfiguration+0x26>
 8002fcc:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002fd0:	e040      	b.n	8003054 <FT_PrintConfiguration+0xa8>
	str[0] = '\0';
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	701a      	strb	r2, [r3, #0]
	snprintf(str, max_length, "srcfq:%lu\r\n"
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60bb      	str	r3, [r7, #8]
						"psc:%lu/%lu\r\n"
						"arr:%lu/%lu\r\n"
						"cycl/fq/ms:%u/%lu/%lu\r\n"
						"stable:%c\r\n",
			ft->config.src_freq,
			ft->config.frequency, ft->config.des_freq,
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	695b      	ldr	r3, [r3, #20]
	snprintf(str, max_length, "srcfq:%lu\r\n"
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd fac0 	bl	8000568 <__aeabi_f2d>
 8002fe8:	4680      	mov	r8, r0
 8002fea:	4689      	mov	r9, r1
 8002fec:	6979      	ldr	r1, [r7, #20]
 8002fee:	6909      	ldr	r1, [r1, #16]
			ft->config.prescaler + 1, ft->config.max_prescaler,
 8002ff0:	6978      	ldr	r0, [r7, #20]
 8002ff2:	69c0      	ldr	r0, [r0, #28]
	snprintf(str, max_length, "srcfq:%lu\r\n"
 8002ff4:	3001      	adds	r0, #1
 8002ff6:	697c      	ldr	r4, [r7, #20]
 8002ff8:	6a24      	ldr	r4, [r4, #32]
 8002ffa:	697d      	ldr	r5, [r7, #20]
 8002ffc:	6a6d      	ldr	r5, [r5, #36]	@ 0x24
 8002ffe:	697e      	ldr	r6, [r7, #20]
 8003000:	6ab6      	ldr	r6, [r6, #40]	@ 0x28
			ft->config.divider, ft->config.counter_period,
			ft->config.cycle_length, ft->config.cycle_freq, ft->config.cycle_ms,
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	@ 0x2c
	snprintf(str, max_length, "srcfq:%lu\r\n"
 8003008:	4662      	mov	r2, ip
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003014:	603b      	str	r3, [r7, #0]
			ft->config.is_stable ? 'T' : 'F'
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f893 c018 	ldrb.w	ip, [r3, #24]
	snprintf(str, max_length, "srcfq:%lu\r\n"
 800301c:	f1bc 0f00 	cmp.w	ip, #0
 8003020:	d001      	beq.n	8003026 <FT_PrintConfiguration+0x7a>
 8003022:	2354      	movs	r3, #84	@ 0x54
 8003024:	e000      	b.n	8003028 <FT_PrintConfiguration+0x7c>
 8003026:	2346      	movs	r3, #70	@ 0x46
 8003028:	930a      	str	r3, [sp, #40]	@ 0x28
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	9309      	str	r3, [sp, #36]	@ 0x24
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	9308      	str	r3, [sp, #32]
 8003032:	4613      	mov	r3, r2
 8003034:	9307      	str	r3, [sp, #28]
 8003036:	9606      	str	r6, [sp, #24]
 8003038:	9505      	str	r5, [sp, #20]
 800303a:	9404      	str	r4, [sp, #16]
 800303c:	9003      	str	r0, [sp, #12]
 800303e:	9102      	str	r1, [sp, #8]
 8003040:	e9cd 8900 	strd	r8, r9, [sp]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4a06      	ldr	r2, [pc, #24]	@ (8003060 <FT_PrintConfiguration+0xb4>)
 8003048:	68f9      	ldr	r1, [r7, #12]
 800304a:	6938      	ldr	r0, [r7, #16]
 800304c:	f007 fb82 	bl	800a754 <sniprintf>
			);
	return FT_OK;
 8003050:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8003054:	4618      	mov	r0, r3
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800305e:	bf00      	nop
 8003060:	0800c8f8 	.word	0x0800c8f8

08003064 <FT_GetType>:

	return 0;
}

ft_type FT_GetType(TIM_HandleTypeDef* htim)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	if (
#ifdef TIM1
			htim->Instance == TIM1 ||
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
	if (
 8003070:	4a28      	ldr	r2, [pc, #160]	@ (8003114 <FT_GetType+0xb0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d004      	beq.n	8003080 <FT_GetType+0x1c>
#endif
#ifdef TIM8
			htim->Instance == TIM8 ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a27      	ldr	r2, [pc, #156]	@ (8003118 <FT_GetType+0xb4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d101      	bne.n	8003084 <FT_GetType+0x20>
#endif
			0)
	{
		return FT_TYPE_ADVANCED;
 8003080:	2305      	movs	r3, #5
 8003082:	e040      	b.n	8003106 <FT_GetType+0xa2>
	}
	else if (
#ifdef TIM2
			htim->Instance == TIM2 ||
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
	else if (
 8003088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800308c:	d02c      	beq.n	80030e8 <FT_GetType+0x84>
#endif
#ifdef TIM3
			htim->Instance == TIM3 ||
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM2 ||
 8003092:	4a22      	ldr	r2, [pc, #136]	@ (800311c <FT_GetType+0xb8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d027      	beq.n	80030e8 <FT_GetType+0x84>
#endif
#ifdef TIM4
			htim->Instance == TIM4 ||
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM3 ||
 800309c:	4a20      	ldr	r2, [pc, #128]	@ (8003120 <FT_GetType+0xbc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d022      	beq.n	80030e8 <FT_GetType+0x84>
#endif
#ifdef TIM5
			htim->Instance == TIM5 ||
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM4 ||
 80030a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003124 <FT_GetType+0xc0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d01d      	beq.n	80030e8 <FT_GetType+0x84>
#endif
#ifdef TIM9
			htim->Instance == TIM9 ||
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM5 ||
 80030b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003128 <FT_GetType+0xc4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d018      	beq.n	80030e8 <FT_GetType+0x84>
#endif
#ifdef TIM10
			htim->Instance == TIM10 ||
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM9 ||
 80030ba:	4a1c      	ldr	r2, [pc, #112]	@ (800312c <FT_GetType+0xc8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d013      	beq.n	80030e8 <FT_GetType+0x84>
#endif
#ifdef TIM11
			htim->Instance == TIM11 ||
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM10 ||
 80030c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <FT_GetType+0xcc>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00e      	beq.n	80030e8 <FT_GetType+0x84>
#endif
#ifdef TIM12
			htim->Instance == TIM12 ||
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM11 ||
 80030ce:	4a19      	ldr	r2, [pc, #100]	@ (8003134 <FT_GetType+0xd0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d009      	beq.n	80030e8 <FT_GetType+0x84>
#endif
#ifdef TIM13
			htim->Instance == TIM13 ||
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM12 ||
 80030d8:	4a17      	ldr	r2, [pc, #92]	@ (8003138 <FT_GetType+0xd4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <FT_GetType+0x84>
#endif
#ifdef TIM14
			htim->Instance == TIM14 ||
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a16      	ldr	r2, [pc, #88]	@ (800313c <FT_GetType+0xd8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d101      	bne.n	80030ec <FT_GetType+0x88>
#ifdef TIM17
			htim->Instance == TIM17 ||
#endif
			0)
	{
		return FT_TYPE_GP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	e00c      	b.n	8003106 <FT_GetType+0xa2>
	}
	else if (
#ifdef TIM6
			htim->Instance == TIM6 ||
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
	else if (
 80030f0:	4a13      	ldr	r2, [pc, #76]	@ (8003140 <FT_GetType+0xdc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d004      	beq.n	8003100 <FT_GetType+0x9c>
#endif
#ifdef TIM7
			htim->Instance == TIM7 ||
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a12      	ldr	r2, [pc, #72]	@ (8003144 <FT_GetType+0xe0>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d101      	bne.n	8003104 <FT_GetType+0xa0>
#endif
			0)
	{
		return FT_TYPE_BASIC;
 8003100:	2303      	movs	r3, #3
 8003102:	e000      	b.n	8003106 <FT_GetType+0xa2>
	}
	return FT_TYPE_UNKNOWN;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40010000 	.word	0x40010000
 8003118:	40010400 	.word	0x40010400
 800311c:	40000400 	.word	0x40000400
 8003120:	40000800 	.word	0x40000800
 8003124:	40000c00 	.word	0x40000c00
 8003128:	40014000 	.word	0x40014000
 800312c:	40014400 	.word	0x40014400
 8003130:	40014800 	.word	0x40014800
 8003134:	40001800 	.word	0x40001800
 8003138:	40001c00 	.word	0x40001c00
 800313c:	40002000 	.word	0x40002000
 8003140:	40001000 	.word	0x40001000
 8003144:	40001400 	.word	0x40001400

08003148 <FT_GetSource>:

ft_source FT_GetSource(TIM_HandleTypeDef* htim)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
	if(
#ifdef TIM2
			htim->Instance == TIM2 ||
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
	if(
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003158:	d027      	beq.n	80031aa <FT_GetSource+0x62>
#endif
#ifdef TIM3
			htim->Instance == TIM3 ||
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM2 ||
 800315e:	4a25      	ldr	r2, [pc, #148]	@ (80031f4 <FT_GetSource+0xac>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d022      	beq.n	80031aa <FT_GetSource+0x62>
#endif
#ifdef TIM4
			htim->Instance == TIM4 ||
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM3 ||
 8003168:	4a23      	ldr	r2, [pc, #140]	@ (80031f8 <FT_GetSource+0xb0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d01d      	beq.n	80031aa <FT_GetSource+0x62>
#endif
#ifdef TIM5
			htim->Instance == TIM5 ||
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM4 ||
 8003172:	4a22      	ldr	r2, [pc, #136]	@ (80031fc <FT_GetSource+0xb4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d018      	beq.n	80031aa <FT_GetSource+0x62>
#endif
#ifdef TIM6
			htim->Instance == TIM6 ||
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM5 ||
 800317c:	4a20      	ldr	r2, [pc, #128]	@ (8003200 <FT_GetSource+0xb8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d013      	beq.n	80031aa <FT_GetSource+0x62>
#endif
#ifdef TIM7
			htim->Instance == TIM7 ||
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM6 ||
 8003186:	4a1f      	ldr	r2, [pc, #124]	@ (8003204 <FT_GetSource+0xbc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00e      	beq.n	80031aa <FT_GetSource+0x62>
#endif
#ifdef TIM12
			htim->Instance == TIM12 ||
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM7 ||
 8003190:	4a1d      	ldr	r2, [pc, #116]	@ (8003208 <FT_GetSource+0xc0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d009      	beq.n	80031aa <FT_GetSource+0x62>
#endif
#ifdef TIM13
			htim->Instance == TIM13 ||
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM12 ||
 800319a:	4a1c      	ldr	r2, [pc, #112]	@ (800320c <FT_GetSource+0xc4>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d004      	beq.n	80031aa <FT_GetSource+0x62>
#endif
#ifdef TIM14
			htim->Instance == TIM14 ||
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003210 <FT_GetSource+0xc8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d101      	bne.n	80031ae <FT_GetSource+0x66>
#endif
			0)
	{
		return FT_SRC_APB1;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e01b      	b.n	80031e6 <FT_GetSource+0x9e>
	}
	else if(
#ifdef TIM1
			htim->Instance == TIM1 ||
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
	else if(
 80031b2:	4a18      	ldr	r2, [pc, #96]	@ (8003214 <FT_GetSource+0xcc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d013      	beq.n	80031e0 <FT_GetSource+0x98>
#endif
#ifdef TIM8
			htim->Instance == TIM8 ||
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM1 ||
 80031bc:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <FT_GetSource+0xd0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00e      	beq.n	80031e0 <FT_GetSource+0x98>
#endif
#ifdef TIM9
			htim->Instance == TIM9 ||
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM8 ||
 80031c6:	4a15      	ldr	r2, [pc, #84]	@ (800321c <FT_GetSource+0xd4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d009      	beq.n	80031e0 <FT_GetSource+0x98>
#endif
#ifdef TIM10
			htim->Instance == TIM10 ||
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM9 ||
 80031d0:	4a13      	ldr	r2, [pc, #76]	@ (8003220 <FT_GetSource+0xd8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d004      	beq.n	80031e0 <FT_GetSource+0x98>
#endif
#ifdef TIM11
			htim->Instance == TIM11 ||
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a12      	ldr	r2, [pc, #72]	@ (8003224 <FT_GetSource+0xdc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d101      	bne.n	80031e4 <FT_GetSource+0x9c>
#ifdef TIM17
			htim->Instance == TIM17 ||
#endif
		0)
	{
		return FT_SRC_APB2;
 80031e0:	2302      	movs	r3, #2
 80031e2:	e000      	b.n	80031e6 <FT_GetSource+0x9e>
	}
	return FT_SRC_UNKNOWN;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800
 80031fc:	40000c00 	.word	0x40000c00
 8003200:	40001000 	.word	0x40001000
 8003204:	40001400 	.word	0x40001400
 8003208:	40001800 	.word	0x40001800
 800320c:	40001c00 	.word	0x40001c00
 8003210:	40002000 	.word	0x40002000
 8003214:	40010000 	.word	0x40010000
 8003218:	40010400 	.word	0x40010400
 800321c:	40014000 	.word	0x40014000
 8003220:	40014400 	.word	0x40014400
 8003224:	40014800 	.word	0x40014800

08003228 <FT_GetResolution>:

ft_resolution FT_GetResolution(TIM_HandleTypeDef* htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	if(
#ifdef TIM1
		htim->Instance == TIM1 ||
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
	if(
 8003234:	4a27      	ldr	r2, [pc, #156]	@ (80032d4 <FT_GetResolution+0xac>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d036      	beq.n	80032a8 <FT_GetResolution+0x80>
#endif
#ifdef TIM3
		htim->Instance == TIM3 ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM1 ||
 800323e:	4a26      	ldr	r2, [pc, #152]	@ (80032d8 <FT_GetResolution+0xb0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d031      	beq.n	80032a8 <FT_GetResolution+0x80>
#endif
#ifdef TIM4
		htim->Instance == TIM4 ||
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM3 ||
 8003248:	4a24      	ldr	r2, [pc, #144]	@ (80032dc <FT_GetResolution+0xb4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d02c      	beq.n	80032a8 <FT_GetResolution+0x80>
#endif
#ifdef TIM6
		htim->Instance == TIM6 ||
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM4 ||
 8003252:	4a23      	ldr	r2, [pc, #140]	@ (80032e0 <FT_GetResolution+0xb8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d027      	beq.n	80032a8 <FT_GetResolution+0x80>
#endif
#ifdef TIM7
		htim->Instance == TIM7 ||
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM6 ||
 800325c:	4a21      	ldr	r2, [pc, #132]	@ (80032e4 <FT_GetResolution+0xbc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d022      	beq.n	80032a8 <FT_GetResolution+0x80>
#endif
#ifdef TIM8
		htim->Instance == TIM8 ||
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM7 ||
 8003266:	4a20      	ldr	r2, [pc, #128]	@ (80032e8 <FT_GetResolution+0xc0>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d01d      	beq.n	80032a8 <FT_GetResolution+0x80>
#endif
#ifdef TIM9
		htim->Instance == TIM9 ||
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM8 ||
 8003270:	4a1e      	ldr	r2, [pc, #120]	@ (80032ec <FT_GetResolution+0xc4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d018      	beq.n	80032a8 <FT_GetResolution+0x80>
#endif
#ifdef TIM10
		htim->Instance == TIM10 ||
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM9 ||
 800327a:	4a1d      	ldr	r2, [pc, #116]	@ (80032f0 <FT_GetResolution+0xc8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d013      	beq.n	80032a8 <FT_GetResolution+0x80>
#endif
#ifdef TIM11
		htim->Instance == TIM11 ||
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM10 ||
 8003284:	4a1b      	ldr	r2, [pc, #108]	@ (80032f4 <FT_GetResolution+0xcc>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00e      	beq.n	80032a8 <FT_GetResolution+0x80>
#endif
#ifdef TIM12
		htim->Instance == TIM12 ||
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM11 ||
 800328e:	4a1a      	ldr	r2, [pc, #104]	@ (80032f8 <FT_GetResolution+0xd0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d009      	beq.n	80032a8 <FT_GetResolution+0x80>
#endif
#ifdef TIM13
		htim->Instance == TIM13 ||
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM12 ||
 8003298:	4a18      	ldr	r2, [pc, #96]	@ (80032fc <FT_GetResolution+0xd4>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <FT_GetResolution+0x80>
#endif
#ifdef TIM14
		htim->Instance == TIM14 ||
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a17      	ldr	r2, [pc, #92]	@ (8003300 <FT_GetResolution+0xd8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <FT_GetResolution+0x84>
#ifdef TIM17
		htim->Instance == TIM17 ||
#endif
		0)
	{
		return FT_RES_16;
 80032a8:	2302      	movs	r3, #2
 80032aa:	e00c      	b.n	80032c6 <FT_GetResolution+0x9e>
	}
	else if(
#ifdef TIM2
		htim->Instance == TIM2 ||
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
	else if(
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032b4:	d004      	beq.n	80032c0 <FT_GetResolution+0x98>
#endif
#ifdef TIM5
		htim->Instance == TIM5 ||
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a12      	ldr	r2, [pc, #72]	@ (8003304 <FT_GetResolution+0xdc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <FT_GetResolution+0x9c>
#endif
		0)
	{
		return FT_RES_32;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e000      	b.n	80032c6 <FT_GetResolution+0x9e>
	}
	return FT_RES_UNKNOWN;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40010000 	.word	0x40010000
 80032d8:	40000400 	.word	0x40000400
 80032dc:	40000800 	.word	0x40000800
 80032e0:	40001000 	.word	0x40001000
 80032e4:	40001400 	.word	0x40001400
 80032e8:	40010400 	.word	0x40010400
 80032ec:	40014000 	.word	0x40014000
 80032f0:	40014400 	.word	0x40014400
 80032f4:	40014800 	.word	0x40014800
 80032f8:	40001800 	.word	0x40001800
 80032fc:	40001c00 	.word	0x40001c00
 8003300:	40002000 	.word	0x40002000
 8003304:	40000c00 	.word	0x40000c00

08003308 <FT_GetPrescalerRange>:

ft_prescaler_range FT_GetPrescalerRange(TIM_HandleTypeDef* htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
#if defined(STM32H747xx) || defined(STM32F429xx)
	return FT_PRE_1_65536;
 8003310:	2301      	movs	r3, #1
#else
#error No prescaler values specified for current module!
#endif
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <FT_GetFrequency>:

uint32_t FT_GetFrequency(ft_source source)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	71fb      	strb	r3, [r7, #7]
	if (source == FT_SRC_APB1) {
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d10d      	bne.n	800334c <FT_GetFrequency+0x2c>
		uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 8003330:	f004 f866 	bl	8007400 <HAL_RCC_GetPCLK1Freq>
 8003334:	60b8      	str	r0, [r7, #8]
#if defined(STM32H747xx)
		if((RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) == 0)
#else
		if((RCC->CFGR & RCC_CFGR_PPRE1) == 0)
 8003336:	4b10      	ldr	r3, [pc, #64]	@ (8003378 <FT_GetFrequency+0x58>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <FT_GetFrequency+0x26>
#endif
		{
			/* PCLK1 prescaler equal to 1 => TIMCLK = PCLK1 */
			return (pclk1);
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	e014      	b.n	8003370 <FT_GetFrequency+0x50>
		}
		else
		{
			/* PCLK1 prescaler different from 1 => TIMCLK = 2 * PCLK1 */
			return(2 * pclk1);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	e011      	b.n	8003370 <FT_GetFrequency+0x50>
		}
	}
	else if (source == FT_SRC_APB2) {
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d10d      	bne.n	800336e <FT_GetFrequency+0x4e>
		uint32_t pclk2 = HAL_RCC_GetPCLK2Freq();
 8003352:	f004 f869 	bl	8007428 <HAL_RCC_GetPCLK2Freq>
 8003356:	60f8      	str	r0, [r7, #12]
#if defined(STM32H747xx)
		if((RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) == 0)
#else
		if((RCC->CFGR & RCC_CFGR_PPRE2) == 0)
 8003358:	4b07      	ldr	r3, [pc, #28]	@ (8003378 <FT_GetFrequency+0x58>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <FT_GetFrequency+0x48>
#endif
		{
			/* PCLK2 prescaler equal to 1 => TIMCLK = PCLK2 */
			return (pclk2);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	e003      	b.n	8003370 <FT_GetFrequency+0x50>
		}
		else
		{
			/* PCLK2 prescaler different from 1 => TIMCLK = 2 * PCLK2 */
			return(2 * pclk2);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	e000      	b.n	8003370 <FT_GetFrequency+0x50>
		}
	}
	return 0;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800

0800337c <FT_GetTimerConfiguration>:

FT_ERR FT_GetTimerConfiguration(ft_config* config) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b08e      	sub	sp, #56	@ 0x38
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	if(config == NULL) return FT_INVALID_ARGUMENT;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <FT_GetTimerConfiguration+0x14>
 800338a:	f241 0303 	movw	r3, #4099	@ 0x1003
 800338e:	e15b      	b.n	8003648 <FT_GetTimerConfiguration+0x2cc>


	uint32_t src_freq = config->src_freq;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	623b      	str	r3, [r7, #32]
	uint32_t des_freq = config->des_freq;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	61fb      	str	r3, [r7, #28]
	uint32_t prescaler = 1;
 800339c:	2301      	movs	r3, #1
 800339e:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t max_prescaler = config->max_prescaler;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	61bb      	str	r3, [r7, #24]
	uint32_t divider = 1;
 80033a6:	2301      	movs	r3, #1
 80033a8:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t counter_period = config->counter_period;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	617b      	str	r3, [r7, #20]


	if(max_prescaler == UINT32_MAX /*||
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	d102      	bne.n	80033be <FT_GetTimerConfiguration+0x42>
			counter_period == UINT32_MAX*/) return FT_INVALID_ARGUMENT;
 80033b8:	f241 0303 	movw	r3, #4099	@ 0x1003
 80033bc:	e144      	b.n	8003648 <FT_GetTimerConfiguration+0x2cc>

    float prescaler_divider = (float)src_freq / des_freq;
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	ee07 3a90 	vmov	s15, r3
 80033c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033d6:	edc7 7a04 	vstr	s15, [r7, #16]

    if(des_freq > src_freq || prescaler_divider / counter_period >= max_prescaler ) {
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d812      	bhi.n	8003408 <FT_GetTimerConfiguration+0x8c>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	ee07 3a90 	vmov	s15, r3
 80033e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ec:	edd7 6a04 	vldr	s13, [r7, #16]
 80033f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003406:	db02      	blt.n	800340e <FT_GetTimerConfiguration+0x92>
        return FT_IMPOSSIBLE_FREQUENCY;
 8003408:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 800340c:	e11c      	b.n	8003648 <FT_GetTimerConfiguration+0x2cc>
    }


    float current_freq, current_freq_diff, best_freq_diff = src_freq;
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003418:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    uint32_t best_prescaler = 1, best_divider = 1;
 800341c:	2301      	movs	r3, #1
 800341e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003420:	2301      	movs	r3, #1
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24

    for (divider = 1; divider <= counter_period; divider++)
 8003424:	2301      	movs	r3, #1
 8003426:	633b      	str	r3, [r7, #48]	@ 0x30
 8003428:	e0bb      	b.n	80035a2 <FT_GetTimerConfiguration+0x226>
    {
        for(prescaler = 1; prescaler <= max_prescaler; prescaler++)
 800342a:	2301      	movs	r3, #1
 800342c:	637b      	str	r3, [r7, #52]	@ 0x34
 800342e:	e0ae      	b.n	800358e <FT_GetTimerConfiguration+0x212>
        {
            current_freq = (float)src_freq / (prescaler * divider);
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800344a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800344e:	edc7 7a03 	vstr	s15, [r7, #12]
            current_freq_diff = fabs(des_freq - current_freq);
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	ee07 3a90 	vmov	s15, r3
 8003458:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800345c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003464:	eef0 7ae7 	vabs.f32	s15, s15
 8003468:	edc7 7a02 	vstr	s15, [r7, #8]
            if(current_freq == des_freq)
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	ee07 3a90 	vmov	s15, r3
 8003472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003476:	ed97 7a03 	vldr	s14, [r7, #12]
 800347a:	eeb4 7a67 	vcmp.f32	s14, s15
 800347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003482:	d165      	bne.n	8003550 <FT_GetTimerConfiguration+0x1d4>
            {
                printf("Perfect hit!\r\n");
 8003484:	4872      	ldr	r0, [pc, #456]	@ (8003650 <FT_GetTimerConfiguration+0x2d4>)
 8003486:	f007 f95d 	bl	800a744 <puts>

                config->is_stable = 1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	741a      	strb	r2, [r3, #16]

                config->prescaler = prescaler - 1;
 8003490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003492:	1e5a      	subs	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	615a      	str	r2, [r3, #20]
                config->divider = divider;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800349c:	61da      	str	r2, [r3, #28]
                config->counter_period = (int)(counter_period / divider) * divider;
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a8:	fb03 f202 	mul.w	r2, r3, r2
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	621a      	str	r2, [r3, #32]

                config->frequency = (float)src_freq / (prescaler * divider);
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034be:	fb02 f303 	mul.w	r3, r2, r3
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	edc3 7a03 	vstr	s15, [r3, #12]
                config->cycle_length = counter_period / divider;
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	849a      	strh	r2, [r3, #36]	@ 0x24
                config->cycle_freq = ((float)src_freq / config->frequency) * config->cycle_length;
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	ee07 3a90 	vmov	s15, r3
 80034e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80034f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800350a:	ee17 2a90 	vmov	r2, s15
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	629a      	str	r2, [r3, #40]	@ 0x28
                config->cycle_ms = ((float)src_freq / config->frequency) * ((float)config->cycle_length / 1000);
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800352a:	ee07 3a90 	vmov	s15, r3
 800352e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003532:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8003654 <FT_GetTimerConfiguration+0x2d8>
 8003536:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800353a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800353e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003542:	ee17 2a90 	vmov	r2, s15
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	62da      	str	r2, [r3, #44]	@ 0x2c

                return FT_OK;
 800354a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800354e:	e07b      	b.n	8003648 <FT_GetTimerConfiguration+0x2cc>
            }
            else if(current_freq_diff < best_freq_diff)
 8003550:	ed97 7a02 	vldr	s14, [r7, #8]
 8003554:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800355c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003560:	d506      	bpl.n	8003570 <FT_GetTimerConfiguration+0x1f4>
            {
                best_freq_diff = current_freq_diff;
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	62fb      	str	r3, [r7, #44]	@ 0x2c
                best_prescaler = prescaler;
 8003566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003568:	62bb      	str	r3, [r7, #40]	@ 0x28
                best_divider = divider;
 800356a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356c:	627b      	str	r3, [r7, #36]	@ 0x24
 800356e:	e00b      	b.n	8003588 <FT_GetTimerConfiguration+0x20c>
            }
            else if(current_freq < des_freq)
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	ee07 3a90 	vmov	s15, r3
 8003576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800357a:	ed97 7a03 	vldr	s14, [r7, #12]
 800357e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003586:	d408      	bmi.n	800359a <FT_GetTimerConfiguration+0x21e>
        for(prescaler = 1; prescaler <= max_prescaler; prescaler++)
 8003588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358a:	3301      	adds	r3, #1
 800358c:	637b      	str	r3, [r7, #52]	@ 0x34
 800358e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	429a      	cmp	r2, r3
 8003594:	f67f af4c 	bls.w	8003430 <FT_GetTimerConfiguration+0xb4>
 8003598:	e000      	b.n	800359c <FT_GetTimerConfiguration+0x220>
            {
                break;
 800359a:	bf00      	nop
    for (divider = 1; divider <= counter_period; divider++)
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	3301      	adds	r3, #1
 80035a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	f67f af3f 	bls.w	800342a <FT_GetTimerConfiguration+0xae>
            }
        }
    }

    config->is_stable = 0;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	741a      	strb	r2, [r3, #16]

    config->prescaler = best_prescaler - 1;
 80035b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b4:	1e5a      	subs	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	615a      	str	r2, [r3, #20]
    config->divider = best_divider;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035be:	61da      	str	r2, [r3, #28]
    config->counter_period = (int)(counter_period / best_divider) * best_divider;
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ca:	fb03 f202 	mul.w	r2, r3, r2
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	621a      	str	r2, [r3, #32]

    config->frequency = (float)src_freq / (best_prescaler * best_divider);
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	edc3 7a03 	vstr	s15, [r3, #12]
    config->cycle_length = counter_period / best_divider;
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80035fe:	b29a      	uxth	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	849a      	strh	r2, [r3, #36]	@ 0x24
    config->cycle_freq = ((float)src_freq / config->frequency) * config->cycle_length;
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	ee07 3a90 	vmov	s15, r3
 800360a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	edd3 7a03 	vldr	s15, [r3, #12]
 8003614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800361c:	ee07 3a90 	vmov	s15, r3
 8003620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800362c:	ee17 2a90 	vmov	r2, s15
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	629a      	str	r2, [r3, #40]	@ 0x28
    config->cycle_ms = config->cycle_freq / 1000;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003638:	4a07      	ldr	r2, [pc, #28]	@ (8003658 <FT_GetTimerConfiguration+0x2dc>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	099a      	lsrs	r2, r3, #6
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	62da      	str	r2, [r3, #44]	@ 0x2c

    return FT_OK;
 8003644:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8003648:	4618      	mov	r0, r3
 800364a:	3738      	adds	r7, #56	@ 0x38
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	0800c954 	.word	0x0800c954
 8003654:	447a0000 	.word	0x447a0000
 8003658:	10624dd3 	.word	0x10624dd3

0800365c <GSM_cmd>:
 */

#include "gsm.h"

GSM_ERR GSM_cmd(gsm_t *gsm, const uint8_t* cmd, uint16_t cmd_len)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
	if(gsm == NULL) return GSM_INVALID_ARGUMENT;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d102      	bne.n	8003676 <GSM_cmd+0x1a>
 8003670:	f249 0303 	movw	r3, #36867	@ 0x9003
 8003674:	e019      	b.n	80036aa <GSM_cmd+0x4e>
	if(gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <GSM_cmd+0x2a>
 8003680:	f249 0301 	movw	r3, #36865	@ 0x9001
 8003684:	e011      	b.n	80036aa <GSM_cmd+0x4e>
	HAL_StatusTypeDef status = UartRcvr_send(gsm->uart_rcvr_gsm, cmd, cmd_len);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 800368c:	88fa      	ldrh	r2, [r7, #6]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	4618      	mov	r0, r3
 8003692:	f001 fb3b 	bl	8004d0c <UartRcvr_send>
 8003696:	4603      	mov	r3, r0
 8003698:	75fb      	strb	r3, [r7, #23]
	return status == HAL_OK ? GSM_OK : GSM_HAL_ERR;
 800369a:	7dfb      	ldrb	r3, [r7, #23]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <GSM_cmd+0x4a>
 80036a0:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80036a4:	e001      	b.n	80036aa <GSM_cmd+0x4e>
 80036a6:	f249 0351 	movw	r3, #36945	@ 0x9051
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3718      	adds	r7, #24
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <GSM_Prints>:
	HAL_StatusTypeDef status = UartRcvr_send(gsm->uart_rcvr_debug, data, len);
	return status == HAL_OK ? GSM_OK : GSM_HAL_ERR;
}

GSM_ERR GSM_Prints(gsm_t *gsm, const char* str)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
	if (gsm == NULL || str == NULL) return GSM_INVALID_ARGUMENT;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <GSM_Prints+0x16>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d102      	bne.n	80036ce <GSM_Prints+0x1c>
 80036c8:	f249 0303 	movw	r3, #36867	@ 0x9003
 80036cc:	e018      	b.n	8003700 <GSM_Prints+0x4e>
	if (gsm->uart_rcvr_debug == NULL) return GSM_OK;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 36c8 	ldr.w	r3, [r3, #1736]	@ 0x6c8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d102      	bne.n	80036de <GSM_Prints+0x2c>
 80036d8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80036dc:	e010      	b.n	8003700 <GSM_Prints+0x4e>

	HAL_StatusTypeDef status = UartRcvr_print(gsm->uart_rcvr_debug, str);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f8d3 36c8 	ldr.w	r3, [r3, #1736]	@ 0x6c8
 80036e4:	6839      	ldr	r1, [r7, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 fb2d 	bl	8004d46 <UartRcvr_print>
 80036ec:	4603      	mov	r3, r0
 80036ee:	73fb      	strb	r3, [r7, #15]
	return status == HAL_OK ? GSM_OK : GSM_HAL_ERR;
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <GSM_Prints+0x4a>
 80036f6:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80036fa:	e001      	b.n	8003700 <GSM_Prints+0x4e>
 80036fc:	f249 0351 	movw	r3, #36945	@ 0x9051
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <GSM_atData>:

GSM_ERR GSM_atData(gsm_t *gsm, const uint8_t* at_cmd, uint16_t len, uint8_t response_expected, uint32_t timeout_ms)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	4611      	mov	r1, r2
 8003714:	461a      	mov	r2, r3
 8003716:	460b      	mov	r3, r1
 8003718:	80fb      	strh	r3, [r7, #6]
 800371a:	4613      	mov	r3, r2
 800371c:	717b      	strb	r3, [r7, #5]
	if (gsm == NULL || at_cmd == NULL) return GSM_INVALID_ARGUMENT;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <GSM_atData+0x22>
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d102      	bne.n	8003730 <GSM_atData+0x28>
 800372a:	f249 0303 	movw	r3, #36867	@ 0x9003
 800372e:	e03d      	b.n	80037ac <GSM_atData+0xa4>
	if (gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8d3 36c0 	ldr.w	r3, [r3, #1728]	@ 0x6c0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d004      	beq.n	8003744 <GSM_atData+0x3c>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <GSM_atData+0x42>
 8003744:	f249 0301 	movw	r3, #36865	@ 0x9001
 8003748:	e030      	b.n	80037ac <GSM_atData+0xa4>

	//GSM_Prints(gsm, ">> ");
	//GSM_PrintsData(gsm, at_cmd, len);

	GSM_ClearResponse(gsm);
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 fe6e 	bl	800442c <GSM_ClearResponse>

	if (response_expected == 1)
 8003750:	797b      	ldrb	r3, [r7, #5]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d11a      	bne.n	800378c <GSM_atData+0x84>
	{
		gsm->flags.response.expected = 1;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	755a      	strb	r2, [r3, #21]
		FT_SetTimerInterval(gsm->ft, gsm->timers.timeout, timeout_ms * 10);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f8d3 06c0 	ldr.w	r0, [r3, #1728]	@ 0x6c0
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f8b3 11aa 	ldrh.w	r1, [r3, #426]	@ 0x1aa
 8003768:	6a3a      	ldr	r2, [r7, #32]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	461a      	mov	r2, r3
 8003774:	f7ff fa10 	bl	8002b98 <FT_SetTimerInterval>
		FT_StartTimer(gsm->ft, gsm->timers.timeout);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8d3 26c0 	ldr.w	r2, [r3, #1728]	@ 0x6c0
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	@ 0x1aa
 8003784:	4619      	mov	r1, r3
 8003786:	4610      	mov	r0, r2
 8003788:	f7ff fa2d 	bl	8002be6 <FT_StartTimer>
	}

	GSM_ERR err = GSM_cmd(gsm, at_cmd, len);
 800378c:	88fb      	ldrh	r3, [r7, #6]
 800378e:	461a      	mov	r2, r3
 8003790:	68b9      	ldr	r1, [r7, #8]
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f7ff ff62 	bl	800365c <GSM_cmd>
 8003798:	4603      	mov	r3, r0
 800379a:	82fb      	strh	r3, [r7, #22]
	if (err != GSM_OK) return err;
 800379c:	8afb      	ldrh	r3, [r7, #22]
 800379e:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 80037a2:	d001      	beq.n	80037a8 <GSM_atData+0xa0>
 80037a4:	8afb      	ldrh	r3, [r7, #22]
 80037a6:	e001      	b.n	80037ac <GSM_atData+0xa4>

	return GSM_OK;
 80037a8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <GSM_at>:

GSM_ERR GSM_at(gsm_t *gsm, const char* at_cmd, uint8_t response_expected, uint32_t timeout_ms)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	71fb      	strb	r3, [r7, #7]
	return GSM_atData(gsm, (const uint8_t*)at_cmd, strlen(at_cmd), response_expected, timeout_ms);
 80037c4:	68b8      	ldr	r0, [r7, #8]
 80037c6:	f7fc fd63 	bl	8000290 <strlen>
 80037ca:	4603      	mov	r3, r0
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	79f9      	ldrb	r1, [r7, #7]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	460b      	mov	r3, r1
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7ff ff95 	bl	8003708 <GSM_atData>
 80037de:	4603      	mov	r3, r0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <GSM_Feed>:


GSM_ERR GSM_Feed(gsm_t *gsm)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	if (gsm == NULL) return GSM_INVALID_ARGUMENT;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <GSM_Feed+0x14>
 80037f6:	f249 0303 	movw	r3, #36867	@ 0x9003
 80037fa:	e136      	b.n	8003a6a <GSM_Feed+0x282>
	if (gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f8d3 36c0 	ldr.w	r3, [r3, #1728]	@ 0x6c0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d004      	beq.n	8003810 <GSM_Feed+0x28>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d102      	bne.n	8003816 <GSM_Feed+0x2e>
 8003810:	f249 0301 	movw	r3, #36865	@ 0x9001
 8003814:	e129      	b.n	8003a6a <GSM_Feed+0x282>

	GSM_ERR err = GSM_ProcessInput(gsm);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f978 	bl	8003b0c <GSM_ProcessInput>
 800381c:	4603      	mov	r3, r0
 800381e:	81bb      	strh	r3, [r7, #12]
	if (err != GSM_OK) return err;
 8003820:	89bb      	ldrh	r3, [r7, #12]
 8003822:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 8003826:	d001      	beq.n	800382c <GSM_Feed+0x44>
 8003828:	89bb      	ldrh	r3, [r7, #12]
 800382a:	e11e      	b.n	8003a6a <GSM_Feed+0x282>

	FT_ERR ft_err = FT_Feed(gsm->ft);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 36c0 	ldr.w	r3, [r3, #1728]	@ 0x6c0
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff f879 	bl	800292a <FT_Feed>
 8003838:	4603      	mov	r3, r0
 800383a:	817b      	strh	r3, [r7, #10]
	while (ft_err == FT_TRIGGERED && FT_GetTriggeredTimer(gsm->ft, &gsm->timer_id, &gsm->timer_trigger_count) == FT_OK)
 800383c:	e0a1      	b.n	8003982 <GSM_Feed+0x19a>
	{
//		if(gsm->timer_id == gsm->timers.time_counter)
//		{
//			gsm->time += gsm->timer_trigger_count;
//		}
		if (gsm->timer_id == gsm->timers.timeout)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8b3 21ae 	ldrh.w	r2, [r3, #430]	@ 0x1ae
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	@ 0x1aa
 800384a:	429a      	cmp	r2, r3
 800384c:	d12e      	bne.n	80038ac <GSM_Feed+0xc4>
		{
			GSM_Prints(gsm, "Timeout\r\n");
 800384e:	4989      	ldr	r1, [pc, #548]	@ (8003a74 <GSM_Feed+0x28c>)
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ff2e 	bl	80036b2 <GSM_Prints>
			gsm->flags.response.timeout = 1;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	751a      	strb	r2, [r3, #20]
			gsm->flags.timeout_count++;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	@ 0x1a6
 8003862:	3301      	adds	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

			FT_StopTimer(gsm->ft, gsm->timers.timeout);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8d3 26c0 	ldr.w	r2, [r3, #1728]	@ 0x6c0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	@ 0x1aa
 8003878:	4619      	mov	r1, r3
 800387a:	4610      	mov	r0, r2
 800387c:	f7ff f9e3 	bl	8002c46 <FT_StopTimer>

			if(gsm->flags.timeout_count >= 5)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	@ 0x1a6
 8003886:	2b04      	cmp	r3, #4
 8003888:	d97b      	bls.n	8003982 <GSM_Feed+0x19a>
			{
				gsm->flags.detected = 0;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
				gsm->flags.initialized = 0;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	709a      	strb	r2, [r3, #2]
				FT_StartTimer(gsm->ft, gsm->timers.detect);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 26c0 	ldr.w	r2, [r3, #1728]	@ 0x6c0
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	@ 0x1ac
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f7ff f99e 	bl	8002be6 <FT_StartTimer>
 80038aa:	e06a      	b.n	8003982 <GSM_Feed+0x19a>
			}

		}
		else if (gsm->timer_id == gsm->timers.detect)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b3 21ae 	ldrh.w	r2, [r3, #430]	@ 0x1ae
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	@ 0x1ac
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d15a      	bne.n	8003972 <GSM_Feed+0x18a>
		{
			if(gsm->flags.response.awaiting == 1) continue;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7e9b      	ldrb	r3, [r3, #26]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d05b      	beq.n	800397c <GSM_Feed+0x194>
//			GSM_Prints(gsm, "Detect\r\n");
			if (gsm->flags.detected == 0)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d144      	bne.n	8003956 <GSM_Feed+0x16e>
			{
				if(gsm->flags.detecting && gsm->flags.response.timeout == 0 && gsm->flags.response.available == 0) continue;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	785b      	ldrb	r3, [r3, #1]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <GSM_Feed+0xfc>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	7d1b      	ldrb	r3, [r3, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d103      	bne.n	80038e4 <GSM_Feed+0xfc>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	7d9b      	ldrb	r3, [r3, #22]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d04d      	beq.n	8003980 <GSM_Feed+0x198>

				if(gsm->flags.timeout_count >= 5)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	@ 0x1a6
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d913      	bls.n	8003916 <GSM_Feed+0x12e>
				{
					GSM_Prints(gsm, "Attempting to flood GSM\r\n");
 80038ee:	4962      	ldr	r1, [pc, #392]	@ (8003a78 <GSM_Feed+0x290>)
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff fede 	bl	80036b2 <GSM_Prints>
					for(uint8_t i = 0; i < 200; i++)
 80038f6:	2300      	movs	r3, #0
 80038f8:	73fb      	strb	r3, [r7, #15]
 80038fa:	e009      	b.n	8003910 <GSM_Feed+0x128>
					{
						GSM_at(gsm, "AT\r\n", 0, 1000);
 80038fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003900:	2200      	movs	r2, #0
 8003902:	495e      	ldr	r1, [pc, #376]	@ (8003a7c <GSM_Feed+0x294>)
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff55 	bl	80037b4 <GSM_at>
					for(uint8_t i = 0; i < 200; i++)
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	3301      	adds	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	2bc7      	cmp	r3, #199	@ 0xc7
 8003914:	d9f2      	bls.n	80038fc <GSM_Feed+0x114>
					}
				}

				gsm->flags.detecting = 1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	705a      	strb	r2, [r3, #1]
				snprintf((char*)gsm->line_buf, GSM_LINE_BUFFER_SIZE, "GSM Dtct [%d]\r\n", gsm->flags.timeout_count + 1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f203 50ba 	addw	r0, r3, #1466	@ 0x5ba
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8b3 31a6 	ldrh.w	r3, [r3, #422]	@ 0x1a6
 8003928:	3301      	adds	r3, #1
 800392a:	4a55      	ldr	r2, [pc, #340]	@ (8003a80 <GSM_Feed+0x298>)
 800392c:	2180      	movs	r1, #128	@ 0x80
 800392e:	f006 ff11 	bl	800a754 <sniprintf>
				GSM_Prints(gsm, (char*)gsm->line_buf);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f203 53ba 	addw	r3, r3, #1466	@ 0x5ba
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff feb9 	bl	80036b2 <GSM_Prints>
				GSM_ChangeBaudRate(gsm);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fcc1 	bl	80042c8 <GSM_ChangeBaudRate>
				GSM_at(gsm, "\r\nAT\r\n", 1, 1000);
 8003946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800394a:	2201      	movs	r2, #1
 800394c:	494d      	ldr	r1, [pc, #308]	@ (8003a84 <GSM_Feed+0x29c>)
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff30 	bl	80037b4 <GSM_at>
 8003954:	e015      	b.n	8003982 <GSM_Feed+0x19a>
			}
			else {
				gsm->flags.detecting = 0;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	705a      	strb	r2, [r3, #1]
				FT_StopTimer(gsm->ft, gsm->timers.detect);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 26c0 	ldr.w	r2, [r3, #1728]	@ 0x6c0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	@ 0x1ac
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f7ff f96b 	bl	8002c46 <FT_StopTimer>
 8003970:	e007      	b.n	8003982 <GSM_Feed+0x19a>
			}
		}
		else
		{
			GSM_Prints(gsm, "Unknown timer triggered\r\n");
 8003972:	4945      	ldr	r1, [pc, #276]	@ (8003a88 <GSM_Feed+0x2a0>)
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff fe9c 	bl	80036b2 <GSM_Prints>
 800397a:	e002      	b.n	8003982 <GSM_Feed+0x19a>
			if(gsm->flags.response.awaiting == 1) continue;
 800397c:	bf00      	nop
 800397e:	e000      	b.n	8003982 <GSM_Feed+0x19a>
				if(gsm->flags.detecting && gsm->flags.response.timeout == 0 && gsm->flags.response.available == 0) continue;
 8003980:	bf00      	nop
	while (ft_err == FT_TRIGGERED && FT_GetTriggeredTimer(gsm->ft, &gsm->timer_id, &gsm->timer_trigger_count) == FT_OK)
 8003982:	897b      	ldrh	r3, [r7, #10]
 8003984:	f241 0250 	movw	r2, #4176	@ 0x1050
 8003988:	4293      	cmp	r3, r2
 800398a:	d110      	bne.n	80039ae <GSM_Feed+0x1c6>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 06c0 	ldr.w	r0, [r3, #1728]	@ 0x6c0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f503 71d7 	add.w	r1, r3, #430	@ 0x1ae
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f503 73d8 	add.w	r3, r3, #432	@ 0x1b0
 800399e:	461a      	mov	r2, r3
 80039a0:	f7ff f88a 	bl	8002ab8 <FT_GetTriggeredTimer>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039aa:	f43f af48 	beq.w	800383e <GSM_Feed+0x56>
		}
	}

	if(gsm->flags.response.awaiting == 1) return GSM_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	7e9b      	ldrb	r3, [r3, #26]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <GSM_Feed+0x1d4>
 80039b6:	f249 0305 	movw	r3, #36869	@ 0x9005
 80039ba:	e056      	b.n	8003a6a <GSM_Feed+0x282>

	// module is detected
	if(gsm->flags.detected == 0)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d120      	bne.n	8003a06 <GSM_Feed+0x21e>
	{
		uint8_t detecting_paused;
		if(FT_GetTimerPauseState(ft, gsm->timers.detect, &detecting_paused) != FT_OK) return GSM_FT_ERR;
 80039c4:	4b31      	ldr	r3, [pc, #196]	@ (8003a8c <GSM_Feed+0x2a4>)
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	@ 0x1ac
 80039ce:	f107 0209 	add.w	r2, r7, #9
 80039d2:	4619      	mov	r1, r3
 80039d4:	f7ff f848 	bl	8002a68 <FT_GetTimerPauseState>
 80039d8:	4603      	mov	r3, r0
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039de:	d002      	beq.n	80039e6 <GSM_Feed+0x1fe>
 80039e0:	f249 0310 	movw	r3, #36880	@ 0x9010
 80039e4:	e041      	b.n	8003a6a <GSM_Feed+0x282>
		if(detecting_paused) FT_StartTimer(gsm->ft, gsm->timers.detect);
 80039e6:	7a7b      	ldrb	r3, [r7, #9]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <GSM_Feed+0x218>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 26c0 	ldr.w	r2, [r3, #1728]	@ 0x6c0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	@ 0x1ac
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f7ff f8f3 	bl	8002be6 <FT_StartTimer>
		return GSM_BUSY;
 8003a00:	f249 0305 	movw	r3, #36869	@ 0x9005
 8003a04:	e031      	b.n	8003a6a <GSM_Feed+0x282>
	}

	// module is initialized
	if (gsm->flags.initialized == 0)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	789b      	ldrb	r3, [r3, #2]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10b      	bne.n	8003a26 <GSM_Feed+0x23e>
	{
		if(gsm->flags.initializing == 1) return GSM_BUSY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	78db      	ldrb	r3, [r3, #3]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d102      	bne.n	8003a1c <GSM_Feed+0x234>
 8003a16:	f249 0305 	movw	r3, #36869	@ 0x9005
 8003a1a:	e026      	b.n	8003a6a <GSM_Feed+0x282>
		return GSM_InitModem(gsm);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f9ed 	bl	8003dfc <GSM_InitModem>
 8003a22:	4603      	mov	r3, r0
 8003a24:	e021      	b.n	8003a6a <GSM_Feed+0x282>
	}

	// network connection is opened
	if (gsm->flags.network_opened == 0) {
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	791b      	ldrb	r3, [r3, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10b      	bne.n	8003a46 <GSM_Feed+0x25e>
		if(gsm->flags.network_opening == 1) return GSM_BUSY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	795b      	ldrb	r3, [r3, #5]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d102      	bne.n	8003a3c <GSM_Feed+0x254>
 8003a36:	f249 0305 	movw	r3, #36869	@ 0x9005
 8003a3a:	e016      	b.n	8003a6a <GSM_Feed+0x282>
		return GSM_OpenNetwork(gsm);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fb09 	bl	8004054 <GSM_OpenNetwork>
 8003a42:	4603      	mov	r3, r0
 8003a44:	e011      	b.n	8003a6a <GSM_Feed+0x282>
	}

	// UDP connection is opened
	if (gsm->flags.connection_opened == 0) {
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	799b      	ldrb	r3, [r3, #6]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10b      	bne.n	8003a66 <GSM_Feed+0x27e>
		if (gsm->flags.connection_opening == 1) return GSM_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	79db      	ldrb	r3, [r3, #7]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d102      	bne.n	8003a5c <GSM_Feed+0x274>
 8003a56:	f249 0305 	movw	r3, #36869	@ 0x9005
 8003a5a:	e006      	b.n	8003a6a <GSM_Feed+0x282>
		return GSM_OpenConnection(gsm);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fb6f 	bl	8004140 <GSM_OpenConnection>
 8003a62:	4603      	mov	r3, r0
 8003a64:	e001      	b.n	8003a6a <GSM_Feed+0x282>
	}

	return GSM_IDLE;
 8003a66:	f249 0304 	movw	r3, #36868	@ 0x9004
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	0800c964 	.word	0x0800c964
 8003a78:	0800c970 	.word	0x0800c970
 8003a7c:	0800c98c 	.word	0x0800c98c
 8003a80:	0800c994 	.word	0x0800c994
 8003a84:	0800c9a4 	.word	0x0800c9a4
 8003a88:	0800c9ac 	.word	0x0800c9ac
 8003a8c:	20002390 	.word	0x20002390

08003a90 <GSM_AwaitResponse>:

GSM_ERR GSM_AwaitResponse(gsm_t *gsm)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	if (gsm == NULL) return GSM_INVALID_ARGUMENT;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d102      	bne.n	8003aa4 <GSM_AwaitResponse+0x14>
 8003a9e:	f249 0303 	movw	r3, #36867	@ 0x9003
 8003aa2:	e02e      	b.n	8003b02 <GSM_AwaitResponse+0x72>
	if (gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 36c0 	ldr.w	r3, [r3, #1728]	@ 0x6c0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d004      	beq.n	8003ab8 <GSM_AwaitResponse+0x28>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <GSM_AwaitResponse+0x2e>
 8003ab8:	f249 0301 	movw	r3, #36865	@ 0x9001
 8003abc:	e021      	b.n	8003b02 <GSM_AwaitResponse+0x72>

	gsm->flags.response.awaiting = 1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	769a      	strb	r2, [r3, #26]

	while (gsm->flags.response.expected == 1 && gsm->flags.response.available == 0 && gsm->flags.response.timeout == 0)
 8003ac4:	e002      	b.n	8003acc <GSM_AwaitResponse+0x3c>
	{
		GSM_Feed(gsm);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff fe8e 	bl	80037e8 <GSM_Feed>
	while (gsm->flags.response.expected == 1 && gsm->flags.response.available == 0 && gsm->flags.response.timeout == 0)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	7d5b      	ldrb	r3, [r3, #21]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d107      	bne.n	8003ae4 <GSM_AwaitResponse+0x54>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7d9b      	ldrb	r3, [r3, #22]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d103      	bne.n	8003ae4 <GSM_AwaitResponse+0x54>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	7d1b      	ldrb	r3, [r3, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <GSM_AwaitResponse+0x36>
	}

	gsm->flags.response.awaiting = 0;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	769a      	strb	r2, [r3, #26]
	gsm->flags.response.expected = 0;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	755a      	strb	r2, [r3, #21]

	if (gsm->flags.response.timeout)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	7d1b      	ldrb	r3, [r3, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <GSM_AwaitResponse+0x6e>
	{
		return GSM_TIMEOUT;
 8003af8:	f249 0306 	movw	r3, #36870	@ 0x9006
 8003afc:	e001      	b.n	8003b02 <GSM_AwaitResponse+0x72>
	}

	return GSM_OK;
 8003afe:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <GSM_ProcessInput>:

GSM_ERR GSM_ProcessInput(gsm_t *gsm)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
	if(gsm == NULL) return GSM_INVALID_ARGUMENT;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d102      	bne.n	8003b20 <GSM_ProcessInput+0x14>
 8003b1a:	f249 0303 	movw	r3, #36867	@ 0x9003
 8003b1e:	e157      	b.n	8003dd0 <GSM_ProcessInput+0x2c4>
	if(gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 36c0 	ldr.w	r3, [r3, #1728]	@ 0x6c0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d005      	beq.n	8003b36 <GSM_ProcessInput+0x2a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f040 812c 	bne.w	8003d8e <GSM_ProcessInput+0x282>
 8003b36:	f249 0301 	movw	r3, #36865	@ 0x9001
 8003b3a:	e149      	b.n	8003dd0 <GSM_ProcessInput+0x2c4>

	while (UartRcvr_available(gsm->uart_rcvr_gsm)) {
		gsm->rx_buf_len = UartRcvr_get_input(gsm->uart_rcvr_gsm, gsm->rx_buf, GSM_RX_BUFFER_SIZE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8d3 06c4 	ldr.w	r0, [r3, #1732]	@ 0x6c4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8003b48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f000 ffe3 	bl	8004b18 <UartRcvr_get_input>
 8003b52:	4603      	mov	r3, r0
 8003b54:	461a      	mov	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8a3 23b4 	strh.w	r2, [r3, #948]	@ 0x3b4
		if (gsm->rx_buf_len == 0) continue;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f8b3 33b4 	ldrh.w	r3, [r3, #948]	@ 0x3b4
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 8112 	beq.w	8003d8c <GSM_ProcessInput+0x280>
		gsm->rx_buf_processed = 0;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8a3 23b6 	strh.w	r2, [r3, #950]	@ 0x3b6

		for (uint16_t i = 0; i < gsm->rx_buf_len; i++) {
 8003b70:	2300      	movs	r3, #0
 8003b72:	81fb      	strh	r3, [r7, #14]
 8003b74:	e015      	b.n	8003ba2 <GSM_ProcessInput+0x96>
			snprintf((char*)gsm->line_buf, GSM_LINE_BUFFER_SIZE, "%02x ", gsm->rx_buf[i]);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f203 50ba 	addw	r0, r3, #1466	@ 0x5ba
 8003b7c:	89fb      	ldrh	r3, [r7, #14]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 8003b86:	4a94      	ldr	r2, [pc, #592]	@ (8003dd8 <GSM_ProcessInput+0x2cc>)
 8003b88:	2180      	movs	r1, #128	@ 0x80
 8003b8a:	f006 fde3 	bl	800a754 <sniprintf>
			GSM_Prints(gsm, (char*)gsm->line_buf);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f203 53ba 	addw	r3, r3, #1466	@ 0x5ba
 8003b94:	4619      	mov	r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff fd8b 	bl	80036b2 <GSM_Prints>
		for (uint16_t i = 0; i < gsm->rx_buf_len; i++) {
 8003b9c:	89fb      	ldrh	r3, [r7, #14]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	81fb      	strh	r3, [r7, #14]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f8b3 33b4 	ldrh.w	r3, [r3, #948]	@ 0x3b4
 8003ba8:	89fa      	ldrh	r2, [r7, #14]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d3e3      	bcc.n	8003b76 <GSM_ProcessInput+0x6a>
		}

		while (GSM_GetLine(gsm) == GSM_OK)
 8003bae:	e0cc      	b.n	8003d4a <GSM_ProcessInput+0x23e>
		{
			if(gsm->flags.line_complete == 0) continue;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	7a9b      	ldrb	r3, [r3, #10]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80c1 	beq.w	8003d3c <GSM_ProcessInput+0x230>
			gsm->flags.response.lines++;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8b1b      	ldrh	r3, [r3, #24]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	831a      	strh	r2, [r3, #24]
			if(gsm->line_buf_len == 0) continue;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80b7 	beq.w	8003d40 <GSM_ProcessInput+0x234>

			GSM_Prints(gsm, "<< ");
 8003bd2:	4982      	ldr	r1, [pc, #520]	@ (8003ddc <GSM_ProcessInput+0x2d0>)
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f7ff fd6c 	bl	80036b2 <GSM_Prints>
			GSM_Prints(gsm, (char*)gsm->line_buf);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f203 53ba 	addw	r3, r3, #1466	@ 0x5ba
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f7ff fd65 	bl	80036b2 <GSM_Prints>
			GSM_Prints(gsm, "\r\n");
 8003be8:	497d      	ldr	r1, [pc, #500]	@ (8003de0 <GSM_ProcessInput+0x2d4>)
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fd61 	bl	80036b2 <GSM_Prints>



			if (gsm->line_buf_len >= 2 && strncmp((char*)gsm->line_buf, "OK", 2) == 0)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d914      	bls.n	8003c24 <GSM_ProcessInput+0x118>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f203 53ba 	addw	r3, r3, #1466	@ 0x5ba
 8003c00:	2202      	movs	r2, #2
 8003c02:	4978      	ldr	r1, [pc, #480]	@ (8003de4 <GSM_ProcessInput+0x2d8>)
 8003c04:	4618      	mov	r0, r3
 8003c06:	f006 feb9 	bl	800a97c <strncmp>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d109      	bne.n	8003c24 <GSM_ProcessInput+0x118>
			{
				gsm->flags.response.has_ok = 1;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	76da      	strb	r2, [r3, #27]
				gsm->flags.detected = 1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	701a      	strb	r2, [r3, #0]
				gsm->flags.response.available = 1;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	759a      	strb	r2, [r3, #22]
 8003c22:	e092      	b.n	8003d4a <GSM_ProcessInput+0x23e>
			}
			else if (gsm->line_buf_len >= 5 && strncmp((char*)gsm->line_buf, "ERROR", 5) == 0)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d911      	bls.n	8003c52 <GSM_ProcessInput+0x146>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f203 53ba 	addw	r3, r3, #1466	@ 0x5ba
 8003c34:	2205      	movs	r2, #5
 8003c36:	496c      	ldr	r1, [pc, #432]	@ (8003de8 <GSM_ProcessInput+0x2dc>)
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f006 fe9f 	bl	800a97c <strncmp>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d106      	bne.n	8003c52 <GSM_ProcessInput+0x146>
			{
				gsm->flags.response.has_error = 1;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	771a      	strb	r2, [r3, #28]
				gsm->flags.response.available = 1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	759a      	strb	r2, [r3, #22]
 8003c50:	e07b      	b.n	8003d4a <GSM_ProcessInput+0x23e>
			}
			else if (strncmp((char*)gsm->line_buf, "+", 1) == 0)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f203 53ba 	addw	r3, r3, #1466	@ 0x5ba
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	4b64      	ldr	r3, [pc, #400]	@ (8003dec <GSM_ProcessInput+0x2e0>)
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d13c      	bne.n	8003cde <GSM_ProcessInput+0x1d2>
			{
				if (gsm->line_buf_len >= 5 && strncmp((char*) gsm->line_buf, "+CMT", 4) == 0)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d926      	bls.n	8003cbc <GSM_ProcessInput+0x1b0>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f203 53ba 	addw	r3, r3, #1466	@ 0x5ba
 8003c74:	2204      	movs	r2, #4
 8003c76:	495e      	ldr	r1, [pc, #376]	@ (8003df0 <GSM_ProcessInput+0x2e4>)
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f006 fe7f 	bl	800a97c <strncmp>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d11b      	bne.n	8003cbc <GSM_ProcessInput+0x1b0>
				{
					if(gsm->line_buf_len < 10 || gsm->line_buf[8] != ',') continue;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 8003c8a:	2b09      	cmp	r3, #9
 8003c8c:	d95a      	bls.n	8003d44 <GSM_ProcessInput+0x238>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 35c2 	ldrb.w	r3, [r3, #1474]	@ 0x5c2
 8003c94:	2b2c      	cmp	r3, #44	@ 0x2c
 8003c96:	d155      	bne.n	8003d44 <GSM_ProcessInput+0x238>
					int32_t pdu_len = atoi((char*)gsm->line_buf + 9);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f203 53ba 	addw	r3, r3, #1466	@ 0x5ba
 8003c9e:	3309      	adds	r3, #9
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f005 fe63 	bl	800996c <atoi>
 8003ca6:	60b8      	str	r0, [r7, #8]
					if(pdu_len == 0) continue;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d04c      	beq.n	8003d48 <GSM_ProcessInput+0x23c>
					gsm->flags.sms_pdu_len = pdu_len;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	611a      	str	r2, [r3, #16]
					gsm->flags.receiving_sms = 1;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	72da      	strb	r2, [r3, #11]
					continue;
 8003cba:	e046      	b.n	8003d4a <GSM_ProcessInput+0x23e>
				}
				GSM_ProcessCommand(gsm, (char*)gsm->line_buf, gsm->line_buf_len);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f203 51ba 	addw	r1, r3, #1466	@ 0x5ba
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fcc8 	bl	8004660 <GSM_ProcessCommand>
				gsm->flags.response.has_command = 1;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	775a      	strb	r2, [r3, #29]
				gsm->flags.response.available = 1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	759a      	strb	r2, [r3, #22]
 8003cdc:	e035      	b.n	8003d4a <GSM_ProcessInput+0x23e>
			}
			else if(gsm->line_buf_len >= 1 && strncmp((char*)gsm->line_buf, ">", 1) == 0)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00f      	beq.n	8003d08 <GSM_ProcessInput+0x1fc>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f203 53ba 	addw	r3, r3, #1466	@ 0x5ba
 8003cee:	781a      	ldrb	r2, [r3, #0]
 8003cf0:	4b40      	ldr	r3, [pc, #256]	@ (8003df4 <GSM_ProcessInput+0x2e8>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <GSM_ProcessInput+0x1fc>
			{
				gsm->flags.response.has_input_request = 1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	779a      	strb	r2, [r3, #30]
				gsm->flags.response.available = 1;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	759a      	strb	r2, [r3, #22]
 8003d06:	e020      	b.n	8003d4a <GSM_ProcessInput+0x23e>
			}
			else if(gsm->flags.receiving_sms)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	7adb      	ldrb	r3, [r3, #11]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d011      	beq.n	8003d34 <GSM_ProcessInput+0x228>
			{
				gsm->flags.receiving_sms = 0;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	72da      	strb	r2, [r3, #11]
				GSM_DecodePDU(gsm, (char*)gsm->line_buf, gsm->line_buf_len);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f203 51ba 	addw	r1, r3, #1466	@ 0x5ba
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 8003d22:	461a      	mov	r2, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fc75 	bl	8004614 <GSM_DecodePDU>
				GSM_Prints(gsm, "SMS Received [not implemented]\r\n");
 8003d2a:	4933      	ldr	r1, [pc, #204]	@ (8003df8 <GSM_ProcessInput+0x2ec>)
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff fcc0 	bl	80036b2 <GSM_Prints>
 8003d32:	e00a      	b.n	8003d4a <GSM_ProcessInput+0x23e>
			}
			else {
				gsm->flags.response.has_unknown = 1;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	77da      	strb	r2, [r3, #31]
 8003d3a:	e006      	b.n	8003d4a <GSM_ProcessInput+0x23e>
			if(gsm->flags.line_complete == 0) continue;
 8003d3c:	bf00      	nop
 8003d3e:	e004      	b.n	8003d4a <GSM_ProcessInput+0x23e>
			if(gsm->line_buf_len == 0) continue;
 8003d40:	bf00      	nop
 8003d42:	e002      	b.n	8003d4a <GSM_ProcessInput+0x23e>
					if(gsm->line_buf_len < 10 || gsm->line_buf[8] != ',') continue;
 8003d44:	bf00      	nop
 8003d46:	e000      	b.n	8003d4a <GSM_ProcessInput+0x23e>
					if(pdu_len == 0) continue;
 8003d48:	bf00      	nop
		while (GSM_GetLine(gsm) == GSM_OK)
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fb9d 	bl	800448a <GSM_GetLine>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 8003d56:	f43f af2b 	beq.w	8003bb0 <GSM_ProcessInput+0xa4>
			}

		}
		if(gsm->flags.line_complete == 0)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	7a9b      	ldrb	r3, [r3, #10]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d115      	bne.n	8003d8e <GSM_ProcessInput+0x282>
		{
			uint8_t retries = 50;
 8003d62:	2332      	movs	r3, #50	@ 0x32
 8003d64:	737b      	strb	r3, [r7, #13]
			while(!UartRcvr_available(gsm->uart_rcvr_gsm) && retries--)
 8003d66:	e002      	b.n	8003d6e <GSM_ProcessInput+0x262>
			{
				HAL_Delay(1);
 8003d68:	2001      	movs	r0, #1
 8003d6a:	f001 f97d 	bl	8005068 <HAL_Delay>
			while(!UartRcvr_available(gsm->uart_rcvr_gsm) && retries--)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 fe91 	bl	8004a9c <UartRcvr_available>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d106      	bne.n	8003d8e <GSM_ProcessInput+0x282>
 8003d80:	7b7b      	ldrb	r3, [r7, #13]
 8003d82:	1e5a      	subs	r2, r3, #1
 8003d84:	737a      	strb	r2, [r7, #13]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1ee      	bne.n	8003d68 <GSM_ProcessInput+0x25c>
 8003d8a:	e000      	b.n	8003d8e <GSM_ProcessInput+0x282>
		if (gsm->rx_buf_len == 0) continue;
 8003d8c:	bf00      	nop
	while (UartRcvr_available(gsm->uart_rcvr_gsm)) {
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fe81 	bl	8004a9c <UartRcvr_available>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f47f aecd 	bne.w	8003b3c <GSM_ProcessInput+0x30>
			}
		}
	}

	if (gsm->flags.response.available == 1) {
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	7d9b      	ldrb	r3, [r3, #22]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d110      	bne.n	8003dcc <GSM_ProcessInput+0x2c0>
		gsm->flags.timeout_count = 0;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6
		gsm->flags.response.timeout = 0;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	751a      	strb	r2, [r3, #20]
		FT_StopTimer(gsm->ft, gsm->timers.timeout);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 26c0 	ldr.w	r2, [r3, #1728]	@ 0x6c0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	@ 0x1aa
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f7fe ff3d 	bl	8002c46 <FT_StopTimer>
	}

	return GSM_OK;
 8003dcc:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	0800c9c8 	.word	0x0800c9c8
 8003ddc:	0800c9d0 	.word	0x0800c9d0
 8003de0:	0800c9d4 	.word	0x0800c9d4
 8003de4:	0800c9d8 	.word	0x0800c9d8
 8003de8:	0800c9dc 	.word	0x0800c9dc
 8003dec:	0800c9e4 	.word	0x0800c9e4
 8003df0:	0800c9e8 	.word	0x0800c9e8
 8003df4:	0800c9f0 	.word	0x0800c9f0
 8003df8:	0800c9f4 	.word	0x0800c9f4

08003dfc <GSM_InitModem>:

GSM_ERR GSM_InitModem(gsm_t *gsm)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	if (gsm == NULL) return GSM_INVALID_ARGUMENT;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <GSM_InitModem+0x14>
 8003e0a:	f249 0303 	movw	r3, #36867	@ 0x9003
 8003e0e:	e102      	b.n	8004016 <GSM_InitModem+0x21a>
	if (gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f8d3 36c0 	ldr.w	r3, [r3, #1728]	@ 0x6c0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <GSM_InitModem+0x28>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d102      	bne.n	8003e2a <GSM_InitModem+0x2e>
 8003e24:	f249 0301 	movw	r3, #36865	@ 0x9001
 8003e28:	e0f5      	b.n	8004016 <GSM_InitModem+0x21a>

	gsm->flags.initializing = 1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	70da      	strb	r2, [r3, #3]

	HAL_Delay(100);
 8003e30:	2064      	movs	r0, #100	@ 0x64
 8003e32:	f001 f919 	bl	8005068 <HAL_Delay>

	GSM_Prints(gsm, "Initializing GSM Modem\r\n");
 8003e36:	497a      	ldr	r1, [pc, #488]	@ (8004020 <GSM_InitModem+0x224>)
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fc3a 	bl	80036b2 <GSM_Prints>

	GSM_at(gsm, "ATE0\r\n", 1, 1000); // Echo off
 8003e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e42:	2201      	movs	r2, #1
 8003e44:	4977      	ldr	r1, [pc, #476]	@ (8004024 <GSM_InitModem+0x228>)
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fcb4 	bl	80037b4 <GSM_at>
	GSM_AwaitResponse(gsm);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fe1f 	bl	8003a90 <GSM_AwaitResponse>
	if(gsm->flags.response.has_ok == 0) {
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	7edb      	ldrb	r3, [r3, #27]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d105      	bne.n	8003e66 <GSM_InitModem+0x6a>
		gsm->flags.initializing = 0;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003e60:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003e64:	e0d7      	b.n	8004016 <GSM_InitModem+0x21a>
	}

	GSM_at(gsm, "AT+IPR=921600\r\n", 1, 1000); // Set baud rate to 921600
 8003e66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	496e      	ldr	r1, [pc, #440]	@ (8004028 <GSM_InitModem+0x22c>)
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff fca0 	bl	80037b4 <GSM_at>
	GSM_SetBaudRate(gsm, GSM_BAUD_RATE_921600);
 8003e74:	2101      	movs	r1, #1
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f9da 	bl	8004230 <GSM_SetBaudRate>
	GSM_AwaitResponse(gsm);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff fe07 	bl	8003a90 <GSM_AwaitResponse>
	if(gsm->flags.response.has_ok == 0) {
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7edb      	ldrb	r3, [r3, #27]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d105      	bne.n	8003e96 <GSM_InitModem+0x9a>
		gsm->flags.initializing = 0;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003e90:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003e94:	e0bf      	b.n	8004016 <GSM_InitModem+0x21a>
	}

	GSM_at(gsm, "AT+CSCS=\"GSM\"\r\n", 1, 1000); // Set GSM character set
 8003e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	4963      	ldr	r1, [pc, #396]	@ (800402c <GSM_InitModem+0x230>)
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff fc88 	bl	80037b4 <GSM_at>
	GSM_AwaitResponse(gsm);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff fdf3 	bl	8003a90 <GSM_AwaitResponse>
	if(gsm->flags.response.has_ok == 0) {
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	7edb      	ldrb	r3, [r3, #27]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d105      	bne.n	8003ebe <GSM_InitModem+0xc2>
		gsm->flags.initializing = 0;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003eb8:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003ebc:	e0ab      	b.n	8004016 <GSM_InitModem+0x21a>
	}

	GSM_at(gsm, "AT+CMGF=0\r\n", 1, 1000); // sellect SMS PDU mode
 8003ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	495a      	ldr	r1, [pc, #360]	@ (8004030 <GSM_InitModem+0x234>)
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f7ff fc74 	bl	80037b4 <GSM_at>
	GSM_AwaitResponse(gsm);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7ff fddf 	bl	8003a90 <GSM_AwaitResponse>
	if(gsm->flags.response.has_ok == 0) {
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	7edb      	ldrb	r3, [r3, #27]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d105      	bne.n	8003ee6 <GSM_InitModem+0xea>
		gsm->flags.initializing = 0;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003ee0:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003ee4:	e097      	b.n	8004016 <GSM_InitModem+0x21a>
	}

	GSM_at(gsm, "AT+CNMI=2,2,0,0,0\r\n", 1, 1000); // SMS notification
 8003ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eea:	2201      	movs	r2, #1
 8003eec:	4951      	ldr	r1, [pc, #324]	@ (8004034 <GSM_InitModem+0x238>)
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7ff fc60 	bl	80037b4 <GSM_at>
	GSM_AwaitResponse(gsm);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff fdcb 	bl	8003a90 <GSM_AwaitResponse>
	if(gsm->flags.response.has_ok == 0) {
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	7edb      	ldrb	r3, [r3, #27]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d105      	bne.n	8003f0e <GSM_InitModem+0x112>
		gsm->flags.initializing = 0;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003f08:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003f0c:	e083      	b.n	8004016 <GSM_InitModem+0x21a>
	}

	GSM_at(gsm, "AT+CUSD=1\r\n", 1, 1000); // USSD response
 8003f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f12:	2201      	movs	r2, #1
 8003f14:	4948      	ldr	r1, [pc, #288]	@ (8004038 <GSM_InitModem+0x23c>)
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f7ff fc4c 	bl	80037b4 <GSM_at>
	GSM_AwaitResponse(gsm);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fdb7 	bl	8003a90 <GSM_AwaitResponse>
	if(gsm->flags.response.has_ok == 0) {
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7edb      	ldrb	r3, [r3, #27]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <GSM_InitModem+0x13a>
		gsm->flags.initializing = 0;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003f30:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003f34:	e06f      	b.n	8004016 <GSM_InitModem+0x21a>
	}

	GSM_at(gsm, "AT+CGDCONT=1,\"IP\",\"internet\",\"0.0.0.0\",0,0\r\n", 1, 1000); // Set APN
 8003f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	493f      	ldr	r1, [pc, #252]	@ (800403c <GSM_InitModem+0x240>)
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fc38 	bl	80037b4 <GSM_at>
	GSM_AwaitResponse(gsm);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7ff fda3 	bl	8003a90 <GSM_AwaitResponse>
	if(gsm->flags.response.has_ok == 0) {
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	7edb      	ldrb	r3, [r3, #27]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d105      	bne.n	8003f5e <GSM_InitModem+0x162>
		gsm->flags.initializing = 0;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003f58:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003f5c:	e05b      	b.n	8004016 <GSM_InitModem+0x21a>
	}

	GSM_at(gsm, "AT+CGACT=1,1\r\n", 1, 1000); // Activate PDP context
 8003f5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f62:	2201      	movs	r2, #1
 8003f64:	4936      	ldr	r1, [pc, #216]	@ (8004040 <GSM_InitModem+0x244>)
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fc24 	bl	80037b4 <GSM_at>
	GSM_AwaitResponse(gsm);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff fd8f 	bl	8003a90 <GSM_AwaitResponse>
	if(gsm->flags.response.has_ok == 0) {
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	7edb      	ldrb	r3, [r3, #27]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d105      	bne.n	8003f86 <GSM_InitModem+0x18a>
		gsm->flags.initializing = 0;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003f80:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003f84:	e047      	b.n	8004016 <GSM_InitModem+0x21a>
	}

	GSM_at(gsm, "AT+CIPRXGET=0\r\n", 1, 1000); // Enable automatic data receiving
 8003f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	492d      	ldr	r1, [pc, #180]	@ (8004044 <GSM_InitModem+0x248>)
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7ff fc10 	bl	80037b4 <GSM_at>
	GSM_AwaitResponse(gsm);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff fd7b 	bl	8003a90 <GSM_AwaitResponse>
	if (gsm->flags.response.has_ok == 0) {
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	7edb      	ldrb	r3, [r3, #27]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d105      	bne.n	8003fae <GSM_InitModem+0x1b2>
		gsm->flags.initializing = 0;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003fa8:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003fac:	e033      	b.n	8004016 <GSM_InitModem+0x21a>
	}

	// Unnecessary - we are using UDP connections only
	GSM_at(gsm, "AT+CIPCCFG=3,0,0,0,1,0,500\r\n", 1, 1000); // Set TCP connection mode
 8003fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4924      	ldr	r1, [pc, #144]	@ (8004048 <GSM_InitModem+0x24c>)
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff fbfc 	bl	80037b4 <GSM_at>
	GSM_AwaitResponse(gsm);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff fd67 	bl	8003a90 <GSM_AwaitResponse>
	if(gsm->flags.response.has_ok == 0) {
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	7edb      	ldrb	r3, [r3, #27]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d105      	bne.n	8003fd6 <GSM_InitModem+0x1da>
		gsm->flags.initializing = 0;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003fd0:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003fd4:	e01f      	b.n	8004016 <GSM_InitModem+0x21a>
	}

	GSM_at(gsm, "AT+CNTP=\"pool.ntp.org\",8\r\n", 1, 1000); // Set NTP server
 8003fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fda:	2201      	movs	r2, #1
 8003fdc:	491b      	ldr	r1, [pc, #108]	@ (800404c <GSM_InitModem+0x250>)
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fbe8 	bl	80037b4 <GSM_at>
	GSM_AwaitResponse(gsm);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff fd53 	bl	8003a90 <GSM_AwaitResponse>
	if(gsm->flags.response.has_ok == 0) {
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	7edb      	ldrb	r3, [r3, #27]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d105      	bne.n	8003ffe <GSM_InitModem+0x202>
		gsm->flags.initializing = 0;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	70da      	strb	r2, [r3, #3]
		return GSM_AT_ERR;
 8003ff8:	f249 0330 	movw	r3, #36912	@ 0x9030
 8003ffc:	e00b      	b.n	8004016 <GSM_InitModem+0x21a>
	}

	GSM_Prints(gsm, "GSM Modem initialized\r\n");
 8003ffe:	4914      	ldr	r1, [pc, #80]	@ (8004050 <GSM_InitModem+0x254>)
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff fb56 	bl	80036b2 <GSM_Prints>

	gsm->flags.initializing = 0;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	70da      	strb	r2, [r3, #3]
	gsm->flags.initialized = 1;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	709a      	strb	r2, [r3, #2]

	return GSM_OK;
 8004012:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	0800ca18 	.word	0x0800ca18
 8004024:	0800ca34 	.word	0x0800ca34
 8004028:	0800ca3c 	.word	0x0800ca3c
 800402c:	0800ca4c 	.word	0x0800ca4c
 8004030:	0800ca5c 	.word	0x0800ca5c
 8004034:	0800ca68 	.word	0x0800ca68
 8004038:	0800ca7c 	.word	0x0800ca7c
 800403c:	0800ca88 	.word	0x0800ca88
 8004040:	0800cab8 	.word	0x0800cab8
 8004044:	0800cac8 	.word	0x0800cac8
 8004048:	0800cad8 	.word	0x0800cad8
 800404c:	0800caf8 	.word	0x0800caf8
 8004050:	0800cb14 	.word	0x0800cb14

08004054 <GSM_OpenNetwork>:

GSM_ERR GSM_OpenNetwork(gsm_t *gsm)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
	if (gsm == NULL) return GSM_INVALID_ARGUMENT;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <GSM_OpenNetwork+0x14>
 8004062:	f249 0303 	movw	r3, #36867	@ 0x9003
 8004066:	e059      	b.n	800411c <GSM_OpenNetwork+0xc8>
	if (gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f8d3 36c0 	ldr.w	r3, [r3, #1728]	@ 0x6c0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d004      	beq.n	800407c <GSM_OpenNetwork+0x28>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d102      	bne.n	8004082 <GSM_OpenNetwork+0x2e>
 800407c:	f249 0301 	movw	r3, #36865	@ 0x9001
 8004080:	e04c      	b.n	800411c <GSM_OpenNetwork+0xc8>

	gsm->flags.network_opening = 1;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	715a      	strb	r2, [r3, #5]

	GSM_Prints(gsm, "Opening network\r\n");
 8004088:	4926      	ldr	r1, [pc, #152]	@ (8004124 <GSM_OpenNetwork+0xd0>)
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff fb11 	bl	80036b2 <GSM_Prints>

	//GSM_at(gsm, "AT+NETCLOSE\r\n", 1, 1000); // Close network

	GSM_at(gsm, "AT+NETOPEN\r\n", 1, 1000); // Open network
 8004090:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004094:	2201      	movs	r2, #1
 8004096:	4924      	ldr	r1, [pc, #144]	@ (8004128 <GSM_OpenNetwork+0xd4>)
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff fb8b 	bl	80037b4 <GSM_at>
	GSM_AwaitResponse(gsm);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7ff fcf6 	bl	8003a90 <GSM_AwaitResponse>
	if (gsm->flags.response.has_ok
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	7edb      	ldrb	r3, [r3, #27]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d11c      	bne.n	80040e6 <GSM_OpenNetwork+0x92>
			|| (gsm->flags.response.has_command
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	7f5b      	ldrb	r3, [r3, #29]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d02e      	beq.n	8004112 <GSM_OpenNetwork+0xbe>
					&& GSM_CommandCompareName(gsm, "IP ERROR") == GSM_OK
 80040b4:	491d      	ldr	r1, [pc, #116]	@ (800412c <GSM_OpenNetwork+0xd8>)
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fb82 	bl	80047c0 <GSM_CommandCompareName>
 80040bc:	4603      	mov	r3, r0
 80040be:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 80040c2:	d126      	bne.n	8004112 <GSM_OpenNetwork+0xbe>
					&& ( GSM_CommandCompareParameter(gsm, 0, "Network is already opened") == GSM_OK
 80040c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004130 <GSM_OpenNetwork+0xdc>)
 80040c6:	2100      	movs	r1, #0
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 fbb1 	bl	8004830 <GSM_CommandCompareParameter>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 80040d4:	d007      	beq.n	80040e6 <GSM_OpenNetwork+0x92>
							|| GSM_CommandCompareParameter(gsm, 0, "4"))))
 80040d6:	4a17      	ldr	r2, [pc, #92]	@ (8004134 <GSM_OpenNetwork+0xe0>)
 80040d8:	2100      	movs	r1, #0
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fba8 	bl	8004830 <GSM_CommandCompareParameter>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d015      	beq.n	8004112 <GSM_OpenNetwork+0xbe>
	{
		gsm->flags.network_opening = 0;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	715a      	strb	r2, [r3, #5]
		gsm->flags.network_opened = 1;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	711a      	strb	r2, [r3, #4]

		if(gsm->flags.response.has_ok) GSM_Prints(gsm, "Network opened\r\n");
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	7edb      	ldrb	r3, [r3, #27]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d004      	beq.n	8004104 <GSM_OpenNetwork+0xb0>
 80040fa:	490f      	ldr	r1, [pc, #60]	@ (8004138 <GSM_OpenNetwork+0xe4>)
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff fad8 	bl	80036b2 <GSM_Prints>
 8004102:	e003      	b.n	800410c <GSM_OpenNetwork+0xb8>
		else GSM_Prints(gsm, "Network was already opened\r\n");
 8004104:	490d      	ldr	r1, [pc, #52]	@ (800413c <GSM_OpenNetwork+0xe8>)
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f7ff fad3 	bl	80036b2 <GSM_Prints>
		return GSM_OK;
 800410c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8004110:	e004      	b.n	800411c <GSM_OpenNetwork+0xc8>
	}

	gsm->flags.network_opening = 0;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	715a      	strb	r2, [r3, #5]
	return GSM_AT_ERR;
 8004118:	f249 0330 	movw	r3, #36912	@ 0x9030
}
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	0800cb2c 	.word	0x0800cb2c
 8004128:	0800cb40 	.word	0x0800cb40
 800412c:	0800cb50 	.word	0x0800cb50
 8004130:	0800cb5c 	.word	0x0800cb5c
 8004134:	0800cb78 	.word	0x0800cb78
 8004138:	0800cb7c 	.word	0x0800cb7c
 800413c:	0800cb90 	.word	0x0800cb90

08004140 <GSM_OpenConnection>:

GSM_ERR GSM_OpenConnection(gsm_t *gsm)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	if (gsm == NULL) return GSM_INVALID_ARGUMENT;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <GSM_OpenConnection+0x14>
 800414e:	f249 0303 	movw	r3, #36867	@ 0x9003
 8004152:	e05b      	b.n	800420c <GSM_OpenConnection+0xcc>
	if (gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 36c0 	ldr.w	r3, [r3, #1728]	@ 0x6c0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d004      	beq.n	8004168 <GSM_OpenConnection+0x28>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <GSM_OpenConnection+0x2e>
 8004168:	f249 0301 	movw	r3, #36865	@ 0x9001
 800416c:	e04e      	b.n	800420c <GSM_OpenConnection+0xcc>

	gsm->flags.connection_opening = 1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	71da      	strb	r2, [r3, #7]

	GSM_Prints(gsm, "Opening connection\r\n");
 8004174:	4927      	ldr	r1, [pc, #156]	@ (8004214 <GSM_OpenConnection+0xd4>)
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff fa9b 	bl	80036b2 <GSM_Prints>

	GSM_at(gsm, "AT+CIPOPEN=0,\"UDP\",,,3333\r\n", 1, 1000); // Open UDP connection
 800417c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004180:	2201      	movs	r2, #1
 8004182:	4925      	ldr	r1, [pc, #148]	@ (8004218 <GSM_OpenConnection+0xd8>)
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff fb15 	bl	80037b4 <GSM_at>
	GSM_AwaitResponse(gsm);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff fc80 	bl	8003a90 <GSM_AwaitResponse>
	if (gsm->flags.response.has_command && GSM_CommandCompareName(gsm, "CIPOPEN") == GSM_OK
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	7f5b      	ldrb	r3, [r3, #29]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d034      	beq.n	8004202 <GSM_OpenConnection+0xc2>
 8004198:	4920      	ldr	r1, [pc, #128]	@ (800421c <GSM_OpenConnection+0xdc>)
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fb10 	bl	80047c0 <GSM_CommandCompareName>
 80041a0:	4603      	mov	r3, r0
 80041a2:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 80041a6:	d12c      	bne.n	8004202 <GSM_OpenConnection+0xc2>
					&& (GSM_CommandCompareParameter(gsm, 1, "0") == GSM_OK || GSM_CommandCompareParameter(gsm, 1, "4") == GSM_OK))
 80041a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004220 <GSM_OpenConnection+0xe0>)
 80041aa:	2101      	movs	r1, #1
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fb3f 	bl	8004830 <GSM_CommandCompareParameter>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 80041b8:	d008      	beq.n	80041cc <GSM_OpenConnection+0x8c>
 80041ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004224 <GSM_OpenConnection+0xe4>)
 80041bc:	2101      	movs	r1, #1
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fb36 	bl	8004830 <GSM_CommandCompareParameter>
 80041c4:	4603      	mov	r3, r0
 80041c6:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 80041ca:	d11a      	bne.n	8004202 <GSM_OpenConnection+0xc2>
	{
		gsm->flags.connection_opening = 0;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	71da      	strb	r2, [r3, #7]
		gsm->flags.connection_opened = 1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	719a      	strb	r2, [r3, #6]

		if (GSM_CommandCompareParameter(gsm, 1, "0") == GSM_OK) GSM_Prints(gsm, "Connection opened\r\n");
 80041d8:	4a11      	ldr	r2, [pc, #68]	@ (8004220 <GSM_OpenConnection+0xe0>)
 80041da:	2101      	movs	r1, #1
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fb27 	bl	8004830 <GSM_CommandCompareParameter>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 80041e8:	d104      	bne.n	80041f4 <GSM_OpenConnection+0xb4>
 80041ea:	490f      	ldr	r1, [pc, #60]	@ (8004228 <GSM_OpenConnection+0xe8>)
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff fa60 	bl	80036b2 <GSM_Prints>
 80041f2:	e003      	b.n	80041fc <GSM_OpenConnection+0xbc>
		else GSM_Prints(gsm, "Connection was already opened\r\n");
 80041f4:	490d      	ldr	r1, [pc, #52]	@ (800422c <GSM_OpenConnection+0xec>)
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7ff fa5b 	bl	80036b2 <GSM_Prints>
		return GSM_OK;
 80041fc:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8004200:	e004      	b.n	800420c <GSM_OpenConnection+0xcc>
	}

	gsm->flags.connection_opening = 0;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	71da      	strb	r2, [r3, #7]
	return GSM_AT_ERR;
 8004208:	f249 0330 	movw	r3, #36912	@ 0x9030
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	0800cbb0 	.word	0x0800cbb0
 8004218:	0800cbc8 	.word	0x0800cbc8
 800421c:	0800cbe4 	.word	0x0800cbe4
 8004220:	0800cbec 	.word	0x0800cbec
 8004224:	0800cb78 	.word	0x0800cb78
 8004228:	0800cbf0 	.word	0x0800cbf0
 800422c:	0800cc04 	.word	0x0800cc04

08004230 <GSM_SetBaudRate>:

GSM_ERR GSM_SetBaudRate(gsm_t *gsm, gsm_baud_rate_t baud_rate)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
	if(gsm == NULL) return GSM_INVALID_ARGUMENT;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d102      	bne.n	8004248 <GSM_SetBaudRate+0x18>
 8004242:	f249 0303 	movw	r3, #36867	@ 0x9003
 8004246:	e037      	b.n	80042b8 <GSM_SetBaudRate+0x88>
	if(gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d102      	bne.n	8004258 <GSM_SetBaudRate+0x28>
 8004252:	f249 0301 	movw	r3, #36865	@ 0x9001
 8004256:	e02f      	b.n	80042b8 <GSM_SetBaudRate+0x88>

	uint32_t baud_rate_val = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
	switch (baud_rate) {
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <GSM_SetBaudRate+0x38>
 8004262:	2b01      	cmp	r3, #1
 8004264:	d008      	beq.n	8004278 <GSM_SetBaudRate+0x48>
 8004266:	e00f      	b.n	8004288 <GSM_SetBaudRate+0x58>
		case GSM_BAUD_RATE_115200:
			baud_rate_val = 115200;
 8004268:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800426c:	60fb      	str	r3, [r7, #12]
			GSM_Prints(gsm, "Setting baud rate to 115200\r\n");
 800426e:	4914      	ldr	r1, [pc, #80]	@ (80042c0 <GSM_SetBaudRate+0x90>)
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff fa1e 	bl	80036b2 <GSM_Prints>
			break;
 8004276:	e00a      	b.n	800428e <GSM_SetBaudRate+0x5e>
		case GSM_BAUD_RATE_921600:
			baud_rate_val = 921600;
 8004278:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 800427c:	60fb      	str	r3, [r7, #12]
			GSM_Prints(gsm, "Setting baud rate to 921600\r\n");
 800427e:	4911      	ldr	r1, [pc, #68]	@ (80042c4 <GSM_SetBaudRate+0x94>)
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff fa16 	bl	80036b2 <GSM_Prints>
			break;
 8004286:	e002      	b.n	800428e <GSM_SetBaudRate+0x5e>
		default:
			return GSM_INVALID_ARGUMENT;
 8004288:	f249 0303 	movw	r3, #36867	@ 0x9003
 800428c:	e014      	b.n	80042b8 <GSM_SetBaudRate+0x88>
	}

	uint8_t status = UartRcvr_set_baud_rate(gsm->uart_rcvr_gsm, baud_rate_val);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 8004294:	68f9      	ldr	r1, [r7, #12]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fcd0 	bl	8004c3c <UartRcvr_set_baud_rate>
 800429c:	4603      	mov	r3, r0
 800429e:	72fb      	strb	r3, [r7, #11]
	if(status == 0) return GSM_BAUD_RATE_ERR;
 80042a0:	7afb      	ldrb	r3, [r7, #11]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <GSM_SetBaudRate+0x7c>
 80042a6:	f249 0307 	movw	r3, #36871	@ 0x9007
 80042aa:	e005      	b.n	80042b8 <GSM_SetBaudRate+0x88>
	gsm->config.baud_rate = baud_rate;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	f883 21a8 	strb.w	r2, [r3, #424]	@ 0x1a8

	return GSM_OK;
 80042b4:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	0800cc24 	.word	0x0800cc24
 80042c4:	0800cc44 	.word	0x0800cc44

080042c8 <GSM_ChangeBaudRate>:

GSM_ERR GSM_ChangeBaudRate(gsm_t *gsm)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	if(gsm == NULL) return GSM_INVALID_ARGUMENT;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d102      	bne.n	80042dc <GSM_ChangeBaudRate+0x14>
 80042d6:	f249 0303 	movw	r3, #36867	@ 0x9003
 80042da:	e016      	b.n	800430a <GSM_ChangeBaudRate+0x42>
	if(gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d102      	bne.n	80042ec <GSM_ChangeBaudRate+0x24>
 80042e6:	f249 0301 	movw	r3, #36865	@ 0x9001
 80042ea:	e00e      	b.n	800430a <GSM_ChangeBaudRate+0x42>

	gsm_baud_rate_t new_baud_rate = gsm->config.baud_rate == GSM_BAUD_RATE_115200 ? GSM_BAUD_RATE_921600 : GSM_BAUD_RATE_115200;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	bf0c      	ite	eq
 80042f6:	2301      	moveq	r3, #1
 80042f8:	2300      	movne	r3, #0
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	73fb      	strb	r3, [r7, #15]

	return GSM_SetBaudRate(gsm, new_baud_rate);
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	4619      	mov	r1, r3
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff94 	bl	8004230 <GSM_SetBaudRate>
 8004308:	4603      	mov	r3, r0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}

08004312 <GSM_Init>:

GSM_ERR GSM_Init(gsm_t *gsm, FT_base *ft, uart_receiver_t *uart_rcvr_gsm, uart_receiver_t *uart_rcvr_debug)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b086      	sub	sp, #24
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	603b      	str	r3, [r7, #0]
	if (gsm == NULL || ft == NULL || uart_rcvr_gsm == NULL) return GSM_INVALID_ARGUMENT;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d005      	beq.n	8004332 <GSM_Init+0x20>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <GSM_Init+0x20>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d102      	bne.n	8004338 <GSM_Init+0x26>
 8004332:	f249 0303 	movw	r3, #36867	@ 0x9003
 8004336:	e03f      	b.n	80043b8 <GSM_Init+0xa6>

	gsm->ft = ft;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	f8c3 26c0 	str.w	r2, [r3, #1728]	@ 0x6c0
	gsm->uart_rcvr_gsm = uart_rcvr_gsm;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	f8c3 26c4 	str.w	r2, [r3, #1732]	@ 0x6c4
	gsm->uart_rcvr_debug = uart_rcvr_debug;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	f8c3 26c8 	str.w	r2, [r3, #1736]	@ 0x6c8

	gsm->config.baud_rate = GSM_BAUD_RATE_115200;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 21a8 	strb.w	r2, [r3, #424]	@ 0x1a8

	FT_ERR ft_err = FT_OK;
 8004358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800435c:	82fb      	strh	r3, [r7, #22]

	ft_err = FT_NewTimer(ft, GSM_TIMER_TIMEOUT_INTERVAL, GSM_TIMER_TIMEOUT_PRIORITY, &gsm->timers.timeout);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f503 73d5 	add.w	r3, r3, #426	@ 0x1aa
 8004364:	225a      	movs	r2, #90	@ 0x5a
 8004366:	f242 7110 	movw	r1, #10000	@ 0x2710
 800436a:	68b8      	ldr	r0, [r7, #8]
 800436c:	f7fe fc9b 	bl	8002ca6 <FT_NewTimer>
 8004370:	4603      	mov	r3, r0
 8004372:	82fb      	strh	r3, [r7, #22]
	FT_StopTimer(ft, gsm->timers.timeout);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	@ 0x1aa
 800437a:	4619      	mov	r1, r3
 800437c:	68b8      	ldr	r0, [r7, #8]
 800437e:	f7fe fc62 	bl	8002c46 <FT_StopTimer>

	if(ft_err == FT_OK) ft_err = FT_NewTimer(ft, GSM_TIMER_DETECT_INTERVAL, GSM_TIMER_DETECT_PRIORITY, &gsm->timers.detect);
 8004382:	8afb      	ldrh	r3, [r7, #22]
 8004384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004388:	d10a      	bne.n	80043a0 <GSM_Init+0x8e>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f503 73d6 	add.w	r3, r3, #428	@ 0x1ac
 8004390:	2250      	movs	r2, #80	@ 0x50
 8004392:	f241 3188 	movw	r1, #5000	@ 0x1388
 8004396:	68b8      	ldr	r0, [r7, #8]
 8004398:	f7fe fc85 	bl	8002ca6 <FT_NewTimer>
 800439c:	4603      	mov	r3, r0
 800439e:	82fb      	strh	r3, [r7, #22]

	if (ft_err != FT_OK) {
 80043a0:	8afb      	ldrh	r3, [r7, #22]
 80043a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a6:	d005      	beq.n	80043b4 <GSM_Init+0xa2>
		GSM_DeInit(gsm);
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f809 	bl	80043c0 <GSM_DeInit>
		return GSM_FT_ERR;
 80043ae:	f249 0310 	movw	r3, #36880	@ 0x9010
 80043b2:	e001      	b.n	80043b8 <GSM_Init+0xa6>
	}

	return GSM_OK;
 80043b4:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <GSM_DeInit>:

GSM_ERR GSM_DeInit(gsm_t *gsm)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
	if (gsm == NULL) return GSM_INVALID_ARGUMENT;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d102      	bne.n	80043d4 <GSM_DeInit+0x14>
 80043ce:	f249 0303 	movw	r3, #36867	@ 0x9003
 80043d2:	e027      	b.n	8004424 <GSM_DeInit+0x64>

	gsm->ft = NULL;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c3 26c0 	str.w	r2, [r3, #1728]	@ 0x6c0
	gsm->uart_rcvr_gsm = NULL;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c3 26c4 	str.w	r2, [r3, #1732]	@ 0x6c4
	gsm->uart_rcvr_debug = NULL;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8c3 26c8 	str.w	r2, [r3, #1736]	@ 0x6c8

	FT_KillTimer(gsm->ft, gsm->timers.timeout);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f8d3 26c0 	ldr.w	r2, [r3, #1728]	@ 0x6c0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	@ 0x1aa
 80043f8:	4619      	mov	r1, r3
 80043fa:	4610      	mov	r0, r2
 80043fc:	f7fe fcc8 	bl	8002d90 <FT_KillTimer>
	FT_KillTimer(gsm->ft, gsm->timers.detect);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 26c0 	ldr.w	r2, [r3, #1728]	@ 0x6c0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f8b3 31ac 	ldrh.w	r3, [r3, #428]	@ 0x1ac
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f7fe fcbe 	bl	8002d90 <FT_KillTimer>

	memset(gsm, 0, sizeof(gsm_t));
 8004414:	f240 62cc 	movw	r2, #1740	@ 0x6cc
 8004418:	2100      	movs	r1, #0
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f006 faa6 	bl	800a96c <memset>

	return GSM_OK;
 8004420:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <GSM_ClearResponse>:


GSM_ERR GSM_ClearResponse(gsm_t *gsm)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	if(gsm == NULL) return GSM_INVALID_ARGUMENT;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d102      	bne.n	8004440 <GSM_ClearResponse+0x14>
 800443a:	f249 0303 	movw	r3, #36867	@ 0x9003
 800443e:	e020      	b.n	8004482 <GSM_ClearResponse+0x56>
	if(gsm->ft == NULL) return GSM_NOT_INITIALIZED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 36c0 	ldr.w	r3, [r3, #1728]	@ 0x6c0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d102      	bne.n	8004450 <GSM_ClearResponse+0x24>
 800444a:	f249 0301 	movw	r3, #36865	@ 0x9001
 800444e:	e018      	b.n	8004482 <GSM_ClearResponse+0x56>

	memset(&gsm->flags.response, 0, sizeof(gsm->flags.response));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	3314      	adds	r3, #20
 8004454:	f44f 72c9 	mov.w	r2, #402	@ 0x192
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f006 fa86 	bl	800a96c <memset>

	gsm->rx_buf_len = 0;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f8a3 23b4 	strh.w	r2, [r3, #948]	@ 0x3b4
	gsm->rx_buf_processed = 0;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f8a3 23b6 	strh.w	r2, [r3, #950]	@ 0x3b6
	gsm->line_buf_len = 0;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f8a3 263a 	strh.w	r2, [r3, #1594]	@ 0x63a
	gsm->flags.line_complete = 1;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	729a      	strb	r2, [r3, #10]

	return GSM_OK;
 800447e:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <GSM_GetLine>:

GSM_ERR GSM_GetLine(gsm_t *gsm)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
	if(gsm == NULL) return GSM_INVALID_ARGUMENT;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <GSM_GetLine+0x14>
 8004498:	f249 0303 	movw	r3, #36867	@ 0x9003
 800449c:	e0b4      	b.n	8004608 <GSM_GetLine+0x17e>
	if(gsm->ft == NULL || gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f8d3 36c0 	ldr.w	r3, [r3, #1728]	@ 0x6c0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d004      	beq.n	80044b2 <GSM_GetLine+0x28>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d102      	bne.n	80044b8 <GSM_GetLine+0x2e>
 80044b2:	f249 0301 	movw	r3, #36865	@ 0x9001
 80044b6:	e0a7      	b.n	8004608 <GSM_GetLine+0x17e>

    if(gsm->rx_buf_len == 0 || gsm->rx_buf_len == gsm->rx_buf_processed) return GSM_LINE_NO_DATA;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8b3 33b4 	ldrh.w	r3, [r3, #948]	@ 0x3b4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d007      	beq.n	80044d2 <GSM_GetLine+0x48>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8b3 23b4 	ldrh.w	r2, [r3, #948]	@ 0x3b4
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8b3 33b6 	ldrh.w	r3, [r3, #950]	@ 0x3b6
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d102      	bne.n	80044d8 <GSM_GetLine+0x4e>
 80044d2:	f249 0320 	movw	r3, #36896	@ 0x9020
 80044d6:	e097      	b.n	8004608 <GSM_GetLine+0x17e>

    if(gsm->flags.line_complete)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	7a9b      	ldrb	r3, [r3, #10]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d073      	beq.n	80045c8 <GSM_GetLine+0x13e>
    {
        gsm->line_buf_len = 0;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8a3 263a 	strh.w	r2, [r3, #1594]	@ 0x63a

    }
	while (gsm->rx_buf_processed < gsm->rx_buf_len && gsm->line_buf_len < GSM_LINE_BUFFER_SIZE - 1) {
 80044e8:	e06e      	b.n	80045c8 <GSM_GetLine+0x13e>
		if(gsm->rx_buf[gsm->rx_buf_processed] == '>')
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8b3 33b6 	ldrh.w	r3, [r3, #950]	@ 0x3b6
 80044f0:	461a      	mov	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 80044fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80044fc:	d11d      	bne.n	800453a <GSM_GetLine+0xb0>
		{
			gsm->line_buf[gsm->line_buf_len++] = gsm->rx_buf[gsm->rx_buf_processed++];
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8b3 33b6 	ldrh.w	r3, [r3, #950]	@ 0x3b6
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	b291      	uxth	r1, r2
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	f8a2 13b6 	strh.w	r1, [r2, #950]	@ 0x3b6
 800450e:	4618      	mov	r0, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	b291      	uxth	r1, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	f8a2 163a 	strh.w	r1, [r2, #1594]	@ 0x63a
 8004520:	4619      	mov	r1, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4403      	add	r3, r0
 8004526:	f893 21b4 	ldrb.w	r2, [r3, #436]	@ 0x1b4
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	440b      	add	r3, r1
 800452e:	f883 25ba 	strb.w	r2, [r3, #1466]	@ 0x5ba
			gsm->flags.line_complete = 1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	729a      	strb	r2, [r3, #10]
			break;
 8004538:	e053      	b.n	80045e2 <GSM_GetLine+0x158>
		}
		if (gsm->rx_buf_processed && gsm->rx_buf[gsm->rx_buf_processed - 1] == '\r' && gsm->rx_buf[gsm->rx_buf_processed] == '\n')
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8b3 33b6 	ldrh.w	r3, [r3, #950]	@ 0x3b6
 8004540:	2b00      	cmp	r3, #0
 8004542:	d027      	beq.n	8004594 <GSM_GetLine+0x10a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8b3 33b6 	ldrh.w	r3, [r3, #950]	@ 0x3b6
 800454a:	3b01      	subs	r3, #1
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	4413      	add	r3, r2
 8004550:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 8004554:	2b0d      	cmp	r3, #13
 8004556:	d11d      	bne.n	8004594 <GSM_GetLine+0x10a>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f8b3 33b6 	ldrh.w	r3, [r3, #950]	@ 0x3b6
 800455e:	461a      	mov	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4413      	add	r3, r2
 8004564:	f893 31b4 	ldrb.w	r3, [r3, #436]	@ 0x1b4
 8004568:	2b0a      	cmp	r3, #10
 800456a:	d113      	bne.n	8004594 <GSM_GetLine+0x10a>
		{
			gsm->rx_buf_processed++;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8b3 33b6 	ldrh.w	r3, [r3, #950]	@ 0x3b6
 8004572:	3301      	adds	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8a3 23b6 	strh.w	r2, [r3, #950]	@ 0x3b6
			gsm->line_buf_len--;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8a3 263a 	strh.w	r2, [r3, #1594]	@ 0x63a
			gsm->flags.line_complete = 1;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	729a      	strb	r2, [r3, #10]
			break;
 8004592:	e026      	b.n	80045e2 <GSM_GetLine+0x158>
		}
		gsm->line_buf[gsm->line_buf_len++] = gsm->rx_buf[gsm->rx_buf_processed++];
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8b3 33b6 	ldrh.w	r3, [r3, #950]	@ 0x3b6
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	b291      	uxth	r1, r2
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	f8a2 13b6 	strh.w	r1, [r2, #950]	@ 0x3b6
 80045a4:	4618      	mov	r0, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	b291      	uxth	r1, r2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	f8a2 163a 	strh.w	r1, [r2, #1594]	@ 0x63a
 80045b6:	4619      	mov	r1, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4403      	add	r3, r0
 80045bc:	f893 21b4 	ldrb.w	r2, [r3, #436]	@ 0x1b4
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	440b      	add	r3, r1
 80045c4:	f883 25ba 	strb.w	r2, [r3, #1466]	@ 0x5ba
	while (gsm->rx_buf_processed < gsm->rx_buf_len && gsm->line_buf_len < GSM_LINE_BUFFER_SIZE - 1) {
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8b3 23b6 	ldrh.w	r2, [r3, #950]	@ 0x3b6
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8b3 33b4 	ldrh.w	r3, [r3, #948]	@ 0x3b4
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d204      	bcs.n	80045e2 <GSM_GetLine+0x158>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 80045de:	2b7e      	cmp	r3, #126	@ 0x7e
 80045e0:	d983      	bls.n	80044ea <GSM_GetLine+0x60>
	}
	gsm->line_buf[gsm->line_buf_len] = 0;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 80045e8:	461a      	mov	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4413      	add	r3, r2
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 25ba 	strb.w	r2, [r3, #1466]	@ 0x5ba

	if(gsm->line_buf_len >= GSM_LINE_BUFFER_SIZE - 1) gsm->flags.line_complete = 1;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 80045fa:	2b7e      	cmp	r3, #126	@ 0x7e
 80045fc:	d902      	bls.n	8004604 <GSM_GetLine+0x17a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	729a      	strb	r2, [r3, #10]

	return GSM_OK;
 8004604:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <GSM_DecodePDU>:

GSM_ERR GSM_DecodePDU(gsm_t *gsm, const char* pdu, uint16_t pdu_len)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
	if(gsm == NULL || pdu == NULL) return GSM_INVALID_ARGUMENT;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <GSM_DecodePDU+0x1a>
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d102      	bne.n	8004634 <GSM_DecodePDU+0x20>
 800462e:	f249 0303 	movw	r3, #36867	@ 0x9003
 8004632:	e011      	b.n	8004658 <GSM_DecodePDU+0x44>
	if(gsm->line_buf_len == 0) return GSM_INVALID_ARGUMENT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f8b3 363a 	ldrh.w	r3, [r3, #1594]	@ 0x63a
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <GSM_DecodePDU+0x30>
 800463e:	f249 0303 	movw	r3, #36867	@ 0x9003
 8004642:	e009      	b.n	8004658 <GSM_DecodePDU+0x44>

	// TODO: implement PDU decoding

	memcpy(gsm->sms_buf, pdu, pdu_len);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f203 633c 	addw	r3, r3, #1596	@ 0x63c
 800464a:	88fa      	ldrh	r2, [r7, #6]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	4618      	mov	r0, r3
 8004650:	f006 fa2d 	bl	800aaae <memcpy>

	return GSM_OK;
 8004654:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <GSM_ProcessCommand>:

GSM_ERR GSM_ProcessCommand(gsm_t *gsm, const char* cmd, uint16_t cmd_len)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	4613      	mov	r3, r2
 800466c:	80fb      	strh	r3, [r7, #6]
	if (gsm == NULL || cmd == NULL || cmd_len == 0 || cmd[0] != '+') return GSM_INVALID_ARGUMENT;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <GSM_ProcessCommand+0x28>
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d006      	beq.n	8004688 <GSM_ProcessCommand+0x28>
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <GSM_ProcessCommand+0x28>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b2b      	cmp	r3, #43	@ 0x2b
 8004686:	d002      	beq.n	800468e <GSM_ProcessCommand+0x2e>
 8004688:	f249 0303 	movw	r3, #36867	@ 0x9003
 800468c:	e090      	b.n	80047b0 <GSM_ProcessCommand+0x150>
	if (gsm->flags.response.has_command) return GSM_BUSY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	7f5b      	ldrb	r3, [r3, #29]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d002      	beq.n	800469c <GSM_ProcessCommand+0x3c>
 8004696:	f249 0305 	movw	r3, #36869	@ 0x9005
 800469a:	e089      	b.n	80047b0 <GSM_ProcessCommand+0x150>

	if(cmd_len > GSM_COMMAND_BUFFER_SIZE)
 800469c:	88fb      	ldrh	r3, [r7, #6]
 800469e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046a2:	d906      	bls.n	80046b2 <GSM_ProcessCommand+0x52>
	{
		cmd_len = GSM_COMMAND_BUFFER_SIZE;
 80046a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046a8:	80fb      	strh	r3, [r7, #6]
		GSM_Prints(gsm, "Command buffer overflow. Truncating command\r\n");
 80046aa:	4943      	ldr	r1, [pc, #268]	@ (80047b8 <GSM_ProcessCommand+0x158>)
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7ff f800 	bl	80036b2 <GSM_Prints>
	}

	char* pos = memchr(cmd, ':', cmd_len);
 80046b2:	88fb      	ldrh	r3, [r7, #6]
 80046b4:	461a      	mov	r2, r3
 80046b6:	213a      	movs	r1, #58	@ 0x3a
 80046b8:	68b8      	ldr	r0, [r7, #8]
 80046ba:	f7fb fd99 	bl	80001f0 <memchr>
 80046be:	6178      	str	r0, [r7, #20]
	if(pos == NULL || pos < cmd + 2) return GSM_INVALID_ARGUMENT;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d004      	beq.n	80046d0 <GSM_ProcessCommand+0x70>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	3302      	adds	r3, #2
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d202      	bcs.n	80046d6 <GSM_ProcessCommand+0x76>
 80046d0:	f249 0303 	movw	r3, #36867	@ 0x9003
 80046d4:	e06c      	b.n	80047b0 <GSM_ProcessCommand+0x150>
	uint16_t cmd_name_len = pos - cmd - 1;
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	827b      	strh	r3, [r7, #18]

	gsm->flags.response.command_buf_name_len = cmd_name_len;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8a7a      	ldrh	r2, [r7, #18]
 80046e6:	f8a3 2122 	strh.w	r2, [r3, #290]	@ 0x122

	memcpy(gsm->flags.response.command_buf, cmd, cmd_len);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	3320      	adds	r3, #32
 80046ee:	88fa      	ldrh	r2, [r7, #6]
 80046f0:	68b9      	ldr	r1, [r7, #8]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f006 f9db 	bl	800aaae <memcpy>
	gsm->flags.response.command_buf_len = cmd_len;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	88fa      	ldrh	r2, [r7, #6]
 80046fc:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

	uint16_t i = cmd_name_len + 3;
 8004700:	8a7b      	ldrh	r3, [r7, #18]
 8004702:	3303      	adds	r3, #3
 8004704:	83fb      	strh	r3, [r7, #30]
	uint16_t param_len = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	83bb      	strh	r3, [r7, #28]
	uint16_t params_count = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	837b      	strh	r3, [r7, #26]
	uint8_t inside_quotes = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	767b      	strb	r3, [r7, #25]

	while(i <= cmd_len)
 8004712:	e03f      	b.n	8004794 <GSM_ProcessCommand+0x134>
	{
		if((cmd[i] == ',' || i == cmd_len) && inside_quotes == 0)
 8004714:	8bfb      	ldrh	r3, [r7, #30]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	4413      	add	r3, r2
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b2c      	cmp	r3, #44	@ 0x2c
 800471e:	d003      	beq.n	8004728 <GSM_ProcessCommand+0xc8>
 8004720:	8bfa      	ldrh	r2, [r7, #30]
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	429a      	cmp	r2, r3
 8004726:	d122      	bne.n	800476e <GSM_ProcessCommand+0x10e>
 8004728:	7e7b      	ldrb	r3, [r7, #25]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d11f      	bne.n	800476e <GSM_ProcessCommand+0x10e>
		{
			gsm->flags.response.command_buf_parameters_pos[params_count] = i - param_len;
 800472e:	8b7b      	ldrh	r3, [r7, #26]
 8004730:	8bf9      	ldrh	r1, [r7, #30]
 8004732:	8bba      	ldrh	r2, [r7, #28]
 8004734:	1a8a      	subs	r2, r1, r2
 8004736:	b291      	uxth	r1, r2
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	3390      	adds	r3, #144	@ 0x90
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	460a      	mov	r2, r1
 8004742:	809a      	strh	r2, [r3, #4]
			gsm->flags.response.command_buf_parameters_len[params_count] = param_len;
 8004744:	8b7b      	ldrh	r3, [r7, #26]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	33b0      	adds	r3, #176	@ 0xb0
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	8bba      	ldrh	r2, [r7, #28]
 8004750:	809a      	strh	r2, [r3, #4]
			params_count++;
 8004752:	8b7b      	ldrh	r3, [r7, #26]
 8004754:	3301      	adds	r3, #1
 8004756:	837b      	strh	r3, [r7, #26]
			if(params_count >= GSM_COMMAND_MAX_PARAMETERS)
 8004758:	8b7b      	ldrh	r3, [r7, #26]
 800475a:	2b1f      	cmp	r3, #31
 800475c:	d904      	bls.n	8004768 <GSM_ProcessCommand+0x108>
			{
				GSM_Prints(gsm, "Too many parameters in command. Truncating count\r\n");
 800475e:	4917      	ldr	r1, [pc, #92]	@ (80047bc <GSM_ProcessCommand+0x15c>)
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f7fe ffa6 	bl	80036b2 <GSM_Prints>
				break;
 8004766:	e019      	b.n	800479c <GSM_ProcessCommand+0x13c>
			}
			param_len = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	83bb      	strh	r3, [r7, #28]
 800476c:	e002      	b.n	8004774 <GSM_ProcessCommand+0x114>
		}
		else param_len++;
 800476e:	8bbb      	ldrh	r3, [r7, #28]
 8004770:	3301      	adds	r3, #1
 8004772:	83bb      	strh	r3, [r7, #28]
		if(cmd[i] == '"') inside_quotes = !inside_quotes;
 8004774:	8bfb      	ldrh	r3, [r7, #30]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	4413      	add	r3, r2
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b22      	cmp	r3, #34	@ 0x22
 800477e:	d106      	bne.n	800478e <GSM_ProcessCommand+0x12e>
 8004780:	7e7b      	ldrb	r3, [r7, #25]
 8004782:	2b00      	cmp	r3, #0
 8004784:	bf0c      	ite	eq
 8004786:	2301      	moveq	r3, #1
 8004788:	2300      	movne	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	767b      	strb	r3, [r7, #25]
		i++;
 800478e:	8bfb      	ldrh	r3, [r7, #30]
 8004790:	3301      	adds	r3, #1
 8004792:	83fb      	strh	r3, [r7, #30]
	while(i <= cmd_len)
 8004794:	8bfa      	ldrh	r2, [r7, #30]
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	429a      	cmp	r2, r3
 800479a:	d9bb      	bls.n	8004714 <GSM_ProcessCommand+0xb4>
	}
	gsm->flags.response.command_buf_parameters_count = params_count;
 800479c:	8b7b      	ldrh	r3, [r7, #26]
 800479e:	b2da      	uxtb	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f883 21a4 	strb.w	r2, [r3, #420]	@ 0x1a4
	gsm->flags.response.has_command = 1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	775a      	strb	r2, [r3, #29]

	return GSM_OK;
 80047ac:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3720      	adds	r7, #32
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	0800cc64 	.word	0x0800cc64
 80047bc:	0800cc94 	.word	0x0800cc94

080047c0 <GSM_CommandCompareName>:

GSM_ERR GSM_CommandCompareName(gsm_t *gsm, const char* str)
{
 80047c0:	b590      	push	{r4, r7, lr}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
	if (gsm == NULL || str == NULL) return GSM_INVALID_ARGUMENT;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <GSM_CommandCompareName+0x16>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <GSM_CommandCompareName+0x1c>
 80047d6:	f249 0303 	movw	r3, #36867	@ 0x9003
 80047da:	e025      	b.n	8004828 <GSM_CommandCompareName+0x68>
	if (gsm->flags.response.has_command == 0) return GSM_INVALID_ARGUMENT;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	7f5b      	ldrb	r3, [r3, #29]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d102      	bne.n	80047ea <GSM_CommandCompareName+0x2a>
 80047e4:	f249 0303 	movw	r3, #36867	@ 0x9003
 80047e8:	e01e      	b.n	8004828 <GSM_CommandCompareName+0x68>

	if (gsm->flags.response.command_buf_name_len != strlen(str)) return GSM_ERROR;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8b3 3122 	ldrh.w	r3, [r3, #290]	@ 0x122
 80047f0:	461c      	mov	r4, r3
 80047f2:	6838      	ldr	r0, [r7, #0]
 80047f4:	f7fb fd4c 	bl	8000290 <strlen>
 80047f8:	4603      	mov	r3, r0
 80047fa:	429c      	cmp	r4, r3
 80047fc:	d002      	beq.n	8004804 <GSM_CommandCompareName+0x44>
 80047fe:	f249 03ff 	movw	r3, #37119	@ 0x90ff
 8004802:	e011      	b.n	8004828 <GSM_CommandCompareName+0x68>

	if (strncmp((char*)gsm->flags.response.command_buf + 1, str, gsm->flags.response.command_buf_name_len) == 0) return GSM_OK;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3320      	adds	r3, #32
 8004808:	1c58      	adds	r0, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8b3 3122 	ldrh.w	r3, [r3, #290]	@ 0x122
 8004810:	461a      	mov	r2, r3
 8004812:	6839      	ldr	r1, [r7, #0]
 8004814:	f006 f8b2 	bl	800a97c <strncmp>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d102      	bne.n	8004824 <GSM_CommandCompareName+0x64>
 800481e:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8004822:	e001      	b.n	8004828 <GSM_CommandCompareName+0x68>
	return GSM_ERROR;
 8004824:	f249 03ff 	movw	r3, #37119	@ 0x90ff
}
 8004828:	4618      	mov	r0, r3
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	bd90      	pop	{r4, r7, pc}

08004830 <GSM_CommandCompareParameter>:

GSM_ERR GSM_CommandCompareParameter(gsm_t *gsm, uint16_t param_i, const char* str)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	460b      	mov	r3, r1
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	817b      	strh	r3, [r7, #10]
	if (gsm == NULL || str == NULL) return GSM_INVALID_ARGUMENT;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <GSM_CommandCompareParameter+0x1a>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <GSM_CommandCompareParameter+0x20>
 800484a:	f249 0303 	movw	r3, #36867	@ 0x9003
 800484e:	e03b      	b.n	80048c8 <GSM_CommandCompareParameter+0x98>
	size_t str_len = strlen(str);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7fb fd1d 	bl	8000290 <strlen>
 8004856:	6178      	str	r0, [r7, #20]
	if (gsm->flags.response.has_command == 0 || str_len == 0) return GSM_INVALID_ARGUMENT;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	7f5b      	ldrb	r3, [r3, #29]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <GSM_CommandCompareParameter+0x36>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d102      	bne.n	800486c <GSM_CommandCompareParameter+0x3c>
 8004866:	f249 0303 	movw	r3, #36867	@ 0x9003
 800486a:	e02d      	b.n	80048c8 <GSM_CommandCompareParameter+0x98>
	if (param_i >= gsm->flags.response.command_buf_parameters_count) return GSM_INVALID_ARGUMENT;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f893 31a4 	ldrb.w	r3, [r3, #420]	@ 0x1a4
 8004872:	461a      	mov	r2, r3
 8004874:	897b      	ldrh	r3, [r7, #10]
 8004876:	4293      	cmp	r3, r2
 8004878:	d302      	bcc.n	8004880 <GSM_CommandCompareParameter+0x50>
 800487a:	f249 0303 	movw	r3, #36867	@ 0x9003
 800487e:	e023      	b.n	80048c8 <GSM_CommandCompareParameter+0x98>

	if (gsm->flags.response.command_buf_parameters_len[param_i] != str_len) return GSM_ERROR;
 8004880:	897b      	ldrh	r3, [r7, #10]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	33b0      	adds	r3, #176	@ 0xb0
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	4413      	add	r3, r2
 800488a:	889b      	ldrh	r3, [r3, #4]
 800488c:	461a      	mov	r2, r3
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	4293      	cmp	r3, r2
 8004892:	d002      	beq.n	800489a <GSM_CommandCompareParameter+0x6a>
 8004894:	f249 03ff 	movw	r3, #37119	@ 0x90ff
 8004898:	e016      	b.n	80048c8 <GSM_CommandCompareParameter+0x98>

	if(strncmp((char*)gsm->flags.response.command_buf + gsm->flags.response.command_buf_parameters_pos[param_i], str, str_len) == 0) return GSM_OK;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f103 0220 	add.w	r2, r3, #32
 80048a0:	897b      	ldrh	r3, [r7, #10]
 80048a2:	68f9      	ldr	r1, [r7, #12]
 80048a4:	3390      	adds	r3, #144	@ 0x90
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	440b      	add	r3, r1
 80048aa:	889b      	ldrh	r3, [r3, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f006 f862 	bl	800a97c <strncmp>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <GSM_CommandCompareParameter+0x94>
 80048be:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80048c2:	e001      	b.n	80048c8 <GSM_CommandCompareParameter+0x98>

	return GSM_ERROR;
 80048c4:	f249 03ff 	movw	r3, #37119	@ 0x90ff
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <GSM_SendUDP>:

	return GSM_OK;
}

GSM_ERR GSM_SendUDP(gsm_t *gsm, const uint8_t* data, uint16_t len)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af02      	add	r7, sp, #8
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	4613      	mov	r3, r2
 80048dc:	80fb      	strh	r3, [r7, #6]
	if (gsm == NULL || data == NULL || len == 0) return GSM_INVALID_ARGUMENT;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <GSM_SendUDP+0x20>
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <GSM_SendUDP+0x20>
 80048ea:	88fb      	ldrh	r3, [r7, #6]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <GSM_SendUDP+0x26>
 80048f0:	f249 0303 	movw	r3, #36867	@ 0x9003
 80048f4:	e04a      	b.n	800498c <GSM_SendUDP+0xbc>
	if (gsm->uart_rcvr_gsm == NULL) return GSM_NOT_INITIALIZED;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f8d3 36c4 	ldr.w	r3, [r3, #1732]	@ 0x6c4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d102      	bne.n	8004906 <GSM_SendUDP+0x36>
 8004900:	f249 0301 	movw	r3, #36865	@ 0x9001
 8004904:	e042      	b.n	800498c <GSM_SendUDP+0xbc>
	if (gsm->flags.data_sending == 1) return GSM_BUSY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	7a1b      	ldrb	r3, [r3, #8]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d102      	bne.n	8004914 <GSM_SendUDP+0x44>
 800490e:	f249 0305 	movw	r3, #36869	@ 0x9005
 8004912:	e03b      	b.n	800498c <GSM_SendUDP+0xbc>

	gsm->flags.data_sending = 1;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2201      	movs	r2, #1
 8004918:	721a      	strb	r2, [r3, #8]

	snprintf((char*)gsm->line_buf, GSM_LINE_BUFFER_SIZE, "AT+CIPSEND=0,%u,\"62.93.47.98\",3333\r\n", len);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f203 50ba 	addw	r0, r3, #1466	@ 0x5ba
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	4a1c      	ldr	r2, [pc, #112]	@ (8004994 <GSM_SendUDP+0xc4>)
 8004924:	2180      	movs	r1, #128	@ 0x80
 8004926:	f005 ff15 	bl	800a754 <sniprintf>
	GSM_at(gsm, (char*)gsm->line_buf, 1, 1000);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f203 51ba 	addw	r1, r3, #1466	@ 0x5ba
 8004930:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004934:	2201      	movs	r2, #1
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f7fe ff3c 	bl	80037b4 <GSM_at>
	GSM_AwaitResponse(gsm);
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7ff f8a7 	bl	8003a90 <GSM_AwaitResponse>
	if(gsm->flags.response.has_input_request == 0)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	7f9b      	ldrb	r3, [r3, #30]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d105      	bne.n	8004956 <GSM_SendUDP+0x86>
	{
		gsm->flags.data_sending = 0;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	721a      	strb	r2, [r3, #8]
		return GSM_AT_ERR;
 8004950:	f249 0330 	movw	r3, #36912	@ 0x9030
 8004954:	e01a      	b.n	800498c <GSM_SendUDP+0xbc>
	}

	GSM_atData(gsm, data, len, 1, 3000);
 8004956:	88fa      	ldrh	r2, [r7, #6]
 8004958:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	2301      	movs	r3, #1
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f7fe fed0 	bl	8003708 <GSM_atData>
	GSM_AwaitResponse(gsm);
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f7ff f891 	bl	8003a90 <GSM_AwaitResponse>
	if(gsm->flags.response.has_ok == 0)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	7edb      	ldrb	r3, [r3, #27]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d105      	bne.n	8004982 <GSM_SendUDP+0xb2>
	{
		gsm->flags.data_sending = 0;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	721a      	strb	r2, [r3, #8]
		return GSM_AT_ERR;
 800497c:	f249 0330 	movw	r3, #36912	@ 0x9030
 8004980:	e004      	b.n	800498c <GSM_SendUDP+0xbc>
	}

	gsm->flags.data_sending = 0;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	721a      	strb	r2, [r3, #8]

	return GSM_OK;
 8004988:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	0800ccc8 	.word	0x0800ccc8

08004998 <UartRcvr_init>:
 */

#include "uart_receiver.h"

uint8_t UartRcvr_init(uart_receiver_t* uart_rcvr, UART_HandleTypeDef* huart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
	if(uart_rcvr == NULL || huart == NULL) return 0;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <UartRcvr_init+0x16>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <UartRcvr_init+0x1a>
 80049ae:	2300      	movs	r3, #0
 80049b0:	e036      	b.n	8004a20 <UartRcvr_init+0x88>
	UartRcvr_deinit(uart_rcvr);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f838 	bl	8004a28 <UartRcvr_deinit>

	uart_rcvr->buffer_active.data = (uint8_t*)malloc(UART_RECEIVER_CIRCULAR_BUFFER_SIZE);
 80049b8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80049bc:	f004 ffda 	bl	8009974 <malloc>
 80049c0:	4603      	mov	r3, r0
 80049c2:	461a      	mov	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	629a      	str	r2, [r3, #40]	@ 0x28
	uart_rcvr->buffer_active.len = 0;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	859a      	strh	r2, [r3, #44]	@ 0x2c
	if (uart_rcvr->buffer_active.data == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d104      	bne.n	80049e0 <UartRcvr_init+0x48>
	{
		UartRcvr_deinit(uart_rcvr);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f826 	bl	8004a28 <UartRcvr_deinit>
		return 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	e01f      	b.n	8004a20 <UartRcvr_init+0x88>
	}

	uart_rcvr->buffer_pending.data = (uint8_t*)malloc(UART_RECEIVER_MAX_BUFFER_LENGTH);
 80049e0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80049e4:	f004 ffc6 	bl	8009974 <malloc>
 80049e8:	4603      	mov	r3, r0
 80049ea:	461a      	mov	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	631a      	str	r2, [r3, #48]	@ 0x30
	uart_rcvr->buffer_pending.len = 0;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	869a      	strh	r2, [r3, #52]	@ 0x34
	if (uart_rcvr->buffer_pending.data == NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d104      	bne.n	8004a08 <UartRcvr_init+0x70>
	{
		UartRcvr_deinit(uart_rcvr);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f812 	bl	8004a28 <UartRcvr_deinit>
		return 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	e00b      	b.n	8004a20 <UartRcvr_init+0x88>
	}

	uart_rcvr->huart = huart;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	641a      	str	r2, [r3, #64]	@ 0x40

	HAL_UARTEx_ReceiveToIdle_DMA(huart, uart_rcvr->buffer_active.data, UART_RECEIVER_CIRCULAR_BUFFER_SIZE);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a16:	4619      	mov	r1, r3
 8004a18:	6838      	ldr	r0, [r7, #0]
 8004a1a:	f003 fe6e 	bl	80086fa <HAL_UARTEx_ReceiveToIdle_DMA>
	return 1;
 8004a1e:	2301      	movs	r3, #1
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <UartRcvr_deinit>:

void UartRcvr_deinit(uart_receiver_t *uart_rcvr)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	if(uart_rcvr == NULL) return;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d02d      	beq.n	8004a92 <UartRcvr_deinit+0x6a>
	if(uart_rcvr->buffer_active.data != NULL) free(uart_rcvr->buffer_active.data);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d004      	beq.n	8004a48 <UartRcvr_deinit+0x20>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a42:	4618      	mov	r0, r3
 8004a44:	f004 ff9e 	bl	8009984 <free>
	if(uart_rcvr->buffer_pending.data != NULL) free(uart_rcvr->buffer_pending.data);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <UartRcvr_deinit+0x32>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a54:	4618      	mov	r0, r3
 8004a56:	f004 ff95 	bl	8009984 <free>
	for (uint8_t i = 0; i < UART_RECEIVER_MAX_BUFFERS; i++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
 8004a5e:	e00f      	b.n	8004a80 <UartRcvr_deinit+0x58>
	{
		if(uart_rcvr->buffers[i].data != NULL) free(uart_rcvr->buffers[i].data);
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d006      	beq.n	8004a7a <UartRcvr_deinit+0x52>
 8004a6c:	7bfa      	ldrb	r2, [r7, #15]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f004 ff85 	bl	8009984 <free>
	for (uint8_t i = 0; i < UART_RECEIVER_MAX_BUFFERS; i++)
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	2b04      	cmp	r3, #4
 8004a84:	d9ec      	bls.n	8004a60 <UartRcvr_deinit+0x38>
	}
	memset(uart_rcvr, 0, sizeof(uart_receiver_t));
 8004a86:	2244      	movs	r2, #68	@ 0x44
 8004a88:	2100      	movs	r1, #0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f005 ff6e 	bl	800a96c <memset>
 8004a90:	e000      	b.n	8004a94 <UartRcvr_deinit+0x6c>
	if(uart_rcvr == NULL) return;
 8004a92:	bf00      	nop
}
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <UartRcvr_available>:

uint8_t UartRcvr_available(uart_receiver_t *uart_rcvr)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return 0;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <UartRcvr_available+0x16>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d111      	bne.n	8004ad6 <UartRcvr_available+0x3a>
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e028      	b.n	8004b08 <UartRcvr_available+0x6c>

	while (uart_rcvr->buffer_index_pending != uart_rcvr->buffer_index_active
			&& uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data == NULL)
	{
		uart_rcvr->buffer_index_pending = (uart_rcvr->buffer_index_pending + 1) % UART_RECEIVER_MAX_BUFFERS;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	4b15      	ldr	r3, [pc, #84]	@ (8004b14 <UartRcvr_available+0x78>)
 8004abe:	fb83 1302 	smull	r1, r3, r3, r2
 8004ac2:	1059      	asrs	r1, r3, #1
 8004ac4:	17d3      	asrs	r3, r2, #31
 8004ac6:	1ac9      	subs	r1, r1, r3
 8004ac8:	460b      	mov	r3, r1
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	1ad1      	subs	r1, r2, r3
 8004ad0:	b28a      	uxth	r2, r1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	875a      	strh	r2, [r3, #58]	@ 0x3a
	while (uart_rcvr->buffer_index_pending != uart_rcvr->buffer_index_active
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8f5a      	ldrh	r2, [r3, #58]	@ 0x3a
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
			&& uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data == NULL)
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d007      	beq.n	8004af2 <UartRcvr_available+0x56>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0e1      	beq.n	8004ab6 <UartRcvr_available+0x1a>
	}

	return uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data != NULL;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004af6:	461a      	mov	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	bf14      	ite	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	2300      	moveq	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	66666667 	.word	0x66666667

08004b18 <UartRcvr_get_input>:

uint16_t UartRcvr_get_input(uart_receiver_t *uart_rcvr, uint8_t* str, uint16_t max_len)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	4613      	mov	r3, r2
 8004b24:	80fb      	strh	r3, [r7, #6]
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return 0;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <UartRcvr_get_input+0x1c>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <UartRcvr_get_input+0x20>
 8004b34:	2300      	movs	r3, #0
 8004b36:	e07d      	b.n	8004c34 <UartRcvr_get_input+0x11c>

	if (uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data == NULL) return 0;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d101      	bne.n	8004b4c <UartRcvr_get_input+0x34>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e073      	b.n	8004c34 <UartRcvr_get_input+0x11c>

	uint16_t len = uart_rcvr->buffers[uart_rcvr->buffer_index_pending].len;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4413      	add	r3, r2
 8004b56:	889b      	ldrh	r3, [r3, #4]
 8004b58:	82fb      	strh	r3, [r7, #22]
	if(str != NULL && max_len > 0)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d04c      	beq.n	8004bfa <UartRcvr_get_input+0xe2>
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d049      	beq.n	8004bfa <UartRcvr_get_input+0xe2>
	{
		if (len + 1 > max_len) len = max_len - 1;
 8004b66:	8afa      	ldrh	r2, [r7, #22]
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d302      	bcc.n	8004b74 <UartRcvr_get_input+0x5c>
 8004b6e:	88fb      	ldrh	r3, [r7, #6]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	82fb      	strh	r3, [r7, #22]
		memcpy(str, uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data + uart_rcvr->buffers[uart_rcvr->buffer_index_pending].processed, len + 1);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004b78:	461a      	mov	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004b84:	68f9      	ldr	r1, [r7, #12]
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	440b      	add	r3, r1
 8004b8a:	88db      	ldrh	r3, [r3, #6]
 8004b8c:	18d1      	adds	r1, r2, r3
 8004b8e:	8afb      	ldrh	r3, [r7, #22]
 8004b90:	3301      	adds	r3, #1
 8004b92:	461a      	mov	r2, r3
 8004b94:	68b8      	ldr	r0, [r7, #8]
 8004b96:	f005 ff8a 	bl	800aaae <memcpy>
		str[len] = '\0';
 8004b9a:	8afb      	ldrh	r3, [r7, #22]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]
		if (len != uart_rcvr->buffers[uart_rcvr->buffer_index_pending].len)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4413      	add	r3, r2
 8004bae:	889b      	ldrh	r3, [r3, #4]
 8004bb0:	8afa      	ldrh	r2, [r7, #22]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d021      	beq.n	8004bfa <UartRcvr_get_input+0xe2>
		{
			uart_rcvr->buffers[uart_rcvr->buffer_index_pending].len -= len;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	889a      	ldrh	r2, [r3, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	8afb      	ldrh	r3, [r7, #22]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	b299      	uxth	r1, r3
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	00c3      	lsls	r3, r0, #3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	460a      	mov	r2, r1
 8004bd6:	809a      	strh	r2, [r3, #4]
			uart_rcvr->buffers[uart_rcvr->buffer_index_pending].processed += len;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	00db      	lsls	r3, r3, #3
 8004be0:	4413      	add	r3, r2
 8004be2:	88da      	ldrh	r2, [r3, #6]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004be8:	4618      	mov	r0, r3
 8004bea:	8afb      	ldrh	r3, [r7, #22]
 8004bec:	4413      	add	r3, r2
 8004bee:	b299      	uxth	r1, r3
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	00c3      	lsls	r3, r0, #3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	460a      	mov	r2, r1
 8004bf8:	80da      	strh	r2, [r3, #6]
		}
	}

	if(len == uart_rcvr->buffers[uart_rcvr->buffer_index_pending].len || str == NULL)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4413      	add	r3, r2
 8004c04:	889b      	ldrh	r3, [r3, #4]
 8004c06:	8afa      	ldrh	r2, [r7, #22]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d002      	beq.n	8004c12 <UartRcvr_get_input+0xfa>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10f      	bne.n	8004c32 <UartRcvr_get_input+0x11a>
	{
		free(uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004c16:	461a      	mov	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f004 feb0 	bl	8009984 <free>
		uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data = NULL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8004c28:	4619      	mov	r1, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
	}
	return len;
 8004c32:	8afb      	ldrh	r3, [r7, #22]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UartRcvr_set_baud_rate>:

uint8_t UartRcvr_set_baud_rate(uart_receiver_t *uart_rcvr, uint32_t baud_rate)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b086      	sub	sp, #24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
	if(uart_rcvr == NULL || uart_rcvr->huart == NULL) return 0;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <UartRcvr_set_baud_rate+0x18>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <UartRcvr_set_baud_rate+0x1c>
 8004c54:	2300      	movs	r3, #0
 8004c56:	e050      	b.n	8004cfa <UartRcvr_set_baud_rate+0xbe>

	uint32_t pclk;
	if (uart_rcvr->huart->Instance == USART1 || uart_rcvr->huart->Instance == USART6) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a29      	ldr	r2, [pc, #164]	@ (8004d04 <UartRcvr_set_baud_rate+0xc8>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d005      	beq.n	8004c70 <UartRcvr_set_baud_rate+0x34>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a27      	ldr	r2, [pc, #156]	@ (8004d08 <UartRcvr_set_baud_rate+0xcc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d103      	bne.n	8004c78 <UartRcvr_set_baud_rate+0x3c>
		// USART1 and USART6 are on APB2
		pclk = HAL_RCC_GetPCLK2Freq();
 8004c70:	f002 fbda 	bl	8007428 <HAL_RCC_GetPCLK2Freq>
 8004c74:	6178      	str	r0, [r7, #20]
 8004c76:	e002      	b.n	8004c7e <UartRcvr_set_baud_rate+0x42>
	} else {
		// USART2, USART3, UART4, UART5 are on APB1
		pclk = HAL_RCC_GetPCLK1Freq();
 8004c78:	f002 fbc2 	bl	8007400 <HAL_RCC_GetPCLK1Freq>
 8004c7c:	6178      	str	r0, [r7, #20]
	}
    uint32_t usartdiv = (pclk + (baud_rate / 2)) / baud_rate;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	085a      	lsrs	r2, r3, #1
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	441a      	add	r2, r3
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8c:	613b      	str	r3, [r7, #16]

    UART_HandleTypeDef* huart = uart_rcvr->huart;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	60fb      	str	r3, [r7, #12]
    USART_TypeDef* instance = huart->Instance;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60bb      	str	r3, [r7, #8]


    while(__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE) == RESET); // wait for transmission complete
 8004c9a:	bf00      	nop
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca6:	2b80      	cmp	r3, #128	@ 0x80
 8004ca8:	d1f8      	bne.n	8004c9c <UartRcvr_set_baud_rate+0x60>

    instance->CR1 &= ~(USART_CR1_UE);
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004cb6:	f3bf 8f4f 	dsb	sy
}
 8004cba:	bf00      	nop
	__DSB(); // barrier
	(void)(instance->CR1); // read-back
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004cc0:	f3bf 8f5f 	dmb	sy
}
 8004cc4:	bf00      	nop
	__DMB();

    instance->BRR = usartdiv;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ccc:	f3bf 8f4f 	dsb	sy
}
 8004cd0:	bf00      	nop
    __DSB();
    (void)(instance->BRR);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	689b      	ldr	r3, [r3, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8004cd6:	f3bf 8f5f 	dmb	sy
}
 8004cda:	bf00      	nop
    __DMB();

    instance->CR1 |= USART_CR1_UE;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ce8:	f3bf 8f4f 	dsb	sy
}
 8004cec:	bf00      	nop
	__DSB();
	(void)(instance->CR1);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004cf2:	f3bf 8f5f 	dmb	sy
}
 8004cf6:	bf00      	nop
	__DMB();

	return 1;
 8004cf8:	2301      	movs	r3, #1
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40011000 	.word	0x40011000
 8004d08:	40011400 	.word	0x40011400

08004d0c <UartRcvr_send>:
	if(uart_rcvr == NULL || uart_rcvr->huart == NULL) return HAL_ERROR;
	return HAL_UART_Transmit(uart_rcvr->huart, (uint8_t*)&c, 1, UART_TX_TIMEOUT);
}

HAL_StatusTypeDef UartRcvr_send(uart_receiver_t *uart_rcvr, const uint8_t* str, uint16_t len)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	4613      	mov	r3, r2
 8004d18:	80fb      	strh	r3, [r7, #6]
	if(uart_rcvr == NULL || uart_rcvr->huart == NULL) return HAL_ERROR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <UartRcvr_send+0x1c>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <UartRcvr_send+0x20>
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e008      	b.n	8004d3e <UartRcvr_send+0x32>
	return HAL_UART_Transmit(uart_rcvr->huart, str, len, UART_TX_TIMEOUT);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004d30:	88fa      	ldrh	r2, [r7, #6]
 8004d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	f003 fc54 	bl	80085e4 <HAL_UART_Transmit>
 8004d3c:	4603      	mov	r3, r0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <UartRcvr_print>:

HAL_StatusTypeDef UartRcvr_print(uart_receiver_t *uart_rcvr, const char* str)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b082      	sub	sp, #8
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
 8004d4e:	6039      	str	r1, [r7, #0]
	return UartRcvr_send(uart_rcvr, (const uint8_t*)str, strlen(str));
 8004d50:	6838      	ldr	r0, [r7, #0]
 8004d52:	f7fb fa9d 	bl	8000290 <strlen>
 8004d56:	4603      	mov	r3, r0
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff ffd4 	bl	8004d0c <UartRcvr_send>
 8004d64:	4603      	mov	r3, r0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <UartRcvr_it_swap>:

void UartRcvr_it_swap(uart_receiver_t *uart_rcvr)
{
 8004d70:	b590      	push	{r4, r7, lr}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d053      	beq.n	8004e26 <UartRcvr_it_swap+0xb6>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d04f      	beq.n	8004e26 <UartRcvr_it_swap+0xb6>

	uint16_t next_index = (uart_rcvr->buffer_index_active + 1) % UART_RECEIVER_MAX_BUFFERS;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8004e38 <UartRcvr_it_swap+0xc8>)
 8004d8e:	fb83 1302 	smull	r1, r3, r3, r2
 8004d92:	1059      	asrs	r1, r3, #1
 8004d94:	17d3      	asrs	r3, r2, #31
 8004d96:	1ac9      	subs	r1, r1, r3
 8004d98:	460b      	mov	r3, r1
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	1ad1      	subs	r1, r2, r3
 8004da0:	460b      	mov	r3, r1
 8004da2:	81fb      	strh	r3, [r7, #14]
	if (uart_rcvr->buffers[next_index].data != NULL) return;
 8004da4:	89fa      	ldrh	r2, [r7, #14]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d13c      	bne.n	8004e2a <UartRcvr_it_swap+0xba>

	uart_rcvr->buffers[next_index].data = (uint8_t*)malloc(uart_rcvr->buffer_pending.len + 1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004db4:	3301      	adds	r3, #1
 8004db6:	89fc      	ldrh	r4, [r7, #14]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f004 fddb 	bl	8009974 <malloc>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
	if (uart_rcvr->buffers[next_index].data == NULL) return;
 8004dc8:	89fa      	ldrh	r2, [r7, #14]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d02c      	beq.n	8004e2e <UartRcvr_it_swap+0xbe>

	memcpy(uart_rcvr->buffers[next_index].data, uart_rcvr->buffer_pending.data, uart_rcvr->buffer_pending.len);
 8004dd4:	89fa      	ldrh	r2, [r7, #14]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004de4:	461a      	mov	r2, r3
 8004de6:	f005 fe62 	bl	800aaae <memcpy>
	uart_rcvr->buffers[next_index].data[uart_rcvr->buffer_pending.len] = '\0';
 8004dea:	89fa      	ldrh	r2, [r7, #14]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8004df6:	4413      	add	r3, r2
 8004df8:	2200      	movs	r2, #0
 8004dfa:	701a      	strb	r2, [r3, #0]
	uart_rcvr->buffers[next_index].len = uart_rcvr->buffer_pending.len;
 8004dfc:	89fb      	ldrh	r3, [r7, #14]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	8e91      	ldrh	r1, [r2, #52]	@ 0x34
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	460a      	mov	r2, r1
 8004e0a:	809a      	strh	r2, [r3, #4]
	uart_rcvr->buffers[next_index].processed = 0;
 8004e0c:	89fb      	ldrh	r3, [r7, #14]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4413      	add	r3, r2
 8004e14:	2200      	movs	r2, #0
 8004e16:	80da      	strh	r2, [r3, #6]

	uart_rcvr->buffer_index_active = next_index;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	89fa      	ldrh	r2, [r7, #14]
 8004e1c:	871a      	strh	r2, [r3, #56]	@ 0x38
	uart_rcvr->buffer_pending.len = 0;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	869a      	strh	r2, [r3, #52]	@ 0x34
 8004e24:	e004      	b.n	8004e30 <UartRcvr_it_swap+0xc0>
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 8004e26:	bf00      	nop
 8004e28:	e002      	b.n	8004e30 <UartRcvr_it_swap+0xc0>
	if (uart_rcvr->buffers[next_index].data != NULL) return;
 8004e2a:	bf00      	nop
 8004e2c:	e000      	b.n	8004e30 <UartRcvr_it_swap+0xc0>
	if (uart_rcvr->buffers[next_index].data == NULL) return;
 8004e2e:	bf00      	nop
}
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd90      	pop	{r4, r7, pc}
 8004e36:	bf00      	nop
 8004e38:	66666667 	.word	0x66666667

08004e3c <UartRcvr_it_process>:


void UartRcvr_it_process(uart_receiver_t *uart_rcvr, uint16_t offset, uint16_t size)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	807b      	strh	r3, [r7, #2]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	803b      	strh	r3, [r7, #0]
	uint16_t size_left = ((uart_rcvr->buffer_pending.len + size) <= UART_RECEIVER_MAX_BUFFER_LENGTH)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8004e50:	461a      	mov	r2, r3
 8004e52:	883b      	ldrh	r3, [r7, #0]
 8004e54:	4413      	add	r3, r2
 8004e56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e5a:	d905      	bls.n	8004e68 <UartRcvr_it_process+0x2c>
			? size
			: (UART_RECEIVER_MAX_BUFFER_LENGTH - uart_rcvr->buffer_pending.len);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
	uint16_t size_left = ((uart_rcvr->buffer_pending.len + size) <= UART_RECEIVER_MAX_BUFFER_LENGTH)
 8004e60:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	e000      	b.n	8004e6a <UartRcvr_it_process+0x2e>
 8004e68:	883b      	ldrh	r3, [r7, #0]
 8004e6a:	81fb      	strh	r3, [r7, #14]
	if(size_left != 0)
 8004e6c:	89fb      	ldrh	r3, [r7, #14]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d013      	beq.n	8004e9a <UartRcvr_it_process+0x5e>
	{
		memcpy(uart_rcvr->buffer_pending.data + uart_rcvr->buffer_pending.len, uart_rcvr->buffer_active.data + offset, size_left);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8004e7a:	1898      	adds	r0, r3, r2
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e80:	887b      	ldrh	r3, [r7, #2]
 8004e82:	4413      	add	r3, r2
 8004e84:	89fa      	ldrh	r2, [r7, #14]
 8004e86:	4619      	mov	r1, r3
 8004e88:	f005 fe11 	bl	800aaae <memcpy>
		uart_rcvr->buffer_pending.len += size_left;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8004e90:	89fb      	ldrh	r3, [r7, #14]
 8004e92:	4413      	add	r3, r2
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	869a      	strh	r2, [r3, #52]	@ 0x34
	}
	if (size_left != size) {
 8004e9a:	89fa      	ldrh	r2, [r7, #14]
 8004e9c:	883b      	ldrh	r3, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d011      	beq.n	8004ec6 <UartRcvr_it_process+0x8a>
		UartRcvr_it_swap(uart_rcvr);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff ff64 	bl	8004d70 <UartRcvr_it_swap>
		UartRcvr_it_process(uart_rcvr, (offset + size_left) % UART_RECEIVER_CIRCULAR_BUFFER_SIZE, size - size_left);
 8004ea8:	887a      	ldrh	r2, [r7, #2]
 8004eaa:	89fb      	ldrh	r3, [r7, #14]
 8004eac:	4413      	add	r3, r2
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb4:	b299      	uxth	r1, r3
 8004eb6:	883a      	ldrh	r2, [r7, #0]
 8004eb8:	89fb      	ldrh	r3, [r7, #14]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7ff ffbb 	bl	8004e3c <UartRcvr_it_process>
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	3710      	adds	r7, #16
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <UartRcvr_it_trigger>:

void UartRcvr_it_trigger(uart_receiver_t *uart_rcvr, uint16_t pos)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	807b      	strh	r3, [r7, #2]
	if(uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d031      	beq.n	8004f44 <UartRcvr_it_trigger+0x76>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d02d      	beq.n	8004f44 <UartRcvr_it_trigger+0x76>
	if(uart_rcvr->old_pos != pos)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8004eec:	887a      	ldrh	r2, [r7, #2]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d029      	beq.n	8004f46 <UartRcvr_it_trigger+0x78>
	{
		if(pos > uart_rcvr->old_pos)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8004ef6:	887a      	ldrh	r2, [r7, #2]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d90b      	bls.n	8004f14 <UartRcvr_it_trigger+0x46>
		{
			UartRcvr_it_process(uart_rcvr, uart_rcvr->old_pos, pos - uart_rcvr->old_pos);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8004f04:	887a      	ldrh	r2, [r7, #2]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ff95 	bl	8004e3c <UartRcvr_it_process>
 8004f12:	e013      	b.n	8004f3c <UartRcvr_it_trigger+0x6e>
		}
		else
		{
			UartRcvr_it_process(uart_rcvr, uart_rcvr->old_pos, UART_RECEIVER_CIRCULAR_BUFFER_SIZE - uart_rcvr->old_pos);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8004f1c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f7ff ff89 	bl	8004e3c <UartRcvr_it_process>
			if(pos > 0)
 8004f2a:	887b      	ldrh	r3, [r7, #2]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d005      	beq.n	8004f3c <UartRcvr_it_trigger+0x6e>
			{
				UartRcvr_it_process(uart_rcvr, 0, pos);
 8004f30:	887b      	ldrh	r3, [r7, #2]
 8004f32:	461a      	mov	r2, r3
 8004f34:	2100      	movs	r1, #0
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff ff80 	bl	8004e3c <UartRcvr_it_process>
			}
		}
		uart_rcvr->old_pos = pos;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	887a      	ldrh	r2, [r7, #2]
 8004f40:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8004f42:	e000      	b.n	8004f46 <UartRcvr_it_trigger+0x78>
	if(uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 8004f44:	bf00      	nop
	}
}
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UartRcvr_it_error>:

void UartRcvr_it_error(uart_receiver_t *uart_rcvr)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d010      	beq.n	8004f7c <UartRcvr_it_error+0x30>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00c      	beq.n	8004f7c <UartRcvr_it_error+0x30>
	uart_rcvr->old_pos = 0;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	879a      	strh	r2, [r3, #60]	@ 0x3c
	HAL_UARTEx_ReceiveToIdle_DMA(uart_rcvr->huart, uart_rcvr->buffer_active.data, UART_RECEIVER_CIRCULAR_BUFFER_SIZE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f74:	4619      	mov	r1, r3
 8004f76:	f003 fbc0 	bl	80086fa <HAL_UARTEx_ReceiveToIdle_DMA>
 8004f7a:	e000      	b.n	8004f7e <UartRcvr_it_error+0x32>
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 8004f7c:	bf00      	nop
}
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f88:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc4 <HAL_Init+0x40>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004fc4 <HAL_Init+0x40>)
 8004f8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f94:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <HAL_Init+0x40>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a0a      	ldr	r2, [pc, #40]	@ (8004fc4 <HAL_Init+0x40>)
 8004f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fa0:	4b08      	ldr	r3, [pc, #32]	@ (8004fc4 <HAL_Init+0x40>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a07      	ldr	r2, [pc, #28]	@ (8004fc4 <HAL_Init+0x40>)
 8004fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004fac:	2003      	movs	r0, #3
 8004fae:	f000 ffb7 	bl	8005f20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004fb2:	200f      	movs	r0, #15
 8004fb4:	f000 f808 	bl	8004fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fb8:	f7fc fdca 	bl	8001b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40023c00 	.word	0x40023c00

08004fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fd0:	4b12      	ldr	r3, [pc, #72]	@ (800501c <HAL_InitTick+0x54>)
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	4b12      	ldr	r3, [pc, #72]	@ (8005020 <HAL_InitTick+0x58>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 ffcf 	bl	8005f8a <HAL_SYSTICK_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e00e      	b.n	8005014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b0f      	cmp	r3, #15
 8004ffa:	d80a      	bhi.n	8005012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	f04f 30ff 	mov.w	r0, #4294967295
 8005004:	f000 ff97 	bl	8005f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005008:	4a06      	ldr	r2, [pc, #24]	@ (8005024 <HAL_InitTick+0x5c>)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	e000      	b.n	8005014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
}
 8005014:	4618      	mov	r0, r3
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000000 	.word	0x20000000
 8005020:	20000008 	.word	0x20000008
 8005024:	20000004 	.word	0x20000004

08005028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800502c:	4b06      	ldr	r3, [pc, #24]	@ (8005048 <HAL_IncTick+0x20>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	4b06      	ldr	r3, [pc, #24]	@ (800504c <HAL_IncTick+0x24>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4413      	add	r3, r2
 8005038:	4a04      	ldr	r2, [pc, #16]	@ (800504c <HAL_IncTick+0x24>)
 800503a:	6013      	str	r3, [r2, #0]
}
 800503c:	bf00      	nop
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	20000008 	.word	0x20000008
 800504c:	20002394 	.word	0x20002394

08005050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  return uwTick;
 8005054:	4b03      	ldr	r3, [pc, #12]	@ (8005064 <HAL_GetTick+0x14>)
 8005056:	681b      	ldr	r3, [r3, #0]
}
 8005058:	4618      	mov	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20002394 	.word	0x20002394

08005068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005070:	f7ff ffee 	bl	8005050 <HAL_GetTick>
 8005074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005080:	d005      	beq.n	800508e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005082:	4b0a      	ldr	r3, [pc, #40]	@ (80050ac <HAL_Delay+0x44>)
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	461a      	mov	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800508e:	bf00      	nop
 8005090:	f7ff ffde 	bl	8005050 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	429a      	cmp	r2, r3
 800509e:	d8f7      	bhi.n	8005090 <HAL_Delay+0x28>
  {
  }
}
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20000008 	.word	0x20000008

080050b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e0ed      	b.n	800529e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fb ffb4 	bl	800103c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050e4:	f7ff ffb4 	bl	8005050 <HAL_GetTick>
 80050e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80050ea:	e012      	b.n	8005112 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050ec:	f7ff ffb0 	bl	8005050 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b0a      	cmp	r3, #10
 80050f8:	d90b      	bls.n	8005112 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2205      	movs	r2, #5
 800510a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e0c5      	b.n	800529e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	2b00      	cmp	r3, #0
 800511e:	d0e5      	beq.n	80050ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0202 	bic.w	r2, r2, #2
 800512e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005130:	f7ff ff8e 	bl	8005050 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005136:	e012      	b.n	800515e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005138:	f7ff ff8a 	bl	8005050 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b0a      	cmp	r3, #10
 8005144:	d90b      	bls.n	800515e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2205      	movs	r2, #5
 8005156:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e09f      	b.n	800529e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1e5      	bne.n	8005138 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	7e1b      	ldrb	r3, [r3, #24]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d108      	bne.n	8005186 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	e007      	b.n	8005196 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005194:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	7e5b      	ldrb	r3, [r3, #25]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d108      	bne.n	80051b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	e007      	b.n	80051c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	7e9b      	ldrb	r3, [r3, #26]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d108      	bne.n	80051da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0220 	orr.w	r2, r2, #32
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	e007      	b.n	80051ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0220 	bic.w	r2, r2, #32
 80051e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	7edb      	ldrb	r3, [r3, #27]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d108      	bne.n	8005204 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0210 	bic.w	r2, r2, #16
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	e007      	b.n	8005214 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0210 	orr.w	r2, r2, #16
 8005212:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	7f1b      	ldrb	r3, [r3, #28]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d108      	bne.n	800522e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0208 	orr.w	r2, r2, #8
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e007      	b.n	800523e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0208 	bic.w	r2, r2, #8
 800523c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	7f5b      	ldrb	r3, [r3, #29]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d108      	bne.n	8005258 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0204 	orr.w	r2, r2, #4
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	e007      	b.n	8005268 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 0204 	bic.w	r2, r2, #4
 8005266:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	ea42 0103 	orr.w	r1, r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	1e5a      	subs	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3710      	adds	r7, #16
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052be:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80052c0:	7cfb      	ldrb	r3, [r7, #19]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d003      	beq.n	80052ce <HAL_CAN_ConfigFilter+0x26>
 80052c6:	7cfb      	ldrb	r3, [r7, #19]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	f040 80be 	bne.w	800544a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80052ce:	4b65      	ldr	r3, [pc, #404]	@ (8005464 <HAL_CAN_ConfigFilter+0x1bc>)
 80052d0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80052d8:	f043 0201 	orr.w	r2, r3, #1
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80052e8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	431a      	orrs	r2, r3
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	2201      	movs	r2, #1
 8005310:	fa02 f303 	lsl.w	r3, r2, r3
 8005314:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	43db      	mvns	r3, r3
 8005320:	401a      	ands	r2, r3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d123      	bne.n	8005378 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	43db      	mvns	r3, r3
 800533a:	401a      	ands	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005352:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	3248      	adds	r2, #72	@ 0x48
 8005358:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800536c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800536e:	6979      	ldr	r1, [r7, #20]
 8005370:	3348      	adds	r3, #72	@ 0x48
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	440b      	add	r3, r1
 8005376:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d122      	bne.n	80053c6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	431a      	orrs	r2, r3
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80053a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	3248      	adds	r2, #72	@ 0x48
 80053a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80053ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80053bc:	6979      	ldr	r1, [r7, #20]
 80053be:	3348      	adds	r3, #72	@ 0x48
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	440b      	add	r3, r1
 80053c4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d109      	bne.n	80053e2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	43db      	mvns	r3, r3
 80053d8:	401a      	ands	r2, r3
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80053e0:	e007      	b.n	80053f2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	43db      	mvns	r3, r3
 8005404:	401a      	ands	r2, r3
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800540c:	e007      	b.n	800541e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	431a      	orrs	r2, r3
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d107      	bne.n	8005436 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	431a      	orrs	r2, r3
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800543c:	f023 0201 	bic.w	r2, r3, #1
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	e006      	b.n	8005458 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
  }
}
 8005458:	4618      	mov	r0, r3
 800545a:	371c      	adds	r7, #28
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	40006400 	.word	0x40006400

08005468 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b01      	cmp	r3, #1
 800547a:	d12e      	bne.n	80054da <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0201 	bic.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005494:	f7ff fddc 	bl	8005050 <HAL_GetTick>
 8005498:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800549a:	e012      	b.n	80054c2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800549c:	f7ff fdd8 	bl	8005050 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b0a      	cmp	r3, #10
 80054a8:	d90b      	bls.n	80054c2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2205      	movs	r2, #5
 80054ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e012      	b.n	80054e8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e5      	bne.n	800549c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	e006      	b.n	80054e8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054de:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
  }
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b089      	sub	sp, #36	@ 0x24
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005504:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800550e:	7ffb      	ldrb	r3, [r7, #31]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d003      	beq.n	800551c <HAL_CAN_AddTxMessage+0x2c>
 8005514:	7ffb      	ldrb	r3, [r7, #31]
 8005516:	2b02      	cmp	r3, #2
 8005518:	f040 80ad 	bne.w	8005676 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10a      	bne.n	800553c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800552c:	2b00      	cmp	r3, #0
 800552e:	d105      	bne.n	800553c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005536:	2b00      	cmp	r3, #0
 8005538:	f000 8095 	beq.w	8005666 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	0e1b      	lsrs	r3, r3, #24
 8005540:	f003 0303 	and.w	r3, r3, #3
 8005544:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005546:	2201      	movs	r2, #1
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	409a      	lsls	r2, r3
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10d      	bne.n	8005574 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005562:	68f9      	ldr	r1, [r7, #12]
 8005564:	6809      	ldr	r1, [r1, #0]
 8005566:	431a      	orrs	r2, r3
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3318      	adds	r3, #24
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	440b      	add	r3, r1
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e00f      	b.n	8005594 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800557e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005584:	68f9      	ldr	r1, [r7, #12]
 8005586:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005588:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	3318      	adds	r3, #24
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	440b      	add	r3, r1
 8005592:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6819      	ldr	r1, [r3, #0]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	691a      	ldr	r2, [r3, #16]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	3318      	adds	r3, #24
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	440b      	add	r3, r1
 80055a4:	3304      	adds	r3, #4
 80055a6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	7d1b      	ldrb	r3, [r3, #20]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d111      	bne.n	80055d4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	3318      	adds	r3, #24
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	4413      	add	r3, r2
 80055bc:	3304      	adds	r3, #4
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	6811      	ldr	r1, [r2, #0]
 80055c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	3318      	adds	r3, #24
 80055cc:	011b      	lsls	r3, r3, #4
 80055ce:	440b      	add	r3, r1
 80055d0:	3304      	adds	r3, #4
 80055d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3307      	adds	r3, #7
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	061a      	lsls	r2, r3, #24
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3306      	adds	r3, #6
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	041b      	lsls	r3, r3, #16
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3305      	adds	r3, #5
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	021b      	lsls	r3, r3, #8
 80055ee:	4313      	orrs	r3, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	3204      	adds	r2, #4
 80055f4:	7812      	ldrb	r2, [r2, #0]
 80055f6:	4610      	mov	r0, r2
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	6811      	ldr	r1, [r2, #0]
 80055fc:	ea43 0200 	orr.w	r2, r3, r0
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	440b      	add	r3, r1
 8005606:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800560a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	3303      	adds	r3, #3
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	061a      	lsls	r2, r3, #24
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3302      	adds	r3, #2
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	041b      	lsls	r3, r3, #16
 800561c:	431a      	orrs	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3301      	adds	r3, #1
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	021b      	lsls	r3, r3, #8
 8005626:	4313      	orrs	r3, r2
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	7812      	ldrb	r2, [r2, #0]
 800562c:	4610      	mov	r0, r2
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	6811      	ldr	r1, [r2, #0]
 8005632:	ea43 0200 	orr.w	r2, r3, r0
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	440b      	add	r3, r1
 800563c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005640:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	3318      	adds	r3, #24
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	4413      	add	r3, r2
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	6811      	ldr	r1, [r2, #0]
 8005654:	f043 0201 	orr.w	r2, r3, #1
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	3318      	adds	r3, #24
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	440b      	add	r3, r1
 8005660:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	e00e      	b.n	8005684 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e006      	b.n	8005684 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
  }
}
 8005684:	4618      	mov	r0, r3
 8005686:	3724      	adds	r7, #36	@ 0x24
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d003      	beq.n	80056b4 <HAL_CAN_GetRxMessage+0x24>
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	f040 8103 	bne.w	80058ba <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10e      	bne.n	80056d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d116      	bne.n	80056f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e0f7      	b.n	80058c8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d107      	bne.n	80056f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e0e8      	b.n	80058c8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	331b      	adds	r3, #27
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	4413      	add	r3, r2
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0204 	and.w	r2, r3, #4
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10c      	bne.n	800572e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	331b      	adds	r3, #27
 800571c:	011b      	lsls	r3, r3, #4
 800571e:	4413      	add	r3, r2
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	0d5b      	lsrs	r3, r3, #21
 8005724:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	601a      	str	r2, [r3, #0]
 800572c:	e00b      	b.n	8005746 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	331b      	adds	r3, #27
 8005736:	011b      	lsls	r3, r3, #4
 8005738:	4413      	add	r3, r2
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	08db      	lsrs	r3, r3, #3
 800573e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	331b      	adds	r3, #27
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	4413      	add	r3, r2
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0202 	and.w	r2, r3, #2
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	331b      	adds	r3, #27
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	4413      	add	r3, r2
 8005768:	3304      	adds	r3, #4
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2208      	movs	r2, #8
 8005778:	611a      	str	r2, [r3, #16]
 800577a:	e00b      	b.n	8005794 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	331b      	adds	r3, #27
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	4413      	add	r3, r2
 8005788:	3304      	adds	r3, #4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 020f 	and.w	r2, r3, #15
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	331b      	adds	r3, #27
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	4413      	add	r3, r2
 80057a0:	3304      	adds	r3, #4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	0a1b      	lsrs	r3, r3, #8
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	331b      	adds	r3, #27
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	4413      	add	r3, r2
 80057b8:	3304      	adds	r3, #4
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	0c1b      	lsrs	r3, r3, #16
 80057be:	b29a      	uxth	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	011b      	lsls	r3, r3, #4
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	0a1a      	lsrs	r2, r3, #8
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	3301      	adds	r3, #1
 80057f0:	b2d2      	uxtb	r2, r2
 80057f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	0c1a      	lsrs	r2, r3, #16
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	3302      	adds	r3, #2
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	4413      	add	r3, r2
 8005818:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	0e1a      	lsrs	r2, r3, #24
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	3303      	adds	r3, #3
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	4413      	add	r3, r2
 8005832:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	3304      	adds	r3, #4
 800583c:	b2d2      	uxtb	r2, r2
 800583e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	011b      	lsls	r3, r3, #4
 8005848:	4413      	add	r3, r2
 800584a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	0a1a      	lsrs	r2, r3, #8
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	3305      	adds	r3, #5
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	4413      	add	r3, r2
 8005864:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	0c1a      	lsrs	r2, r3, #16
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	3306      	adds	r3, #6
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	4413      	add	r3, r2
 800587e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	0e1a      	lsrs	r2, r3, #24
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	3307      	adds	r3, #7
 800588a:	b2d2      	uxtb	r2, r2
 800588c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d108      	bne.n	80058a6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0220 	orr.w	r2, r2, #32
 80058a2:	60da      	str	r2, [r3, #12]
 80058a4:	e007      	b.n	80058b6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0220 	orr.w	r2, r2, #32
 80058b4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	e006      	b.n	80058c8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058be:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
  }
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	371c      	adds	r7, #28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058e4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d002      	beq.n	80058f2 <HAL_CAN_ActivateNotification+0x1e>
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d109      	bne.n	8005906 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6959      	ldr	r1, [r3, #20]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005902:	2300      	movs	r3, #0
 8005904:	e006      	b.n	8005914 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
  }
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b08a      	sub	sp, #40	@ 0x28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005928:	2300      	movs	r3, #0
 800592a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d07c      	beq.n	8005a60 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b00      	cmp	r3, #0
 800596e:	d023      	beq.n	80059b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2201      	movs	r2, #1
 8005976:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f983 	bl	8005c8e <HAL_CAN_TxMailbox0CompleteCallback>
 8005988:	e016      	b.n	80059b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d004      	beq.n	800599e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005996:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24
 800599c:	e00c      	b.n	80059b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	f003 0308 	and.w	r3, r3, #8
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d004      	beq.n	80059b2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80059ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80059b0:	e002      	b.n	80059b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f989 	bl	8005cca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d024      	beq.n	8005a0c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f963 	bl	8005ca2 <HAL_CAN_TxMailbox1CompleteCallback>
 80059dc:	e016      	b.n	8005a0c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d004      	beq.n	80059f2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80059f0:	e00c      	b.n	8005a0c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80059fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a04:	e002      	b.n	8005a0c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f969 	bl	8005cde <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d024      	beq.n	8005a60 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005a1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f943 	bl	8005cb6 <HAL_CAN_TxMailbox2CompleteCallback>
 8005a30:	e016      	b.n	8005a60 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d004      	beq.n	8005a46 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a44:	e00c      	b.n	8005a60 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a58:	e002      	b.n	8005a60 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f949 	bl	8005cf2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00c      	beq.n	8005a84 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d007      	beq.n	8005a84 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005a7a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2210      	movs	r2, #16
 8005a82:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00b      	beq.n	8005aa6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d006      	beq.n	8005aa6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f930 	bl	8005d06 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d009      	beq.n	8005ac4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f003 0303 	and.w	r3, r3, #3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7fb ff00 	bl	80018c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00c      	beq.n	8005ae8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d007      	beq.n	8005ae8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ade:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2210      	movs	r2, #16
 8005ae6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005ae8:	6a3b      	ldr	r3, [r7, #32]
 8005aea:	f003 0320 	and.w	r3, r3, #32
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00b      	beq.n	8005b0a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d006      	beq.n	8005b0a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2208      	movs	r2, #8
 8005b02:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f912 	bl	8005d2e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d009      	beq.n	8005b28 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f8f9 	bl	8005d1a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00b      	beq.n	8005b4a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d006      	beq.n	8005b4a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2210      	movs	r2, #16
 8005b42:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f8fc 	bl	8005d42 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00b      	beq.n	8005b6c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f003 0308 	and.w	r3, r3, #8
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d006      	beq.n	8005b6c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2208      	movs	r2, #8
 8005b64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f8f5 	bl	8005d56 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d07b      	beq.n	8005c6e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d072      	beq.n	8005c66 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d008      	beq.n	8005b9c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	f043 0301 	orr.w	r3, r3, #1
 8005b9a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	f043 0302 	orr.w	r3, r3, #2
 8005bb6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d008      	beq.n	8005bd4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bce:	f043 0304 	orr.w	r3, r3, #4
 8005bd2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d043      	beq.n	8005c66 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d03e      	beq.n	8005c66 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005bee:	2b60      	cmp	r3, #96	@ 0x60
 8005bf0:	d02b      	beq.n	8005c4a <HAL_CAN_IRQHandler+0x32a>
 8005bf2:	2b60      	cmp	r3, #96	@ 0x60
 8005bf4:	d82e      	bhi.n	8005c54 <HAL_CAN_IRQHandler+0x334>
 8005bf6:	2b50      	cmp	r3, #80	@ 0x50
 8005bf8:	d022      	beq.n	8005c40 <HAL_CAN_IRQHandler+0x320>
 8005bfa:	2b50      	cmp	r3, #80	@ 0x50
 8005bfc:	d82a      	bhi.n	8005c54 <HAL_CAN_IRQHandler+0x334>
 8005bfe:	2b40      	cmp	r3, #64	@ 0x40
 8005c00:	d019      	beq.n	8005c36 <HAL_CAN_IRQHandler+0x316>
 8005c02:	2b40      	cmp	r3, #64	@ 0x40
 8005c04:	d826      	bhi.n	8005c54 <HAL_CAN_IRQHandler+0x334>
 8005c06:	2b30      	cmp	r3, #48	@ 0x30
 8005c08:	d010      	beq.n	8005c2c <HAL_CAN_IRQHandler+0x30c>
 8005c0a:	2b30      	cmp	r3, #48	@ 0x30
 8005c0c:	d822      	bhi.n	8005c54 <HAL_CAN_IRQHandler+0x334>
 8005c0e:	2b10      	cmp	r3, #16
 8005c10:	d002      	beq.n	8005c18 <HAL_CAN_IRQHandler+0x2f8>
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d005      	beq.n	8005c22 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005c16:	e01d      	b.n	8005c54 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1a:	f043 0308 	orr.w	r3, r3, #8
 8005c1e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005c20:	e019      	b.n	8005c56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c24:	f043 0310 	orr.w	r3, r3, #16
 8005c28:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005c2a:	e014      	b.n	8005c56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	f043 0320 	orr.w	r3, r3, #32
 8005c32:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005c34:	e00f      	b.n	8005c56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005c3e:	e00a      	b.n	8005c56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005c48:	e005      	b.n	8005c56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005c52:	e000      	b.n	8005c56 <HAL_CAN_IRQHandler+0x336>
            break;
 8005c54:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699a      	ldr	r2, [r3, #24]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005c64:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f872 	bl	8005d6a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005c86:	bf00      	nop
 8005c88:	3728      	adds	r7, #40	@ 0x28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c8e:	b480      	push	{r7}
 8005c90:	b083      	sub	sp, #12
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b083      	sub	sp, #12
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005cfa:	bf00      	nop
 8005cfc:	370c      	adds	r7, #12
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
	...

08005d80 <__NVIC_SetPriorityGrouping>:
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d90:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005db2:	4a04      	ldr	r2, [pc, #16]	@ (8005dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	60d3      	str	r3, [r2, #12]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	e000ed00 	.word	0xe000ed00

08005dc8 <__NVIC_GetPriorityGrouping>:
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dcc:	4b04      	ldr	r3, [pc, #16]	@ (8005de0 <__NVIC_GetPriorityGrouping+0x18>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	0a1b      	lsrs	r3, r3, #8
 8005dd2:	f003 0307 	and.w	r3, r3, #7
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	e000ed00 	.word	0xe000ed00

08005de4 <__NVIC_EnableIRQ>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	db0b      	blt.n	8005e0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	f003 021f 	and.w	r2, r3, #31
 8005dfc:	4907      	ldr	r1, [pc, #28]	@ (8005e1c <__NVIC_EnableIRQ+0x38>)
 8005dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2001      	movs	r0, #1
 8005e06:	fa00 f202 	lsl.w	r2, r0, r2
 8005e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	e000e100 	.word	0xe000e100

08005e20 <__NVIC_SetPriority>:
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4603      	mov	r3, r0
 8005e28:	6039      	str	r1, [r7, #0]
 8005e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	db0a      	blt.n	8005e4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	490c      	ldr	r1, [pc, #48]	@ (8005e6c <__NVIC_SetPriority+0x4c>)
 8005e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e3e:	0112      	lsls	r2, r2, #4
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	440b      	add	r3, r1
 8005e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005e48:	e00a      	b.n	8005e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	4908      	ldr	r1, [pc, #32]	@ (8005e70 <__NVIC_SetPriority+0x50>)
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	3b04      	subs	r3, #4
 8005e58:	0112      	lsls	r2, r2, #4
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	440b      	add	r3, r1
 8005e5e:	761a      	strb	r2, [r3, #24]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	e000e100 	.word	0xe000e100
 8005e70:	e000ed00 	.word	0xe000ed00

08005e74 <NVIC_EncodePriority>:
{
 8005e74:	b480      	push	{r7}
 8005e76:	b089      	sub	sp, #36	@ 0x24
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f1c3 0307 	rsb	r3, r3, #7
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	bf28      	it	cs
 8005e92:	2304      	movcs	r3, #4
 8005e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	2b06      	cmp	r3, #6
 8005e9c:	d902      	bls.n	8005ea4 <NVIC_EncodePriority+0x30>
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	3b03      	subs	r3, #3
 8005ea2:	e000      	b.n	8005ea6 <NVIC_EncodePriority+0x32>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	43da      	mvns	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	401a      	ands	r2, r3
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec6:	43d9      	mvns	r1, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ecc:	4313      	orrs	r3, r2
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3724      	adds	r7, #36	@ 0x24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
	...

08005edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005eec:	d301      	bcc.n	8005ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e00f      	b.n	8005f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ef2:	4a0a      	ldr	r2, [pc, #40]	@ (8005f1c <SysTick_Config+0x40>)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005efa:	210f      	movs	r1, #15
 8005efc:	f04f 30ff 	mov.w	r0, #4294967295
 8005f00:	f7ff ff8e 	bl	8005e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f04:	4b05      	ldr	r3, [pc, #20]	@ (8005f1c <SysTick_Config+0x40>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f0a:	4b04      	ldr	r3, [pc, #16]	@ (8005f1c <SysTick_Config+0x40>)
 8005f0c:	2207      	movs	r2, #7
 8005f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	e000e010 	.word	0xe000e010

08005f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff ff29 	bl	8005d80 <__NVIC_SetPriorityGrouping>
}
 8005f2e:	bf00      	nop
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b086      	sub	sp, #24
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	60b9      	str	r1, [r7, #8]
 8005f40:	607a      	str	r2, [r7, #4]
 8005f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f48:	f7ff ff3e 	bl	8005dc8 <__NVIC_GetPriorityGrouping>
 8005f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	6978      	ldr	r0, [r7, #20]
 8005f54:	f7ff ff8e 	bl	8005e74 <NVIC_EncodePriority>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f5e:	4611      	mov	r1, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7ff ff5d 	bl	8005e20 <__NVIC_SetPriority>
}
 8005f66:	bf00      	nop
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	4603      	mov	r3, r0
 8005f76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff ff31 	bl	8005de4 <__NVIC_EnableIRQ>
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}

08005f8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b082      	sub	sp, #8
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff ffa2 	bl	8005edc <SysTick_Config>
 8005f98:	4603      	mov	r3, r0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
	...

08005fa4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005fb0:	f7ff f84e 	bl	8005050 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e099      	b.n	80060f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0201 	bic.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fe0:	e00f      	b.n	8006002 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fe2:	f7ff f835 	bl	8005050 <HAL_GetTick>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	1ad3      	subs	r3, r2, r3
 8005fec:	2b05      	cmp	r3, #5
 8005fee:	d908      	bls.n	8006002 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e078      	b.n	80060f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e8      	bne.n	8005fe2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4b38      	ldr	r3, [pc, #224]	@ (80060fc <HAL_DMA_Init+0x158>)
 800601c:	4013      	ands	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800602e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800603a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	699b      	ldr	r3, [r3, #24]
 8006040:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006046:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006058:	2b04      	cmp	r3, #4
 800605a:	d107      	bne.n	800606c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006064:	4313      	orrs	r3, r2
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4313      	orrs	r3, r2
 800606a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f023 0307 	bic.w	r3, r3, #7
 8006082:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006088:	697a      	ldr	r2, [r7, #20]
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006092:	2b04      	cmp	r3, #4
 8006094:	d117      	bne.n	80060c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	4313      	orrs	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00e      	beq.n	80060c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fb01 	bl	80066b0 <DMA_CheckFifoParam>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2240      	movs	r2, #64	@ 0x40
 80060b8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80060c2:	2301      	movs	r3, #1
 80060c4:	e016      	b.n	80060f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fab8 	bl	8006644 <DMA_CalcBaseAndBitshift>
 80060d4:	4603      	mov	r3, r0
 80060d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060dc:	223f      	movs	r2, #63	@ 0x3f
 80060de:	409a      	lsls	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3718      	adds	r7, #24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	f010803f 	.word	0xf010803f

08006100 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	607a      	str	r2, [r7, #4]
 800610c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006116:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_DMA_Start_IT+0x26>
 8006122:	2302      	movs	r3, #2
 8006124:	e040      	b.n	80061a8 <HAL_DMA_Start_IT+0xa8>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b01      	cmp	r3, #1
 8006138:	d12f      	bne.n	800619a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2202      	movs	r2, #2
 800613e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	68b9      	ldr	r1, [r7, #8]
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 fa4a 	bl	80065e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006158:	223f      	movs	r2, #63	@ 0x3f
 800615a:	409a      	lsls	r2, r3
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0216 	orr.w	r2, r2, #22
 800616e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0208 	orr.w	r2, r2, #8
 8006186:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0201 	orr.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]
 8006198:	e005      	b.n	80061a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80061a2:	2302      	movs	r3, #2
 80061a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80061a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3718      	adds	r7, #24
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061bc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80061be:	f7fe ff47 	bl	8005050 <HAL_GetTick>
 80061c2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d008      	beq.n	80061e2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2280      	movs	r2, #128	@ 0x80
 80061d4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e052      	b.n	8006288 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f022 0216 	bic.w	r2, r2, #22
 80061f0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695a      	ldr	r2, [r3, #20]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006200:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	d103      	bne.n	8006212 <HAL_DMA_Abort+0x62>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800620e:	2b00      	cmp	r3, #0
 8006210:	d007      	beq.n	8006222 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0208 	bic.w	r2, r2, #8
 8006220:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f022 0201 	bic.w	r2, r2, #1
 8006230:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006232:	e013      	b.n	800625c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006234:	f7fe ff0c 	bl	8005050 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b05      	cmp	r3, #5
 8006240:	d90c      	bls.n	800625c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2203      	movs	r2, #3
 800624c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e015      	b.n	8006288 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e4      	bne.n	8006234 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800626e:	223f      	movs	r2, #63	@ 0x3f
 8006270:	409a      	lsls	r2, r3
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d004      	beq.n	80062ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2280      	movs	r2, #128	@ 0x80
 80062a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e00c      	b.n	80062c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2205      	movs	r2, #5
 80062b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0201 	bic.w	r2, r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b086      	sub	sp, #24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062e0:	4b8e      	ldr	r3, [pc, #568]	@ (800651c <HAL_DMA_IRQHandler+0x248>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a8e      	ldr	r2, [pc, #568]	@ (8006520 <HAL_DMA_IRQHandler+0x24c>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	0a9b      	lsrs	r3, r3, #10
 80062ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062fe:	2208      	movs	r2, #8
 8006300:	409a      	lsls	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	4013      	ands	r3, r2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d01a      	beq.n	8006340 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f003 0304 	and.w	r3, r3, #4
 8006314:	2b00      	cmp	r3, #0
 8006316:	d013      	beq.n	8006340 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0204 	bic.w	r2, r2, #4
 8006326:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632c:	2208      	movs	r2, #8
 800632e:	409a      	lsls	r2, r3
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006338:	f043 0201 	orr.w	r2, r3, #1
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006344:	2201      	movs	r2, #1
 8006346:	409a      	lsls	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d012      	beq.n	8006376 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00b      	beq.n	8006376 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006362:	2201      	movs	r2, #1
 8006364:	409a      	lsls	r2, r3
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636e:	f043 0202 	orr.w	r2, r3, #2
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800637a:	2204      	movs	r2, #4
 800637c:	409a      	lsls	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4013      	ands	r3, r2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d012      	beq.n	80063ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0302 	and.w	r3, r3, #2
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00b      	beq.n	80063ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006398:	2204      	movs	r2, #4
 800639a:	409a      	lsls	r2, r3
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063a4:	f043 0204 	orr.w	r2, r3, #4
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063b0:	2210      	movs	r2, #16
 80063b2:	409a      	lsls	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d043      	beq.n	8006444 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 0308 	and.w	r3, r3, #8
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d03c      	beq.n	8006444 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ce:	2210      	movs	r2, #16
 80063d0:	409a      	lsls	r2, r3
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d018      	beq.n	8006416 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d108      	bne.n	8006404 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d024      	beq.n	8006444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	4798      	blx	r3
 8006402:	e01f      	b.n	8006444 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01b      	beq.n	8006444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	4798      	blx	r3
 8006414:	e016      	b.n	8006444 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006420:	2b00      	cmp	r3, #0
 8006422:	d107      	bne.n	8006434 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f022 0208 	bic.w	r2, r2, #8
 8006432:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006448:	2220      	movs	r2, #32
 800644a:	409a      	lsls	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4013      	ands	r3, r2
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 808f 	beq.w	8006574 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0310 	and.w	r3, r3, #16
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8087 	beq.w	8006574 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800646a:	2220      	movs	r2, #32
 800646c:	409a      	lsls	r2, r3
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b05      	cmp	r3, #5
 800647c:	d136      	bne.n	80064ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0216 	bic.w	r2, r2, #22
 800648c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695a      	ldr	r2, [r3, #20]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800649c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d103      	bne.n	80064ae <HAL_DMA_IRQHandler+0x1da>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d007      	beq.n	80064be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0208 	bic.w	r2, r2, #8
 80064bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c2:	223f      	movs	r2, #63	@ 0x3f
 80064c4:	409a      	lsls	r2, r3
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d07e      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
        }
        return;
 80064ea:	e079      	b.n	80065e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01d      	beq.n	8006536 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d10d      	bne.n	8006524 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800650c:	2b00      	cmp	r3, #0
 800650e:	d031      	beq.n	8006574 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	4798      	blx	r3
 8006518:	e02c      	b.n	8006574 <HAL_DMA_IRQHandler+0x2a0>
 800651a:	bf00      	nop
 800651c:	20000000 	.word	0x20000000
 8006520:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d023      	beq.n	8006574 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	4798      	blx	r3
 8006534:	e01e      	b.n	8006574 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10f      	bne.n	8006564 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0210 	bic.w	r2, r2, #16
 8006552:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006578:	2b00      	cmp	r3, #0
 800657a:	d032      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d022      	beq.n	80065ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2205      	movs	r2, #5
 800658c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0201 	bic.w	r2, r2, #1
 800659e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	3301      	adds	r3, #1
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d307      	bcc.n	80065bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f2      	bne.n	80065a0 <HAL_DMA_IRQHandler+0x2cc>
 80065ba:	e000      	b.n	80065be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80065bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d005      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	4798      	blx	r3
 80065de:	e000      	b.n	80065e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80065e0:	bf00      	nop
    }
  }
}
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006604:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	2b40      	cmp	r3, #64	@ 0x40
 8006614:	d108      	bne.n	8006628 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006626:	e007      	b.n	8006638 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	60da      	str	r2, [r3, #12]
}
 8006638:	bf00      	nop
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	b2db      	uxtb	r3, r3
 8006652:	3b10      	subs	r3, #16
 8006654:	4a14      	ldr	r2, [pc, #80]	@ (80066a8 <DMA_CalcBaseAndBitshift+0x64>)
 8006656:	fba2 2303 	umull	r2, r3, r2, r3
 800665a:	091b      	lsrs	r3, r3, #4
 800665c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800665e:	4a13      	ldr	r2, [pc, #76]	@ (80066ac <DMA_CalcBaseAndBitshift+0x68>)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b03      	cmp	r3, #3
 8006670:	d909      	bls.n	8006686 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800667a:	f023 0303 	bic.w	r3, r3, #3
 800667e:	1d1a      	adds	r2, r3, #4
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	659a      	str	r2, [r3, #88]	@ 0x58
 8006684:	e007      	b.n	8006696 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800668e:	f023 0303 	bic.w	r3, r3, #3
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	aaaaaaab 	.word	0xaaaaaaab
 80066ac:	0800cd08 	.word	0x0800cd08

080066b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d11f      	bne.n	800670a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d856      	bhi.n	800677e <DMA_CheckFifoParam+0xce>
 80066d0:	a201      	add	r2, pc, #4	@ (adr r2, 80066d8 <DMA_CheckFifoParam+0x28>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	080066e9 	.word	0x080066e9
 80066dc:	080066fb 	.word	0x080066fb
 80066e0:	080066e9 	.word	0x080066e9
 80066e4:	0800677f 	.word	0x0800677f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d046      	beq.n	8006782 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066f8:	e043      	b.n	8006782 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006702:	d140      	bne.n	8006786 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006708:	e03d      	b.n	8006786 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006712:	d121      	bne.n	8006758 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b03      	cmp	r3, #3
 8006718:	d837      	bhi.n	800678a <DMA_CheckFifoParam+0xda>
 800671a:	a201      	add	r2, pc, #4	@ (adr r2, 8006720 <DMA_CheckFifoParam+0x70>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	08006731 	.word	0x08006731
 8006724:	08006737 	.word	0x08006737
 8006728:	08006731 	.word	0x08006731
 800672c:	08006749 	.word	0x08006749
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	73fb      	strb	r3, [r7, #15]
      break;
 8006734:	e030      	b.n	8006798 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d025      	beq.n	800678e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006746:	e022      	b.n	800678e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006750:	d11f      	bne.n	8006792 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006756:	e01c      	b.n	8006792 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b02      	cmp	r3, #2
 800675c:	d903      	bls.n	8006766 <DMA_CheckFifoParam+0xb6>
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	2b03      	cmp	r3, #3
 8006762:	d003      	beq.n	800676c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006764:	e018      	b.n	8006798 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	73fb      	strb	r3, [r7, #15]
      break;
 800676a:	e015      	b.n	8006798 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006770:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00e      	beq.n	8006796 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	73fb      	strb	r3, [r7, #15]
      break;
 800677c:	e00b      	b.n	8006796 <DMA_CheckFifoParam+0xe6>
      break;
 800677e:	bf00      	nop
 8006780:	e00a      	b.n	8006798 <DMA_CheckFifoParam+0xe8>
      break;
 8006782:	bf00      	nop
 8006784:	e008      	b.n	8006798 <DMA_CheckFifoParam+0xe8>
      break;
 8006786:	bf00      	nop
 8006788:	e006      	b.n	8006798 <DMA_CheckFifoParam+0xe8>
      break;
 800678a:	bf00      	nop
 800678c:	e004      	b.n	8006798 <DMA_CheckFifoParam+0xe8>
      break;
 800678e:	bf00      	nop
 8006790:	e002      	b.n	8006798 <DMA_CheckFifoParam+0xe8>
      break;   
 8006792:	bf00      	nop
 8006794:	e000      	b.n	8006798 <DMA_CheckFifoParam+0xe8>
      break;
 8006796:	bf00      	nop
    }
  } 
  
  return status; 
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr
 80067a6:	bf00      	nop

080067a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b089      	sub	sp, #36	@ 0x24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067be:	2300      	movs	r3, #0
 80067c0:	61fb      	str	r3, [r7, #28]
 80067c2:	e177      	b.n	8006ab4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067c4:	2201      	movs	r2, #1
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	fa02 f303 	lsl.w	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	4013      	ands	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	429a      	cmp	r2, r3
 80067de:	f040 8166 	bne.w	8006aae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d005      	beq.n	80067fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d130      	bne.n	800685c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	2203      	movs	r2, #3
 8006806:	fa02 f303 	lsl.w	r3, r2, r3
 800680a:	43db      	mvns	r3, r3
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	4013      	ands	r3, r2
 8006810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	fa02 f303 	lsl.w	r3, r2, r3
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	4313      	orrs	r3, r2
 8006822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006830:	2201      	movs	r2, #1
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	fa02 f303 	lsl.w	r3, r2, r3
 8006838:	43db      	mvns	r3, r3
 800683a:	69ba      	ldr	r2, [r7, #24]
 800683c:	4013      	ands	r3, r2
 800683e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	091b      	lsrs	r3, r3, #4
 8006846:	f003 0201 	and.w	r2, r3, #1
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	fa02 f303 	lsl.w	r3, r2, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	4313      	orrs	r3, r2
 8006854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f003 0303 	and.w	r3, r3, #3
 8006864:	2b03      	cmp	r3, #3
 8006866:	d017      	beq.n	8006898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	2203      	movs	r2, #3
 8006874:	fa02 f303 	lsl.w	r3, r2, r3
 8006878:	43db      	mvns	r3, r3
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	4013      	ands	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	689a      	ldr	r2, [r3, #8]
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	fa02 f303 	lsl.w	r3, r2, r3
 800688c:	69ba      	ldr	r2, [r7, #24]
 800688e:	4313      	orrs	r3, r2
 8006890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f003 0303 	and.w	r3, r3, #3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d123      	bne.n	80068ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	08da      	lsrs	r2, r3, #3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3208      	adds	r2, #8
 80068ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	220f      	movs	r2, #15
 80068bc:	fa02 f303 	lsl.w	r3, r2, r3
 80068c0:	43db      	mvns	r3, r3
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	4013      	ands	r3, r2
 80068c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f003 0307 	and.w	r3, r3, #7
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	fa02 f303 	lsl.w	r3, r2, r3
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	4313      	orrs	r3, r2
 80068dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	08da      	lsrs	r2, r3, #3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	3208      	adds	r2, #8
 80068e6:	69b9      	ldr	r1, [r7, #24]
 80068e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	2203      	movs	r2, #3
 80068f8:	fa02 f303 	lsl.w	r3, r2, r3
 80068fc:	43db      	mvns	r3, r3
 80068fe:	69ba      	ldr	r2, [r7, #24]
 8006900:	4013      	ands	r3, r2
 8006902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f003 0203 	and.w	r2, r3, #3
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	fa02 f303 	lsl.w	r3, r2, r3
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	4313      	orrs	r3, r2
 8006918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80c0 	beq.w	8006aae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800692e:	2300      	movs	r3, #0
 8006930:	60fb      	str	r3, [r7, #12]
 8006932:	4b66      	ldr	r3, [pc, #408]	@ (8006acc <HAL_GPIO_Init+0x324>)
 8006934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006936:	4a65      	ldr	r2, [pc, #404]	@ (8006acc <HAL_GPIO_Init+0x324>)
 8006938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800693c:	6453      	str	r3, [r2, #68]	@ 0x44
 800693e:	4b63      	ldr	r3, [pc, #396]	@ (8006acc <HAL_GPIO_Init+0x324>)
 8006940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800694a:	4a61      	ldr	r2, [pc, #388]	@ (8006ad0 <HAL_GPIO_Init+0x328>)
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	089b      	lsrs	r3, r3, #2
 8006950:	3302      	adds	r3, #2
 8006952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	220f      	movs	r2, #15
 8006962:	fa02 f303 	lsl.w	r3, r2, r3
 8006966:	43db      	mvns	r3, r3
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	4013      	ands	r3, r2
 800696c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a58      	ldr	r2, [pc, #352]	@ (8006ad4 <HAL_GPIO_Init+0x32c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d037      	beq.n	80069e6 <HAL_GPIO_Init+0x23e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a57      	ldr	r2, [pc, #348]	@ (8006ad8 <HAL_GPIO_Init+0x330>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d031      	beq.n	80069e2 <HAL_GPIO_Init+0x23a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a56      	ldr	r2, [pc, #344]	@ (8006adc <HAL_GPIO_Init+0x334>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d02b      	beq.n	80069de <HAL_GPIO_Init+0x236>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a55      	ldr	r2, [pc, #340]	@ (8006ae0 <HAL_GPIO_Init+0x338>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d025      	beq.n	80069da <HAL_GPIO_Init+0x232>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a54      	ldr	r2, [pc, #336]	@ (8006ae4 <HAL_GPIO_Init+0x33c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d01f      	beq.n	80069d6 <HAL_GPIO_Init+0x22e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a53      	ldr	r2, [pc, #332]	@ (8006ae8 <HAL_GPIO_Init+0x340>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d019      	beq.n	80069d2 <HAL_GPIO_Init+0x22a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a52      	ldr	r2, [pc, #328]	@ (8006aec <HAL_GPIO_Init+0x344>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d013      	beq.n	80069ce <HAL_GPIO_Init+0x226>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a51      	ldr	r2, [pc, #324]	@ (8006af0 <HAL_GPIO_Init+0x348>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d00d      	beq.n	80069ca <HAL_GPIO_Init+0x222>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a50      	ldr	r2, [pc, #320]	@ (8006af4 <HAL_GPIO_Init+0x34c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d007      	beq.n	80069c6 <HAL_GPIO_Init+0x21e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a4f      	ldr	r2, [pc, #316]	@ (8006af8 <HAL_GPIO_Init+0x350>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d101      	bne.n	80069c2 <HAL_GPIO_Init+0x21a>
 80069be:	2309      	movs	r3, #9
 80069c0:	e012      	b.n	80069e8 <HAL_GPIO_Init+0x240>
 80069c2:	230a      	movs	r3, #10
 80069c4:	e010      	b.n	80069e8 <HAL_GPIO_Init+0x240>
 80069c6:	2308      	movs	r3, #8
 80069c8:	e00e      	b.n	80069e8 <HAL_GPIO_Init+0x240>
 80069ca:	2307      	movs	r3, #7
 80069cc:	e00c      	b.n	80069e8 <HAL_GPIO_Init+0x240>
 80069ce:	2306      	movs	r3, #6
 80069d0:	e00a      	b.n	80069e8 <HAL_GPIO_Init+0x240>
 80069d2:	2305      	movs	r3, #5
 80069d4:	e008      	b.n	80069e8 <HAL_GPIO_Init+0x240>
 80069d6:	2304      	movs	r3, #4
 80069d8:	e006      	b.n	80069e8 <HAL_GPIO_Init+0x240>
 80069da:	2303      	movs	r3, #3
 80069dc:	e004      	b.n	80069e8 <HAL_GPIO_Init+0x240>
 80069de:	2302      	movs	r3, #2
 80069e0:	e002      	b.n	80069e8 <HAL_GPIO_Init+0x240>
 80069e2:	2301      	movs	r3, #1
 80069e4:	e000      	b.n	80069e8 <HAL_GPIO_Init+0x240>
 80069e6:	2300      	movs	r3, #0
 80069e8:	69fa      	ldr	r2, [r7, #28]
 80069ea:	f002 0203 	and.w	r2, r2, #3
 80069ee:	0092      	lsls	r2, r2, #2
 80069f0:	4093      	lsls	r3, r2
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069f8:	4935      	ldr	r1, [pc, #212]	@ (8006ad0 <HAL_GPIO_Init+0x328>)
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	089b      	lsrs	r3, r3, #2
 80069fe:	3302      	adds	r3, #2
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a06:	4b3d      	ldr	r3, [pc, #244]	@ (8006afc <HAL_GPIO_Init+0x354>)
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	43db      	mvns	r3, r3
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	4013      	ands	r3, r2
 8006a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006a2a:	4a34      	ldr	r2, [pc, #208]	@ (8006afc <HAL_GPIO_Init+0x354>)
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006a30:	4b32      	ldr	r3, [pc, #200]	@ (8006afc <HAL_GPIO_Init+0x354>)
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	43db      	mvns	r3, r3
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006a54:	4a29      	ldr	r2, [pc, #164]	@ (8006afc <HAL_GPIO_Init+0x354>)
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006a5a:	4b28      	ldr	r3, [pc, #160]	@ (8006afc <HAL_GPIO_Init+0x354>)
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	43db      	mvns	r3, r3
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	4013      	ands	r3, r2
 8006a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8006afc <HAL_GPIO_Init+0x354>)
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a84:	4b1d      	ldr	r3, [pc, #116]	@ (8006afc <HAL_GPIO_Init+0x354>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	4013      	ands	r3, r2
 8006a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006aa8:	4a14      	ldr	r2, [pc, #80]	@ (8006afc <HAL_GPIO_Init+0x354>)
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	2b0f      	cmp	r3, #15
 8006ab8:	f67f ae84 	bls.w	80067c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006abc:	bf00      	nop
 8006abe:	bf00      	nop
 8006ac0:	3724      	adds	r7, #36	@ 0x24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	40013800 	.word	0x40013800
 8006ad4:	40020000 	.word	0x40020000
 8006ad8:	40020400 	.word	0x40020400
 8006adc:	40020800 	.word	0x40020800
 8006ae0:	40020c00 	.word	0x40020c00
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	40021400 	.word	0x40021400
 8006aec:	40021800 	.word	0x40021800
 8006af0:	40021c00 	.word	0x40021c00
 8006af4:	40022000 	.word	0x40022000
 8006af8:	40022400 	.word	0x40022400
 8006afc:	40013c00 	.word	0x40013c00

08006b00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	603b      	str	r3, [r7, #0]
 8006b0e:	4b20      	ldr	r3, [pc, #128]	@ (8006b90 <HAL_PWREx_EnableOverDrive+0x90>)
 8006b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b12:	4a1f      	ldr	r2, [pc, #124]	@ (8006b90 <HAL_PWREx_EnableOverDrive+0x90>)
 8006b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8006b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006b90 <HAL_PWREx_EnableOverDrive+0x90>)
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006b26:	4b1b      	ldr	r3, [pc, #108]	@ (8006b94 <HAL_PWREx_EnableOverDrive+0x94>)
 8006b28:	2201      	movs	r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b2c:	f7fe fa90 	bl	8005050 <HAL_GetTick>
 8006b30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b32:	e009      	b.n	8006b48 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b34:	f7fe fa8c 	bl	8005050 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b42:	d901      	bls.n	8006b48 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e01f      	b.n	8006b88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b48:	4b13      	ldr	r3, [pc, #76]	@ (8006b98 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b54:	d1ee      	bne.n	8006b34 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006b56:	4b11      	ldr	r3, [pc, #68]	@ (8006b9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b58:	2201      	movs	r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b5c:	f7fe fa78 	bl	8005050 <HAL_GetTick>
 8006b60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b62:	e009      	b.n	8006b78 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b64:	f7fe fa74 	bl	8005050 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b72:	d901      	bls.n	8006b78 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e007      	b.n	8006b88 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006b78:	4b07      	ldr	r3, [pc, #28]	@ (8006b98 <HAL_PWREx_EnableOverDrive+0x98>)
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b84:	d1ee      	bne.n	8006b64 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40023800 	.word	0x40023800
 8006b94:	420e0040 	.word	0x420e0040
 8006b98:	40007000 	.word	0x40007000
 8006b9c:	420e0044 	.word	0x420e0044

08006ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e267      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d075      	beq.n	8006caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bbe:	4b88      	ldr	r3, [pc, #544]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d00c      	beq.n	8006be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bca:	4b85      	ldr	r3, [pc, #532]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d112      	bne.n	8006bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bd6:	4b82      	ldr	r3, [pc, #520]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be2:	d10b      	bne.n	8006bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006be4:	4b7e      	ldr	r3, [pc, #504]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d05b      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x108>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d157      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e242      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c04:	d106      	bne.n	8006c14 <HAL_RCC_OscConfig+0x74>
 8006c06:	4b76      	ldr	r3, [pc, #472]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a75      	ldr	r2, [pc, #468]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	e01d      	b.n	8006c50 <HAL_RCC_OscConfig+0xb0>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c1c:	d10c      	bne.n	8006c38 <HAL_RCC_OscConfig+0x98>
 8006c1e:	4b70      	ldr	r3, [pc, #448]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a6f      	ldr	r2, [pc, #444]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a6c      	ldr	r2, [pc, #432]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	e00b      	b.n	8006c50 <HAL_RCC_OscConfig+0xb0>
 8006c38:	4b69      	ldr	r3, [pc, #420]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a68      	ldr	r2, [pc, #416]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	4b66      	ldr	r3, [pc, #408]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a65      	ldr	r2, [pc, #404]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d013      	beq.n	8006c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c58:	f7fe f9fa 	bl	8005050 <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c60:	f7fe f9f6 	bl	8005050 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b64      	cmp	r3, #100	@ 0x64
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e207      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c72:	4b5b      	ldr	r3, [pc, #364]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f0      	beq.n	8006c60 <HAL_RCC_OscConfig+0xc0>
 8006c7e:	e014      	b.n	8006caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c80:	f7fe f9e6 	bl	8005050 <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c86:	e008      	b.n	8006c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c88:	f7fe f9e2 	bl	8005050 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b64      	cmp	r3, #100	@ 0x64
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e1f3      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c9a:	4b51      	ldr	r3, [pc, #324]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f0      	bne.n	8006c88 <HAL_RCC_OscConfig+0xe8>
 8006ca6:	e000      	b.n	8006caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d063      	beq.n	8006d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 030c 	and.w	r3, r3, #12
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cc2:	4b47      	ldr	r3, [pc, #284]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	d11c      	bne.n	8006d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cce:	4b44      	ldr	r3, [pc, #272]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d116      	bne.n	8006d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cda:	4b41      	ldr	r3, [pc, #260]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x152>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d001      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e1c7      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	4937      	ldr	r1, [pc, #220]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d06:	e03a      	b.n	8006d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d020      	beq.n	8006d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d10:	4b34      	ldr	r3, [pc, #208]	@ (8006de4 <HAL_RCC_OscConfig+0x244>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d16:	f7fe f99b 	bl	8005050 <HAL_GetTick>
 8006d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d1c:	e008      	b.n	8006d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d1e:	f7fe f997 	bl	8005050 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e1a8      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d30:	4b2b      	ldr	r3, [pc, #172]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0f0      	beq.n	8006d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d3c:	4b28      	ldr	r3, [pc, #160]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	4925      	ldr	r1, [pc, #148]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	600b      	str	r3, [r1, #0]
 8006d50:	e015      	b.n	8006d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d52:	4b24      	ldr	r3, [pc, #144]	@ (8006de4 <HAL_RCC_OscConfig+0x244>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d58:	f7fe f97a 	bl	8005050 <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d60:	f7fe f976 	bl	8005050 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e187      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d72:	4b1b      	ldr	r3, [pc, #108]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1f0      	bne.n	8006d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d036      	beq.n	8006df8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d016      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d92:	4b15      	ldr	r3, [pc, #84]	@ (8006de8 <HAL_RCC_OscConfig+0x248>)
 8006d94:	2201      	movs	r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d98:	f7fe f95a 	bl	8005050 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006da0:	f7fe f956 	bl	8005050 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e167      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006db2:	4b0b      	ldr	r3, [pc, #44]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0f0      	beq.n	8006da0 <HAL_RCC_OscConfig+0x200>
 8006dbe:	e01b      	b.n	8006df8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dc0:	4b09      	ldr	r3, [pc, #36]	@ (8006de8 <HAL_RCC_OscConfig+0x248>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dc6:	f7fe f943 	bl	8005050 <HAL_GetTick>
 8006dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dcc:	e00e      	b.n	8006dec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dce:	f7fe f93f 	bl	8005050 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d907      	bls.n	8006dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e150      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
 8006de0:	40023800 	.word	0x40023800
 8006de4:	42470000 	.word	0x42470000
 8006de8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dec:	4b88      	ldr	r3, [pc, #544]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1ea      	bne.n	8006dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8097 	beq.w	8006f34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e06:	2300      	movs	r3, #0
 8006e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e0a:	4b81      	ldr	r3, [pc, #516]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10f      	bne.n	8006e36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e16:	2300      	movs	r3, #0
 8006e18:	60bb      	str	r3, [r7, #8]
 8006e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	4a7c      	ldr	r2, [pc, #496]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e26:	4b7a      	ldr	r3, [pc, #488]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e2e:	60bb      	str	r3, [r7, #8]
 8006e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e32:	2301      	movs	r3, #1
 8006e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e36:	4b77      	ldr	r3, [pc, #476]	@ (8007014 <HAL_RCC_OscConfig+0x474>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d118      	bne.n	8006e74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e42:	4b74      	ldr	r3, [pc, #464]	@ (8007014 <HAL_RCC_OscConfig+0x474>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a73      	ldr	r2, [pc, #460]	@ (8007014 <HAL_RCC_OscConfig+0x474>)
 8006e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e4e:	f7fe f8ff 	bl	8005050 <HAL_GetTick>
 8006e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e54:	e008      	b.n	8006e68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e56:	f7fe f8fb 	bl	8005050 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d901      	bls.n	8006e68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e10c      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e68:	4b6a      	ldr	r3, [pc, #424]	@ (8007014 <HAL_RCC_OscConfig+0x474>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0f0      	beq.n	8006e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d106      	bne.n	8006e8a <HAL_RCC_OscConfig+0x2ea>
 8006e7c:	4b64      	ldr	r3, [pc, #400]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e80:	4a63      	ldr	r2, [pc, #396]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e82:	f043 0301 	orr.w	r3, r3, #1
 8006e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e88:	e01c      	b.n	8006ec4 <HAL_RCC_OscConfig+0x324>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	2b05      	cmp	r3, #5
 8006e90:	d10c      	bne.n	8006eac <HAL_RCC_OscConfig+0x30c>
 8006e92:	4b5f      	ldr	r3, [pc, #380]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e96:	4a5e      	ldr	r2, [pc, #376]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e98:	f043 0304 	orr.w	r3, r3, #4
 8006e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eaa:	e00b      	b.n	8006ec4 <HAL_RCC_OscConfig+0x324>
 8006eac:	4b58      	ldr	r3, [pc, #352]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb0:	4a57      	ldr	r2, [pc, #348]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006eb2:	f023 0301 	bic.w	r3, r3, #1
 8006eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eb8:	4b55      	ldr	r3, [pc, #340]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ebc:	4a54      	ldr	r2, [pc, #336]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006ebe:	f023 0304 	bic.w	r3, r3, #4
 8006ec2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d015      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ecc:	f7fe f8c0 	bl	8005050 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed2:	e00a      	b.n	8006eea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ed4:	f7fe f8bc 	bl	8005050 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e0cb      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eea:	4b49      	ldr	r3, [pc, #292]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0ee      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x334>
 8006ef6:	e014      	b.n	8006f22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ef8:	f7fe f8aa 	bl	8005050 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006efe:	e00a      	b.n	8006f16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f00:	f7fe f8a6 	bl	8005050 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e0b5      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f16:	4b3e      	ldr	r3, [pc, #248]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1ee      	bne.n	8006f00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d105      	bne.n	8006f34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f28:	4b39      	ldr	r3, [pc, #228]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2c:	4a38      	ldr	r2, [pc, #224]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 80a1 	beq.w	8007080 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f3e:	4b34      	ldr	r3, [pc, #208]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 030c 	and.w	r3, r3, #12
 8006f46:	2b08      	cmp	r3, #8
 8006f48:	d05c      	beq.n	8007004 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d141      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f52:	4b31      	ldr	r3, [pc, #196]	@ (8007018 <HAL_RCC_OscConfig+0x478>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f58:	f7fe f87a 	bl	8005050 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f60:	f7fe f876 	bl	8005050 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e087      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f72:	4b27      	ldr	r3, [pc, #156]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69da      	ldr	r2, [r3, #28]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8c:	019b      	lsls	r3, r3, #6
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f94:	085b      	lsrs	r3, r3, #1
 8006f96:	3b01      	subs	r3, #1
 8006f98:	041b      	lsls	r3, r3, #16
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa0:	061b      	lsls	r3, r3, #24
 8006fa2:	491b      	ldr	r1, [pc, #108]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8007018 <HAL_RCC_OscConfig+0x478>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fae:	f7fe f84f 	bl	8005050 <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fb6:	f7fe f84b 	bl	8005050 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e05c      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fc8:	4b11      	ldr	r3, [pc, #68]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d0f0      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x416>
 8006fd4:	e054      	b.n	8007080 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fd6:	4b10      	ldr	r3, [pc, #64]	@ (8007018 <HAL_RCC_OscConfig+0x478>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fdc:	f7fe f838 	bl	8005050 <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fe4:	f7fe f834 	bl	8005050 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e045      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ff6:	4b06      	ldr	r3, [pc, #24]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1f0      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x444>
 8007002:	e03d      	b.n	8007080 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d107      	bne.n	800701c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e038      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
 8007010:	40023800 	.word	0x40023800
 8007014:	40007000 	.word	0x40007000
 8007018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800701c:	4b1b      	ldr	r3, [pc, #108]	@ (800708c <HAL_RCC_OscConfig+0x4ec>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d028      	beq.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007034:	429a      	cmp	r2, r3
 8007036:	d121      	bne.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007042:	429a      	cmp	r2, r3
 8007044:	d11a      	bne.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800704c:	4013      	ands	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007054:	4293      	cmp	r3, r2
 8007056:	d111      	bne.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	3b01      	subs	r3, #1
 8007066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007068:	429a      	cmp	r2, r3
 800706a:	d107      	bne.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007078:	429a      	cmp	r2, r3
 800707a:	d001      	beq.n	8007080 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	40023800 	.word	0x40023800

08007090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e0cc      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070a4:	4b68      	ldr	r3, [pc, #416]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 030f 	and.w	r3, r3, #15
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d90c      	bls.n	80070cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b2:	4b65      	ldr	r3, [pc, #404]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ba:	4b63      	ldr	r3, [pc, #396]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 030f 	and.w	r3, r3, #15
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d001      	beq.n	80070cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e0b8      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d020      	beq.n	800711a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070e4:	4b59      	ldr	r3, [pc, #356]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	4a58      	ldr	r2, [pc, #352]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80070ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80070ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070fc:	4b53      	ldr	r3, [pc, #332]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	4a52      	ldr	r2, [pc, #328]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007102:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007108:	4b50      	ldr	r3, [pc, #320]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	494d      	ldr	r1, [pc, #308]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	4313      	orrs	r3, r2
 8007118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d044      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d107      	bne.n	800713e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800712e:	4b47      	ldr	r3, [pc, #284]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d119      	bne.n	800716e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e07f      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b02      	cmp	r3, #2
 8007144:	d003      	beq.n	800714e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800714a:	2b03      	cmp	r3, #3
 800714c:	d107      	bne.n	800715e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800714e:	4b3f      	ldr	r3, [pc, #252]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d109      	bne.n	800716e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e06f      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800715e:	4b3b      	ldr	r3, [pc, #236]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e067      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800716e:	4b37      	ldr	r3, [pc, #220]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f023 0203 	bic.w	r2, r3, #3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4934      	ldr	r1, [pc, #208]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 800717c:	4313      	orrs	r3, r2
 800717e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007180:	f7fd ff66 	bl	8005050 <HAL_GetTick>
 8007184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007186:	e00a      	b.n	800719e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007188:	f7fd ff62 	bl	8005050 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007196:	4293      	cmp	r3, r2
 8007198:	d901      	bls.n	800719e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e04f      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800719e:	4b2b      	ldr	r3, [pc, #172]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 020c 	and.w	r2, r3, #12
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d1eb      	bne.n	8007188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071b0:	4b25      	ldr	r3, [pc, #148]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d20c      	bcs.n	80071d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071be:	4b22      	ldr	r3, [pc, #136]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c6:	4b20      	ldr	r3, [pc, #128]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d001      	beq.n	80071d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e032      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d008      	beq.n	80071f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071e4:	4b19      	ldr	r3, [pc, #100]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	4916      	ldr	r1, [pc, #88]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007202:	4b12      	ldr	r3, [pc, #72]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	490e      	ldr	r1, [pc, #56]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007212:	4313      	orrs	r3, r2
 8007214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007216:	f000 f821 	bl	800725c <HAL_RCC_GetSysClockFreq>
 800721a:	4602      	mov	r2, r0
 800721c:	4b0b      	ldr	r3, [pc, #44]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	091b      	lsrs	r3, r3, #4
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	490a      	ldr	r1, [pc, #40]	@ (8007250 <HAL_RCC_ClockConfig+0x1c0>)
 8007228:	5ccb      	ldrb	r3, [r1, r3]
 800722a:	fa22 f303 	lsr.w	r3, r2, r3
 800722e:	4a09      	ldr	r2, [pc, #36]	@ (8007254 <HAL_RCC_ClockConfig+0x1c4>)
 8007230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007232:	4b09      	ldr	r3, [pc, #36]	@ (8007258 <HAL_RCC_ClockConfig+0x1c8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f7fd fec6 	bl	8004fc8 <HAL_InitTick>

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	40023c00 	.word	0x40023c00
 800724c:	40023800 	.word	0x40023800
 8007250:	0800ccf0 	.word	0x0800ccf0
 8007254:	20000000 	.word	0x20000000
 8007258:	20000004 	.word	0x20000004

0800725c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800725c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007260:	b090      	sub	sp, #64	@ 0x40
 8007262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	637b      	str	r3, [r7, #52]	@ 0x34
 8007268:	2300      	movs	r3, #0
 800726a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800726c:	2300      	movs	r3, #0
 800726e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007274:	4b59      	ldr	r3, [pc, #356]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x180>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f003 030c 	and.w	r3, r3, #12
 800727c:	2b08      	cmp	r3, #8
 800727e:	d00d      	beq.n	800729c <HAL_RCC_GetSysClockFreq+0x40>
 8007280:	2b08      	cmp	r3, #8
 8007282:	f200 80a1 	bhi.w	80073c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_RCC_GetSysClockFreq+0x34>
 800728a:	2b04      	cmp	r3, #4
 800728c:	d003      	beq.n	8007296 <HAL_RCC_GetSysClockFreq+0x3a>
 800728e:	e09b      	b.n	80073c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007290:	4b53      	ldr	r3, [pc, #332]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007292:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007294:	e09b      	b.n	80073ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007296:	4b53      	ldr	r3, [pc, #332]	@ (80073e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007298:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800729a:	e098      	b.n	80073ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800729c:	4b4f      	ldr	r3, [pc, #316]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x180>)
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072a6:	4b4d      	ldr	r3, [pc, #308]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x180>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d028      	beq.n	8007304 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072b2:	4b4a      	ldr	r3, [pc, #296]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x180>)
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	099b      	lsrs	r3, r3, #6
 80072b8:	2200      	movs	r2, #0
 80072ba:	623b      	str	r3, [r7, #32]
 80072bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80072c4:	2100      	movs	r1, #0
 80072c6:	4b47      	ldr	r3, [pc, #284]	@ (80073e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80072c8:	fb03 f201 	mul.w	r2, r3, r1
 80072cc:	2300      	movs	r3, #0
 80072ce:	fb00 f303 	mul.w	r3, r0, r3
 80072d2:	4413      	add	r3, r2
 80072d4:	4a43      	ldr	r2, [pc, #268]	@ (80073e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80072d6:	fba0 1202 	umull	r1, r2, r0, r2
 80072da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072dc:	460a      	mov	r2, r1
 80072de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80072e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072e2:	4413      	add	r3, r2
 80072e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e8:	2200      	movs	r2, #0
 80072ea:	61bb      	str	r3, [r7, #24]
 80072ec:	61fa      	str	r2, [r7, #28]
 80072ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80072f6:	f7f9 fc67 	bl	8000bc8 <__aeabi_uldivmod>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4613      	mov	r3, r2
 8007300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007302:	e053      	b.n	80073ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007304:	4b35      	ldr	r3, [pc, #212]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x180>)
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	099b      	lsrs	r3, r3, #6
 800730a:	2200      	movs	r2, #0
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	617a      	str	r2, [r7, #20]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007316:	f04f 0b00 	mov.w	fp, #0
 800731a:	4652      	mov	r2, sl
 800731c:	465b      	mov	r3, fp
 800731e:	f04f 0000 	mov.w	r0, #0
 8007322:	f04f 0100 	mov.w	r1, #0
 8007326:	0159      	lsls	r1, r3, #5
 8007328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800732c:	0150      	lsls	r0, r2, #5
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	ebb2 080a 	subs.w	r8, r2, sl
 8007336:	eb63 090b 	sbc.w	r9, r3, fp
 800733a:	f04f 0200 	mov.w	r2, #0
 800733e:	f04f 0300 	mov.w	r3, #0
 8007342:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007346:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800734a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800734e:	ebb2 0408 	subs.w	r4, r2, r8
 8007352:	eb63 0509 	sbc.w	r5, r3, r9
 8007356:	f04f 0200 	mov.w	r2, #0
 800735a:	f04f 0300 	mov.w	r3, #0
 800735e:	00eb      	lsls	r3, r5, #3
 8007360:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007364:	00e2      	lsls	r2, r4, #3
 8007366:	4614      	mov	r4, r2
 8007368:	461d      	mov	r5, r3
 800736a:	eb14 030a 	adds.w	r3, r4, sl
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	eb45 030b 	adc.w	r3, r5, fp
 8007374:	607b      	str	r3, [r7, #4]
 8007376:	f04f 0200 	mov.w	r2, #0
 800737a:	f04f 0300 	mov.w	r3, #0
 800737e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007382:	4629      	mov	r1, r5
 8007384:	028b      	lsls	r3, r1, #10
 8007386:	4621      	mov	r1, r4
 8007388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800738c:	4621      	mov	r1, r4
 800738e:	028a      	lsls	r2, r1, #10
 8007390:	4610      	mov	r0, r2
 8007392:	4619      	mov	r1, r3
 8007394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007396:	2200      	movs	r2, #0
 8007398:	60bb      	str	r3, [r7, #8]
 800739a:	60fa      	str	r2, [r7, #12]
 800739c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073a0:	f7f9 fc12 	bl	8000bc8 <__aeabi_uldivmod>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	4613      	mov	r3, r2
 80073aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073ac:	4b0b      	ldr	r3, [pc, #44]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x180>)
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	0c1b      	lsrs	r3, r3, #16
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	3301      	adds	r3, #1
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80073bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80073be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80073c6:	e002      	b.n	80073ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073c8:	4b05      	ldr	r3, [pc, #20]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80073ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80073cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3740      	adds	r7, #64	@ 0x40
 80073d4:	46bd      	mov	sp, r7
 80073d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073da:	bf00      	nop
 80073dc:	40023800 	.word	0x40023800
 80073e0:	00f42400 	.word	0x00f42400
 80073e4:	017d7840 	.word	0x017d7840

080073e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073ec:	4b03      	ldr	r3, [pc, #12]	@ (80073fc <HAL_RCC_GetHCLKFreq+0x14>)
 80073ee:	681b      	ldr	r3, [r3, #0]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000000 	.word	0x20000000

08007400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007404:	f7ff fff0 	bl	80073e8 <HAL_RCC_GetHCLKFreq>
 8007408:	4602      	mov	r2, r0
 800740a:	4b05      	ldr	r3, [pc, #20]	@ (8007420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	0a9b      	lsrs	r3, r3, #10
 8007410:	f003 0307 	and.w	r3, r3, #7
 8007414:	4903      	ldr	r1, [pc, #12]	@ (8007424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007416:	5ccb      	ldrb	r3, [r1, r3]
 8007418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800741c:	4618      	mov	r0, r3
 800741e:	bd80      	pop	{r7, pc}
 8007420:	40023800 	.word	0x40023800
 8007424:	0800cd00 	.word	0x0800cd00

08007428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800742c:	f7ff ffdc 	bl	80073e8 <HAL_RCC_GetHCLKFreq>
 8007430:	4602      	mov	r2, r0
 8007432:	4b05      	ldr	r3, [pc, #20]	@ (8007448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	0b5b      	lsrs	r3, r3, #13
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	4903      	ldr	r1, [pc, #12]	@ (800744c <HAL_RCC_GetPCLK2Freq+0x24>)
 800743e:	5ccb      	ldrb	r3, [r1, r3]
 8007440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007444:	4618      	mov	r0, r3
 8007446:	bd80      	pop	{r7, pc}
 8007448:	40023800 	.word	0x40023800
 800744c:	0800cd00 	.word	0x0800cd00

08007450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10b      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007474:	2b00      	cmp	r3, #0
 8007476:	d105      	bne.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007480:	2b00      	cmp	r3, #0
 8007482:	d075      	beq.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007484:	4b91      	ldr	r3, [pc, #580]	@ (80076cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007486:	2200      	movs	r2, #0
 8007488:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800748a:	f7fd fde1 	bl	8005050 <HAL_GetTick>
 800748e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007490:	e008      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007492:	f7fd fddd 	bl	8005050 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d901      	bls.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e189      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074a4:	4b8a      	ldr	r3, [pc, #552]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1f0      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d009      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	019a      	lsls	r2, r3, #6
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	071b      	lsls	r3, r3, #28
 80074c8:	4981      	ldr	r1, [pc, #516]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d01f      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80074dc:	4b7c      	ldr	r3, [pc, #496]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074e2:	0f1b      	lsrs	r3, r3, #28
 80074e4:	f003 0307 	and.w	r3, r3, #7
 80074e8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	019a      	lsls	r2, r3, #6
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	061b      	lsls	r3, r3, #24
 80074f6:	431a      	orrs	r2, r3
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	071b      	lsls	r3, r3, #28
 80074fc:	4974      	ldr	r1, [pc, #464]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007504:	4b72      	ldr	r3, [pc, #456]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007506:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800750a:	f023 021f 	bic.w	r2, r3, #31
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	3b01      	subs	r3, #1
 8007514:	496e      	ldr	r1, [pc, #440]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007516:	4313      	orrs	r3, r2
 8007518:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00d      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	019a      	lsls	r2, r3, #6
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	061b      	lsls	r3, r3, #24
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	071b      	lsls	r3, r3, #28
 800753c:	4964      	ldr	r1, [pc, #400]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800753e:	4313      	orrs	r3, r2
 8007540:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007544:	4b61      	ldr	r3, [pc, #388]	@ (80076cc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007546:	2201      	movs	r2, #1
 8007548:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800754a:	f7fd fd81 	bl	8005050 <HAL_GetTick>
 800754e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007550:	e008      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007552:	f7fd fd7d 	bl	8005050 <HAL_GetTick>
 8007556:	4602      	mov	r2, r0
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	1ad3      	subs	r3, r2, r3
 800755c:	2b02      	cmp	r3, #2
 800755e:	d901      	bls.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e129      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007564:	4b5a      	ldr	r3, [pc, #360]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d0f0      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d105      	bne.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007584:	2b00      	cmp	r3, #0
 8007586:	d079      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007588:	4b52      	ldr	r3, [pc, #328]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800758e:	f7fd fd5f 	bl	8005050 <HAL_GetTick>
 8007592:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007594:	e008      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007596:	f7fd fd5b 	bl	8005050 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d901      	bls.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e107      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80075a8:	4b49      	ldr	r3, [pc, #292]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80075b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80075b4:	d0ef      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f003 0304 	and.w	r3, r3, #4
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d020      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075c2:	4b43      	ldr	r3, [pc, #268]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c8:	0f1b      	lsrs	r3, r3, #28
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	019a      	lsls	r2, r3, #6
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	061b      	lsls	r3, r3, #24
 80075dc:	431a      	orrs	r2, r3
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	071b      	lsls	r3, r3, #28
 80075e2:	493b      	ldr	r1, [pc, #236]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075e4:	4313      	orrs	r3, r2
 80075e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075ea:	4b39      	ldr	r3, [pc, #228]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075f0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	4934      	ldr	r1, [pc, #208]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0308 	and.w	r3, r3, #8
 800760c:	2b00      	cmp	r3, #0
 800760e:	d01e      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007610:	4b2f      	ldr	r3, [pc, #188]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007616:	0e1b      	lsrs	r3, r3, #24
 8007618:	f003 030f 	and.w	r3, r3, #15
 800761c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	019a      	lsls	r2, r3, #6
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	061b      	lsls	r3, r3, #24
 8007628:	431a      	orrs	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	071b      	lsls	r3, r3, #28
 8007630:	4927      	ldr	r1, [pc, #156]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007632:	4313      	orrs	r3, r2
 8007634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007638:	4b25      	ldr	r3, [pc, #148]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800763a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800763e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007646:	4922      	ldr	r1, [pc, #136]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007648:	4313      	orrs	r3, r2
 800764a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800764e:	4b21      	ldr	r3, [pc, #132]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007650:	2201      	movs	r2, #1
 8007652:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007654:	f7fd fcfc 	bl	8005050 <HAL_GetTick>
 8007658:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800765a:	e008      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800765c:	f7fd fcf8 	bl	8005050 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e0a4      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800766e:	4b18      	ldr	r3, [pc, #96]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007676:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800767a:	d1ef      	bne.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0320 	and.w	r3, r3, #32
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 808b 	beq.w	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	4b10      	ldr	r3, [pc, #64]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007692:	4a0f      	ldr	r2, [pc, #60]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007698:	6413      	str	r3, [r2, #64]	@ 0x40
 800769a:	4b0d      	ldr	r3, [pc, #52]	@ (80076d0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800769c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076a2:	60fb      	str	r3, [r7, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80076a6:	4b0c      	ldr	r3, [pc, #48]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a0b      	ldr	r2, [pc, #44]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80076ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076b2:	f7fd fccd 	bl	8005050 <HAL_GetTick>
 80076b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80076b8:	e010      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80076ba:	f7fd fcc9 	bl	8005050 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d909      	bls.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e075      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80076cc:	42470068 	.word	0x42470068
 80076d0:	40023800 	.word	0x40023800
 80076d4:	42470070 	.word	0x42470070
 80076d8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80076dc:	4b38      	ldr	r3, [pc, #224]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d0e8      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80076e8:	4b36      	ldr	r3, [pc, #216]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80076ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076f0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d02f      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	429a      	cmp	r2, r3
 8007704:	d028      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007706:	4b2f      	ldr	r3, [pc, #188]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800770a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800770e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007710:	4b2d      	ldr	r3, [pc, #180]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007712:	2201      	movs	r2, #1
 8007714:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007716:	4b2c      	ldr	r3, [pc, #176]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800771c:	4a29      	ldr	r2, [pc, #164]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007722:	4b28      	ldr	r3, [pc, #160]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b01      	cmp	r3, #1
 800772c:	d114      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800772e:	f7fd fc8f 	bl	8005050 <HAL_GetTick>
 8007732:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007734:	e00a      	b.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007736:	f7fd fc8b 	bl	8005050 <HAL_GetTick>
 800773a:	4602      	mov	r2, r0
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007744:	4293      	cmp	r3, r2
 8007746:	d901      	bls.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e035      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800774c:	4b1d      	ldr	r3, [pc, #116]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800774e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b00      	cmp	r3, #0
 8007756:	d0ee      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007760:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007764:	d10d      	bne.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007766:	4b17      	ldr	r3, [pc, #92]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007772:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800777a:	4912      	ldr	r1, [pc, #72]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800777c:	4313      	orrs	r3, r2
 800777e:	608b      	str	r3, [r1, #8]
 8007780:	e005      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007782:	4b10      	ldr	r3, [pc, #64]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	4a0f      	ldr	r2, [pc, #60]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007788:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800778c:	6093      	str	r3, [r2, #8]
 800778e:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007790:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800779a:	490a      	ldr	r1, [pc, #40]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800779c:	4313      	orrs	r3, r2
 800779e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0310 	and.w	r3, r3, #16
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d004      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80077b2:	4b06      	ldr	r3, [pc, #24]	@ (80077cc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80077b4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3718      	adds	r7, #24
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	40007000 	.word	0x40007000
 80077c4:	40023800 	.word	0x40023800
 80077c8:	42470e40 	.word	0x42470e40
 80077cc:	424711e0 	.word	0x424711e0

080077d0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e073      	b.n	80078ce <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	7f5b      	ldrb	r3, [r3, #29]
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d105      	bne.n	80077fc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fa f980 	bl	8001afc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f003 0310 	and.w	r3, r3, #16
 800780c:	2b10      	cmp	r3, #16
 800780e:	d055      	beq.n	80078bc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	22ca      	movs	r2, #202	@ 0xca
 8007816:	625a      	str	r2, [r3, #36]	@ 0x24
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2253      	movs	r2, #83	@ 0x53
 800781e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f99d 	bl	8007b60 <RTC_EnterInitMode>
 8007826:	4603      	mov	r3, r0
 8007828:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d12c      	bne.n	800788a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6812      	ldr	r2, [r2, #0]
 800783a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800783e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007842:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6899      	ldr	r1, [r3, #8]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	431a      	orrs	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	431a      	orrs	r2, r3
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	68d2      	ldr	r2, [r2, #12]
 800786a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6919      	ldr	r1, [r3, #16]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	041a      	lsls	r2, r3, #16
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	430a      	orrs	r2, r1
 800787e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 f9a4 	bl	8007bce <RTC_ExitInitMode>
 8007886:	4603      	mov	r3, r0
 8007888:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d110      	bne.n	80078b2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800789e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	699a      	ldr	r2, [r3, #24]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	430a      	orrs	r2, r1
 80078b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	22ff      	movs	r2, #255	@ 0xff
 80078b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80078ba:	e001      	b.n	80078c0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d102      	bne.n	80078cc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80078d6:	b590      	push	{r4, r7, lr}
 80078d8:	b087      	sub	sp, #28
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	7f1b      	ldrb	r3, [r3, #28]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d101      	bne.n	80078f2 <HAL_RTC_SetTime+0x1c>
 80078ee:	2302      	movs	r3, #2
 80078f0:	e087      	b.n	8007a02 <HAL_RTC_SetTime+0x12c>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2201      	movs	r2, #1
 80078f6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2202      	movs	r2, #2
 80078fc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d126      	bne.n	8007952 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	d102      	bne.n	8007918 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2200      	movs	r2, #0
 8007916:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	4618      	mov	r0, r3
 800791e:	f000 f97b 	bl	8007c18 <RTC_ByteToBcd2>
 8007922:	4603      	mov	r3, r0
 8007924:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	785b      	ldrb	r3, [r3, #1]
 800792a:	4618      	mov	r0, r3
 800792c:	f000 f974 	bl	8007c18 <RTC_ByteToBcd2>
 8007930:	4603      	mov	r3, r0
 8007932:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007934:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	789b      	ldrb	r3, [r3, #2]
 800793a:	4618      	mov	r0, r3
 800793c:	f000 f96c 	bl	8007c18 <RTC_ByteToBcd2>
 8007940:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007942:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	78db      	ldrb	r3, [r3, #3]
 800794a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800794c:	4313      	orrs	r3, r2
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	e018      	b.n	8007984 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2200      	movs	r2, #0
 8007964:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	785b      	ldrb	r3, [r3, #1]
 8007970:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007972:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007978:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	78db      	ldrb	r3, [r3, #3]
 800797e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007980:	4313      	orrs	r3, r2
 8007982:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	22ca      	movs	r2, #202	@ 0xca
 800798a:	625a      	str	r2, [r3, #36]	@ 0x24
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2253      	movs	r2, #83	@ 0x53
 8007992:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 f8e3 	bl	8007b60 <RTC_EnterInitMode>
 800799a:	4603      	mov	r3, r0
 800799c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800799e:	7cfb      	ldrb	r3, [r7, #19]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d120      	bne.n	80079e6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80079ae:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80079b2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689a      	ldr	r2, [r3, #8]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80079c2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6899      	ldr	r1, [r3, #8]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	68da      	ldr	r2, [r3, #12]
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f8f6 	bl	8007bce <RTC_ExitInitMode>
 80079e2:	4603      	mov	r3, r0
 80079e4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80079e6:	7cfb      	ldrb	r3, [r7, #19]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d102      	bne.n	80079f2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2201      	movs	r2, #1
 80079f0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	22ff      	movs	r2, #255	@ 0xff
 80079f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	771a      	strb	r2, [r3, #28]

  return status;
 8007a00:	7cfb      	ldrb	r3, [r7, #19]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd90      	pop	{r4, r7, pc}

08007a0a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a0a:	b590      	push	{r4, r7, lr}
 8007a0c:	b087      	sub	sp, #28
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	60f8      	str	r0, [r7, #12]
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	7f1b      	ldrb	r3, [r3, #28]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d101      	bne.n	8007a26 <HAL_RTC_SetDate+0x1c>
 8007a22:	2302      	movs	r3, #2
 8007a24:	e071      	b.n	8007b0a <HAL_RTC_SetDate+0x100>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10e      	bne.n	8007a56 <HAL_RTC_SetDate+0x4c>
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	785b      	ldrb	r3, [r3, #1]
 8007a3c:	f003 0310 	and.w	r3, r3, #16
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d008      	beq.n	8007a56 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	785b      	ldrb	r3, [r3, #1]
 8007a48:	f023 0310 	bic.w	r3, r3, #16
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	330a      	adds	r3, #10
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d11c      	bne.n	8007a96 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	78db      	ldrb	r3, [r3, #3]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 f8d9 	bl	8007c18 <RTC_ByteToBcd2>
 8007a66:	4603      	mov	r3, r0
 8007a68:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	785b      	ldrb	r3, [r3, #1]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 f8d2 	bl	8007c18 <RTC_ByteToBcd2>
 8007a74:	4603      	mov	r3, r0
 8007a76:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a78:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	789b      	ldrb	r3, [r3, #2]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f000 f8ca 	bl	8007c18 <RTC_ByteToBcd2>
 8007a84:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a86:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	781b      	ldrb	r3, [r3, #0]
 8007a8e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007a90:	4313      	orrs	r3, r2
 8007a92:	617b      	str	r3, [r7, #20]
 8007a94:	e00e      	b.n	8007ab4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	78db      	ldrb	r3, [r3, #3]
 8007a9a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	785b      	ldrb	r3, [r3, #1]
 8007aa0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007aa2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007aa8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	22ca      	movs	r2, #202	@ 0xca
 8007aba:	625a      	str	r2, [r3, #36]	@ 0x24
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2253      	movs	r2, #83	@ 0x53
 8007ac2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f000 f84b 	bl	8007b60 <RTC_EnterInitMode>
 8007aca:	4603      	mov	r3, r0
 8007acc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007ace:	7cfb      	ldrb	r3, [r7, #19]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10c      	bne.n	8007aee <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007ade:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007ae2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f000 f872 	bl	8007bce <RTC_ExitInitMode>
 8007aea:	4603      	mov	r3, r0
 8007aec:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007aee:	7cfb      	ldrb	r3, [r7, #19]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2201      	movs	r2, #1
 8007af8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	22ff      	movs	r2, #255	@ 0xff
 8007b00:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	771a      	strb	r2, [r3, #28]

  return status;
 8007b08:	7cfb      	ldrb	r3, [r7, #19]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	371c      	adds	r7, #28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd90      	pop	{r4, r7, pc}
	...

08007b14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a0d      	ldr	r2, [pc, #52]	@ (8007b5c <HAL_RTC_WaitForSynchro+0x48>)
 8007b26:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b28:	f7fd fa92 	bl	8005050 <HAL_GetTick>
 8007b2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b2e:	e009      	b.n	8007b44 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b30:	f7fd fa8e 	bl	8005050 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b3e:	d901      	bls.n	8007b44 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e007      	b.n	8007b54 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f003 0320 	and.w	r3, r3, #32
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0ee      	beq.n	8007b30 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	00017f5f 	.word	0x00017f5f

08007b60 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d122      	bne.n	8007bc4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007b8c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b8e:	f7fd fa5f 	bl	8005050 <HAL_GetTick>
 8007b92:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007b94:	e00c      	b.n	8007bb0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b96:	f7fd fa5b 	bl	8005050 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ba4:	d904      	bls.n	8007bb0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2204      	movs	r2, #4
 8007baa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d102      	bne.n	8007bc4 <RTC_EnterInitMode+0x64>
 8007bbe:	7bfb      	ldrb	r3, [r7, #15]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d1e8      	bne.n	8007b96 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68da      	ldr	r2, [r3, #12]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007be8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d10a      	bne.n	8007c0e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7ff ff8b 	bl	8007b14 <HAL_RTC_WaitForSynchro>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d004      	beq.n	8007c0e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2204      	movs	r2, #4
 8007c08:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007c26:	e005      	b.n	8007c34 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8007c2e:	79fb      	ldrb	r3, [r7, #7]
 8007c30:	3b0a      	subs	r3, #10
 8007c32:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	2b09      	cmp	r3, #9
 8007c38:	d8f6      	bhi.n	8007c28 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	011b      	lsls	r3, r3, #4
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	79fb      	ldrb	r3, [r7, #7]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	b2db      	uxtb	r3, r3
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e041      	b.n	8007cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d106      	bne.n	8007c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7fa f982 	bl	8001f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	3304      	adds	r3, #4
 8007c90:	4619      	mov	r1, r3
 8007c92:	4610      	mov	r0, r2
 8007c94:	f000 fa80 	bl	8008198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
	...

08007cf4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d001      	beq.n	8007d0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e046      	b.n	8007d9a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a23      	ldr	r2, [pc, #140]	@ (8007da8 <HAL_TIM_Base_Start+0xb4>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d022      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d26:	d01d      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a1f      	ldr	r2, [pc, #124]	@ (8007dac <HAL_TIM_Base_Start+0xb8>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d018      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a1e      	ldr	r2, [pc, #120]	@ (8007db0 <HAL_TIM_Base_Start+0xbc>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d013      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a1c      	ldr	r2, [pc, #112]	@ (8007db4 <HAL_TIM_Base_Start+0xc0>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d00e      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8007db8 <HAL_TIM_Base_Start+0xc4>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d009      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a19      	ldr	r2, [pc, #100]	@ (8007dbc <HAL_TIM_Base_Start+0xc8>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d004      	beq.n	8007d64 <HAL_TIM_Base_Start+0x70>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a18      	ldr	r2, [pc, #96]	@ (8007dc0 <HAL_TIM_Base_Start+0xcc>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d111      	bne.n	8007d88 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f003 0307 	and.w	r3, r3, #7
 8007d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2b06      	cmp	r3, #6
 8007d74:	d010      	beq.n	8007d98 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f042 0201 	orr.w	r2, r2, #1
 8007d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d86:	e007      	b.n	8007d98 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f042 0201 	orr.w	r2, r2, #1
 8007d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3714      	adds	r7, #20
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40010000 	.word	0x40010000
 8007dac:	40000400 	.word	0x40000400
 8007db0:	40000800 	.word	0x40000800
 8007db4:	40000c00 	.word	0x40000c00
 8007db8:	40010400 	.word	0x40010400
 8007dbc:	40014000 	.word	0x40014000
 8007dc0:	40001800 	.word	0x40001800

08007dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d020      	beq.n	8007e28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d01b      	beq.n	8007e28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f06f 0202 	mvn.w	r2, #2
 8007df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	f003 0303 	and.w	r3, r3, #3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d003      	beq.n	8007e16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 f9a3 	bl	800815a <HAL_TIM_IC_CaptureCallback>
 8007e14:	e005      	b.n	8007e22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 f995 	bl	8008146 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f9a6 	bl	800816e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	f003 0304 	and.w	r3, r3, #4
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d020      	beq.n	8007e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f003 0304 	and.w	r3, r3, #4
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d01b      	beq.n	8007e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f06f 0204 	mvn.w	r2, #4
 8007e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2202      	movs	r2, #2
 8007e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d003      	beq.n	8007e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f97d 	bl	800815a <HAL_TIM_IC_CaptureCallback>
 8007e60:	e005      	b.n	8007e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f96f 	bl	8008146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f980 	bl	800816e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	f003 0308 	and.w	r3, r3, #8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d020      	beq.n	8007ec0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f003 0308 	and.w	r3, r3, #8
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01b      	beq.n	8007ec0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f06f 0208 	mvn.w	r2, #8
 8007e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2204      	movs	r2, #4
 8007e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	f003 0303 	and.w	r3, r3, #3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d003      	beq.n	8007eae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f957 	bl	800815a <HAL_TIM_IC_CaptureCallback>
 8007eac:	e005      	b.n	8007eba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f949 	bl	8008146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f95a 	bl	800816e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f003 0310 	and.w	r3, r3, #16
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d020      	beq.n	8007f0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d01b      	beq.n	8007f0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f06f 0210 	mvn.w	r2, #16
 8007edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	69db      	ldr	r3, [r3, #28]
 8007eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f931 	bl	800815a <HAL_TIM_IC_CaptureCallback>
 8007ef8:	e005      	b.n	8007f06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f923 	bl	8008146 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f000 f934 	bl	800816e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00c      	beq.n	8007f30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d007      	beq.n	8007f30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f06f 0201 	mvn.w	r2, #1
 8007f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f901 	bl	8008132 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00c      	beq.n	8007f54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d007      	beq.n	8007f54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007f4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 faee 	bl	8008530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00c      	beq.n	8007f78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d007      	beq.n	8007f78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f905 	bl	8008182 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00c      	beq.n	8007f9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d007      	beq.n	8007f9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f06f 0220 	mvn.w	r2, #32
 8007f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fac0 	bl	800851c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f9c:	bf00      	nop
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d101      	bne.n	8007fc0 <HAL_TIM_ConfigClockSource+0x1c>
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	e0b4      	b.n	800812a <HAL_TIM_ConfigClockSource+0x186>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2202      	movs	r2, #2
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fe6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ff8:	d03e      	beq.n	8008078 <HAL_TIM_ConfigClockSource+0xd4>
 8007ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ffe:	f200 8087 	bhi.w	8008110 <HAL_TIM_ConfigClockSource+0x16c>
 8008002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008006:	f000 8086 	beq.w	8008116 <HAL_TIM_ConfigClockSource+0x172>
 800800a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800800e:	d87f      	bhi.n	8008110 <HAL_TIM_ConfigClockSource+0x16c>
 8008010:	2b70      	cmp	r3, #112	@ 0x70
 8008012:	d01a      	beq.n	800804a <HAL_TIM_ConfigClockSource+0xa6>
 8008014:	2b70      	cmp	r3, #112	@ 0x70
 8008016:	d87b      	bhi.n	8008110 <HAL_TIM_ConfigClockSource+0x16c>
 8008018:	2b60      	cmp	r3, #96	@ 0x60
 800801a:	d050      	beq.n	80080be <HAL_TIM_ConfigClockSource+0x11a>
 800801c:	2b60      	cmp	r3, #96	@ 0x60
 800801e:	d877      	bhi.n	8008110 <HAL_TIM_ConfigClockSource+0x16c>
 8008020:	2b50      	cmp	r3, #80	@ 0x50
 8008022:	d03c      	beq.n	800809e <HAL_TIM_ConfigClockSource+0xfa>
 8008024:	2b50      	cmp	r3, #80	@ 0x50
 8008026:	d873      	bhi.n	8008110 <HAL_TIM_ConfigClockSource+0x16c>
 8008028:	2b40      	cmp	r3, #64	@ 0x40
 800802a:	d058      	beq.n	80080de <HAL_TIM_ConfigClockSource+0x13a>
 800802c:	2b40      	cmp	r3, #64	@ 0x40
 800802e:	d86f      	bhi.n	8008110 <HAL_TIM_ConfigClockSource+0x16c>
 8008030:	2b30      	cmp	r3, #48	@ 0x30
 8008032:	d064      	beq.n	80080fe <HAL_TIM_ConfigClockSource+0x15a>
 8008034:	2b30      	cmp	r3, #48	@ 0x30
 8008036:	d86b      	bhi.n	8008110 <HAL_TIM_ConfigClockSource+0x16c>
 8008038:	2b20      	cmp	r3, #32
 800803a:	d060      	beq.n	80080fe <HAL_TIM_ConfigClockSource+0x15a>
 800803c:	2b20      	cmp	r3, #32
 800803e:	d867      	bhi.n	8008110 <HAL_TIM_ConfigClockSource+0x16c>
 8008040:	2b00      	cmp	r3, #0
 8008042:	d05c      	beq.n	80080fe <HAL_TIM_ConfigClockSource+0x15a>
 8008044:	2b10      	cmp	r3, #16
 8008046:	d05a      	beq.n	80080fe <HAL_TIM_ConfigClockSource+0x15a>
 8008048:	e062      	b.n	8008110 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800805a:	f000 f9c3 	bl	80083e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800806c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68ba      	ldr	r2, [r7, #8]
 8008074:	609a      	str	r2, [r3, #8]
      break;
 8008076:	e04f      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008088:	f000 f9ac 	bl	80083e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800809a:	609a      	str	r2, [r3, #8]
      break;
 800809c:	e03c      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080aa:	461a      	mov	r2, r3
 80080ac:	f000 f920 	bl	80082f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2150      	movs	r1, #80	@ 0x50
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f979 	bl	80083ae <TIM_ITRx_SetConfig>
      break;
 80080bc:	e02c      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80080ca:	461a      	mov	r2, r3
 80080cc:	f000 f93f 	bl	800834e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2160      	movs	r1, #96	@ 0x60
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f969 	bl	80083ae <TIM_ITRx_SetConfig>
      break;
 80080dc:	e01c      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ea:	461a      	mov	r2, r3
 80080ec:	f000 f900 	bl	80082f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2140      	movs	r1, #64	@ 0x40
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 f959 	bl	80083ae <TIM_ITRx_SetConfig>
      break;
 80080fc:	e00c      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4619      	mov	r1, r3
 8008108:	4610      	mov	r0, r2
 800810a:	f000 f950 	bl	80083ae <TIM_ITRx_SetConfig>
      break;
 800810e:	e003      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	73fb      	strb	r3, [r7, #15]
      break;
 8008114:	e000      	b.n	8008118 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008116:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008128:	7bfb      	ldrb	r3, [r7, #15]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008132:	b480      	push	{r7}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008146:	b480      	push	{r7}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800815a:	b480      	push	{r7}
 800815c:	b083      	sub	sp, #12
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008162:	bf00      	nop
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800816e:	b480      	push	{r7}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008176:	bf00      	nop
 8008178:	370c      	adds	r7, #12
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
	...

08008198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a46      	ldr	r2, [pc, #280]	@ (80082c4 <TIM_Base_SetConfig+0x12c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d013      	beq.n	80081d8 <TIM_Base_SetConfig+0x40>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081b6:	d00f      	beq.n	80081d8 <TIM_Base_SetConfig+0x40>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a43      	ldr	r2, [pc, #268]	@ (80082c8 <TIM_Base_SetConfig+0x130>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d00b      	beq.n	80081d8 <TIM_Base_SetConfig+0x40>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a42      	ldr	r2, [pc, #264]	@ (80082cc <TIM_Base_SetConfig+0x134>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d007      	beq.n	80081d8 <TIM_Base_SetConfig+0x40>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a41      	ldr	r2, [pc, #260]	@ (80082d0 <TIM_Base_SetConfig+0x138>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d003      	beq.n	80081d8 <TIM_Base_SetConfig+0x40>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a40      	ldr	r2, [pc, #256]	@ (80082d4 <TIM_Base_SetConfig+0x13c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d108      	bne.n	80081ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a35      	ldr	r2, [pc, #212]	@ (80082c4 <TIM_Base_SetConfig+0x12c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d02b      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081f8:	d027      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a32      	ldr	r2, [pc, #200]	@ (80082c8 <TIM_Base_SetConfig+0x130>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d023      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a31      	ldr	r2, [pc, #196]	@ (80082cc <TIM_Base_SetConfig+0x134>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d01f      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a30      	ldr	r2, [pc, #192]	@ (80082d0 <TIM_Base_SetConfig+0x138>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d01b      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a2f      	ldr	r2, [pc, #188]	@ (80082d4 <TIM_Base_SetConfig+0x13c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d017      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a2e      	ldr	r2, [pc, #184]	@ (80082d8 <TIM_Base_SetConfig+0x140>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d013      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a2d      	ldr	r2, [pc, #180]	@ (80082dc <TIM_Base_SetConfig+0x144>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d00f      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a2c      	ldr	r2, [pc, #176]	@ (80082e0 <TIM_Base_SetConfig+0x148>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d00b      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a2b      	ldr	r2, [pc, #172]	@ (80082e4 <TIM_Base_SetConfig+0x14c>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d007      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a2a      	ldr	r2, [pc, #168]	@ (80082e8 <TIM_Base_SetConfig+0x150>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d003      	beq.n	800824a <TIM_Base_SetConfig+0xb2>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a29      	ldr	r2, [pc, #164]	@ (80082ec <TIM_Base_SetConfig+0x154>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d108      	bne.n	800825c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	4313      	orrs	r3, r2
 800825a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a10      	ldr	r2, [pc, #64]	@ (80082c4 <TIM_Base_SetConfig+0x12c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d003      	beq.n	8008290 <TIM_Base_SetConfig+0xf8>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a12      	ldr	r2, [pc, #72]	@ (80082d4 <TIM_Base_SetConfig+0x13c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d103      	bne.n	8008298 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	691a      	ldr	r2, [r3, #16]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d105      	bne.n	80082b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f023 0201 	bic.w	r2, r3, #1
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	611a      	str	r2, [r3, #16]
  }
}
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	40010000 	.word	0x40010000
 80082c8:	40000400 	.word	0x40000400
 80082cc:	40000800 	.word	0x40000800
 80082d0:	40000c00 	.word	0x40000c00
 80082d4:	40010400 	.word	0x40010400
 80082d8:	40014000 	.word	0x40014000
 80082dc:	40014400 	.word	0x40014400
 80082e0:	40014800 	.word	0x40014800
 80082e4:	40001800 	.word	0x40001800
 80082e8:	40001c00 	.word	0x40001c00
 80082ec:	40002000 	.word	0x40002000

080082f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	f023 0201 	bic.w	r2, r3, #1
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800831a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	011b      	lsls	r3, r3, #4
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f023 030a 	bic.w	r3, r3, #10
 800832c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	621a      	str	r2, [r3, #32]
}
 8008342:	bf00      	nop
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800834e:	b480      	push	{r7}
 8008350:	b087      	sub	sp, #28
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6a1b      	ldr	r3, [r3, #32]
 8008364:	f023 0210 	bic.w	r2, r3, #16
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008378:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	031b      	lsls	r3, r3, #12
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	4313      	orrs	r3, r2
 8008382:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800838a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	011b      	lsls	r3, r3, #4
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	4313      	orrs	r3, r2
 8008394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	697a      	ldr	r2, [r7, #20]
 80083a0:	621a      	str	r2, [r3, #32]
}
 80083a2:	bf00      	nop
 80083a4:	371c      	adds	r7, #28
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b085      	sub	sp, #20
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	f043 0307 	orr.w	r3, r3, #7
 80083d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	609a      	str	r2, [r3, #8]
}
 80083d8:	bf00      	nop
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b087      	sub	sp, #28
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	021a      	lsls	r2, r3, #8
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	431a      	orrs	r2, r3
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4313      	orrs	r3, r2
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	4313      	orrs	r3, r2
 8008410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	609a      	str	r2, [r3, #8]
}
 8008418:	bf00      	nop
 800841a:	371c      	adds	r7, #28
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008434:	2b01      	cmp	r3, #1
 8008436:	d101      	bne.n	800843c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008438:	2302      	movs	r3, #2
 800843a:	e05a      	b.n	80084f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2202      	movs	r2, #2
 8008448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a21      	ldr	r2, [pc, #132]	@ (8008500 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d022      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008488:	d01d      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a1d      	ldr	r2, [pc, #116]	@ (8008504 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d018      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a1b      	ldr	r2, [pc, #108]	@ (8008508 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d013      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a1a      	ldr	r2, [pc, #104]	@ (800850c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00e      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a18      	ldr	r2, [pc, #96]	@ (8008510 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d009      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a17      	ldr	r2, [pc, #92]	@ (8008514 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d004      	beq.n	80084c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a15      	ldr	r2, [pc, #84]	@ (8008518 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d10c      	bne.n	80084e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80084f0:	2300      	movs	r3, #0
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	40010000 	.word	0x40010000
 8008504:	40000400 	.word	0x40000400
 8008508:	40000800 	.word	0x40000800
 800850c:	40000c00 	.word	0x40000c00
 8008510:	40010400 	.word	0x40010400
 8008514:	40014000 	.word	0x40014000
 8008518:	40001800 	.word	0x40001800

0800851c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b082      	sub	sp, #8
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d101      	bne.n	8008556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e042      	b.n	80085dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d106      	bne.n	8008570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7f9 fdae 	bl	80020cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2224      	movs	r2, #36	@ 0x24
 8008574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68da      	ldr	r2, [r3, #12]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008586:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 ff7b 	bl	8009484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	691a      	ldr	r2, [r3, #16]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800859c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	695a      	ldr	r2, [r3, #20]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	68da      	ldr	r2, [r3, #12]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3708      	adds	r7, #8
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08a      	sub	sp, #40	@ 0x28
 80085e8:	af02      	add	r7, sp, #8
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	603b      	str	r3, [r7, #0]
 80085f0:	4613      	mov	r3, r2
 80085f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b20      	cmp	r3, #32
 8008602:	d175      	bne.n	80086f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <HAL_UART_Transmit+0x2c>
 800860a:	88fb      	ldrh	r3, [r7, #6]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e06e      	b.n	80086f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2221      	movs	r2, #33	@ 0x21
 800861e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008622:	f7fc fd15 	bl	8005050 <HAL_GetTick>
 8008626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	88fa      	ldrh	r2, [r7, #6]
 800862c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	88fa      	ldrh	r2, [r7, #6]
 8008632:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800863c:	d108      	bne.n	8008650 <HAL_UART_Transmit+0x6c>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d104      	bne.n	8008650 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008646:	2300      	movs	r3, #0
 8008648:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	61bb      	str	r3, [r7, #24]
 800864e:	e003      	b.n	8008658 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008654:	2300      	movs	r3, #0
 8008656:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008658:	e02e      	b.n	80086b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	2200      	movs	r2, #0
 8008662:	2180      	movs	r1, #128	@ 0x80
 8008664:	68f8      	ldr	r0, [r7, #12]
 8008666:	f000 fc53 	bl	8008f10 <UART_WaitOnFlagUntilTimeout>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d005      	beq.n	800867c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2220      	movs	r2, #32
 8008674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008678:	2303      	movs	r3, #3
 800867a:	e03a      	b.n	80086f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10b      	bne.n	800869a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	881b      	ldrh	r3, [r3, #0]
 8008686:	461a      	mov	r2, r3
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008690:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	3302      	adds	r3, #2
 8008696:	61bb      	str	r3, [r7, #24]
 8008698:	e007      	b.n	80086aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800869a:	69fb      	ldr	r3, [r7, #28]
 800869c:	781a      	ldrb	r2, [r3, #0]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	3301      	adds	r3, #1
 80086a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1cb      	bne.n	800865a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	2200      	movs	r2, #0
 80086ca:	2140      	movs	r1, #64	@ 0x40
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f000 fc1f 	bl	8008f10 <UART_WaitOnFlagUntilTimeout>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d005      	beq.n	80086e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2220      	movs	r2, #32
 80086dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80086e0:	2303      	movs	r3, #3
 80086e2:	e006      	b.n	80086f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2220      	movs	r2, #32
 80086e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e000      	b.n	80086f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80086f0:	2302      	movs	r3, #2
  }
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3720      	adds	r7, #32
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b08c      	sub	sp, #48	@ 0x30
 80086fe:	af00      	add	r7, sp, #0
 8008700:	60f8      	str	r0, [r7, #12]
 8008702:	60b9      	str	r1, [r7, #8]
 8008704:	4613      	mov	r3, r2
 8008706:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800870e:	b2db      	uxtb	r3, r3
 8008710:	2b20      	cmp	r3, #32
 8008712:	d14a      	bne.n	80087aa <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d002      	beq.n	8008720 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800871a:	88fb      	ldrh	r3, [r7, #6]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e043      	b.n	80087ac <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2201      	movs	r2, #1
 8008728:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008730:	88fb      	ldrh	r3, [r7, #6]
 8008732:	461a      	mov	r2, r3
 8008734:	68b9      	ldr	r1, [r7, #8]
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 fc44 	bl	8008fc4 <UART_Start_Receive_DMA>
 800873c:	4603      	mov	r3, r0
 800873e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008742:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008746:	2b00      	cmp	r3, #0
 8008748:	d12c      	bne.n	80087a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800874e:	2b01      	cmp	r3, #1
 8008750:	d125      	bne.n	800879e <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008752:	2300      	movs	r3, #0
 8008754:	613b      	str	r3, [r7, #16]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	613b      	str	r3, [r7, #16]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	613b      	str	r3, [r7, #16]
 8008766:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	330c      	adds	r3, #12
 800876e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	e853 3f00 	ldrex	r3, [r3]
 8008776:	617b      	str	r3, [r7, #20]
   return(result);
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	f043 0310 	orr.w	r3, r3, #16
 800877e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	330c      	adds	r3, #12
 8008786:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008788:	627a      	str	r2, [r7, #36]	@ 0x24
 800878a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6a39      	ldr	r1, [r7, #32]
 800878e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008790:	e841 2300 	strex	r3, r2, [r1]
 8008794:	61fb      	str	r3, [r7, #28]
   return(result);
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1e5      	bne.n	8008768 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800879c:	e002      	b.n	80087a4 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80087a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80087a8:	e000      	b.n	80087ac <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80087aa:	2302      	movs	r3, #2
  }
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3730      	adds	r7, #48	@ 0x30
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b0ba      	sub	sp, #232	@ 0xe8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80087da:	2300      	movs	r3, #0
 80087dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087ea:	f003 030f 	and.w	r3, r3, #15
 80087ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80087f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10f      	bne.n	800881a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	2b00      	cmp	r3, #0
 8008804:	d009      	beq.n	800881a <HAL_UART_IRQHandler+0x66>
 8008806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fd77 	bl	8009306 <UART_Receive_IT>
      return;
 8008818:	e25b      	b.n	8008cd2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800881a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 80de 	beq.w	80089e0 <HAL_UART_IRQHandler+0x22c>
 8008824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d106      	bne.n	800883e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008834:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 80d1 	beq.w	80089e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800883e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00b      	beq.n	8008862 <HAL_UART_IRQHandler+0xae>
 800884a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800884e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008852:	2b00      	cmp	r3, #0
 8008854:	d005      	beq.n	8008862 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885a:	f043 0201 	orr.w	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008866:	f003 0304 	and.w	r3, r3, #4
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00b      	beq.n	8008886 <HAL_UART_IRQHandler+0xd2>
 800886e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	2b00      	cmp	r3, #0
 8008878:	d005      	beq.n	8008886 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800887e:	f043 0202 	orr.w	r2, r3, #2
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	2b00      	cmp	r3, #0
 8008890:	d00b      	beq.n	80088aa <HAL_UART_IRQHandler+0xf6>
 8008892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	2b00      	cmp	r3, #0
 800889c:	d005      	beq.n	80088aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088a2:	f043 0204 	orr.w	r2, r3, #4
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80088aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088ae:	f003 0308 	and.w	r3, r3, #8
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d011      	beq.n	80088da <HAL_UART_IRQHandler+0x126>
 80088b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088ba:	f003 0320 	and.w	r3, r3, #32
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d105      	bne.n	80088ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80088c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088c6:	f003 0301 	and.w	r3, r3, #1
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d005      	beq.n	80088da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088d2:	f043 0208 	orr.w	r2, r3, #8
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f000 81f2 	beq.w	8008cc8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088e8:	f003 0320 	and.w	r3, r3, #32
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d008      	beq.n	8008902 <HAL_UART_IRQHandler+0x14e>
 80088f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d002      	beq.n	8008902 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fd02 	bl	8009306 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800890c:	2b40      	cmp	r3, #64	@ 0x40
 800890e:	bf0c      	ite	eq
 8008910:	2301      	moveq	r3, #1
 8008912:	2300      	movne	r3, #0
 8008914:	b2db      	uxtb	r3, r3
 8008916:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800891e:	f003 0308 	and.w	r3, r3, #8
 8008922:	2b00      	cmp	r3, #0
 8008924:	d103      	bne.n	800892e <HAL_UART_IRQHandler+0x17a>
 8008926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800892a:	2b00      	cmp	r3, #0
 800892c:	d04f      	beq.n	80089ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fc0a 	bl	8009148 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800893e:	2b40      	cmp	r3, #64	@ 0x40
 8008940:	d141      	bne.n	80089c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	3314      	adds	r3, #20
 8008948:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008950:	e853 3f00 	ldrex	r3, [r3]
 8008954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008958:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800895c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008960:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	3314      	adds	r3, #20
 800896a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800896e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008972:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008976:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800897a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1d9      	bne.n	8008942 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d013      	beq.n	80089be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800899a:	4a7e      	ldr	r2, [pc, #504]	@ (8008b94 <HAL_UART_IRQHandler+0x3e0>)
 800899c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fd fc74 	bl	8006290 <HAL_DMA_Abort_IT>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d016      	beq.n	80089dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089bc:	e00e      	b.n	80089dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f7f8 fff4 	bl	80019ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c4:	e00a      	b.n	80089dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7f8 fff0 	bl	80019ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089cc:	e006      	b.n	80089dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f7f8 ffec 	bl	80019ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80089da:	e175      	b.n	8008cc8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089dc:	bf00      	nop
    return;
 80089de:	e173      	b.n	8008cc8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	f040 814f 	bne.w	8008c88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80089ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089ee:	f003 0310 	and.w	r3, r3, #16
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 8148 	beq.w	8008c88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089fc:	f003 0310 	and.w	r3, r3, #16
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 8141 	beq.w	8008c88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a06:	2300      	movs	r3, #0
 8008a08:	60bb      	str	r3, [r7, #8]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60bb      	str	r3, [r7, #8]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	60bb      	str	r3, [r7, #8]
 8008a1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	695b      	ldr	r3, [r3, #20]
 8008a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a26:	2b40      	cmp	r3, #64	@ 0x40
 8008a28:	f040 80b6 	bne.w	8008b98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 8145 	beq.w	8008ccc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	f080 813e 	bcs.w	8008ccc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a5c:	69db      	ldr	r3, [r3, #28]
 8008a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a62:	f000 8088 	beq.w	8008b76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	330c      	adds	r3, #12
 8008a6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a74:	e853 3f00 	ldrex	r3, [r3]
 8008a78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	330c      	adds	r3, #12
 8008a8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008a92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008a96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1d9      	bne.n	8008a66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3314      	adds	r3, #20
 8008ab8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008ac2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ac4:	f023 0301 	bic.w	r3, r3, #1
 8008ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3314      	adds	r3, #20
 8008ad2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ad6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008ada:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008adc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008ade:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ae8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e1      	bne.n	8008ab2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3314      	adds	r3, #20
 8008af4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008afe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3314      	adds	r3, #20
 8008b0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008b12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008b14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008b18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008b20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e3      	bne.n	8008aee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	330c      	adds	r3, #12
 8008b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b3e:	e853 3f00 	ldrex	r3, [r3]
 8008b42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b46:	f023 0310 	bic.w	r3, r3, #16
 8008b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	330c      	adds	r3, #12
 8008b54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008b58:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008b5a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b60:	e841 2300 	strex	r3, r2, [r1]
 8008b64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1e3      	bne.n	8008b34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fd fb1d 	bl	80061b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2202      	movs	r2, #2
 8008b7a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f7f8 fec1 	bl	8001914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b92:	e09b      	b.n	8008ccc <HAL_UART_IRQHandler+0x518>
 8008b94:	0800920f 	.word	0x0800920f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 808e 	beq.w	8008cd0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008bb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 8089 	beq.w	8008cd0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	330c      	adds	r3, #12
 8008bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc8:	e853 3f00 	ldrex	r3, [r3]
 8008bcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	330c      	adds	r3, #12
 8008bde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008be2:	647a      	str	r2, [r7, #68]	@ 0x44
 8008be4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008be8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e3      	bne.n	8008bbe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3314      	adds	r3, #20
 8008bfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c00:	e853 3f00 	ldrex	r3, [r3]
 8008c04:	623b      	str	r3, [r7, #32]
   return(result);
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	f023 0301 	bic.w	r3, r3, #1
 8008c0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3314      	adds	r3, #20
 8008c16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008c1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e3      	bne.n	8008bf6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2220      	movs	r2, #32
 8008c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	330c      	adds	r3, #12
 8008c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	e853 3f00 	ldrex	r3, [r3]
 8008c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f023 0310 	bic.w	r3, r3, #16
 8008c52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	330c      	adds	r3, #12
 8008c5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008c60:	61fa      	str	r2, [r7, #28]
 8008c62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c64:	69b9      	ldr	r1, [r7, #24]
 8008c66:	69fa      	ldr	r2, [r7, #28]
 8008c68:	e841 2300 	strex	r3, r2, [r1]
 8008c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1e3      	bne.n	8008c3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2202      	movs	r2, #2
 8008c78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7f8 fe47 	bl	8001914 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c86:	e023      	b.n	8008cd0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d009      	beq.n	8008ca8 <HAL_UART_IRQHandler+0x4f4>
 8008c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d003      	beq.n	8008ca8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fac8 	bl	8009236 <UART_Transmit_IT>
    return;
 8008ca6:	e014      	b.n	8008cd2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00e      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x51e>
 8008cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d008      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 fb08 	bl	80092d6 <UART_EndTransmit_IT>
    return;
 8008cc6:	e004      	b.n	8008cd2 <HAL_UART_IRQHandler+0x51e>
    return;
 8008cc8:	bf00      	nop
 8008cca:	e002      	b.n	8008cd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8008ccc:	bf00      	nop
 8008cce:	e000      	b.n	8008cd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8008cd0:	bf00      	nop
  }
}
 8008cd2:	37e8      	adds	r7, #232	@ 0xe8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b09c      	sub	sp, #112	@ 0x70
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d20:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d172      	bne.n	8008e16 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d32:	2200      	movs	r2, #0
 8008d34:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	330c      	adds	r3, #12
 8008d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d40:	e853 3f00 	ldrex	r3, [r3]
 8008d44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	330c      	adds	r3, #12
 8008d54:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008d56:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008d58:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d5e:	e841 2300 	strex	r3, r2, [r1]
 8008d62:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1e5      	bne.n	8008d36 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	3314      	adds	r3, #20
 8008d70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d7c:	f023 0301 	bic.w	r3, r3, #1
 8008d80:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3314      	adds	r3, #20
 8008d88:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d92:	e841 2300 	strex	r3, r2, [r1]
 8008d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e5      	bne.n	8008d6a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3314      	adds	r3, #20
 8008da4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da8:	e853 3f00 	ldrex	r3, [r3]
 8008dac:	623b      	str	r3, [r7, #32]
   return(result);
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008db4:	663b      	str	r3, [r7, #96]	@ 0x60
 8008db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3314      	adds	r3, #20
 8008dbc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008dbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8008dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dc6:	e841 2300 	strex	r3, r2, [r1]
 8008dca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1e5      	bne.n	8008d9e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d119      	bne.n	8008e16 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	330c      	adds	r3, #12
 8008de8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	e853 3f00 	ldrex	r3, [r3]
 8008df0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f023 0310 	bic.w	r3, r3, #16
 8008df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	330c      	adds	r3, #12
 8008e00:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008e02:	61fa      	str	r2, [r7, #28]
 8008e04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	69b9      	ldr	r1, [r7, #24]
 8008e08:	69fa      	ldr	r2, [r7, #28]
 8008e0a:	e841 2300 	strex	r3, r2, [r1]
 8008e0e:	617b      	str	r3, [r7, #20]
   return(result);
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1e5      	bne.n	8008de2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e18:	2200      	movs	r2, #0
 8008e1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d106      	bne.n	8008e32 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008e2c:	f7f8 fd72 	bl	8001914 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e30:	e002      	b.n	8008e38 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008e32:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008e34:	f7ff ff5a 	bl	8008cec <HAL_UART_RxCpltCallback>
}
 8008e38:	bf00      	nop
 8008e3a:	3770      	adds	r7, #112	@ 0x70
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2201      	movs	r2, #1
 8008e52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e58:	2b01      	cmp	r3, #1
 8008e5a:	d108      	bne.n	8008e6e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e60:	085b      	lsrs	r3, r3, #1
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	4619      	mov	r1, r3
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f7f8 fd54 	bl	8001914 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e6c:	e002      	b.n	8008e74 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f7ff ff46 	bl	8008d00 <HAL_UART_RxHalfCpltCallback>
}
 8008e74:	bf00      	nop
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008e84:	2300      	movs	r3, #0
 8008e86:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e98:	2b80      	cmp	r3, #128	@ 0x80
 8008e9a:	bf0c      	ite	eq
 8008e9c:	2301      	moveq	r3, #1
 8008e9e:	2300      	movne	r3, #0
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b21      	cmp	r3, #33	@ 0x21
 8008eae:	d108      	bne.n	8008ec2 <UART_DMAError+0x46>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d005      	beq.n	8008ec2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008ebc:	68b8      	ldr	r0, [r7, #8]
 8008ebe:	f000 f91b 	bl	80090f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ecc:	2b40      	cmp	r3, #64	@ 0x40
 8008ece:	bf0c      	ite	eq
 8008ed0:	2301      	moveq	r3, #1
 8008ed2:	2300      	movne	r3, #0
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b22      	cmp	r3, #34	@ 0x22
 8008ee2:	d108      	bne.n	8008ef6 <UART_DMAError+0x7a>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d005      	beq.n	8008ef6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	2200      	movs	r2, #0
 8008eee:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008ef0:	68b8      	ldr	r0, [r7, #8]
 8008ef2:	f000 f929 	bl	8009148 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008efa:	f043 0210 	orr.w	r2, r3, #16
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f02:	68b8      	ldr	r0, [r7, #8]
 8008f04:	f7f8 fd52 	bl	80019ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f08:	bf00      	nop
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	603b      	str	r3, [r7, #0]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f20:	e03b      	b.n	8008f9a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f22:	6a3b      	ldr	r3, [r7, #32]
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d037      	beq.n	8008f9a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f2a:	f7fc f891 	bl	8005050 <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	6a3a      	ldr	r2, [r7, #32]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d302      	bcc.n	8008f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f3a:	6a3b      	ldr	r3, [r7, #32]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e03a      	b.n	8008fba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	f003 0304 	and.w	r3, r3, #4
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d023      	beq.n	8008f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2b80      	cmp	r3, #128	@ 0x80
 8008f56:	d020      	beq.n	8008f9a <UART_WaitOnFlagUntilTimeout+0x8a>
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b40      	cmp	r3, #64	@ 0x40
 8008f5c:	d01d      	beq.n	8008f9a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0308 	and.w	r3, r3, #8
 8008f68:	2b08      	cmp	r3, #8
 8008f6a:	d116      	bne.n	8008f9a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	617b      	str	r3, [r7, #20]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	617b      	str	r3, [r7, #20]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	617b      	str	r3, [r7, #20]
 8008f80:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 f8e0 	bl	8009148 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2208      	movs	r2, #8
 8008f8c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e00f      	b.n	8008fba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	bf0c      	ite	eq
 8008faa:	2301      	moveq	r3, #1
 8008fac:	2300      	movne	r3, #0
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	79fb      	ldrb	r3, [r7, #7]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d0b4      	beq.n	8008f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
	...

08008fc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b098      	sub	sp, #96	@ 0x60
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	88fa      	ldrh	r2, [r7, #6]
 8008fdc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	2222      	movs	r2, #34	@ 0x22
 8008fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff0:	4a3e      	ldr	r2, [pc, #248]	@ (80090ec <UART_Start_Receive_DMA+0x128>)
 8008ff2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ff8:	4a3d      	ldr	r2, [pc, #244]	@ (80090f0 <UART_Start_Receive_DMA+0x12c>)
 8008ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009000:	4a3c      	ldr	r2, [pc, #240]	@ (80090f4 <UART_Start_Receive_DMA+0x130>)
 8009002:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009008:	2200      	movs	r2, #0
 800900a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800900c:	f107 0308 	add.w	r3, r7, #8
 8009010:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3304      	adds	r3, #4
 800901c:	4619      	mov	r1, r3
 800901e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	88fb      	ldrh	r3, [r7, #6]
 8009024:	f7fd f86c 	bl	8006100 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009028:	2300      	movs	r3, #0
 800902a:	613b      	str	r3, [r7, #16]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	613b      	str	r3, [r7, #16]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685b      	ldr	r3, [r3, #4]
 800903a:	613b      	str	r3, [r7, #16]
 800903c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d019      	beq.n	800907a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	330c      	adds	r3, #12
 800904c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800905c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	330c      	adds	r3, #12
 8009064:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009066:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009068:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800906c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800906e:	e841 2300 	strex	r3, r2, [r1]
 8009072:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1e5      	bne.n	8009046 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3314      	adds	r3, #20
 8009080:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800908a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908c:	f043 0301 	orr.w	r3, r3, #1
 8009090:	657b      	str	r3, [r7, #84]	@ 0x54
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3314      	adds	r3, #20
 8009098:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800909a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800909c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80090a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80090a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e5      	bne.n	800907a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3314      	adds	r3, #20
 80090b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	617b      	str	r3, [r7, #20]
   return(result);
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	3314      	adds	r3, #20
 80090cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80090ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80090d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6a39      	ldr	r1, [r7, #32]
 80090d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	61fb      	str	r3, [r7, #28]
   return(result);
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e5      	bne.n	80090ae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3760      	adds	r7, #96	@ 0x60
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	08008d15 	.word	0x08008d15
 80090f0:	08008e41 	.word	0x08008e41
 80090f4:	08008e7d 	.word	0x08008e7d

080090f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b089      	sub	sp, #36	@ 0x24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	330c      	adds	r3, #12
 8009106:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	e853 3f00 	ldrex	r3, [r3]
 800910e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009116:	61fb      	str	r3, [r7, #28]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	330c      	adds	r3, #12
 800911e:	69fa      	ldr	r2, [r7, #28]
 8009120:	61ba      	str	r2, [r7, #24]
 8009122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	6979      	ldr	r1, [r7, #20]
 8009126:	69ba      	ldr	r2, [r7, #24]
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	613b      	str	r3, [r7, #16]
   return(result);
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e5      	bne.n	8009100 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2220      	movs	r2, #32
 8009138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800913c:	bf00      	nop
 800913e:	3724      	adds	r7, #36	@ 0x24
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009148:	b480      	push	{r7}
 800914a:	b095      	sub	sp, #84	@ 0x54
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	330c      	adds	r3, #12
 8009156:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800915a:	e853 3f00 	ldrex	r3, [r3]
 800915e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009162:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	330c      	adds	r3, #12
 800916e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009170:	643a      	str	r2, [r7, #64]	@ 0x40
 8009172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009174:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009176:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009178:	e841 2300 	strex	r3, r2, [r1]
 800917c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800917e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009180:	2b00      	cmp	r3, #0
 8009182:	d1e5      	bne.n	8009150 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3314      	adds	r3, #20
 800918a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	e853 3f00 	ldrex	r3, [r3]
 8009192:	61fb      	str	r3, [r7, #28]
   return(result);
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	f023 0301 	bic.w	r3, r3, #1
 800919a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	3314      	adds	r3, #20
 80091a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80091a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091ac:	e841 2300 	strex	r3, r2, [r1]
 80091b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80091b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d1e5      	bne.n	8009184 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d119      	bne.n	80091f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	330c      	adds	r3, #12
 80091c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	e853 3f00 	ldrex	r3, [r3]
 80091ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	f023 0310 	bic.w	r3, r3, #16
 80091d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	330c      	adds	r3, #12
 80091de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091e0:	61ba      	str	r2, [r7, #24]
 80091e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e4:	6979      	ldr	r1, [r7, #20]
 80091e6:	69ba      	ldr	r2, [r7, #24]
 80091e8:	e841 2300 	strex	r3, r2, [r1]
 80091ec:	613b      	str	r3, [r7, #16]
   return(result);
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1e5      	bne.n	80091c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2220      	movs	r2, #32
 80091f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009202:	bf00      	nop
 8009204:	3754      	adds	r7, #84	@ 0x54
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b084      	sub	sp, #16
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2200      	movs	r2, #0
 8009226:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f7f8 fbbf 	bl	80019ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800922e:	bf00      	nop
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}

08009236 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009236:	b480      	push	{r7}
 8009238:	b085      	sub	sp, #20
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b21      	cmp	r3, #33	@ 0x21
 8009248:	d13e      	bne.n	80092c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009252:	d114      	bne.n	800927e <UART_Transmit_IT+0x48>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d110      	bne.n	800927e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a1b      	ldr	r3, [r3, #32]
 8009260:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	881b      	ldrh	r3, [r3, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009270:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	1c9a      	adds	r2, r3, #2
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	621a      	str	r2, [r3, #32]
 800927c:	e008      	b.n	8009290 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	1c59      	adds	r1, r3, #1
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	6211      	str	r1, [r2, #32]
 8009288:	781a      	ldrb	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009294:	b29b      	uxth	r3, r3
 8009296:	3b01      	subs	r3, #1
 8009298:	b29b      	uxth	r3, r3
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	4619      	mov	r1, r3
 800929e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d10f      	bne.n	80092c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68da      	ldr	r2, [r3, #12]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80092b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68da      	ldr	r2, [r3, #12]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80092c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	e000      	b.n	80092ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80092c8:	2302      	movs	r3, #2
  }
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3714      	adds	r7, #20
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68da      	ldr	r2, [r3, #12]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80092ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2220      	movs	r2, #32
 80092f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7ff fcee 	bl	8008cd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b08c      	sub	sp, #48	@ 0x30
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009314:	b2db      	uxtb	r3, r3
 8009316:	2b22      	cmp	r3, #34	@ 0x22
 8009318:	f040 80ae 	bne.w	8009478 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009324:	d117      	bne.n	8009356 <UART_Receive_IT+0x50>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d113      	bne.n	8009356 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800932e:	2300      	movs	r3, #0
 8009330:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009336:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	b29b      	uxth	r3, r3
 8009340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009344:	b29a      	uxth	r2, r3
 8009346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009348:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800934e:	1c9a      	adds	r2, r3, #2
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	629a      	str	r2, [r3, #40]	@ 0x28
 8009354:	e026      	b.n	80093a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800935c:	2300      	movs	r3, #0
 800935e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009368:	d007      	beq.n	800937a <UART_Receive_IT+0x74>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10a      	bne.n	8009388 <UART_Receive_IT+0x82>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d106      	bne.n	8009388 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	b2da      	uxtb	r2, r3
 8009382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009384:	701a      	strb	r2, [r3, #0]
 8009386:	e008      	b.n	800939a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	b2db      	uxtb	r3, r3
 8009390:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009394:	b2da      	uxtb	r2, r3
 8009396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009398:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800939e:	1c5a      	adds	r2, r3, #1
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	3b01      	subs	r3, #1
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	4619      	mov	r1, r3
 80093b2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d15d      	bne.n	8009474 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68da      	ldr	r2, [r3, #12]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 0220 	bic.w	r2, r2, #32
 80093c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68da      	ldr	r2, [r3, #12]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80093d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	695a      	ldr	r2, [r3, #20]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0201 	bic.w	r2, r2, #1
 80093e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093fa:	2b01      	cmp	r3, #1
 80093fc:	d135      	bne.n	800946a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	330c      	adds	r3, #12
 800940a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	e853 3f00 	ldrex	r3, [r3]
 8009412:	613b      	str	r3, [r7, #16]
   return(result);
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	f023 0310 	bic.w	r3, r3, #16
 800941a:	627b      	str	r3, [r7, #36]	@ 0x24
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	330c      	adds	r3, #12
 8009422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009424:	623a      	str	r2, [r7, #32]
 8009426:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009428:	69f9      	ldr	r1, [r7, #28]
 800942a:	6a3a      	ldr	r2, [r7, #32]
 800942c:	e841 2300 	strex	r3, r2, [r1]
 8009430:	61bb      	str	r3, [r7, #24]
   return(result);
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d1e5      	bne.n	8009404 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 0310 	and.w	r3, r3, #16
 8009442:	2b10      	cmp	r3, #16
 8009444:	d10a      	bne.n	800945c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009446:	2300      	movs	r3, #0
 8009448:	60fb      	str	r3, [r7, #12]
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	60fb      	str	r3, [r7, #12]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	60fb      	str	r3, [r7, #12]
 800945a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009460:	4619      	mov	r1, r3
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7f8 fa56 	bl	8001914 <HAL_UARTEx_RxEventCallback>
 8009468:	e002      	b.n	8009470 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f7ff fc3e 	bl	8008cec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	e002      	b.n	800947a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	e000      	b.n	800947a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009478:	2302      	movs	r3, #2
  }
}
 800947a:	4618      	mov	r0, r3
 800947c:	3730      	adds	r7, #48	@ 0x30
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
	...

08009484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009488:	b0c0      	sub	sp, #256	@ 0x100
 800948a:	af00      	add	r7, sp, #0
 800948c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800949c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a0:	68d9      	ldr	r1, [r3, #12]
 80094a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	ea40 0301 	orr.w	r3, r0, r1
 80094ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80094ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	431a      	orrs	r2, r3
 80094bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c0:	695b      	ldr	r3, [r3, #20]
 80094c2:	431a      	orrs	r2, r3
 80094c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094c8:	69db      	ldr	r3, [r3, #28]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80094d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80094dc:	f021 010c 	bic.w	r1, r1, #12
 80094e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80094ea:	430b      	orrs	r3, r1
 80094ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80094ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80094fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094fe:	6999      	ldr	r1, [r3, #24]
 8009500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	ea40 0301 	orr.w	r3, r0, r1
 800950a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800950c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	4b8f      	ldr	r3, [pc, #572]	@ (8009750 <UART_SetConfig+0x2cc>)
 8009514:	429a      	cmp	r2, r3
 8009516:	d005      	beq.n	8009524 <UART_SetConfig+0xa0>
 8009518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	4b8d      	ldr	r3, [pc, #564]	@ (8009754 <UART_SetConfig+0x2d0>)
 8009520:	429a      	cmp	r2, r3
 8009522:	d104      	bne.n	800952e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009524:	f7fd ff80 	bl	8007428 <HAL_RCC_GetPCLK2Freq>
 8009528:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800952c:	e003      	b.n	8009536 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800952e:	f7fd ff67 	bl	8007400 <HAL_RCC_GetPCLK1Freq>
 8009532:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800953a:	69db      	ldr	r3, [r3, #28]
 800953c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009540:	f040 810c 	bne.w	800975c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009548:	2200      	movs	r2, #0
 800954a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800954e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009552:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009556:	4622      	mov	r2, r4
 8009558:	462b      	mov	r3, r5
 800955a:	1891      	adds	r1, r2, r2
 800955c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800955e:	415b      	adcs	r3, r3
 8009560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009562:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009566:	4621      	mov	r1, r4
 8009568:	eb12 0801 	adds.w	r8, r2, r1
 800956c:	4629      	mov	r1, r5
 800956e:	eb43 0901 	adc.w	r9, r3, r1
 8009572:	f04f 0200 	mov.w	r2, #0
 8009576:	f04f 0300 	mov.w	r3, #0
 800957a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800957e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009586:	4690      	mov	r8, r2
 8009588:	4699      	mov	r9, r3
 800958a:	4623      	mov	r3, r4
 800958c:	eb18 0303 	adds.w	r3, r8, r3
 8009590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009594:	462b      	mov	r3, r5
 8009596:	eb49 0303 	adc.w	r3, r9, r3
 800959a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800959e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80095aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80095ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80095b2:	460b      	mov	r3, r1
 80095b4:	18db      	adds	r3, r3, r3
 80095b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80095b8:	4613      	mov	r3, r2
 80095ba:	eb42 0303 	adc.w	r3, r2, r3
 80095be:	657b      	str	r3, [r7, #84]	@ 0x54
 80095c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80095c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80095c8:	f7f7 fafe 	bl	8000bc8 <__aeabi_uldivmod>
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	4b61      	ldr	r3, [pc, #388]	@ (8009758 <UART_SetConfig+0x2d4>)
 80095d2:	fba3 2302 	umull	r2, r3, r3, r2
 80095d6:	095b      	lsrs	r3, r3, #5
 80095d8:	011c      	lsls	r4, r3, #4
 80095da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095de:	2200      	movs	r2, #0
 80095e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80095e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80095e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80095ec:	4642      	mov	r2, r8
 80095ee:	464b      	mov	r3, r9
 80095f0:	1891      	adds	r1, r2, r2
 80095f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80095f4:	415b      	adcs	r3, r3
 80095f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80095fc:	4641      	mov	r1, r8
 80095fe:	eb12 0a01 	adds.w	sl, r2, r1
 8009602:	4649      	mov	r1, r9
 8009604:	eb43 0b01 	adc.w	fp, r3, r1
 8009608:	f04f 0200 	mov.w	r2, #0
 800960c:	f04f 0300 	mov.w	r3, #0
 8009610:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009614:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800961c:	4692      	mov	sl, r2
 800961e:	469b      	mov	fp, r3
 8009620:	4643      	mov	r3, r8
 8009622:	eb1a 0303 	adds.w	r3, sl, r3
 8009626:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800962a:	464b      	mov	r3, r9
 800962c:	eb4b 0303 	adc.w	r3, fp, r3
 8009630:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009640:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009644:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009648:	460b      	mov	r3, r1
 800964a:	18db      	adds	r3, r3, r3
 800964c:	643b      	str	r3, [r7, #64]	@ 0x40
 800964e:	4613      	mov	r3, r2
 8009650:	eb42 0303 	adc.w	r3, r2, r3
 8009654:	647b      	str	r3, [r7, #68]	@ 0x44
 8009656:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800965a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800965e:	f7f7 fab3 	bl	8000bc8 <__aeabi_uldivmod>
 8009662:	4602      	mov	r2, r0
 8009664:	460b      	mov	r3, r1
 8009666:	4611      	mov	r1, r2
 8009668:	4b3b      	ldr	r3, [pc, #236]	@ (8009758 <UART_SetConfig+0x2d4>)
 800966a:	fba3 2301 	umull	r2, r3, r3, r1
 800966e:	095b      	lsrs	r3, r3, #5
 8009670:	2264      	movs	r2, #100	@ 0x64
 8009672:	fb02 f303 	mul.w	r3, r2, r3
 8009676:	1acb      	subs	r3, r1, r3
 8009678:	00db      	lsls	r3, r3, #3
 800967a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800967e:	4b36      	ldr	r3, [pc, #216]	@ (8009758 <UART_SetConfig+0x2d4>)
 8009680:	fba3 2302 	umull	r2, r3, r3, r2
 8009684:	095b      	lsrs	r3, r3, #5
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800968c:	441c      	add	r4, r3
 800968e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009692:	2200      	movs	r2, #0
 8009694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009698:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800969c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80096a0:	4642      	mov	r2, r8
 80096a2:	464b      	mov	r3, r9
 80096a4:	1891      	adds	r1, r2, r2
 80096a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80096a8:	415b      	adcs	r3, r3
 80096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80096b0:	4641      	mov	r1, r8
 80096b2:	1851      	adds	r1, r2, r1
 80096b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80096b6:	4649      	mov	r1, r9
 80096b8:	414b      	adcs	r3, r1
 80096ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80096bc:	f04f 0200 	mov.w	r2, #0
 80096c0:	f04f 0300 	mov.w	r3, #0
 80096c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80096c8:	4659      	mov	r1, fp
 80096ca:	00cb      	lsls	r3, r1, #3
 80096cc:	4651      	mov	r1, sl
 80096ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096d2:	4651      	mov	r1, sl
 80096d4:	00ca      	lsls	r2, r1, #3
 80096d6:	4610      	mov	r0, r2
 80096d8:	4619      	mov	r1, r3
 80096da:	4603      	mov	r3, r0
 80096dc:	4642      	mov	r2, r8
 80096de:	189b      	adds	r3, r3, r2
 80096e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80096e4:	464b      	mov	r3, r9
 80096e6:	460a      	mov	r2, r1
 80096e8:	eb42 0303 	adc.w	r3, r2, r3
 80096ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80096f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80096fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009700:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009704:	460b      	mov	r3, r1
 8009706:	18db      	adds	r3, r3, r3
 8009708:	62bb      	str	r3, [r7, #40]	@ 0x28
 800970a:	4613      	mov	r3, r2
 800970c:	eb42 0303 	adc.w	r3, r2, r3
 8009710:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009712:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009716:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800971a:	f7f7 fa55 	bl	8000bc8 <__aeabi_uldivmod>
 800971e:	4602      	mov	r2, r0
 8009720:	460b      	mov	r3, r1
 8009722:	4b0d      	ldr	r3, [pc, #52]	@ (8009758 <UART_SetConfig+0x2d4>)
 8009724:	fba3 1302 	umull	r1, r3, r3, r2
 8009728:	095b      	lsrs	r3, r3, #5
 800972a:	2164      	movs	r1, #100	@ 0x64
 800972c:	fb01 f303 	mul.w	r3, r1, r3
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	3332      	adds	r3, #50	@ 0x32
 8009736:	4a08      	ldr	r2, [pc, #32]	@ (8009758 <UART_SetConfig+0x2d4>)
 8009738:	fba2 2303 	umull	r2, r3, r2, r3
 800973c:	095b      	lsrs	r3, r3, #5
 800973e:	f003 0207 	and.w	r2, r3, #7
 8009742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4422      	add	r2, r4
 800974a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800974c:	e106      	b.n	800995c <UART_SetConfig+0x4d8>
 800974e:	bf00      	nop
 8009750:	40011000 	.word	0x40011000
 8009754:	40011400 	.word	0x40011400
 8009758:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800975c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009760:	2200      	movs	r2, #0
 8009762:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009766:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800976a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800976e:	4642      	mov	r2, r8
 8009770:	464b      	mov	r3, r9
 8009772:	1891      	adds	r1, r2, r2
 8009774:	6239      	str	r1, [r7, #32]
 8009776:	415b      	adcs	r3, r3
 8009778:	627b      	str	r3, [r7, #36]	@ 0x24
 800977a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800977e:	4641      	mov	r1, r8
 8009780:	1854      	adds	r4, r2, r1
 8009782:	4649      	mov	r1, r9
 8009784:	eb43 0501 	adc.w	r5, r3, r1
 8009788:	f04f 0200 	mov.w	r2, #0
 800978c:	f04f 0300 	mov.w	r3, #0
 8009790:	00eb      	lsls	r3, r5, #3
 8009792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009796:	00e2      	lsls	r2, r4, #3
 8009798:	4614      	mov	r4, r2
 800979a:	461d      	mov	r5, r3
 800979c:	4643      	mov	r3, r8
 800979e:	18e3      	adds	r3, r4, r3
 80097a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80097a4:	464b      	mov	r3, r9
 80097a6:	eb45 0303 	adc.w	r3, r5, r3
 80097aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80097ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80097ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80097be:	f04f 0200 	mov.w	r2, #0
 80097c2:	f04f 0300 	mov.w	r3, #0
 80097c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80097ca:	4629      	mov	r1, r5
 80097cc:	008b      	lsls	r3, r1, #2
 80097ce:	4621      	mov	r1, r4
 80097d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097d4:	4621      	mov	r1, r4
 80097d6:	008a      	lsls	r2, r1, #2
 80097d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80097dc:	f7f7 f9f4 	bl	8000bc8 <__aeabi_uldivmod>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	4b60      	ldr	r3, [pc, #384]	@ (8009968 <UART_SetConfig+0x4e4>)
 80097e6:	fba3 2302 	umull	r2, r3, r3, r2
 80097ea:	095b      	lsrs	r3, r3, #5
 80097ec:	011c      	lsls	r4, r3, #4
 80097ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097f2:	2200      	movs	r2, #0
 80097f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80097f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80097fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009800:	4642      	mov	r2, r8
 8009802:	464b      	mov	r3, r9
 8009804:	1891      	adds	r1, r2, r2
 8009806:	61b9      	str	r1, [r7, #24]
 8009808:	415b      	adcs	r3, r3
 800980a:	61fb      	str	r3, [r7, #28]
 800980c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009810:	4641      	mov	r1, r8
 8009812:	1851      	adds	r1, r2, r1
 8009814:	6139      	str	r1, [r7, #16]
 8009816:	4649      	mov	r1, r9
 8009818:	414b      	adcs	r3, r1
 800981a:	617b      	str	r3, [r7, #20]
 800981c:	f04f 0200 	mov.w	r2, #0
 8009820:	f04f 0300 	mov.w	r3, #0
 8009824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009828:	4659      	mov	r1, fp
 800982a:	00cb      	lsls	r3, r1, #3
 800982c:	4651      	mov	r1, sl
 800982e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009832:	4651      	mov	r1, sl
 8009834:	00ca      	lsls	r2, r1, #3
 8009836:	4610      	mov	r0, r2
 8009838:	4619      	mov	r1, r3
 800983a:	4603      	mov	r3, r0
 800983c:	4642      	mov	r2, r8
 800983e:	189b      	adds	r3, r3, r2
 8009840:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009844:	464b      	mov	r3, r9
 8009846:	460a      	mov	r2, r1
 8009848:	eb42 0303 	adc.w	r3, r2, r3
 800984c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	67bb      	str	r3, [r7, #120]	@ 0x78
 800985a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800985c:	f04f 0200 	mov.w	r2, #0
 8009860:	f04f 0300 	mov.w	r3, #0
 8009864:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009868:	4649      	mov	r1, r9
 800986a:	008b      	lsls	r3, r1, #2
 800986c:	4641      	mov	r1, r8
 800986e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009872:	4641      	mov	r1, r8
 8009874:	008a      	lsls	r2, r1, #2
 8009876:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800987a:	f7f7 f9a5 	bl	8000bc8 <__aeabi_uldivmod>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	4611      	mov	r1, r2
 8009884:	4b38      	ldr	r3, [pc, #224]	@ (8009968 <UART_SetConfig+0x4e4>)
 8009886:	fba3 2301 	umull	r2, r3, r3, r1
 800988a:	095b      	lsrs	r3, r3, #5
 800988c:	2264      	movs	r2, #100	@ 0x64
 800988e:	fb02 f303 	mul.w	r3, r2, r3
 8009892:	1acb      	subs	r3, r1, r3
 8009894:	011b      	lsls	r3, r3, #4
 8009896:	3332      	adds	r3, #50	@ 0x32
 8009898:	4a33      	ldr	r2, [pc, #204]	@ (8009968 <UART_SetConfig+0x4e4>)
 800989a:	fba2 2303 	umull	r2, r3, r2, r3
 800989e:	095b      	lsrs	r3, r3, #5
 80098a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80098a4:	441c      	add	r4, r3
 80098a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098aa:	2200      	movs	r2, #0
 80098ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80098ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80098b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80098b4:	4642      	mov	r2, r8
 80098b6:	464b      	mov	r3, r9
 80098b8:	1891      	adds	r1, r2, r2
 80098ba:	60b9      	str	r1, [r7, #8]
 80098bc:	415b      	adcs	r3, r3
 80098be:	60fb      	str	r3, [r7, #12]
 80098c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098c4:	4641      	mov	r1, r8
 80098c6:	1851      	adds	r1, r2, r1
 80098c8:	6039      	str	r1, [r7, #0]
 80098ca:	4649      	mov	r1, r9
 80098cc:	414b      	adcs	r3, r1
 80098ce:	607b      	str	r3, [r7, #4]
 80098d0:	f04f 0200 	mov.w	r2, #0
 80098d4:	f04f 0300 	mov.w	r3, #0
 80098d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80098dc:	4659      	mov	r1, fp
 80098de:	00cb      	lsls	r3, r1, #3
 80098e0:	4651      	mov	r1, sl
 80098e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098e6:	4651      	mov	r1, sl
 80098e8:	00ca      	lsls	r2, r1, #3
 80098ea:	4610      	mov	r0, r2
 80098ec:	4619      	mov	r1, r3
 80098ee:	4603      	mov	r3, r0
 80098f0:	4642      	mov	r2, r8
 80098f2:	189b      	adds	r3, r3, r2
 80098f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80098f6:	464b      	mov	r3, r9
 80098f8:	460a      	mov	r2, r1
 80098fa:	eb42 0303 	adc.w	r3, r2, r3
 80098fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	663b      	str	r3, [r7, #96]	@ 0x60
 800990a:	667a      	str	r2, [r7, #100]	@ 0x64
 800990c:	f04f 0200 	mov.w	r2, #0
 8009910:	f04f 0300 	mov.w	r3, #0
 8009914:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009918:	4649      	mov	r1, r9
 800991a:	008b      	lsls	r3, r1, #2
 800991c:	4641      	mov	r1, r8
 800991e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009922:	4641      	mov	r1, r8
 8009924:	008a      	lsls	r2, r1, #2
 8009926:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800992a:	f7f7 f94d 	bl	8000bc8 <__aeabi_uldivmod>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	4b0d      	ldr	r3, [pc, #52]	@ (8009968 <UART_SetConfig+0x4e4>)
 8009934:	fba3 1302 	umull	r1, r3, r3, r2
 8009938:	095b      	lsrs	r3, r3, #5
 800993a:	2164      	movs	r1, #100	@ 0x64
 800993c:	fb01 f303 	mul.w	r3, r1, r3
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	011b      	lsls	r3, r3, #4
 8009944:	3332      	adds	r3, #50	@ 0x32
 8009946:	4a08      	ldr	r2, [pc, #32]	@ (8009968 <UART_SetConfig+0x4e4>)
 8009948:	fba2 2303 	umull	r2, r3, r2, r3
 800994c:	095b      	lsrs	r3, r3, #5
 800994e:	f003 020f 	and.w	r2, r3, #15
 8009952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4422      	add	r2, r4
 800995a:	609a      	str	r2, [r3, #8]
}
 800995c:	bf00      	nop
 800995e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009962:	46bd      	mov	sp, r7
 8009964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009968:	51eb851f 	.word	0x51eb851f

0800996c <atoi>:
 800996c:	220a      	movs	r2, #10
 800996e:	2100      	movs	r1, #0
 8009970:	f000 b96e 	b.w	8009c50 <strtol>

08009974 <malloc>:
 8009974:	4b02      	ldr	r3, [pc, #8]	@ (8009980 <malloc+0xc>)
 8009976:	4601      	mov	r1, r0
 8009978:	6818      	ldr	r0, [r3, #0]
 800997a:	f000 b82d 	b.w	80099d8 <_malloc_r>
 800997e:	bf00      	nop
 8009980:	20000184 	.word	0x20000184

08009984 <free>:
 8009984:	4b02      	ldr	r3, [pc, #8]	@ (8009990 <free+0xc>)
 8009986:	4601      	mov	r1, r0
 8009988:	6818      	ldr	r0, [r3, #0]
 800998a:	f001 beed 	b.w	800b768 <_free_r>
 800998e:	bf00      	nop
 8009990:	20000184 	.word	0x20000184

08009994 <sbrk_aligned>:
 8009994:	b570      	push	{r4, r5, r6, lr}
 8009996:	4e0f      	ldr	r6, [pc, #60]	@ (80099d4 <sbrk_aligned+0x40>)
 8009998:	460c      	mov	r4, r1
 800999a:	6831      	ldr	r1, [r6, #0]
 800999c:	4605      	mov	r5, r0
 800999e:	b911      	cbnz	r1, 80099a6 <sbrk_aligned+0x12>
 80099a0:	f001 f836 	bl	800aa10 <_sbrk_r>
 80099a4:	6030      	str	r0, [r6, #0]
 80099a6:	4621      	mov	r1, r4
 80099a8:	4628      	mov	r0, r5
 80099aa:	f001 f831 	bl	800aa10 <_sbrk_r>
 80099ae:	1c43      	adds	r3, r0, #1
 80099b0:	d103      	bne.n	80099ba <sbrk_aligned+0x26>
 80099b2:	f04f 34ff 	mov.w	r4, #4294967295
 80099b6:	4620      	mov	r0, r4
 80099b8:	bd70      	pop	{r4, r5, r6, pc}
 80099ba:	1cc4      	adds	r4, r0, #3
 80099bc:	f024 0403 	bic.w	r4, r4, #3
 80099c0:	42a0      	cmp	r0, r4
 80099c2:	d0f8      	beq.n	80099b6 <sbrk_aligned+0x22>
 80099c4:	1a21      	subs	r1, r4, r0
 80099c6:	4628      	mov	r0, r5
 80099c8:	f001 f822 	bl	800aa10 <_sbrk_r>
 80099cc:	3001      	adds	r0, #1
 80099ce:	d1f2      	bne.n	80099b6 <sbrk_aligned+0x22>
 80099d0:	e7ef      	b.n	80099b2 <sbrk_aligned+0x1e>
 80099d2:	bf00      	nop
 80099d4:	20002398 	.word	0x20002398

080099d8 <_malloc_r>:
 80099d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099dc:	1ccd      	adds	r5, r1, #3
 80099de:	f025 0503 	bic.w	r5, r5, #3
 80099e2:	3508      	adds	r5, #8
 80099e4:	2d0c      	cmp	r5, #12
 80099e6:	bf38      	it	cc
 80099e8:	250c      	movcc	r5, #12
 80099ea:	2d00      	cmp	r5, #0
 80099ec:	4606      	mov	r6, r0
 80099ee:	db01      	blt.n	80099f4 <_malloc_r+0x1c>
 80099f0:	42a9      	cmp	r1, r5
 80099f2:	d904      	bls.n	80099fe <_malloc_r+0x26>
 80099f4:	230c      	movs	r3, #12
 80099f6:	6033      	str	r3, [r6, #0]
 80099f8:	2000      	movs	r0, #0
 80099fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ad4 <_malloc_r+0xfc>
 8009a02:	f000 f869 	bl	8009ad8 <__malloc_lock>
 8009a06:	f8d8 3000 	ldr.w	r3, [r8]
 8009a0a:	461c      	mov	r4, r3
 8009a0c:	bb44      	cbnz	r4, 8009a60 <_malloc_r+0x88>
 8009a0e:	4629      	mov	r1, r5
 8009a10:	4630      	mov	r0, r6
 8009a12:	f7ff ffbf 	bl	8009994 <sbrk_aligned>
 8009a16:	1c43      	adds	r3, r0, #1
 8009a18:	4604      	mov	r4, r0
 8009a1a:	d158      	bne.n	8009ace <_malloc_r+0xf6>
 8009a1c:	f8d8 4000 	ldr.w	r4, [r8]
 8009a20:	4627      	mov	r7, r4
 8009a22:	2f00      	cmp	r7, #0
 8009a24:	d143      	bne.n	8009aae <_malloc_r+0xd6>
 8009a26:	2c00      	cmp	r4, #0
 8009a28:	d04b      	beq.n	8009ac2 <_malloc_r+0xea>
 8009a2a:	6823      	ldr	r3, [r4, #0]
 8009a2c:	4639      	mov	r1, r7
 8009a2e:	4630      	mov	r0, r6
 8009a30:	eb04 0903 	add.w	r9, r4, r3
 8009a34:	f000 ffec 	bl	800aa10 <_sbrk_r>
 8009a38:	4581      	cmp	r9, r0
 8009a3a:	d142      	bne.n	8009ac2 <_malloc_r+0xea>
 8009a3c:	6821      	ldr	r1, [r4, #0]
 8009a3e:	1a6d      	subs	r5, r5, r1
 8009a40:	4629      	mov	r1, r5
 8009a42:	4630      	mov	r0, r6
 8009a44:	f7ff ffa6 	bl	8009994 <sbrk_aligned>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	d03a      	beq.n	8009ac2 <_malloc_r+0xea>
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	442b      	add	r3, r5
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	f8d8 3000 	ldr.w	r3, [r8]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	bb62      	cbnz	r2, 8009ab4 <_malloc_r+0xdc>
 8009a5a:	f8c8 7000 	str.w	r7, [r8]
 8009a5e:	e00f      	b.n	8009a80 <_malloc_r+0xa8>
 8009a60:	6822      	ldr	r2, [r4, #0]
 8009a62:	1b52      	subs	r2, r2, r5
 8009a64:	d420      	bmi.n	8009aa8 <_malloc_r+0xd0>
 8009a66:	2a0b      	cmp	r2, #11
 8009a68:	d917      	bls.n	8009a9a <_malloc_r+0xc2>
 8009a6a:	1961      	adds	r1, r4, r5
 8009a6c:	42a3      	cmp	r3, r4
 8009a6e:	6025      	str	r5, [r4, #0]
 8009a70:	bf18      	it	ne
 8009a72:	6059      	strne	r1, [r3, #4]
 8009a74:	6863      	ldr	r3, [r4, #4]
 8009a76:	bf08      	it	eq
 8009a78:	f8c8 1000 	streq.w	r1, [r8]
 8009a7c:	5162      	str	r2, [r4, r5]
 8009a7e:	604b      	str	r3, [r1, #4]
 8009a80:	4630      	mov	r0, r6
 8009a82:	f000 f82f 	bl	8009ae4 <__malloc_unlock>
 8009a86:	f104 000b 	add.w	r0, r4, #11
 8009a8a:	1d23      	adds	r3, r4, #4
 8009a8c:	f020 0007 	bic.w	r0, r0, #7
 8009a90:	1ac2      	subs	r2, r0, r3
 8009a92:	bf1c      	itt	ne
 8009a94:	1a1b      	subne	r3, r3, r0
 8009a96:	50a3      	strne	r3, [r4, r2]
 8009a98:	e7af      	b.n	80099fa <_malloc_r+0x22>
 8009a9a:	6862      	ldr	r2, [r4, #4]
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	bf0c      	ite	eq
 8009aa0:	f8c8 2000 	streq.w	r2, [r8]
 8009aa4:	605a      	strne	r2, [r3, #4]
 8009aa6:	e7eb      	b.n	8009a80 <_malloc_r+0xa8>
 8009aa8:	4623      	mov	r3, r4
 8009aaa:	6864      	ldr	r4, [r4, #4]
 8009aac:	e7ae      	b.n	8009a0c <_malloc_r+0x34>
 8009aae:	463c      	mov	r4, r7
 8009ab0:	687f      	ldr	r7, [r7, #4]
 8009ab2:	e7b6      	b.n	8009a22 <_malloc_r+0x4a>
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	42a3      	cmp	r3, r4
 8009aba:	d1fb      	bne.n	8009ab4 <_malloc_r+0xdc>
 8009abc:	2300      	movs	r3, #0
 8009abe:	6053      	str	r3, [r2, #4]
 8009ac0:	e7de      	b.n	8009a80 <_malloc_r+0xa8>
 8009ac2:	230c      	movs	r3, #12
 8009ac4:	6033      	str	r3, [r6, #0]
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f000 f80c 	bl	8009ae4 <__malloc_unlock>
 8009acc:	e794      	b.n	80099f8 <_malloc_r+0x20>
 8009ace:	6005      	str	r5, [r0, #0]
 8009ad0:	e7d6      	b.n	8009a80 <_malloc_r+0xa8>
 8009ad2:	bf00      	nop
 8009ad4:	2000239c 	.word	0x2000239c

08009ad8 <__malloc_lock>:
 8009ad8:	4801      	ldr	r0, [pc, #4]	@ (8009ae0 <__malloc_lock+0x8>)
 8009ada:	f000 bfe6 	b.w	800aaaa <__retarget_lock_acquire_recursive>
 8009ade:	bf00      	nop
 8009ae0:	200024e0 	.word	0x200024e0

08009ae4 <__malloc_unlock>:
 8009ae4:	4801      	ldr	r0, [pc, #4]	@ (8009aec <__malloc_unlock+0x8>)
 8009ae6:	f000 bfe1 	b.w	800aaac <__retarget_lock_release_recursive>
 8009aea:	bf00      	nop
 8009aec:	200024e0 	.word	0x200024e0

08009af0 <realloc>:
 8009af0:	4b02      	ldr	r3, [pc, #8]	@ (8009afc <realloc+0xc>)
 8009af2:	460a      	mov	r2, r1
 8009af4:	4601      	mov	r1, r0
 8009af6:	6818      	ldr	r0, [r3, #0]
 8009af8:	f000 b802 	b.w	8009b00 <_realloc_r>
 8009afc:	20000184 	.word	0x20000184

08009b00 <_realloc_r>:
 8009b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b04:	4680      	mov	r8, r0
 8009b06:	4615      	mov	r5, r2
 8009b08:	460c      	mov	r4, r1
 8009b0a:	b921      	cbnz	r1, 8009b16 <_realloc_r+0x16>
 8009b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b10:	4611      	mov	r1, r2
 8009b12:	f7ff bf61 	b.w	80099d8 <_malloc_r>
 8009b16:	b92a      	cbnz	r2, 8009b24 <_realloc_r+0x24>
 8009b18:	f001 fe26 	bl	800b768 <_free_r>
 8009b1c:	2400      	movs	r4, #0
 8009b1e:	4620      	mov	r0, r4
 8009b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b24:	f002 f9fe 	bl	800bf24 <_malloc_usable_size_r>
 8009b28:	4285      	cmp	r5, r0
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	d802      	bhi.n	8009b34 <_realloc_r+0x34>
 8009b2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b32:	d8f4      	bhi.n	8009b1e <_realloc_r+0x1e>
 8009b34:	4629      	mov	r1, r5
 8009b36:	4640      	mov	r0, r8
 8009b38:	f7ff ff4e 	bl	80099d8 <_malloc_r>
 8009b3c:	4607      	mov	r7, r0
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	d0ec      	beq.n	8009b1c <_realloc_r+0x1c>
 8009b42:	42b5      	cmp	r5, r6
 8009b44:	462a      	mov	r2, r5
 8009b46:	4621      	mov	r1, r4
 8009b48:	bf28      	it	cs
 8009b4a:	4632      	movcs	r2, r6
 8009b4c:	f000 ffaf 	bl	800aaae <memcpy>
 8009b50:	4621      	mov	r1, r4
 8009b52:	4640      	mov	r0, r8
 8009b54:	f001 fe08 	bl	800b768 <_free_r>
 8009b58:	463c      	mov	r4, r7
 8009b5a:	e7e0      	b.n	8009b1e <_realloc_r+0x1e>

08009b5c <_strtol_l.constprop.0>:
 8009b5c:	2b24      	cmp	r3, #36	@ 0x24
 8009b5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b62:	4686      	mov	lr, r0
 8009b64:	4690      	mov	r8, r2
 8009b66:	d801      	bhi.n	8009b6c <_strtol_l.constprop.0+0x10>
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d106      	bne.n	8009b7a <_strtol_l.constprop.0+0x1e>
 8009b6c:	f000 ff72 	bl	800aa54 <__errno>
 8009b70:	2316      	movs	r3, #22
 8009b72:	6003      	str	r3, [r0, #0]
 8009b74:	2000      	movs	r0, #0
 8009b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b7a:	4834      	ldr	r0, [pc, #208]	@ (8009c4c <_strtol_l.constprop.0+0xf0>)
 8009b7c:	460d      	mov	r5, r1
 8009b7e:	462a      	mov	r2, r5
 8009b80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b84:	5d06      	ldrb	r6, [r0, r4]
 8009b86:	f016 0608 	ands.w	r6, r6, #8
 8009b8a:	d1f8      	bne.n	8009b7e <_strtol_l.constprop.0+0x22>
 8009b8c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009b8e:	d12d      	bne.n	8009bec <_strtol_l.constprop.0+0x90>
 8009b90:	782c      	ldrb	r4, [r5, #0]
 8009b92:	2601      	movs	r6, #1
 8009b94:	1c95      	adds	r5, r2, #2
 8009b96:	f033 0210 	bics.w	r2, r3, #16
 8009b9a:	d109      	bne.n	8009bb0 <_strtol_l.constprop.0+0x54>
 8009b9c:	2c30      	cmp	r4, #48	@ 0x30
 8009b9e:	d12a      	bne.n	8009bf6 <_strtol_l.constprop.0+0x9a>
 8009ba0:	782a      	ldrb	r2, [r5, #0]
 8009ba2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009ba6:	2a58      	cmp	r2, #88	@ 0x58
 8009ba8:	d125      	bne.n	8009bf6 <_strtol_l.constprop.0+0x9a>
 8009baa:	786c      	ldrb	r4, [r5, #1]
 8009bac:	2310      	movs	r3, #16
 8009bae:	3502      	adds	r5, #2
 8009bb0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009bb4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009bb8:	2200      	movs	r2, #0
 8009bba:	fbbc f9f3 	udiv	r9, ip, r3
 8009bbe:	4610      	mov	r0, r2
 8009bc0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009bc4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009bc8:	2f09      	cmp	r7, #9
 8009bca:	d81b      	bhi.n	8009c04 <_strtol_l.constprop.0+0xa8>
 8009bcc:	463c      	mov	r4, r7
 8009bce:	42a3      	cmp	r3, r4
 8009bd0:	dd27      	ble.n	8009c22 <_strtol_l.constprop.0+0xc6>
 8009bd2:	1c57      	adds	r7, r2, #1
 8009bd4:	d007      	beq.n	8009be6 <_strtol_l.constprop.0+0x8a>
 8009bd6:	4581      	cmp	r9, r0
 8009bd8:	d320      	bcc.n	8009c1c <_strtol_l.constprop.0+0xc0>
 8009bda:	d101      	bne.n	8009be0 <_strtol_l.constprop.0+0x84>
 8009bdc:	45a2      	cmp	sl, r4
 8009bde:	db1d      	blt.n	8009c1c <_strtol_l.constprop.0+0xc0>
 8009be0:	fb00 4003 	mla	r0, r0, r3, r4
 8009be4:	2201      	movs	r2, #1
 8009be6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bea:	e7eb      	b.n	8009bc4 <_strtol_l.constprop.0+0x68>
 8009bec:	2c2b      	cmp	r4, #43	@ 0x2b
 8009bee:	bf04      	itt	eq
 8009bf0:	782c      	ldrbeq	r4, [r5, #0]
 8009bf2:	1c95      	addeq	r5, r2, #2
 8009bf4:	e7cf      	b.n	8009b96 <_strtol_l.constprop.0+0x3a>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1da      	bne.n	8009bb0 <_strtol_l.constprop.0+0x54>
 8009bfa:	2c30      	cmp	r4, #48	@ 0x30
 8009bfc:	bf0c      	ite	eq
 8009bfe:	2308      	moveq	r3, #8
 8009c00:	230a      	movne	r3, #10
 8009c02:	e7d5      	b.n	8009bb0 <_strtol_l.constprop.0+0x54>
 8009c04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009c08:	2f19      	cmp	r7, #25
 8009c0a:	d801      	bhi.n	8009c10 <_strtol_l.constprop.0+0xb4>
 8009c0c:	3c37      	subs	r4, #55	@ 0x37
 8009c0e:	e7de      	b.n	8009bce <_strtol_l.constprop.0+0x72>
 8009c10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009c14:	2f19      	cmp	r7, #25
 8009c16:	d804      	bhi.n	8009c22 <_strtol_l.constprop.0+0xc6>
 8009c18:	3c57      	subs	r4, #87	@ 0x57
 8009c1a:	e7d8      	b.n	8009bce <_strtol_l.constprop.0+0x72>
 8009c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c20:	e7e1      	b.n	8009be6 <_strtol_l.constprop.0+0x8a>
 8009c22:	1c53      	adds	r3, r2, #1
 8009c24:	d108      	bne.n	8009c38 <_strtol_l.constprop.0+0xdc>
 8009c26:	2322      	movs	r3, #34	@ 0x22
 8009c28:	f8ce 3000 	str.w	r3, [lr]
 8009c2c:	4660      	mov	r0, ip
 8009c2e:	f1b8 0f00 	cmp.w	r8, #0
 8009c32:	d0a0      	beq.n	8009b76 <_strtol_l.constprop.0+0x1a>
 8009c34:	1e69      	subs	r1, r5, #1
 8009c36:	e006      	b.n	8009c46 <_strtol_l.constprop.0+0xea>
 8009c38:	b106      	cbz	r6, 8009c3c <_strtol_l.constprop.0+0xe0>
 8009c3a:	4240      	negs	r0, r0
 8009c3c:	f1b8 0f00 	cmp.w	r8, #0
 8009c40:	d099      	beq.n	8009b76 <_strtol_l.constprop.0+0x1a>
 8009c42:	2a00      	cmp	r2, #0
 8009c44:	d1f6      	bne.n	8009c34 <_strtol_l.constprop.0+0xd8>
 8009c46:	f8c8 1000 	str.w	r1, [r8]
 8009c4a:	e794      	b.n	8009b76 <_strtol_l.constprop.0+0x1a>
 8009c4c:	0800cd11 	.word	0x0800cd11

08009c50 <strtol>:
 8009c50:	4613      	mov	r3, r2
 8009c52:	460a      	mov	r2, r1
 8009c54:	4601      	mov	r1, r0
 8009c56:	4802      	ldr	r0, [pc, #8]	@ (8009c60 <strtol+0x10>)
 8009c58:	6800      	ldr	r0, [r0, #0]
 8009c5a:	f7ff bf7f 	b.w	8009b5c <_strtol_l.constprop.0>
 8009c5e:	bf00      	nop
 8009c60:	20000184 	.word	0x20000184

08009c64 <__cvt>:
 8009c64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c68:	ec57 6b10 	vmov	r6, r7, d0
 8009c6c:	2f00      	cmp	r7, #0
 8009c6e:	460c      	mov	r4, r1
 8009c70:	4619      	mov	r1, r3
 8009c72:	463b      	mov	r3, r7
 8009c74:	bfbb      	ittet	lt
 8009c76:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009c7a:	461f      	movlt	r7, r3
 8009c7c:	2300      	movge	r3, #0
 8009c7e:	232d      	movlt	r3, #45	@ 0x2d
 8009c80:	700b      	strb	r3, [r1, #0]
 8009c82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c84:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009c88:	4691      	mov	r9, r2
 8009c8a:	f023 0820 	bic.w	r8, r3, #32
 8009c8e:	bfbc      	itt	lt
 8009c90:	4632      	movlt	r2, r6
 8009c92:	4616      	movlt	r6, r2
 8009c94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009c98:	d005      	beq.n	8009ca6 <__cvt+0x42>
 8009c9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009c9e:	d100      	bne.n	8009ca2 <__cvt+0x3e>
 8009ca0:	3401      	adds	r4, #1
 8009ca2:	2102      	movs	r1, #2
 8009ca4:	e000      	b.n	8009ca8 <__cvt+0x44>
 8009ca6:	2103      	movs	r1, #3
 8009ca8:	ab03      	add	r3, sp, #12
 8009caa:	9301      	str	r3, [sp, #4]
 8009cac:	ab02      	add	r3, sp, #8
 8009cae:	9300      	str	r3, [sp, #0]
 8009cb0:	ec47 6b10 	vmov	d0, r6, r7
 8009cb4:	4653      	mov	r3, sl
 8009cb6:	4622      	mov	r2, r4
 8009cb8:	f000 ff92 	bl	800abe0 <_dtoa_r>
 8009cbc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	d119      	bne.n	8009cf8 <__cvt+0x94>
 8009cc4:	f019 0f01 	tst.w	r9, #1
 8009cc8:	d00e      	beq.n	8009ce8 <__cvt+0x84>
 8009cca:	eb00 0904 	add.w	r9, r0, r4
 8009cce:	2200      	movs	r2, #0
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	4639      	mov	r1, r7
 8009cd6:	f7f6 ff07 	bl	8000ae8 <__aeabi_dcmpeq>
 8009cda:	b108      	cbz	r0, 8009ce0 <__cvt+0x7c>
 8009cdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8009ce0:	2230      	movs	r2, #48	@ 0x30
 8009ce2:	9b03      	ldr	r3, [sp, #12]
 8009ce4:	454b      	cmp	r3, r9
 8009ce6:	d31e      	bcc.n	8009d26 <__cvt+0xc2>
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009cec:	1b5b      	subs	r3, r3, r5
 8009cee:	4628      	mov	r0, r5
 8009cf0:	6013      	str	r3, [r2, #0]
 8009cf2:	b004      	add	sp, #16
 8009cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009cfc:	eb00 0904 	add.w	r9, r0, r4
 8009d00:	d1e5      	bne.n	8009cce <__cvt+0x6a>
 8009d02:	7803      	ldrb	r3, [r0, #0]
 8009d04:	2b30      	cmp	r3, #48	@ 0x30
 8009d06:	d10a      	bne.n	8009d1e <__cvt+0xba>
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	4639      	mov	r1, r7
 8009d10:	f7f6 feea 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d14:	b918      	cbnz	r0, 8009d1e <__cvt+0xba>
 8009d16:	f1c4 0401 	rsb	r4, r4, #1
 8009d1a:	f8ca 4000 	str.w	r4, [sl]
 8009d1e:	f8da 3000 	ldr.w	r3, [sl]
 8009d22:	4499      	add	r9, r3
 8009d24:	e7d3      	b.n	8009cce <__cvt+0x6a>
 8009d26:	1c59      	adds	r1, r3, #1
 8009d28:	9103      	str	r1, [sp, #12]
 8009d2a:	701a      	strb	r2, [r3, #0]
 8009d2c:	e7d9      	b.n	8009ce2 <__cvt+0x7e>

08009d2e <__exponent>:
 8009d2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d30:	2900      	cmp	r1, #0
 8009d32:	bfba      	itte	lt
 8009d34:	4249      	neglt	r1, r1
 8009d36:	232d      	movlt	r3, #45	@ 0x2d
 8009d38:	232b      	movge	r3, #43	@ 0x2b
 8009d3a:	2909      	cmp	r1, #9
 8009d3c:	7002      	strb	r2, [r0, #0]
 8009d3e:	7043      	strb	r3, [r0, #1]
 8009d40:	dd29      	ble.n	8009d96 <__exponent+0x68>
 8009d42:	f10d 0307 	add.w	r3, sp, #7
 8009d46:	461d      	mov	r5, r3
 8009d48:	270a      	movs	r7, #10
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d50:	fb07 1416 	mls	r4, r7, r6, r1
 8009d54:	3430      	adds	r4, #48	@ 0x30
 8009d56:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	2c63      	cmp	r4, #99	@ 0x63
 8009d5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d62:	4631      	mov	r1, r6
 8009d64:	dcf1      	bgt.n	8009d4a <__exponent+0x1c>
 8009d66:	3130      	adds	r1, #48	@ 0x30
 8009d68:	1e94      	subs	r4, r2, #2
 8009d6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d6e:	1c41      	adds	r1, r0, #1
 8009d70:	4623      	mov	r3, r4
 8009d72:	42ab      	cmp	r3, r5
 8009d74:	d30a      	bcc.n	8009d8c <__exponent+0x5e>
 8009d76:	f10d 0309 	add.w	r3, sp, #9
 8009d7a:	1a9b      	subs	r3, r3, r2
 8009d7c:	42ac      	cmp	r4, r5
 8009d7e:	bf88      	it	hi
 8009d80:	2300      	movhi	r3, #0
 8009d82:	3302      	adds	r3, #2
 8009d84:	4403      	add	r3, r0
 8009d86:	1a18      	subs	r0, r3, r0
 8009d88:	b003      	add	sp, #12
 8009d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009d90:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009d94:	e7ed      	b.n	8009d72 <__exponent+0x44>
 8009d96:	2330      	movs	r3, #48	@ 0x30
 8009d98:	3130      	adds	r1, #48	@ 0x30
 8009d9a:	7083      	strb	r3, [r0, #2]
 8009d9c:	70c1      	strb	r1, [r0, #3]
 8009d9e:	1d03      	adds	r3, r0, #4
 8009da0:	e7f1      	b.n	8009d86 <__exponent+0x58>
	...

08009da4 <_printf_float>:
 8009da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da8:	b08d      	sub	sp, #52	@ 0x34
 8009daa:	460c      	mov	r4, r1
 8009dac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009db0:	4616      	mov	r6, r2
 8009db2:	461f      	mov	r7, r3
 8009db4:	4605      	mov	r5, r0
 8009db6:	f000 fdf3 	bl	800a9a0 <_localeconv_r>
 8009dba:	6803      	ldr	r3, [r0, #0]
 8009dbc:	9304      	str	r3, [sp, #16]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7f6 fa66 	bl	8000290 <strlen>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8009dcc:	9005      	str	r0, [sp, #20]
 8009dce:	3307      	adds	r3, #7
 8009dd0:	f023 0307 	bic.w	r3, r3, #7
 8009dd4:	f103 0208 	add.w	r2, r3, #8
 8009dd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009ddc:	f8d4 b000 	ldr.w	fp, [r4]
 8009de0:	f8c8 2000 	str.w	r2, [r8]
 8009de4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009de8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009dec:	9307      	str	r3, [sp, #28]
 8009dee:	f8cd 8018 	str.w	r8, [sp, #24]
 8009df2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009df6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dfa:	4b9c      	ldr	r3, [pc, #624]	@ (800a06c <_printf_float+0x2c8>)
 8009dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009e00:	f7f6 fea4 	bl	8000b4c <__aeabi_dcmpun>
 8009e04:	bb70      	cbnz	r0, 8009e64 <_printf_float+0xc0>
 8009e06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e0a:	4b98      	ldr	r3, [pc, #608]	@ (800a06c <_printf_float+0x2c8>)
 8009e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e10:	f7f6 fe7e 	bl	8000b10 <__aeabi_dcmple>
 8009e14:	bb30      	cbnz	r0, 8009e64 <_printf_float+0xc0>
 8009e16:	2200      	movs	r2, #0
 8009e18:	2300      	movs	r3, #0
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	f7f6 fe6d 	bl	8000afc <__aeabi_dcmplt>
 8009e22:	b110      	cbz	r0, 8009e2a <_printf_float+0x86>
 8009e24:	232d      	movs	r3, #45	@ 0x2d
 8009e26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e2a:	4a91      	ldr	r2, [pc, #580]	@ (800a070 <_printf_float+0x2cc>)
 8009e2c:	4b91      	ldr	r3, [pc, #580]	@ (800a074 <_printf_float+0x2d0>)
 8009e2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e32:	bf94      	ite	ls
 8009e34:	4690      	movls	r8, r2
 8009e36:	4698      	movhi	r8, r3
 8009e38:	2303      	movs	r3, #3
 8009e3a:	6123      	str	r3, [r4, #16]
 8009e3c:	f02b 0304 	bic.w	r3, fp, #4
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	f04f 0900 	mov.w	r9, #0
 8009e46:	9700      	str	r7, [sp, #0]
 8009e48:	4633      	mov	r3, r6
 8009e4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009e4c:	4621      	mov	r1, r4
 8009e4e:	4628      	mov	r0, r5
 8009e50:	f000 f9d2 	bl	800a1f8 <_printf_common>
 8009e54:	3001      	adds	r0, #1
 8009e56:	f040 808d 	bne.w	8009f74 <_printf_float+0x1d0>
 8009e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5e:	b00d      	add	sp, #52	@ 0x34
 8009e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e64:	4642      	mov	r2, r8
 8009e66:	464b      	mov	r3, r9
 8009e68:	4640      	mov	r0, r8
 8009e6a:	4649      	mov	r1, r9
 8009e6c:	f7f6 fe6e 	bl	8000b4c <__aeabi_dcmpun>
 8009e70:	b140      	cbz	r0, 8009e84 <_printf_float+0xe0>
 8009e72:	464b      	mov	r3, r9
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bfbc      	itt	lt
 8009e78:	232d      	movlt	r3, #45	@ 0x2d
 8009e7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009e7e:	4a7e      	ldr	r2, [pc, #504]	@ (800a078 <_printf_float+0x2d4>)
 8009e80:	4b7e      	ldr	r3, [pc, #504]	@ (800a07c <_printf_float+0x2d8>)
 8009e82:	e7d4      	b.n	8009e2e <_printf_float+0x8a>
 8009e84:	6863      	ldr	r3, [r4, #4]
 8009e86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009e8a:	9206      	str	r2, [sp, #24]
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	d13b      	bne.n	8009f08 <_printf_float+0x164>
 8009e90:	2306      	movs	r3, #6
 8009e92:	6063      	str	r3, [r4, #4]
 8009e94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009e98:	2300      	movs	r3, #0
 8009e9a:	6022      	str	r2, [r4, #0]
 8009e9c:	9303      	str	r3, [sp, #12]
 8009e9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8009ea0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009ea4:	ab09      	add	r3, sp, #36	@ 0x24
 8009ea6:	9300      	str	r3, [sp, #0]
 8009ea8:	6861      	ldr	r1, [r4, #4]
 8009eaa:	ec49 8b10 	vmov	d0, r8, r9
 8009eae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009eb2:	4628      	mov	r0, r5
 8009eb4:	f7ff fed6 	bl	8009c64 <__cvt>
 8009eb8:	9b06      	ldr	r3, [sp, #24]
 8009eba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ebc:	2b47      	cmp	r3, #71	@ 0x47
 8009ebe:	4680      	mov	r8, r0
 8009ec0:	d129      	bne.n	8009f16 <_printf_float+0x172>
 8009ec2:	1cc8      	adds	r0, r1, #3
 8009ec4:	db02      	blt.n	8009ecc <_printf_float+0x128>
 8009ec6:	6863      	ldr	r3, [r4, #4]
 8009ec8:	4299      	cmp	r1, r3
 8009eca:	dd41      	ble.n	8009f50 <_printf_float+0x1ac>
 8009ecc:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ed0:	fa5f fa8a 	uxtb.w	sl, sl
 8009ed4:	3901      	subs	r1, #1
 8009ed6:	4652      	mov	r2, sl
 8009ed8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009edc:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ede:	f7ff ff26 	bl	8009d2e <__exponent>
 8009ee2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ee4:	1813      	adds	r3, r2, r0
 8009ee6:	2a01      	cmp	r2, #1
 8009ee8:	4681      	mov	r9, r0
 8009eea:	6123      	str	r3, [r4, #16]
 8009eec:	dc02      	bgt.n	8009ef4 <_printf_float+0x150>
 8009eee:	6822      	ldr	r2, [r4, #0]
 8009ef0:	07d2      	lsls	r2, r2, #31
 8009ef2:	d501      	bpl.n	8009ef8 <_printf_float+0x154>
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	6123      	str	r3, [r4, #16]
 8009ef8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d0a2      	beq.n	8009e46 <_printf_float+0xa2>
 8009f00:	232d      	movs	r3, #45	@ 0x2d
 8009f02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f06:	e79e      	b.n	8009e46 <_printf_float+0xa2>
 8009f08:	9a06      	ldr	r2, [sp, #24]
 8009f0a:	2a47      	cmp	r2, #71	@ 0x47
 8009f0c:	d1c2      	bne.n	8009e94 <_printf_float+0xf0>
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1c0      	bne.n	8009e94 <_printf_float+0xf0>
 8009f12:	2301      	movs	r3, #1
 8009f14:	e7bd      	b.n	8009e92 <_printf_float+0xee>
 8009f16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f1a:	d9db      	bls.n	8009ed4 <_printf_float+0x130>
 8009f1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009f20:	d118      	bne.n	8009f54 <_printf_float+0x1b0>
 8009f22:	2900      	cmp	r1, #0
 8009f24:	6863      	ldr	r3, [r4, #4]
 8009f26:	dd0b      	ble.n	8009f40 <_printf_float+0x19c>
 8009f28:	6121      	str	r1, [r4, #16]
 8009f2a:	b913      	cbnz	r3, 8009f32 <_printf_float+0x18e>
 8009f2c:	6822      	ldr	r2, [r4, #0]
 8009f2e:	07d0      	lsls	r0, r2, #31
 8009f30:	d502      	bpl.n	8009f38 <_printf_float+0x194>
 8009f32:	3301      	adds	r3, #1
 8009f34:	440b      	add	r3, r1
 8009f36:	6123      	str	r3, [r4, #16]
 8009f38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f3a:	f04f 0900 	mov.w	r9, #0
 8009f3e:	e7db      	b.n	8009ef8 <_printf_float+0x154>
 8009f40:	b913      	cbnz	r3, 8009f48 <_printf_float+0x1a4>
 8009f42:	6822      	ldr	r2, [r4, #0]
 8009f44:	07d2      	lsls	r2, r2, #31
 8009f46:	d501      	bpl.n	8009f4c <_printf_float+0x1a8>
 8009f48:	3302      	adds	r3, #2
 8009f4a:	e7f4      	b.n	8009f36 <_printf_float+0x192>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e7f2      	b.n	8009f36 <_printf_float+0x192>
 8009f50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f56:	4299      	cmp	r1, r3
 8009f58:	db05      	blt.n	8009f66 <_printf_float+0x1c2>
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	6121      	str	r1, [r4, #16]
 8009f5e:	07d8      	lsls	r0, r3, #31
 8009f60:	d5ea      	bpl.n	8009f38 <_printf_float+0x194>
 8009f62:	1c4b      	adds	r3, r1, #1
 8009f64:	e7e7      	b.n	8009f36 <_printf_float+0x192>
 8009f66:	2900      	cmp	r1, #0
 8009f68:	bfd4      	ite	le
 8009f6a:	f1c1 0202 	rsble	r2, r1, #2
 8009f6e:	2201      	movgt	r2, #1
 8009f70:	4413      	add	r3, r2
 8009f72:	e7e0      	b.n	8009f36 <_printf_float+0x192>
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	055a      	lsls	r2, r3, #21
 8009f78:	d407      	bmi.n	8009f8a <_printf_float+0x1e6>
 8009f7a:	6923      	ldr	r3, [r4, #16]
 8009f7c:	4642      	mov	r2, r8
 8009f7e:	4631      	mov	r1, r6
 8009f80:	4628      	mov	r0, r5
 8009f82:	47b8      	blx	r7
 8009f84:	3001      	adds	r0, #1
 8009f86:	d12b      	bne.n	8009fe0 <_printf_float+0x23c>
 8009f88:	e767      	b.n	8009e5a <_printf_float+0xb6>
 8009f8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f8e:	f240 80dd 	bls.w	800a14c <_printf_float+0x3a8>
 8009f92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009f96:	2200      	movs	r2, #0
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f7f6 fda5 	bl	8000ae8 <__aeabi_dcmpeq>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d033      	beq.n	800a00a <_printf_float+0x266>
 8009fa2:	4a37      	ldr	r2, [pc, #220]	@ (800a080 <_printf_float+0x2dc>)
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	4628      	mov	r0, r5
 8009faa:	47b8      	blx	r7
 8009fac:	3001      	adds	r0, #1
 8009fae:	f43f af54 	beq.w	8009e5a <_printf_float+0xb6>
 8009fb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009fb6:	4543      	cmp	r3, r8
 8009fb8:	db02      	blt.n	8009fc0 <_printf_float+0x21c>
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	07d8      	lsls	r0, r3, #31
 8009fbe:	d50f      	bpl.n	8009fe0 <_printf_float+0x23c>
 8009fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fc4:	4631      	mov	r1, r6
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	47b8      	blx	r7
 8009fca:	3001      	adds	r0, #1
 8009fcc:	f43f af45 	beq.w	8009e5a <_printf_float+0xb6>
 8009fd0:	f04f 0900 	mov.w	r9, #0
 8009fd4:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fd8:	f104 0a1a 	add.w	sl, r4, #26
 8009fdc:	45c8      	cmp	r8, r9
 8009fde:	dc09      	bgt.n	8009ff4 <_printf_float+0x250>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	079b      	lsls	r3, r3, #30
 8009fe4:	f100 8103 	bmi.w	800a1ee <_printf_float+0x44a>
 8009fe8:	68e0      	ldr	r0, [r4, #12]
 8009fea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fec:	4298      	cmp	r0, r3
 8009fee:	bfb8      	it	lt
 8009ff0:	4618      	movlt	r0, r3
 8009ff2:	e734      	b.n	8009e5e <_printf_float+0xba>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	4652      	mov	r2, sl
 8009ff8:	4631      	mov	r1, r6
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	47b8      	blx	r7
 8009ffe:	3001      	adds	r0, #1
 800a000:	f43f af2b 	beq.w	8009e5a <_printf_float+0xb6>
 800a004:	f109 0901 	add.w	r9, r9, #1
 800a008:	e7e8      	b.n	8009fdc <_printf_float+0x238>
 800a00a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	dc39      	bgt.n	800a084 <_printf_float+0x2e0>
 800a010:	4a1b      	ldr	r2, [pc, #108]	@ (800a080 <_printf_float+0x2dc>)
 800a012:	2301      	movs	r3, #1
 800a014:	4631      	mov	r1, r6
 800a016:	4628      	mov	r0, r5
 800a018:	47b8      	blx	r7
 800a01a:	3001      	adds	r0, #1
 800a01c:	f43f af1d 	beq.w	8009e5a <_printf_float+0xb6>
 800a020:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a024:	ea59 0303 	orrs.w	r3, r9, r3
 800a028:	d102      	bne.n	800a030 <_printf_float+0x28c>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	07d9      	lsls	r1, r3, #31
 800a02e:	d5d7      	bpl.n	8009fe0 <_printf_float+0x23c>
 800a030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a034:	4631      	mov	r1, r6
 800a036:	4628      	mov	r0, r5
 800a038:	47b8      	blx	r7
 800a03a:	3001      	adds	r0, #1
 800a03c:	f43f af0d 	beq.w	8009e5a <_printf_float+0xb6>
 800a040:	f04f 0a00 	mov.w	sl, #0
 800a044:	f104 0b1a 	add.w	fp, r4, #26
 800a048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a04a:	425b      	negs	r3, r3
 800a04c:	4553      	cmp	r3, sl
 800a04e:	dc01      	bgt.n	800a054 <_printf_float+0x2b0>
 800a050:	464b      	mov	r3, r9
 800a052:	e793      	b.n	8009f7c <_printf_float+0x1d8>
 800a054:	2301      	movs	r3, #1
 800a056:	465a      	mov	r2, fp
 800a058:	4631      	mov	r1, r6
 800a05a:	4628      	mov	r0, r5
 800a05c:	47b8      	blx	r7
 800a05e:	3001      	adds	r0, #1
 800a060:	f43f aefb 	beq.w	8009e5a <_printf_float+0xb6>
 800a064:	f10a 0a01 	add.w	sl, sl, #1
 800a068:	e7ee      	b.n	800a048 <_printf_float+0x2a4>
 800a06a:	bf00      	nop
 800a06c:	7fefffff 	.word	0x7fefffff
 800a070:	0800ce11 	.word	0x0800ce11
 800a074:	0800ce15 	.word	0x0800ce15
 800a078:	0800ce19 	.word	0x0800ce19
 800a07c:	0800ce1d 	.word	0x0800ce1d
 800a080:	0800ce21 	.word	0x0800ce21
 800a084:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a086:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a08a:	4553      	cmp	r3, sl
 800a08c:	bfa8      	it	ge
 800a08e:	4653      	movge	r3, sl
 800a090:	2b00      	cmp	r3, #0
 800a092:	4699      	mov	r9, r3
 800a094:	dc36      	bgt.n	800a104 <_printf_float+0x360>
 800a096:	f04f 0b00 	mov.w	fp, #0
 800a09a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a09e:	f104 021a 	add.w	r2, r4, #26
 800a0a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0a4:	9306      	str	r3, [sp, #24]
 800a0a6:	eba3 0309 	sub.w	r3, r3, r9
 800a0aa:	455b      	cmp	r3, fp
 800a0ac:	dc31      	bgt.n	800a112 <_printf_float+0x36e>
 800a0ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0b0:	459a      	cmp	sl, r3
 800a0b2:	dc3a      	bgt.n	800a12a <_printf_float+0x386>
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	07da      	lsls	r2, r3, #31
 800a0b8:	d437      	bmi.n	800a12a <_printf_float+0x386>
 800a0ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0bc:	ebaa 0903 	sub.w	r9, sl, r3
 800a0c0:	9b06      	ldr	r3, [sp, #24]
 800a0c2:	ebaa 0303 	sub.w	r3, sl, r3
 800a0c6:	4599      	cmp	r9, r3
 800a0c8:	bfa8      	it	ge
 800a0ca:	4699      	movge	r9, r3
 800a0cc:	f1b9 0f00 	cmp.w	r9, #0
 800a0d0:	dc33      	bgt.n	800a13a <_printf_float+0x396>
 800a0d2:	f04f 0800 	mov.w	r8, #0
 800a0d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0da:	f104 0b1a 	add.w	fp, r4, #26
 800a0de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e0:	ebaa 0303 	sub.w	r3, sl, r3
 800a0e4:	eba3 0309 	sub.w	r3, r3, r9
 800a0e8:	4543      	cmp	r3, r8
 800a0ea:	f77f af79 	ble.w	8009fe0 <_printf_float+0x23c>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	465a      	mov	r2, fp
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b8      	blx	r7
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	f43f aeae 	beq.w	8009e5a <_printf_float+0xb6>
 800a0fe:	f108 0801 	add.w	r8, r8, #1
 800a102:	e7ec      	b.n	800a0de <_printf_float+0x33a>
 800a104:	4642      	mov	r2, r8
 800a106:	4631      	mov	r1, r6
 800a108:	4628      	mov	r0, r5
 800a10a:	47b8      	blx	r7
 800a10c:	3001      	adds	r0, #1
 800a10e:	d1c2      	bne.n	800a096 <_printf_float+0x2f2>
 800a110:	e6a3      	b.n	8009e5a <_printf_float+0xb6>
 800a112:	2301      	movs	r3, #1
 800a114:	4631      	mov	r1, r6
 800a116:	4628      	mov	r0, r5
 800a118:	9206      	str	r2, [sp, #24]
 800a11a:	47b8      	blx	r7
 800a11c:	3001      	adds	r0, #1
 800a11e:	f43f ae9c 	beq.w	8009e5a <_printf_float+0xb6>
 800a122:	9a06      	ldr	r2, [sp, #24]
 800a124:	f10b 0b01 	add.w	fp, fp, #1
 800a128:	e7bb      	b.n	800a0a2 <_printf_float+0x2fe>
 800a12a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a12e:	4631      	mov	r1, r6
 800a130:	4628      	mov	r0, r5
 800a132:	47b8      	blx	r7
 800a134:	3001      	adds	r0, #1
 800a136:	d1c0      	bne.n	800a0ba <_printf_float+0x316>
 800a138:	e68f      	b.n	8009e5a <_printf_float+0xb6>
 800a13a:	9a06      	ldr	r2, [sp, #24]
 800a13c:	464b      	mov	r3, r9
 800a13e:	4442      	add	r2, r8
 800a140:	4631      	mov	r1, r6
 800a142:	4628      	mov	r0, r5
 800a144:	47b8      	blx	r7
 800a146:	3001      	adds	r0, #1
 800a148:	d1c3      	bne.n	800a0d2 <_printf_float+0x32e>
 800a14a:	e686      	b.n	8009e5a <_printf_float+0xb6>
 800a14c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a150:	f1ba 0f01 	cmp.w	sl, #1
 800a154:	dc01      	bgt.n	800a15a <_printf_float+0x3b6>
 800a156:	07db      	lsls	r3, r3, #31
 800a158:	d536      	bpl.n	800a1c8 <_printf_float+0x424>
 800a15a:	2301      	movs	r3, #1
 800a15c:	4642      	mov	r2, r8
 800a15e:	4631      	mov	r1, r6
 800a160:	4628      	mov	r0, r5
 800a162:	47b8      	blx	r7
 800a164:	3001      	adds	r0, #1
 800a166:	f43f ae78 	beq.w	8009e5a <_printf_float+0xb6>
 800a16a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a16e:	4631      	mov	r1, r6
 800a170:	4628      	mov	r0, r5
 800a172:	47b8      	blx	r7
 800a174:	3001      	adds	r0, #1
 800a176:	f43f ae70 	beq.w	8009e5a <_printf_float+0xb6>
 800a17a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a17e:	2200      	movs	r2, #0
 800a180:	2300      	movs	r3, #0
 800a182:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a186:	f7f6 fcaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800a18a:	b9c0      	cbnz	r0, 800a1be <_printf_float+0x41a>
 800a18c:	4653      	mov	r3, sl
 800a18e:	f108 0201 	add.w	r2, r8, #1
 800a192:	4631      	mov	r1, r6
 800a194:	4628      	mov	r0, r5
 800a196:	47b8      	blx	r7
 800a198:	3001      	adds	r0, #1
 800a19a:	d10c      	bne.n	800a1b6 <_printf_float+0x412>
 800a19c:	e65d      	b.n	8009e5a <_printf_float+0xb6>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	465a      	mov	r2, fp
 800a1a2:	4631      	mov	r1, r6
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	47b8      	blx	r7
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	f43f ae56 	beq.w	8009e5a <_printf_float+0xb6>
 800a1ae:	f108 0801 	add.w	r8, r8, #1
 800a1b2:	45d0      	cmp	r8, sl
 800a1b4:	dbf3      	blt.n	800a19e <_printf_float+0x3fa>
 800a1b6:	464b      	mov	r3, r9
 800a1b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a1bc:	e6df      	b.n	8009f7e <_printf_float+0x1da>
 800a1be:	f04f 0800 	mov.w	r8, #0
 800a1c2:	f104 0b1a 	add.w	fp, r4, #26
 800a1c6:	e7f4      	b.n	800a1b2 <_printf_float+0x40e>
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	4642      	mov	r2, r8
 800a1cc:	e7e1      	b.n	800a192 <_printf_float+0x3ee>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	464a      	mov	r2, r9
 800a1d2:	4631      	mov	r1, r6
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	47b8      	blx	r7
 800a1d8:	3001      	adds	r0, #1
 800a1da:	f43f ae3e 	beq.w	8009e5a <_printf_float+0xb6>
 800a1de:	f108 0801 	add.w	r8, r8, #1
 800a1e2:	68e3      	ldr	r3, [r4, #12]
 800a1e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a1e6:	1a5b      	subs	r3, r3, r1
 800a1e8:	4543      	cmp	r3, r8
 800a1ea:	dcf0      	bgt.n	800a1ce <_printf_float+0x42a>
 800a1ec:	e6fc      	b.n	8009fe8 <_printf_float+0x244>
 800a1ee:	f04f 0800 	mov.w	r8, #0
 800a1f2:	f104 0919 	add.w	r9, r4, #25
 800a1f6:	e7f4      	b.n	800a1e2 <_printf_float+0x43e>

0800a1f8 <_printf_common>:
 800a1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1fc:	4616      	mov	r6, r2
 800a1fe:	4698      	mov	r8, r3
 800a200:	688a      	ldr	r2, [r1, #8]
 800a202:	690b      	ldr	r3, [r1, #16]
 800a204:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a208:	4293      	cmp	r3, r2
 800a20a:	bfb8      	it	lt
 800a20c:	4613      	movlt	r3, r2
 800a20e:	6033      	str	r3, [r6, #0]
 800a210:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a214:	4607      	mov	r7, r0
 800a216:	460c      	mov	r4, r1
 800a218:	b10a      	cbz	r2, 800a21e <_printf_common+0x26>
 800a21a:	3301      	adds	r3, #1
 800a21c:	6033      	str	r3, [r6, #0]
 800a21e:	6823      	ldr	r3, [r4, #0]
 800a220:	0699      	lsls	r1, r3, #26
 800a222:	bf42      	ittt	mi
 800a224:	6833      	ldrmi	r3, [r6, #0]
 800a226:	3302      	addmi	r3, #2
 800a228:	6033      	strmi	r3, [r6, #0]
 800a22a:	6825      	ldr	r5, [r4, #0]
 800a22c:	f015 0506 	ands.w	r5, r5, #6
 800a230:	d106      	bne.n	800a240 <_printf_common+0x48>
 800a232:	f104 0a19 	add.w	sl, r4, #25
 800a236:	68e3      	ldr	r3, [r4, #12]
 800a238:	6832      	ldr	r2, [r6, #0]
 800a23a:	1a9b      	subs	r3, r3, r2
 800a23c:	42ab      	cmp	r3, r5
 800a23e:	dc26      	bgt.n	800a28e <_printf_common+0x96>
 800a240:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a244:	6822      	ldr	r2, [r4, #0]
 800a246:	3b00      	subs	r3, #0
 800a248:	bf18      	it	ne
 800a24a:	2301      	movne	r3, #1
 800a24c:	0692      	lsls	r2, r2, #26
 800a24e:	d42b      	bmi.n	800a2a8 <_printf_common+0xb0>
 800a250:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a254:	4641      	mov	r1, r8
 800a256:	4638      	mov	r0, r7
 800a258:	47c8      	blx	r9
 800a25a:	3001      	adds	r0, #1
 800a25c:	d01e      	beq.n	800a29c <_printf_common+0xa4>
 800a25e:	6823      	ldr	r3, [r4, #0]
 800a260:	6922      	ldr	r2, [r4, #16]
 800a262:	f003 0306 	and.w	r3, r3, #6
 800a266:	2b04      	cmp	r3, #4
 800a268:	bf02      	ittt	eq
 800a26a:	68e5      	ldreq	r5, [r4, #12]
 800a26c:	6833      	ldreq	r3, [r6, #0]
 800a26e:	1aed      	subeq	r5, r5, r3
 800a270:	68a3      	ldr	r3, [r4, #8]
 800a272:	bf0c      	ite	eq
 800a274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a278:	2500      	movne	r5, #0
 800a27a:	4293      	cmp	r3, r2
 800a27c:	bfc4      	itt	gt
 800a27e:	1a9b      	subgt	r3, r3, r2
 800a280:	18ed      	addgt	r5, r5, r3
 800a282:	2600      	movs	r6, #0
 800a284:	341a      	adds	r4, #26
 800a286:	42b5      	cmp	r5, r6
 800a288:	d11a      	bne.n	800a2c0 <_printf_common+0xc8>
 800a28a:	2000      	movs	r0, #0
 800a28c:	e008      	b.n	800a2a0 <_printf_common+0xa8>
 800a28e:	2301      	movs	r3, #1
 800a290:	4652      	mov	r2, sl
 800a292:	4641      	mov	r1, r8
 800a294:	4638      	mov	r0, r7
 800a296:	47c8      	blx	r9
 800a298:	3001      	adds	r0, #1
 800a29a:	d103      	bne.n	800a2a4 <_printf_common+0xac>
 800a29c:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a4:	3501      	adds	r5, #1
 800a2a6:	e7c6      	b.n	800a236 <_printf_common+0x3e>
 800a2a8:	18e1      	adds	r1, r4, r3
 800a2aa:	1c5a      	adds	r2, r3, #1
 800a2ac:	2030      	movs	r0, #48	@ 0x30
 800a2ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a2b2:	4422      	add	r2, r4
 800a2b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2bc:	3302      	adds	r3, #2
 800a2be:	e7c7      	b.n	800a250 <_printf_common+0x58>
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	4622      	mov	r2, r4
 800a2c4:	4641      	mov	r1, r8
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	47c8      	blx	r9
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	d0e6      	beq.n	800a29c <_printf_common+0xa4>
 800a2ce:	3601      	adds	r6, #1
 800a2d0:	e7d9      	b.n	800a286 <_printf_common+0x8e>
	...

0800a2d4 <_printf_i>:
 800a2d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d8:	7e0f      	ldrb	r7, [r1, #24]
 800a2da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2dc:	2f78      	cmp	r7, #120	@ 0x78
 800a2de:	4691      	mov	r9, r2
 800a2e0:	4680      	mov	r8, r0
 800a2e2:	460c      	mov	r4, r1
 800a2e4:	469a      	mov	sl, r3
 800a2e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2ea:	d807      	bhi.n	800a2fc <_printf_i+0x28>
 800a2ec:	2f62      	cmp	r7, #98	@ 0x62
 800a2ee:	d80a      	bhi.n	800a306 <_printf_i+0x32>
 800a2f0:	2f00      	cmp	r7, #0
 800a2f2:	f000 80d2 	beq.w	800a49a <_printf_i+0x1c6>
 800a2f6:	2f58      	cmp	r7, #88	@ 0x58
 800a2f8:	f000 80b9 	beq.w	800a46e <_printf_i+0x19a>
 800a2fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a300:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a304:	e03a      	b.n	800a37c <_printf_i+0xa8>
 800a306:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a30a:	2b15      	cmp	r3, #21
 800a30c:	d8f6      	bhi.n	800a2fc <_printf_i+0x28>
 800a30e:	a101      	add	r1, pc, #4	@ (adr r1, 800a314 <_printf_i+0x40>)
 800a310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a314:	0800a36d 	.word	0x0800a36d
 800a318:	0800a381 	.word	0x0800a381
 800a31c:	0800a2fd 	.word	0x0800a2fd
 800a320:	0800a2fd 	.word	0x0800a2fd
 800a324:	0800a2fd 	.word	0x0800a2fd
 800a328:	0800a2fd 	.word	0x0800a2fd
 800a32c:	0800a381 	.word	0x0800a381
 800a330:	0800a2fd 	.word	0x0800a2fd
 800a334:	0800a2fd 	.word	0x0800a2fd
 800a338:	0800a2fd 	.word	0x0800a2fd
 800a33c:	0800a2fd 	.word	0x0800a2fd
 800a340:	0800a481 	.word	0x0800a481
 800a344:	0800a3ab 	.word	0x0800a3ab
 800a348:	0800a43b 	.word	0x0800a43b
 800a34c:	0800a2fd 	.word	0x0800a2fd
 800a350:	0800a2fd 	.word	0x0800a2fd
 800a354:	0800a4a3 	.word	0x0800a4a3
 800a358:	0800a2fd 	.word	0x0800a2fd
 800a35c:	0800a3ab 	.word	0x0800a3ab
 800a360:	0800a2fd 	.word	0x0800a2fd
 800a364:	0800a2fd 	.word	0x0800a2fd
 800a368:	0800a443 	.word	0x0800a443
 800a36c:	6833      	ldr	r3, [r6, #0]
 800a36e:	1d1a      	adds	r2, r3, #4
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	6032      	str	r2, [r6, #0]
 800a374:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a378:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a37c:	2301      	movs	r3, #1
 800a37e:	e09d      	b.n	800a4bc <_printf_i+0x1e8>
 800a380:	6833      	ldr	r3, [r6, #0]
 800a382:	6820      	ldr	r0, [r4, #0]
 800a384:	1d19      	adds	r1, r3, #4
 800a386:	6031      	str	r1, [r6, #0]
 800a388:	0606      	lsls	r6, r0, #24
 800a38a:	d501      	bpl.n	800a390 <_printf_i+0xbc>
 800a38c:	681d      	ldr	r5, [r3, #0]
 800a38e:	e003      	b.n	800a398 <_printf_i+0xc4>
 800a390:	0645      	lsls	r5, r0, #25
 800a392:	d5fb      	bpl.n	800a38c <_printf_i+0xb8>
 800a394:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a398:	2d00      	cmp	r5, #0
 800a39a:	da03      	bge.n	800a3a4 <_printf_i+0xd0>
 800a39c:	232d      	movs	r3, #45	@ 0x2d
 800a39e:	426d      	negs	r5, r5
 800a3a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3a4:	4859      	ldr	r0, [pc, #356]	@ (800a50c <_printf_i+0x238>)
 800a3a6:	230a      	movs	r3, #10
 800a3a8:	e011      	b.n	800a3ce <_printf_i+0xfa>
 800a3aa:	6821      	ldr	r1, [r4, #0]
 800a3ac:	6833      	ldr	r3, [r6, #0]
 800a3ae:	0608      	lsls	r0, r1, #24
 800a3b0:	f853 5b04 	ldr.w	r5, [r3], #4
 800a3b4:	d402      	bmi.n	800a3bc <_printf_i+0xe8>
 800a3b6:	0649      	lsls	r1, r1, #25
 800a3b8:	bf48      	it	mi
 800a3ba:	b2ad      	uxthmi	r5, r5
 800a3bc:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3be:	4853      	ldr	r0, [pc, #332]	@ (800a50c <_printf_i+0x238>)
 800a3c0:	6033      	str	r3, [r6, #0]
 800a3c2:	bf14      	ite	ne
 800a3c4:	230a      	movne	r3, #10
 800a3c6:	2308      	moveq	r3, #8
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3ce:	6866      	ldr	r6, [r4, #4]
 800a3d0:	60a6      	str	r6, [r4, #8]
 800a3d2:	2e00      	cmp	r6, #0
 800a3d4:	bfa2      	ittt	ge
 800a3d6:	6821      	ldrge	r1, [r4, #0]
 800a3d8:	f021 0104 	bicge.w	r1, r1, #4
 800a3dc:	6021      	strge	r1, [r4, #0]
 800a3de:	b90d      	cbnz	r5, 800a3e4 <_printf_i+0x110>
 800a3e0:	2e00      	cmp	r6, #0
 800a3e2:	d04b      	beq.n	800a47c <_printf_i+0x1a8>
 800a3e4:	4616      	mov	r6, r2
 800a3e6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3ea:	fb03 5711 	mls	r7, r3, r1, r5
 800a3ee:	5dc7      	ldrb	r7, [r0, r7]
 800a3f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3f4:	462f      	mov	r7, r5
 800a3f6:	42bb      	cmp	r3, r7
 800a3f8:	460d      	mov	r5, r1
 800a3fa:	d9f4      	bls.n	800a3e6 <_printf_i+0x112>
 800a3fc:	2b08      	cmp	r3, #8
 800a3fe:	d10b      	bne.n	800a418 <_printf_i+0x144>
 800a400:	6823      	ldr	r3, [r4, #0]
 800a402:	07df      	lsls	r7, r3, #31
 800a404:	d508      	bpl.n	800a418 <_printf_i+0x144>
 800a406:	6923      	ldr	r3, [r4, #16]
 800a408:	6861      	ldr	r1, [r4, #4]
 800a40a:	4299      	cmp	r1, r3
 800a40c:	bfde      	ittt	le
 800a40e:	2330      	movle	r3, #48	@ 0x30
 800a410:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a414:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a418:	1b92      	subs	r2, r2, r6
 800a41a:	6122      	str	r2, [r4, #16]
 800a41c:	f8cd a000 	str.w	sl, [sp]
 800a420:	464b      	mov	r3, r9
 800a422:	aa03      	add	r2, sp, #12
 800a424:	4621      	mov	r1, r4
 800a426:	4640      	mov	r0, r8
 800a428:	f7ff fee6 	bl	800a1f8 <_printf_common>
 800a42c:	3001      	adds	r0, #1
 800a42e:	d14a      	bne.n	800a4c6 <_printf_i+0x1f2>
 800a430:	f04f 30ff 	mov.w	r0, #4294967295
 800a434:	b004      	add	sp, #16
 800a436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	f043 0320 	orr.w	r3, r3, #32
 800a440:	6023      	str	r3, [r4, #0]
 800a442:	4833      	ldr	r0, [pc, #204]	@ (800a510 <_printf_i+0x23c>)
 800a444:	2778      	movs	r7, #120	@ 0x78
 800a446:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	6831      	ldr	r1, [r6, #0]
 800a44e:	061f      	lsls	r7, r3, #24
 800a450:	f851 5b04 	ldr.w	r5, [r1], #4
 800a454:	d402      	bmi.n	800a45c <_printf_i+0x188>
 800a456:	065f      	lsls	r7, r3, #25
 800a458:	bf48      	it	mi
 800a45a:	b2ad      	uxthmi	r5, r5
 800a45c:	6031      	str	r1, [r6, #0]
 800a45e:	07d9      	lsls	r1, r3, #31
 800a460:	bf44      	itt	mi
 800a462:	f043 0320 	orrmi.w	r3, r3, #32
 800a466:	6023      	strmi	r3, [r4, #0]
 800a468:	b11d      	cbz	r5, 800a472 <_printf_i+0x19e>
 800a46a:	2310      	movs	r3, #16
 800a46c:	e7ac      	b.n	800a3c8 <_printf_i+0xf4>
 800a46e:	4827      	ldr	r0, [pc, #156]	@ (800a50c <_printf_i+0x238>)
 800a470:	e7e9      	b.n	800a446 <_printf_i+0x172>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	f023 0320 	bic.w	r3, r3, #32
 800a478:	6023      	str	r3, [r4, #0]
 800a47a:	e7f6      	b.n	800a46a <_printf_i+0x196>
 800a47c:	4616      	mov	r6, r2
 800a47e:	e7bd      	b.n	800a3fc <_printf_i+0x128>
 800a480:	6833      	ldr	r3, [r6, #0]
 800a482:	6825      	ldr	r5, [r4, #0]
 800a484:	6961      	ldr	r1, [r4, #20]
 800a486:	1d18      	adds	r0, r3, #4
 800a488:	6030      	str	r0, [r6, #0]
 800a48a:	062e      	lsls	r6, r5, #24
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	d501      	bpl.n	800a494 <_printf_i+0x1c0>
 800a490:	6019      	str	r1, [r3, #0]
 800a492:	e002      	b.n	800a49a <_printf_i+0x1c6>
 800a494:	0668      	lsls	r0, r5, #25
 800a496:	d5fb      	bpl.n	800a490 <_printf_i+0x1bc>
 800a498:	8019      	strh	r1, [r3, #0]
 800a49a:	2300      	movs	r3, #0
 800a49c:	6123      	str	r3, [r4, #16]
 800a49e:	4616      	mov	r6, r2
 800a4a0:	e7bc      	b.n	800a41c <_printf_i+0x148>
 800a4a2:	6833      	ldr	r3, [r6, #0]
 800a4a4:	1d1a      	adds	r2, r3, #4
 800a4a6:	6032      	str	r2, [r6, #0]
 800a4a8:	681e      	ldr	r6, [r3, #0]
 800a4aa:	6862      	ldr	r2, [r4, #4]
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f7f5 fe9e 	bl	80001f0 <memchr>
 800a4b4:	b108      	cbz	r0, 800a4ba <_printf_i+0x1e6>
 800a4b6:	1b80      	subs	r0, r0, r6
 800a4b8:	6060      	str	r0, [r4, #4]
 800a4ba:	6863      	ldr	r3, [r4, #4]
 800a4bc:	6123      	str	r3, [r4, #16]
 800a4be:	2300      	movs	r3, #0
 800a4c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4c4:	e7aa      	b.n	800a41c <_printf_i+0x148>
 800a4c6:	6923      	ldr	r3, [r4, #16]
 800a4c8:	4632      	mov	r2, r6
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	47d0      	blx	sl
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d0ad      	beq.n	800a430 <_printf_i+0x15c>
 800a4d4:	6823      	ldr	r3, [r4, #0]
 800a4d6:	079b      	lsls	r3, r3, #30
 800a4d8:	d413      	bmi.n	800a502 <_printf_i+0x22e>
 800a4da:	68e0      	ldr	r0, [r4, #12]
 800a4dc:	9b03      	ldr	r3, [sp, #12]
 800a4de:	4298      	cmp	r0, r3
 800a4e0:	bfb8      	it	lt
 800a4e2:	4618      	movlt	r0, r3
 800a4e4:	e7a6      	b.n	800a434 <_printf_i+0x160>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	4649      	mov	r1, r9
 800a4ec:	4640      	mov	r0, r8
 800a4ee:	47d0      	blx	sl
 800a4f0:	3001      	adds	r0, #1
 800a4f2:	d09d      	beq.n	800a430 <_printf_i+0x15c>
 800a4f4:	3501      	adds	r5, #1
 800a4f6:	68e3      	ldr	r3, [r4, #12]
 800a4f8:	9903      	ldr	r1, [sp, #12]
 800a4fa:	1a5b      	subs	r3, r3, r1
 800a4fc:	42ab      	cmp	r3, r5
 800a4fe:	dcf2      	bgt.n	800a4e6 <_printf_i+0x212>
 800a500:	e7eb      	b.n	800a4da <_printf_i+0x206>
 800a502:	2500      	movs	r5, #0
 800a504:	f104 0619 	add.w	r6, r4, #25
 800a508:	e7f5      	b.n	800a4f6 <_printf_i+0x222>
 800a50a:	bf00      	nop
 800a50c:	0800ce23 	.word	0x0800ce23
 800a510:	0800ce34 	.word	0x0800ce34

0800a514 <std>:
 800a514:	2300      	movs	r3, #0
 800a516:	b510      	push	{r4, lr}
 800a518:	4604      	mov	r4, r0
 800a51a:	e9c0 3300 	strd	r3, r3, [r0]
 800a51e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a522:	6083      	str	r3, [r0, #8]
 800a524:	8181      	strh	r1, [r0, #12]
 800a526:	6643      	str	r3, [r0, #100]	@ 0x64
 800a528:	81c2      	strh	r2, [r0, #14]
 800a52a:	6183      	str	r3, [r0, #24]
 800a52c:	4619      	mov	r1, r3
 800a52e:	2208      	movs	r2, #8
 800a530:	305c      	adds	r0, #92	@ 0x5c
 800a532:	f000 fa1b 	bl	800a96c <memset>
 800a536:	4b0d      	ldr	r3, [pc, #52]	@ (800a56c <std+0x58>)
 800a538:	6263      	str	r3, [r4, #36]	@ 0x24
 800a53a:	4b0d      	ldr	r3, [pc, #52]	@ (800a570 <std+0x5c>)
 800a53c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a53e:	4b0d      	ldr	r3, [pc, #52]	@ (800a574 <std+0x60>)
 800a540:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a542:	4b0d      	ldr	r3, [pc, #52]	@ (800a578 <std+0x64>)
 800a544:	6323      	str	r3, [r4, #48]	@ 0x30
 800a546:	4b0d      	ldr	r3, [pc, #52]	@ (800a57c <std+0x68>)
 800a548:	6224      	str	r4, [r4, #32]
 800a54a:	429c      	cmp	r4, r3
 800a54c:	d006      	beq.n	800a55c <std+0x48>
 800a54e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a552:	4294      	cmp	r4, r2
 800a554:	d002      	beq.n	800a55c <std+0x48>
 800a556:	33d0      	adds	r3, #208	@ 0xd0
 800a558:	429c      	cmp	r4, r3
 800a55a:	d105      	bne.n	800a568 <std+0x54>
 800a55c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a564:	f000 baa0 	b.w	800aaa8 <__retarget_lock_init_recursive>
 800a568:	bd10      	pop	{r4, pc}
 800a56a:	bf00      	nop
 800a56c:	0800a7bd 	.word	0x0800a7bd
 800a570:	0800a7df 	.word	0x0800a7df
 800a574:	0800a817 	.word	0x0800a817
 800a578:	0800a83b 	.word	0x0800a83b
 800a57c:	200023a0 	.word	0x200023a0

0800a580 <stdio_exit_handler>:
 800a580:	4a02      	ldr	r2, [pc, #8]	@ (800a58c <stdio_exit_handler+0xc>)
 800a582:	4903      	ldr	r1, [pc, #12]	@ (800a590 <stdio_exit_handler+0x10>)
 800a584:	4803      	ldr	r0, [pc, #12]	@ (800a594 <stdio_exit_handler+0x14>)
 800a586:	f000 b869 	b.w	800a65c <_fwalk_sglue>
 800a58a:	bf00      	nop
 800a58c:	2000000c 	.word	0x2000000c
 800a590:	0800c305 	.word	0x0800c305
 800a594:	20000188 	.word	0x20000188

0800a598 <cleanup_stdio>:
 800a598:	6841      	ldr	r1, [r0, #4]
 800a59a:	4b0c      	ldr	r3, [pc, #48]	@ (800a5cc <cleanup_stdio+0x34>)
 800a59c:	4299      	cmp	r1, r3
 800a59e:	b510      	push	{r4, lr}
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	d001      	beq.n	800a5a8 <cleanup_stdio+0x10>
 800a5a4:	f001 feae 	bl	800c304 <_fflush_r>
 800a5a8:	68a1      	ldr	r1, [r4, #8]
 800a5aa:	4b09      	ldr	r3, [pc, #36]	@ (800a5d0 <cleanup_stdio+0x38>)
 800a5ac:	4299      	cmp	r1, r3
 800a5ae:	d002      	beq.n	800a5b6 <cleanup_stdio+0x1e>
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f001 fea7 	bl	800c304 <_fflush_r>
 800a5b6:	68e1      	ldr	r1, [r4, #12]
 800a5b8:	4b06      	ldr	r3, [pc, #24]	@ (800a5d4 <cleanup_stdio+0x3c>)
 800a5ba:	4299      	cmp	r1, r3
 800a5bc:	d004      	beq.n	800a5c8 <cleanup_stdio+0x30>
 800a5be:	4620      	mov	r0, r4
 800a5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5c4:	f001 be9e 	b.w	800c304 <_fflush_r>
 800a5c8:	bd10      	pop	{r4, pc}
 800a5ca:	bf00      	nop
 800a5cc:	200023a0 	.word	0x200023a0
 800a5d0:	20002408 	.word	0x20002408
 800a5d4:	20002470 	.word	0x20002470

0800a5d8 <global_stdio_init.part.0>:
 800a5d8:	b510      	push	{r4, lr}
 800a5da:	4b0b      	ldr	r3, [pc, #44]	@ (800a608 <global_stdio_init.part.0+0x30>)
 800a5dc:	4c0b      	ldr	r4, [pc, #44]	@ (800a60c <global_stdio_init.part.0+0x34>)
 800a5de:	4a0c      	ldr	r2, [pc, #48]	@ (800a610 <global_stdio_init.part.0+0x38>)
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	2104      	movs	r1, #4
 800a5e8:	f7ff ff94 	bl	800a514 <std>
 800a5ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	2109      	movs	r1, #9
 800a5f4:	f7ff ff8e 	bl	800a514 <std>
 800a5f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a602:	2112      	movs	r1, #18
 800a604:	f7ff bf86 	b.w	800a514 <std>
 800a608:	200024d8 	.word	0x200024d8
 800a60c:	200023a0 	.word	0x200023a0
 800a610:	0800a581 	.word	0x0800a581

0800a614 <__sfp_lock_acquire>:
 800a614:	4801      	ldr	r0, [pc, #4]	@ (800a61c <__sfp_lock_acquire+0x8>)
 800a616:	f000 ba48 	b.w	800aaaa <__retarget_lock_acquire_recursive>
 800a61a:	bf00      	nop
 800a61c:	200024e1 	.word	0x200024e1

0800a620 <__sfp_lock_release>:
 800a620:	4801      	ldr	r0, [pc, #4]	@ (800a628 <__sfp_lock_release+0x8>)
 800a622:	f000 ba43 	b.w	800aaac <__retarget_lock_release_recursive>
 800a626:	bf00      	nop
 800a628:	200024e1 	.word	0x200024e1

0800a62c <__sinit>:
 800a62c:	b510      	push	{r4, lr}
 800a62e:	4604      	mov	r4, r0
 800a630:	f7ff fff0 	bl	800a614 <__sfp_lock_acquire>
 800a634:	6a23      	ldr	r3, [r4, #32]
 800a636:	b11b      	cbz	r3, 800a640 <__sinit+0x14>
 800a638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a63c:	f7ff bff0 	b.w	800a620 <__sfp_lock_release>
 800a640:	4b04      	ldr	r3, [pc, #16]	@ (800a654 <__sinit+0x28>)
 800a642:	6223      	str	r3, [r4, #32]
 800a644:	4b04      	ldr	r3, [pc, #16]	@ (800a658 <__sinit+0x2c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1f5      	bne.n	800a638 <__sinit+0xc>
 800a64c:	f7ff ffc4 	bl	800a5d8 <global_stdio_init.part.0>
 800a650:	e7f2      	b.n	800a638 <__sinit+0xc>
 800a652:	bf00      	nop
 800a654:	0800a599 	.word	0x0800a599
 800a658:	200024d8 	.word	0x200024d8

0800a65c <_fwalk_sglue>:
 800a65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a660:	4607      	mov	r7, r0
 800a662:	4688      	mov	r8, r1
 800a664:	4614      	mov	r4, r2
 800a666:	2600      	movs	r6, #0
 800a668:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a66c:	f1b9 0901 	subs.w	r9, r9, #1
 800a670:	d505      	bpl.n	800a67e <_fwalk_sglue+0x22>
 800a672:	6824      	ldr	r4, [r4, #0]
 800a674:	2c00      	cmp	r4, #0
 800a676:	d1f7      	bne.n	800a668 <_fwalk_sglue+0xc>
 800a678:	4630      	mov	r0, r6
 800a67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a67e:	89ab      	ldrh	r3, [r5, #12]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d907      	bls.n	800a694 <_fwalk_sglue+0x38>
 800a684:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a688:	3301      	adds	r3, #1
 800a68a:	d003      	beq.n	800a694 <_fwalk_sglue+0x38>
 800a68c:	4629      	mov	r1, r5
 800a68e:	4638      	mov	r0, r7
 800a690:	47c0      	blx	r8
 800a692:	4306      	orrs	r6, r0
 800a694:	3568      	adds	r5, #104	@ 0x68
 800a696:	e7e9      	b.n	800a66c <_fwalk_sglue+0x10>

0800a698 <_puts_r>:
 800a698:	6a03      	ldr	r3, [r0, #32]
 800a69a:	b570      	push	{r4, r5, r6, lr}
 800a69c:	6884      	ldr	r4, [r0, #8]
 800a69e:	4605      	mov	r5, r0
 800a6a0:	460e      	mov	r6, r1
 800a6a2:	b90b      	cbnz	r3, 800a6a8 <_puts_r+0x10>
 800a6a4:	f7ff ffc2 	bl	800a62c <__sinit>
 800a6a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6aa:	07db      	lsls	r3, r3, #31
 800a6ac:	d405      	bmi.n	800a6ba <_puts_r+0x22>
 800a6ae:	89a3      	ldrh	r3, [r4, #12]
 800a6b0:	0598      	lsls	r0, r3, #22
 800a6b2:	d402      	bmi.n	800a6ba <_puts_r+0x22>
 800a6b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6b6:	f000 f9f8 	bl	800aaaa <__retarget_lock_acquire_recursive>
 800a6ba:	89a3      	ldrh	r3, [r4, #12]
 800a6bc:	0719      	lsls	r1, r3, #28
 800a6be:	d502      	bpl.n	800a6c6 <_puts_r+0x2e>
 800a6c0:	6923      	ldr	r3, [r4, #16]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d135      	bne.n	800a732 <_puts_r+0x9a>
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	f000 f8f9 	bl	800a8c0 <__swsetup_r>
 800a6ce:	b380      	cbz	r0, 800a732 <_puts_r+0x9a>
 800a6d0:	f04f 35ff 	mov.w	r5, #4294967295
 800a6d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6d6:	07da      	lsls	r2, r3, #31
 800a6d8:	d405      	bmi.n	800a6e6 <_puts_r+0x4e>
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	059b      	lsls	r3, r3, #22
 800a6de:	d402      	bmi.n	800a6e6 <_puts_r+0x4e>
 800a6e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6e2:	f000 f9e3 	bl	800aaac <__retarget_lock_release_recursive>
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	bd70      	pop	{r4, r5, r6, pc}
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	da04      	bge.n	800a6f8 <_puts_r+0x60>
 800a6ee:	69a2      	ldr	r2, [r4, #24]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	dc17      	bgt.n	800a724 <_puts_r+0x8c>
 800a6f4:	290a      	cmp	r1, #10
 800a6f6:	d015      	beq.n	800a724 <_puts_r+0x8c>
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	1c5a      	adds	r2, r3, #1
 800a6fc:	6022      	str	r2, [r4, #0]
 800a6fe:	7019      	strb	r1, [r3, #0]
 800a700:	68a3      	ldr	r3, [r4, #8]
 800a702:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a706:	3b01      	subs	r3, #1
 800a708:	60a3      	str	r3, [r4, #8]
 800a70a:	2900      	cmp	r1, #0
 800a70c:	d1ed      	bne.n	800a6ea <_puts_r+0x52>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	da11      	bge.n	800a736 <_puts_r+0x9e>
 800a712:	4622      	mov	r2, r4
 800a714:	210a      	movs	r1, #10
 800a716:	4628      	mov	r0, r5
 800a718:	f000 f893 	bl	800a842 <__swbuf_r>
 800a71c:	3001      	adds	r0, #1
 800a71e:	d0d7      	beq.n	800a6d0 <_puts_r+0x38>
 800a720:	250a      	movs	r5, #10
 800a722:	e7d7      	b.n	800a6d4 <_puts_r+0x3c>
 800a724:	4622      	mov	r2, r4
 800a726:	4628      	mov	r0, r5
 800a728:	f000 f88b 	bl	800a842 <__swbuf_r>
 800a72c:	3001      	adds	r0, #1
 800a72e:	d1e7      	bne.n	800a700 <_puts_r+0x68>
 800a730:	e7ce      	b.n	800a6d0 <_puts_r+0x38>
 800a732:	3e01      	subs	r6, #1
 800a734:	e7e4      	b.n	800a700 <_puts_r+0x68>
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	1c5a      	adds	r2, r3, #1
 800a73a:	6022      	str	r2, [r4, #0]
 800a73c:	220a      	movs	r2, #10
 800a73e:	701a      	strb	r2, [r3, #0]
 800a740:	e7ee      	b.n	800a720 <_puts_r+0x88>
	...

0800a744 <puts>:
 800a744:	4b02      	ldr	r3, [pc, #8]	@ (800a750 <puts+0xc>)
 800a746:	4601      	mov	r1, r0
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	f7ff bfa5 	b.w	800a698 <_puts_r>
 800a74e:	bf00      	nop
 800a750:	20000184 	.word	0x20000184

0800a754 <sniprintf>:
 800a754:	b40c      	push	{r2, r3}
 800a756:	b530      	push	{r4, r5, lr}
 800a758:	4b17      	ldr	r3, [pc, #92]	@ (800a7b8 <sniprintf+0x64>)
 800a75a:	1e0c      	subs	r4, r1, #0
 800a75c:	681d      	ldr	r5, [r3, #0]
 800a75e:	b09d      	sub	sp, #116	@ 0x74
 800a760:	da08      	bge.n	800a774 <sniprintf+0x20>
 800a762:	238b      	movs	r3, #139	@ 0x8b
 800a764:	602b      	str	r3, [r5, #0]
 800a766:	f04f 30ff 	mov.w	r0, #4294967295
 800a76a:	b01d      	add	sp, #116	@ 0x74
 800a76c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a770:	b002      	add	sp, #8
 800a772:	4770      	bx	lr
 800a774:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a778:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a77c:	bf14      	ite	ne
 800a77e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a782:	4623      	moveq	r3, r4
 800a784:	9304      	str	r3, [sp, #16]
 800a786:	9307      	str	r3, [sp, #28]
 800a788:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a78c:	9002      	str	r0, [sp, #8]
 800a78e:	9006      	str	r0, [sp, #24]
 800a790:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a794:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a796:	ab21      	add	r3, sp, #132	@ 0x84
 800a798:	a902      	add	r1, sp, #8
 800a79a:	4628      	mov	r0, r5
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	f001 fc31 	bl	800c004 <_svfiprintf_r>
 800a7a2:	1c43      	adds	r3, r0, #1
 800a7a4:	bfbc      	itt	lt
 800a7a6:	238b      	movlt	r3, #139	@ 0x8b
 800a7a8:	602b      	strlt	r3, [r5, #0]
 800a7aa:	2c00      	cmp	r4, #0
 800a7ac:	d0dd      	beq.n	800a76a <sniprintf+0x16>
 800a7ae:	9b02      	ldr	r3, [sp, #8]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	701a      	strb	r2, [r3, #0]
 800a7b4:	e7d9      	b.n	800a76a <sniprintf+0x16>
 800a7b6:	bf00      	nop
 800a7b8:	20000184 	.word	0x20000184

0800a7bc <__sread>:
 800a7bc:	b510      	push	{r4, lr}
 800a7be:	460c      	mov	r4, r1
 800a7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7c4:	f000 f912 	bl	800a9ec <_read_r>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	bfab      	itete	ge
 800a7cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a7ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a7d0:	181b      	addge	r3, r3, r0
 800a7d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a7d6:	bfac      	ite	ge
 800a7d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a7da:	81a3      	strhlt	r3, [r4, #12]
 800a7dc:	bd10      	pop	{r4, pc}

0800a7de <__swrite>:
 800a7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e2:	461f      	mov	r7, r3
 800a7e4:	898b      	ldrh	r3, [r1, #12]
 800a7e6:	05db      	lsls	r3, r3, #23
 800a7e8:	4605      	mov	r5, r0
 800a7ea:	460c      	mov	r4, r1
 800a7ec:	4616      	mov	r6, r2
 800a7ee:	d505      	bpl.n	800a7fc <__swrite+0x1e>
 800a7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7f4:	2302      	movs	r3, #2
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f000 f8e6 	bl	800a9c8 <_lseek_r>
 800a7fc:	89a3      	ldrh	r3, [r4, #12]
 800a7fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a806:	81a3      	strh	r3, [r4, #12]
 800a808:	4632      	mov	r2, r6
 800a80a:	463b      	mov	r3, r7
 800a80c:	4628      	mov	r0, r5
 800a80e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a812:	f000 b90d 	b.w	800aa30 <_write_r>

0800a816 <__sseek>:
 800a816:	b510      	push	{r4, lr}
 800a818:	460c      	mov	r4, r1
 800a81a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a81e:	f000 f8d3 	bl	800a9c8 <_lseek_r>
 800a822:	1c43      	adds	r3, r0, #1
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	bf15      	itete	ne
 800a828:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a82a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a82e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a832:	81a3      	strheq	r3, [r4, #12]
 800a834:	bf18      	it	ne
 800a836:	81a3      	strhne	r3, [r4, #12]
 800a838:	bd10      	pop	{r4, pc}

0800a83a <__sclose>:
 800a83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a83e:	f000 b8b3 	b.w	800a9a8 <_close_r>

0800a842 <__swbuf_r>:
 800a842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a844:	460e      	mov	r6, r1
 800a846:	4614      	mov	r4, r2
 800a848:	4605      	mov	r5, r0
 800a84a:	b118      	cbz	r0, 800a854 <__swbuf_r+0x12>
 800a84c:	6a03      	ldr	r3, [r0, #32]
 800a84e:	b90b      	cbnz	r3, 800a854 <__swbuf_r+0x12>
 800a850:	f7ff feec 	bl	800a62c <__sinit>
 800a854:	69a3      	ldr	r3, [r4, #24]
 800a856:	60a3      	str	r3, [r4, #8]
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	071a      	lsls	r2, r3, #28
 800a85c:	d501      	bpl.n	800a862 <__swbuf_r+0x20>
 800a85e:	6923      	ldr	r3, [r4, #16]
 800a860:	b943      	cbnz	r3, 800a874 <__swbuf_r+0x32>
 800a862:	4621      	mov	r1, r4
 800a864:	4628      	mov	r0, r5
 800a866:	f000 f82b 	bl	800a8c0 <__swsetup_r>
 800a86a:	b118      	cbz	r0, 800a874 <__swbuf_r+0x32>
 800a86c:	f04f 37ff 	mov.w	r7, #4294967295
 800a870:	4638      	mov	r0, r7
 800a872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a874:	6823      	ldr	r3, [r4, #0]
 800a876:	6922      	ldr	r2, [r4, #16]
 800a878:	1a98      	subs	r0, r3, r2
 800a87a:	6963      	ldr	r3, [r4, #20]
 800a87c:	b2f6      	uxtb	r6, r6
 800a87e:	4283      	cmp	r3, r0
 800a880:	4637      	mov	r7, r6
 800a882:	dc05      	bgt.n	800a890 <__swbuf_r+0x4e>
 800a884:	4621      	mov	r1, r4
 800a886:	4628      	mov	r0, r5
 800a888:	f001 fd3c 	bl	800c304 <_fflush_r>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d1ed      	bne.n	800a86c <__swbuf_r+0x2a>
 800a890:	68a3      	ldr	r3, [r4, #8]
 800a892:	3b01      	subs	r3, #1
 800a894:	60a3      	str	r3, [r4, #8]
 800a896:	6823      	ldr	r3, [r4, #0]
 800a898:	1c5a      	adds	r2, r3, #1
 800a89a:	6022      	str	r2, [r4, #0]
 800a89c:	701e      	strb	r6, [r3, #0]
 800a89e:	6962      	ldr	r2, [r4, #20]
 800a8a0:	1c43      	adds	r3, r0, #1
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d004      	beq.n	800a8b0 <__swbuf_r+0x6e>
 800a8a6:	89a3      	ldrh	r3, [r4, #12]
 800a8a8:	07db      	lsls	r3, r3, #31
 800a8aa:	d5e1      	bpl.n	800a870 <__swbuf_r+0x2e>
 800a8ac:	2e0a      	cmp	r6, #10
 800a8ae:	d1df      	bne.n	800a870 <__swbuf_r+0x2e>
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	f001 fd26 	bl	800c304 <_fflush_r>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d0d9      	beq.n	800a870 <__swbuf_r+0x2e>
 800a8bc:	e7d6      	b.n	800a86c <__swbuf_r+0x2a>
	...

0800a8c0 <__swsetup_r>:
 800a8c0:	b538      	push	{r3, r4, r5, lr}
 800a8c2:	4b29      	ldr	r3, [pc, #164]	@ (800a968 <__swsetup_r+0xa8>)
 800a8c4:	4605      	mov	r5, r0
 800a8c6:	6818      	ldr	r0, [r3, #0]
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	b118      	cbz	r0, 800a8d4 <__swsetup_r+0x14>
 800a8cc:	6a03      	ldr	r3, [r0, #32]
 800a8ce:	b90b      	cbnz	r3, 800a8d4 <__swsetup_r+0x14>
 800a8d0:	f7ff feac 	bl	800a62c <__sinit>
 800a8d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8d8:	0719      	lsls	r1, r3, #28
 800a8da:	d422      	bmi.n	800a922 <__swsetup_r+0x62>
 800a8dc:	06da      	lsls	r2, r3, #27
 800a8de:	d407      	bmi.n	800a8f0 <__swsetup_r+0x30>
 800a8e0:	2209      	movs	r2, #9
 800a8e2:	602a      	str	r2, [r5, #0]
 800a8e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8e8:	81a3      	strh	r3, [r4, #12]
 800a8ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ee:	e033      	b.n	800a958 <__swsetup_r+0x98>
 800a8f0:	0758      	lsls	r0, r3, #29
 800a8f2:	d512      	bpl.n	800a91a <__swsetup_r+0x5a>
 800a8f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8f6:	b141      	cbz	r1, 800a90a <__swsetup_r+0x4a>
 800a8f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8fc:	4299      	cmp	r1, r3
 800a8fe:	d002      	beq.n	800a906 <__swsetup_r+0x46>
 800a900:	4628      	mov	r0, r5
 800a902:	f000 ff31 	bl	800b768 <_free_r>
 800a906:	2300      	movs	r3, #0
 800a908:	6363      	str	r3, [r4, #52]	@ 0x34
 800a90a:	89a3      	ldrh	r3, [r4, #12]
 800a90c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a910:	81a3      	strh	r3, [r4, #12]
 800a912:	2300      	movs	r3, #0
 800a914:	6063      	str	r3, [r4, #4]
 800a916:	6923      	ldr	r3, [r4, #16]
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	89a3      	ldrh	r3, [r4, #12]
 800a91c:	f043 0308 	orr.w	r3, r3, #8
 800a920:	81a3      	strh	r3, [r4, #12]
 800a922:	6923      	ldr	r3, [r4, #16]
 800a924:	b94b      	cbnz	r3, 800a93a <__swsetup_r+0x7a>
 800a926:	89a3      	ldrh	r3, [r4, #12]
 800a928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a92c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a930:	d003      	beq.n	800a93a <__swsetup_r+0x7a>
 800a932:	4621      	mov	r1, r4
 800a934:	4628      	mov	r0, r5
 800a936:	f001 fd33 	bl	800c3a0 <__smakebuf_r>
 800a93a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a93e:	f013 0201 	ands.w	r2, r3, #1
 800a942:	d00a      	beq.n	800a95a <__swsetup_r+0x9a>
 800a944:	2200      	movs	r2, #0
 800a946:	60a2      	str	r2, [r4, #8]
 800a948:	6962      	ldr	r2, [r4, #20]
 800a94a:	4252      	negs	r2, r2
 800a94c:	61a2      	str	r2, [r4, #24]
 800a94e:	6922      	ldr	r2, [r4, #16]
 800a950:	b942      	cbnz	r2, 800a964 <__swsetup_r+0xa4>
 800a952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a956:	d1c5      	bne.n	800a8e4 <__swsetup_r+0x24>
 800a958:	bd38      	pop	{r3, r4, r5, pc}
 800a95a:	0799      	lsls	r1, r3, #30
 800a95c:	bf58      	it	pl
 800a95e:	6962      	ldrpl	r2, [r4, #20]
 800a960:	60a2      	str	r2, [r4, #8]
 800a962:	e7f4      	b.n	800a94e <__swsetup_r+0x8e>
 800a964:	2000      	movs	r0, #0
 800a966:	e7f7      	b.n	800a958 <__swsetup_r+0x98>
 800a968:	20000184 	.word	0x20000184

0800a96c <memset>:
 800a96c:	4402      	add	r2, r0
 800a96e:	4603      	mov	r3, r0
 800a970:	4293      	cmp	r3, r2
 800a972:	d100      	bne.n	800a976 <memset+0xa>
 800a974:	4770      	bx	lr
 800a976:	f803 1b01 	strb.w	r1, [r3], #1
 800a97a:	e7f9      	b.n	800a970 <memset+0x4>

0800a97c <strncmp>:
 800a97c:	b510      	push	{r4, lr}
 800a97e:	b16a      	cbz	r2, 800a99c <strncmp+0x20>
 800a980:	3901      	subs	r1, #1
 800a982:	1884      	adds	r4, r0, r2
 800a984:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a988:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d103      	bne.n	800a998 <strncmp+0x1c>
 800a990:	42a0      	cmp	r0, r4
 800a992:	d001      	beq.n	800a998 <strncmp+0x1c>
 800a994:	2a00      	cmp	r2, #0
 800a996:	d1f5      	bne.n	800a984 <strncmp+0x8>
 800a998:	1ad0      	subs	r0, r2, r3
 800a99a:	bd10      	pop	{r4, pc}
 800a99c:	4610      	mov	r0, r2
 800a99e:	e7fc      	b.n	800a99a <strncmp+0x1e>

0800a9a0 <_localeconv_r>:
 800a9a0:	4800      	ldr	r0, [pc, #0]	@ (800a9a4 <_localeconv_r+0x4>)
 800a9a2:	4770      	bx	lr
 800a9a4:	20000108 	.word	0x20000108

0800a9a8 <_close_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	4d06      	ldr	r5, [pc, #24]	@ (800a9c4 <_close_r+0x1c>)
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	4604      	mov	r4, r0
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	602b      	str	r3, [r5, #0]
 800a9b4:	f7f7 fa1e 	bl	8001df4 <_close>
 800a9b8:	1c43      	adds	r3, r0, #1
 800a9ba:	d102      	bne.n	800a9c2 <_close_r+0x1a>
 800a9bc:	682b      	ldr	r3, [r5, #0]
 800a9be:	b103      	cbz	r3, 800a9c2 <_close_r+0x1a>
 800a9c0:	6023      	str	r3, [r4, #0]
 800a9c2:	bd38      	pop	{r3, r4, r5, pc}
 800a9c4:	200024dc 	.word	0x200024dc

0800a9c8 <_lseek_r>:
 800a9c8:	b538      	push	{r3, r4, r5, lr}
 800a9ca:	4d07      	ldr	r5, [pc, #28]	@ (800a9e8 <_lseek_r+0x20>)
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	4608      	mov	r0, r1
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	602a      	str	r2, [r5, #0]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f7f7 fa33 	bl	8001e42 <_lseek>
 800a9dc:	1c43      	adds	r3, r0, #1
 800a9de:	d102      	bne.n	800a9e6 <_lseek_r+0x1e>
 800a9e0:	682b      	ldr	r3, [r5, #0]
 800a9e2:	b103      	cbz	r3, 800a9e6 <_lseek_r+0x1e>
 800a9e4:	6023      	str	r3, [r4, #0]
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	200024dc 	.word	0x200024dc

0800a9ec <_read_r>:
 800a9ec:	b538      	push	{r3, r4, r5, lr}
 800a9ee:	4d07      	ldr	r5, [pc, #28]	@ (800aa0c <_read_r+0x20>)
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	4608      	mov	r0, r1
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	602a      	str	r2, [r5, #0]
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	f7f7 f9c1 	bl	8001d82 <_read>
 800aa00:	1c43      	adds	r3, r0, #1
 800aa02:	d102      	bne.n	800aa0a <_read_r+0x1e>
 800aa04:	682b      	ldr	r3, [r5, #0]
 800aa06:	b103      	cbz	r3, 800aa0a <_read_r+0x1e>
 800aa08:	6023      	str	r3, [r4, #0]
 800aa0a:	bd38      	pop	{r3, r4, r5, pc}
 800aa0c:	200024dc 	.word	0x200024dc

0800aa10 <_sbrk_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4d06      	ldr	r5, [pc, #24]	@ (800aa2c <_sbrk_r+0x1c>)
 800aa14:	2300      	movs	r3, #0
 800aa16:	4604      	mov	r4, r0
 800aa18:	4608      	mov	r0, r1
 800aa1a:	602b      	str	r3, [r5, #0]
 800aa1c:	f7f7 fa1e 	bl	8001e5c <_sbrk>
 800aa20:	1c43      	adds	r3, r0, #1
 800aa22:	d102      	bne.n	800aa2a <_sbrk_r+0x1a>
 800aa24:	682b      	ldr	r3, [r5, #0]
 800aa26:	b103      	cbz	r3, 800aa2a <_sbrk_r+0x1a>
 800aa28:	6023      	str	r3, [r4, #0]
 800aa2a:	bd38      	pop	{r3, r4, r5, pc}
 800aa2c:	200024dc 	.word	0x200024dc

0800aa30 <_write_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4d07      	ldr	r5, [pc, #28]	@ (800aa50 <_write_r+0x20>)
 800aa34:	4604      	mov	r4, r0
 800aa36:	4608      	mov	r0, r1
 800aa38:	4611      	mov	r1, r2
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	602a      	str	r2, [r5, #0]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f7f7 f9bc 	bl	8001dbc <_write>
 800aa44:	1c43      	adds	r3, r0, #1
 800aa46:	d102      	bne.n	800aa4e <_write_r+0x1e>
 800aa48:	682b      	ldr	r3, [r5, #0]
 800aa4a:	b103      	cbz	r3, 800aa4e <_write_r+0x1e>
 800aa4c:	6023      	str	r3, [r4, #0]
 800aa4e:	bd38      	pop	{r3, r4, r5, pc}
 800aa50:	200024dc 	.word	0x200024dc

0800aa54 <__errno>:
 800aa54:	4b01      	ldr	r3, [pc, #4]	@ (800aa5c <__errno+0x8>)
 800aa56:	6818      	ldr	r0, [r3, #0]
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	20000184 	.word	0x20000184

0800aa60 <__libc_init_array>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	4d0d      	ldr	r5, [pc, #52]	@ (800aa98 <__libc_init_array+0x38>)
 800aa64:	4c0d      	ldr	r4, [pc, #52]	@ (800aa9c <__libc_init_array+0x3c>)
 800aa66:	1b64      	subs	r4, r4, r5
 800aa68:	10a4      	asrs	r4, r4, #2
 800aa6a:	2600      	movs	r6, #0
 800aa6c:	42a6      	cmp	r6, r4
 800aa6e:	d109      	bne.n	800aa84 <__libc_init_array+0x24>
 800aa70:	4d0b      	ldr	r5, [pc, #44]	@ (800aaa0 <__libc_init_array+0x40>)
 800aa72:	4c0c      	ldr	r4, [pc, #48]	@ (800aaa4 <__libc_init_array+0x44>)
 800aa74:	f001 fedc 	bl	800c830 <_init>
 800aa78:	1b64      	subs	r4, r4, r5
 800aa7a:	10a4      	asrs	r4, r4, #2
 800aa7c:	2600      	movs	r6, #0
 800aa7e:	42a6      	cmp	r6, r4
 800aa80:	d105      	bne.n	800aa8e <__libc_init_array+0x2e>
 800aa82:	bd70      	pop	{r4, r5, r6, pc}
 800aa84:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa88:	4798      	blx	r3
 800aa8a:	3601      	adds	r6, #1
 800aa8c:	e7ee      	b.n	800aa6c <__libc_init_array+0xc>
 800aa8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa92:	4798      	blx	r3
 800aa94:	3601      	adds	r6, #1
 800aa96:	e7f2      	b.n	800aa7e <__libc_init_array+0x1e>
 800aa98:	0800d090 	.word	0x0800d090
 800aa9c:	0800d090 	.word	0x0800d090
 800aaa0:	0800d090 	.word	0x0800d090
 800aaa4:	0800d094 	.word	0x0800d094

0800aaa8 <__retarget_lock_init_recursive>:
 800aaa8:	4770      	bx	lr

0800aaaa <__retarget_lock_acquire_recursive>:
 800aaaa:	4770      	bx	lr

0800aaac <__retarget_lock_release_recursive>:
 800aaac:	4770      	bx	lr

0800aaae <memcpy>:
 800aaae:	440a      	add	r2, r1
 800aab0:	4291      	cmp	r1, r2
 800aab2:	f100 33ff 	add.w	r3, r0, #4294967295
 800aab6:	d100      	bne.n	800aaba <memcpy+0xc>
 800aab8:	4770      	bx	lr
 800aaba:	b510      	push	{r4, lr}
 800aabc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aac0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aac4:	4291      	cmp	r1, r2
 800aac6:	d1f9      	bne.n	800aabc <memcpy+0xe>
 800aac8:	bd10      	pop	{r4, pc}

0800aaca <quorem>:
 800aaca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aace:	6903      	ldr	r3, [r0, #16]
 800aad0:	690c      	ldr	r4, [r1, #16]
 800aad2:	42a3      	cmp	r3, r4
 800aad4:	4607      	mov	r7, r0
 800aad6:	db7e      	blt.n	800abd6 <quorem+0x10c>
 800aad8:	3c01      	subs	r4, #1
 800aada:	f101 0814 	add.w	r8, r1, #20
 800aade:	00a3      	lsls	r3, r4, #2
 800aae0:	f100 0514 	add.w	r5, r0, #20
 800aae4:	9300      	str	r3, [sp, #0]
 800aae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aaea:	9301      	str	r3, [sp, #4]
 800aaec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aaf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aafc:	fbb2 f6f3 	udiv	r6, r2, r3
 800ab00:	d32e      	bcc.n	800ab60 <quorem+0x96>
 800ab02:	f04f 0a00 	mov.w	sl, #0
 800ab06:	46c4      	mov	ip, r8
 800ab08:	46ae      	mov	lr, r5
 800ab0a:	46d3      	mov	fp, sl
 800ab0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ab10:	b298      	uxth	r0, r3
 800ab12:	fb06 a000 	mla	r0, r6, r0, sl
 800ab16:	0c02      	lsrs	r2, r0, #16
 800ab18:	0c1b      	lsrs	r3, r3, #16
 800ab1a:	fb06 2303 	mla	r3, r6, r3, r2
 800ab1e:	f8de 2000 	ldr.w	r2, [lr]
 800ab22:	b280      	uxth	r0, r0
 800ab24:	b292      	uxth	r2, r2
 800ab26:	1a12      	subs	r2, r2, r0
 800ab28:	445a      	add	r2, fp
 800ab2a:	f8de 0000 	ldr.w	r0, [lr]
 800ab2e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ab38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ab3c:	b292      	uxth	r2, r2
 800ab3e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ab42:	45e1      	cmp	r9, ip
 800ab44:	f84e 2b04 	str.w	r2, [lr], #4
 800ab48:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ab4c:	d2de      	bcs.n	800ab0c <quorem+0x42>
 800ab4e:	9b00      	ldr	r3, [sp, #0]
 800ab50:	58eb      	ldr	r3, [r5, r3]
 800ab52:	b92b      	cbnz	r3, 800ab60 <quorem+0x96>
 800ab54:	9b01      	ldr	r3, [sp, #4]
 800ab56:	3b04      	subs	r3, #4
 800ab58:	429d      	cmp	r5, r3
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	d32f      	bcc.n	800abbe <quorem+0xf4>
 800ab5e:	613c      	str	r4, [r7, #16]
 800ab60:	4638      	mov	r0, r7
 800ab62:	f001 f8d7 	bl	800bd14 <__mcmp>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	db25      	blt.n	800abb6 <quorem+0xec>
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab72:	f8d1 c000 	ldr.w	ip, [r1]
 800ab76:	fa1f fe82 	uxth.w	lr, r2
 800ab7a:	fa1f f38c 	uxth.w	r3, ip
 800ab7e:	eba3 030e 	sub.w	r3, r3, lr
 800ab82:	4403      	add	r3, r0
 800ab84:	0c12      	lsrs	r2, r2, #16
 800ab86:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ab8a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab94:	45c1      	cmp	r9, r8
 800ab96:	f841 3b04 	str.w	r3, [r1], #4
 800ab9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ab9e:	d2e6      	bcs.n	800ab6e <quorem+0xa4>
 800aba0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aba4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aba8:	b922      	cbnz	r2, 800abb4 <quorem+0xea>
 800abaa:	3b04      	subs	r3, #4
 800abac:	429d      	cmp	r5, r3
 800abae:	461a      	mov	r2, r3
 800abb0:	d30b      	bcc.n	800abca <quorem+0x100>
 800abb2:	613c      	str	r4, [r7, #16]
 800abb4:	3601      	adds	r6, #1
 800abb6:	4630      	mov	r0, r6
 800abb8:	b003      	add	sp, #12
 800abba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abbe:	6812      	ldr	r2, [r2, #0]
 800abc0:	3b04      	subs	r3, #4
 800abc2:	2a00      	cmp	r2, #0
 800abc4:	d1cb      	bne.n	800ab5e <quorem+0x94>
 800abc6:	3c01      	subs	r4, #1
 800abc8:	e7c6      	b.n	800ab58 <quorem+0x8e>
 800abca:	6812      	ldr	r2, [r2, #0]
 800abcc:	3b04      	subs	r3, #4
 800abce:	2a00      	cmp	r2, #0
 800abd0:	d1ef      	bne.n	800abb2 <quorem+0xe8>
 800abd2:	3c01      	subs	r4, #1
 800abd4:	e7ea      	b.n	800abac <quorem+0xe2>
 800abd6:	2000      	movs	r0, #0
 800abd8:	e7ee      	b.n	800abb8 <quorem+0xee>
 800abda:	0000      	movs	r0, r0
 800abdc:	0000      	movs	r0, r0
	...

0800abe0 <_dtoa_r>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	69c7      	ldr	r7, [r0, #28]
 800abe6:	b099      	sub	sp, #100	@ 0x64
 800abe8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800abec:	ec55 4b10 	vmov	r4, r5, d0
 800abf0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800abf2:	9109      	str	r1, [sp, #36]	@ 0x24
 800abf4:	4683      	mov	fp, r0
 800abf6:	920e      	str	r2, [sp, #56]	@ 0x38
 800abf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800abfa:	b97f      	cbnz	r7, 800ac1c <_dtoa_r+0x3c>
 800abfc:	2010      	movs	r0, #16
 800abfe:	f7fe feb9 	bl	8009974 <malloc>
 800ac02:	4602      	mov	r2, r0
 800ac04:	f8cb 001c 	str.w	r0, [fp, #28]
 800ac08:	b920      	cbnz	r0, 800ac14 <_dtoa_r+0x34>
 800ac0a:	4ba7      	ldr	r3, [pc, #668]	@ (800aea8 <_dtoa_r+0x2c8>)
 800ac0c:	21ef      	movs	r1, #239	@ 0xef
 800ac0e:	48a7      	ldr	r0, [pc, #668]	@ (800aeac <_dtoa_r+0x2cc>)
 800ac10:	f001 fc3e 	bl	800c490 <__assert_func>
 800ac14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ac18:	6007      	str	r7, [r0, #0]
 800ac1a:	60c7      	str	r7, [r0, #12]
 800ac1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac20:	6819      	ldr	r1, [r3, #0]
 800ac22:	b159      	cbz	r1, 800ac3c <_dtoa_r+0x5c>
 800ac24:	685a      	ldr	r2, [r3, #4]
 800ac26:	604a      	str	r2, [r1, #4]
 800ac28:	2301      	movs	r3, #1
 800ac2a:	4093      	lsls	r3, r2
 800ac2c:	608b      	str	r3, [r1, #8]
 800ac2e:	4658      	mov	r0, fp
 800ac30:	f000 fe36 	bl	800b8a0 <_Bfree>
 800ac34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]
 800ac3c:	1e2b      	subs	r3, r5, #0
 800ac3e:	bfb9      	ittee	lt
 800ac40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ac44:	9303      	strlt	r3, [sp, #12]
 800ac46:	2300      	movge	r3, #0
 800ac48:	6033      	strge	r3, [r6, #0]
 800ac4a:	9f03      	ldr	r7, [sp, #12]
 800ac4c:	4b98      	ldr	r3, [pc, #608]	@ (800aeb0 <_dtoa_r+0x2d0>)
 800ac4e:	bfbc      	itt	lt
 800ac50:	2201      	movlt	r2, #1
 800ac52:	6032      	strlt	r2, [r6, #0]
 800ac54:	43bb      	bics	r3, r7
 800ac56:	d112      	bne.n	800ac7e <_dtoa_r+0x9e>
 800ac58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ac5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ac5e:	6013      	str	r3, [r2, #0]
 800ac60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac64:	4323      	orrs	r3, r4
 800ac66:	f000 854d 	beq.w	800b704 <_dtoa_r+0xb24>
 800ac6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800aec4 <_dtoa_r+0x2e4>
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	f000 854f 	beq.w	800b714 <_dtoa_r+0xb34>
 800ac76:	f10a 0303 	add.w	r3, sl, #3
 800ac7a:	f000 bd49 	b.w	800b710 <_dtoa_r+0xb30>
 800ac7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac82:	2200      	movs	r2, #0
 800ac84:	ec51 0b17 	vmov	r0, r1, d7
 800ac88:	2300      	movs	r3, #0
 800ac8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ac8e:	f7f5 ff2b 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac92:	4680      	mov	r8, r0
 800ac94:	b158      	cbz	r0, 800acae <_dtoa_r+0xce>
 800ac96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ac98:	2301      	movs	r3, #1
 800ac9a:	6013      	str	r3, [r2, #0]
 800ac9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ac9e:	b113      	cbz	r3, 800aca6 <_dtoa_r+0xc6>
 800aca0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aca2:	4b84      	ldr	r3, [pc, #528]	@ (800aeb4 <_dtoa_r+0x2d4>)
 800aca4:	6013      	str	r3, [r2, #0]
 800aca6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800aec8 <_dtoa_r+0x2e8>
 800acaa:	f000 bd33 	b.w	800b714 <_dtoa_r+0xb34>
 800acae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800acb2:	aa16      	add	r2, sp, #88	@ 0x58
 800acb4:	a917      	add	r1, sp, #92	@ 0x5c
 800acb6:	4658      	mov	r0, fp
 800acb8:	f001 f8dc 	bl	800be74 <__d2b>
 800acbc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800acc0:	4681      	mov	r9, r0
 800acc2:	2e00      	cmp	r6, #0
 800acc4:	d077      	beq.n	800adb6 <_dtoa_r+0x1d6>
 800acc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acc8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800accc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800acd4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800acd8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800acdc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ace0:	4619      	mov	r1, r3
 800ace2:	2200      	movs	r2, #0
 800ace4:	4b74      	ldr	r3, [pc, #464]	@ (800aeb8 <_dtoa_r+0x2d8>)
 800ace6:	f7f5 fadf 	bl	80002a8 <__aeabi_dsub>
 800acea:	a369      	add	r3, pc, #420	@ (adr r3, 800ae90 <_dtoa_r+0x2b0>)
 800acec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf0:	f7f5 fc92 	bl	8000618 <__aeabi_dmul>
 800acf4:	a368      	add	r3, pc, #416	@ (adr r3, 800ae98 <_dtoa_r+0x2b8>)
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	f7f5 fad7 	bl	80002ac <__adddf3>
 800acfe:	4604      	mov	r4, r0
 800ad00:	4630      	mov	r0, r6
 800ad02:	460d      	mov	r5, r1
 800ad04:	f7f5 fc1e 	bl	8000544 <__aeabi_i2d>
 800ad08:	a365      	add	r3, pc, #404	@ (adr r3, 800aea0 <_dtoa_r+0x2c0>)
 800ad0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0e:	f7f5 fc83 	bl	8000618 <__aeabi_dmul>
 800ad12:	4602      	mov	r2, r0
 800ad14:	460b      	mov	r3, r1
 800ad16:	4620      	mov	r0, r4
 800ad18:	4629      	mov	r1, r5
 800ad1a:	f7f5 fac7 	bl	80002ac <__adddf3>
 800ad1e:	4604      	mov	r4, r0
 800ad20:	460d      	mov	r5, r1
 800ad22:	f7f5 ff29 	bl	8000b78 <__aeabi_d2iz>
 800ad26:	2200      	movs	r2, #0
 800ad28:	4607      	mov	r7, r0
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f7f5 fee4 	bl	8000afc <__aeabi_dcmplt>
 800ad34:	b140      	cbz	r0, 800ad48 <_dtoa_r+0x168>
 800ad36:	4638      	mov	r0, r7
 800ad38:	f7f5 fc04 	bl	8000544 <__aeabi_i2d>
 800ad3c:	4622      	mov	r2, r4
 800ad3e:	462b      	mov	r3, r5
 800ad40:	f7f5 fed2 	bl	8000ae8 <__aeabi_dcmpeq>
 800ad44:	b900      	cbnz	r0, 800ad48 <_dtoa_r+0x168>
 800ad46:	3f01      	subs	r7, #1
 800ad48:	2f16      	cmp	r7, #22
 800ad4a:	d851      	bhi.n	800adf0 <_dtoa_r+0x210>
 800ad4c:	4b5b      	ldr	r3, [pc, #364]	@ (800aebc <_dtoa_r+0x2dc>)
 800ad4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ad52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad5a:	f7f5 fecf 	bl	8000afc <__aeabi_dcmplt>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d048      	beq.n	800adf4 <_dtoa_r+0x214>
 800ad62:	3f01      	subs	r7, #1
 800ad64:	2300      	movs	r3, #0
 800ad66:	9312      	str	r3, [sp, #72]	@ 0x48
 800ad68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ad6a:	1b9b      	subs	r3, r3, r6
 800ad6c:	1e5a      	subs	r2, r3, #1
 800ad6e:	bf44      	itt	mi
 800ad70:	f1c3 0801 	rsbmi	r8, r3, #1
 800ad74:	2300      	movmi	r3, #0
 800ad76:	9208      	str	r2, [sp, #32]
 800ad78:	bf54      	ite	pl
 800ad7a:	f04f 0800 	movpl.w	r8, #0
 800ad7e:	9308      	strmi	r3, [sp, #32]
 800ad80:	2f00      	cmp	r7, #0
 800ad82:	db39      	blt.n	800adf8 <_dtoa_r+0x218>
 800ad84:	9b08      	ldr	r3, [sp, #32]
 800ad86:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ad88:	443b      	add	r3, r7
 800ad8a:	9308      	str	r3, [sp, #32]
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad92:	2b09      	cmp	r3, #9
 800ad94:	d864      	bhi.n	800ae60 <_dtoa_r+0x280>
 800ad96:	2b05      	cmp	r3, #5
 800ad98:	bfc4      	itt	gt
 800ad9a:	3b04      	subgt	r3, #4
 800ad9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ad9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ada0:	f1a3 0302 	sub.w	r3, r3, #2
 800ada4:	bfcc      	ite	gt
 800ada6:	2400      	movgt	r4, #0
 800ada8:	2401      	movle	r4, #1
 800adaa:	2b03      	cmp	r3, #3
 800adac:	d863      	bhi.n	800ae76 <_dtoa_r+0x296>
 800adae:	e8df f003 	tbb	[pc, r3]
 800adb2:	372a      	.short	0x372a
 800adb4:	5535      	.short	0x5535
 800adb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800adba:	441e      	add	r6, r3
 800adbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800adc0:	2b20      	cmp	r3, #32
 800adc2:	bfc1      	itttt	gt
 800adc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800adc8:	409f      	lslgt	r7, r3
 800adca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800adce:	fa24 f303 	lsrgt.w	r3, r4, r3
 800add2:	bfd6      	itet	le
 800add4:	f1c3 0320 	rsble	r3, r3, #32
 800add8:	ea47 0003 	orrgt.w	r0, r7, r3
 800addc:	fa04 f003 	lslle.w	r0, r4, r3
 800ade0:	f7f5 fba0 	bl	8000524 <__aeabi_ui2d>
 800ade4:	2201      	movs	r2, #1
 800ade6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800adea:	3e01      	subs	r6, #1
 800adec:	9214      	str	r2, [sp, #80]	@ 0x50
 800adee:	e777      	b.n	800ace0 <_dtoa_r+0x100>
 800adf0:	2301      	movs	r3, #1
 800adf2:	e7b8      	b.n	800ad66 <_dtoa_r+0x186>
 800adf4:	9012      	str	r0, [sp, #72]	@ 0x48
 800adf6:	e7b7      	b.n	800ad68 <_dtoa_r+0x188>
 800adf8:	427b      	negs	r3, r7
 800adfa:	930a      	str	r3, [sp, #40]	@ 0x28
 800adfc:	2300      	movs	r3, #0
 800adfe:	eba8 0807 	sub.w	r8, r8, r7
 800ae02:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae04:	e7c4      	b.n	800ad90 <_dtoa_r+0x1b0>
 800ae06:	2300      	movs	r3, #0
 800ae08:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dc35      	bgt.n	800ae7c <_dtoa_r+0x29c>
 800ae10:	2301      	movs	r3, #1
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	9307      	str	r3, [sp, #28]
 800ae16:	461a      	mov	r2, r3
 800ae18:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae1a:	e00b      	b.n	800ae34 <_dtoa_r+0x254>
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e7f3      	b.n	800ae08 <_dtoa_r+0x228>
 800ae20:	2300      	movs	r3, #0
 800ae22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae26:	18fb      	adds	r3, r7, r3
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	9307      	str	r3, [sp, #28]
 800ae30:	bfb8      	it	lt
 800ae32:	2301      	movlt	r3, #1
 800ae34:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ae38:	2100      	movs	r1, #0
 800ae3a:	2204      	movs	r2, #4
 800ae3c:	f102 0514 	add.w	r5, r2, #20
 800ae40:	429d      	cmp	r5, r3
 800ae42:	d91f      	bls.n	800ae84 <_dtoa_r+0x2a4>
 800ae44:	6041      	str	r1, [r0, #4]
 800ae46:	4658      	mov	r0, fp
 800ae48:	f000 fcea 	bl	800b820 <_Balloc>
 800ae4c:	4682      	mov	sl, r0
 800ae4e:	2800      	cmp	r0, #0
 800ae50:	d13c      	bne.n	800aecc <_dtoa_r+0x2ec>
 800ae52:	4b1b      	ldr	r3, [pc, #108]	@ (800aec0 <_dtoa_r+0x2e0>)
 800ae54:	4602      	mov	r2, r0
 800ae56:	f240 11af 	movw	r1, #431	@ 0x1af
 800ae5a:	e6d8      	b.n	800ac0e <_dtoa_r+0x2e>
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e7e0      	b.n	800ae22 <_dtoa_r+0x242>
 800ae60:	2401      	movs	r4, #1
 800ae62:	2300      	movs	r3, #0
 800ae64:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae66:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ae68:	f04f 33ff 	mov.w	r3, #4294967295
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	9307      	str	r3, [sp, #28]
 800ae70:	2200      	movs	r2, #0
 800ae72:	2312      	movs	r3, #18
 800ae74:	e7d0      	b.n	800ae18 <_dtoa_r+0x238>
 800ae76:	2301      	movs	r3, #1
 800ae78:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae7a:	e7f5      	b.n	800ae68 <_dtoa_r+0x288>
 800ae7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	9307      	str	r3, [sp, #28]
 800ae82:	e7d7      	b.n	800ae34 <_dtoa_r+0x254>
 800ae84:	3101      	adds	r1, #1
 800ae86:	0052      	lsls	r2, r2, #1
 800ae88:	e7d8      	b.n	800ae3c <_dtoa_r+0x25c>
 800ae8a:	bf00      	nop
 800ae8c:	f3af 8000 	nop.w
 800ae90:	636f4361 	.word	0x636f4361
 800ae94:	3fd287a7 	.word	0x3fd287a7
 800ae98:	8b60c8b3 	.word	0x8b60c8b3
 800ae9c:	3fc68a28 	.word	0x3fc68a28
 800aea0:	509f79fb 	.word	0x509f79fb
 800aea4:	3fd34413 	.word	0x3fd34413
 800aea8:	0800ce5c 	.word	0x0800ce5c
 800aeac:	0800ce73 	.word	0x0800ce73
 800aeb0:	7ff00000 	.word	0x7ff00000
 800aeb4:	0800ce22 	.word	0x0800ce22
 800aeb8:	3ff80000 	.word	0x3ff80000
 800aebc:	0800cf70 	.word	0x0800cf70
 800aec0:	0800cecb 	.word	0x0800cecb
 800aec4:	0800ce58 	.word	0x0800ce58
 800aec8:	0800ce21 	.word	0x0800ce21
 800aecc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aed0:	6018      	str	r0, [r3, #0]
 800aed2:	9b07      	ldr	r3, [sp, #28]
 800aed4:	2b0e      	cmp	r3, #14
 800aed6:	f200 80a4 	bhi.w	800b022 <_dtoa_r+0x442>
 800aeda:	2c00      	cmp	r4, #0
 800aedc:	f000 80a1 	beq.w	800b022 <_dtoa_r+0x442>
 800aee0:	2f00      	cmp	r7, #0
 800aee2:	dd33      	ble.n	800af4c <_dtoa_r+0x36c>
 800aee4:	4bad      	ldr	r3, [pc, #692]	@ (800b19c <_dtoa_r+0x5bc>)
 800aee6:	f007 020f 	and.w	r2, r7, #15
 800aeea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aeee:	ed93 7b00 	vldr	d7, [r3]
 800aef2:	05f8      	lsls	r0, r7, #23
 800aef4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aef8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aefc:	d516      	bpl.n	800af2c <_dtoa_r+0x34c>
 800aefe:	4ba8      	ldr	r3, [pc, #672]	@ (800b1a0 <_dtoa_r+0x5c0>)
 800af00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800af08:	f7f5 fcb0 	bl	800086c <__aeabi_ddiv>
 800af0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af10:	f004 040f 	and.w	r4, r4, #15
 800af14:	2603      	movs	r6, #3
 800af16:	4da2      	ldr	r5, [pc, #648]	@ (800b1a0 <_dtoa_r+0x5c0>)
 800af18:	b954      	cbnz	r4, 800af30 <_dtoa_r+0x350>
 800af1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af22:	f7f5 fca3 	bl	800086c <__aeabi_ddiv>
 800af26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af2a:	e028      	b.n	800af7e <_dtoa_r+0x39e>
 800af2c:	2602      	movs	r6, #2
 800af2e:	e7f2      	b.n	800af16 <_dtoa_r+0x336>
 800af30:	07e1      	lsls	r1, r4, #31
 800af32:	d508      	bpl.n	800af46 <_dtoa_r+0x366>
 800af34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af38:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af3c:	f7f5 fb6c 	bl	8000618 <__aeabi_dmul>
 800af40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af44:	3601      	adds	r6, #1
 800af46:	1064      	asrs	r4, r4, #1
 800af48:	3508      	adds	r5, #8
 800af4a:	e7e5      	b.n	800af18 <_dtoa_r+0x338>
 800af4c:	f000 80d2 	beq.w	800b0f4 <_dtoa_r+0x514>
 800af50:	427c      	negs	r4, r7
 800af52:	4b92      	ldr	r3, [pc, #584]	@ (800b19c <_dtoa_r+0x5bc>)
 800af54:	4d92      	ldr	r5, [pc, #584]	@ (800b1a0 <_dtoa_r+0x5c0>)
 800af56:	f004 020f 	and.w	r2, r4, #15
 800af5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af66:	f7f5 fb57 	bl	8000618 <__aeabi_dmul>
 800af6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af6e:	1124      	asrs	r4, r4, #4
 800af70:	2300      	movs	r3, #0
 800af72:	2602      	movs	r6, #2
 800af74:	2c00      	cmp	r4, #0
 800af76:	f040 80b2 	bne.w	800b0de <_dtoa_r+0x4fe>
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d1d3      	bne.n	800af26 <_dtoa_r+0x346>
 800af7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800af80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800af84:	2b00      	cmp	r3, #0
 800af86:	f000 80b7 	beq.w	800b0f8 <_dtoa_r+0x518>
 800af8a:	4b86      	ldr	r3, [pc, #536]	@ (800b1a4 <_dtoa_r+0x5c4>)
 800af8c:	2200      	movs	r2, #0
 800af8e:	4620      	mov	r0, r4
 800af90:	4629      	mov	r1, r5
 800af92:	f7f5 fdb3 	bl	8000afc <__aeabi_dcmplt>
 800af96:	2800      	cmp	r0, #0
 800af98:	f000 80ae 	beq.w	800b0f8 <_dtoa_r+0x518>
 800af9c:	9b07      	ldr	r3, [sp, #28]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 80aa 	beq.w	800b0f8 <_dtoa_r+0x518>
 800afa4:	9b00      	ldr	r3, [sp, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	dd37      	ble.n	800b01a <_dtoa_r+0x43a>
 800afaa:	1e7b      	subs	r3, r7, #1
 800afac:	9304      	str	r3, [sp, #16]
 800afae:	4620      	mov	r0, r4
 800afb0:	4b7d      	ldr	r3, [pc, #500]	@ (800b1a8 <_dtoa_r+0x5c8>)
 800afb2:	2200      	movs	r2, #0
 800afb4:	4629      	mov	r1, r5
 800afb6:	f7f5 fb2f 	bl	8000618 <__aeabi_dmul>
 800afba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afbe:	9c00      	ldr	r4, [sp, #0]
 800afc0:	3601      	adds	r6, #1
 800afc2:	4630      	mov	r0, r6
 800afc4:	f7f5 fabe 	bl	8000544 <__aeabi_i2d>
 800afc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afcc:	f7f5 fb24 	bl	8000618 <__aeabi_dmul>
 800afd0:	4b76      	ldr	r3, [pc, #472]	@ (800b1ac <_dtoa_r+0x5cc>)
 800afd2:	2200      	movs	r2, #0
 800afd4:	f7f5 f96a 	bl	80002ac <__adddf3>
 800afd8:	4605      	mov	r5, r0
 800afda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800afde:	2c00      	cmp	r4, #0
 800afe0:	f040 808d 	bne.w	800b0fe <_dtoa_r+0x51e>
 800afe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afe8:	4b71      	ldr	r3, [pc, #452]	@ (800b1b0 <_dtoa_r+0x5d0>)
 800afea:	2200      	movs	r2, #0
 800afec:	f7f5 f95c 	bl	80002a8 <__aeabi_dsub>
 800aff0:	4602      	mov	r2, r0
 800aff2:	460b      	mov	r3, r1
 800aff4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aff8:	462a      	mov	r2, r5
 800affa:	4633      	mov	r3, r6
 800affc:	f7f5 fd9c 	bl	8000b38 <__aeabi_dcmpgt>
 800b000:	2800      	cmp	r0, #0
 800b002:	f040 828b 	bne.w	800b51c <_dtoa_r+0x93c>
 800b006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b00a:	462a      	mov	r2, r5
 800b00c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b010:	f7f5 fd74 	bl	8000afc <__aeabi_dcmplt>
 800b014:	2800      	cmp	r0, #0
 800b016:	f040 8128 	bne.w	800b26a <_dtoa_r+0x68a>
 800b01a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b01e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b022:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b024:	2b00      	cmp	r3, #0
 800b026:	f2c0 815a 	blt.w	800b2de <_dtoa_r+0x6fe>
 800b02a:	2f0e      	cmp	r7, #14
 800b02c:	f300 8157 	bgt.w	800b2de <_dtoa_r+0x6fe>
 800b030:	4b5a      	ldr	r3, [pc, #360]	@ (800b19c <_dtoa_r+0x5bc>)
 800b032:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b036:	ed93 7b00 	vldr	d7, [r3]
 800b03a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	ed8d 7b00 	vstr	d7, [sp]
 800b042:	da03      	bge.n	800b04c <_dtoa_r+0x46c>
 800b044:	9b07      	ldr	r3, [sp, #28]
 800b046:	2b00      	cmp	r3, #0
 800b048:	f340 8101 	ble.w	800b24e <_dtoa_r+0x66e>
 800b04c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b050:	4656      	mov	r6, sl
 800b052:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b056:	4620      	mov	r0, r4
 800b058:	4629      	mov	r1, r5
 800b05a:	f7f5 fc07 	bl	800086c <__aeabi_ddiv>
 800b05e:	f7f5 fd8b 	bl	8000b78 <__aeabi_d2iz>
 800b062:	4680      	mov	r8, r0
 800b064:	f7f5 fa6e 	bl	8000544 <__aeabi_i2d>
 800b068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b06c:	f7f5 fad4 	bl	8000618 <__aeabi_dmul>
 800b070:	4602      	mov	r2, r0
 800b072:	460b      	mov	r3, r1
 800b074:	4620      	mov	r0, r4
 800b076:	4629      	mov	r1, r5
 800b078:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b07c:	f7f5 f914 	bl	80002a8 <__aeabi_dsub>
 800b080:	f806 4b01 	strb.w	r4, [r6], #1
 800b084:	9d07      	ldr	r5, [sp, #28]
 800b086:	eba6 040a 	sub.w	r4, r6, sl
 800b08a:	42a5      	cmp	r5, r4
 800b08c:	4602      	mov	r2, r0
 800b08e:	460b      	mov	r3, r1
 800b090:	f040 8117 	bne.w	800b2c2 <_dtoa_r+0x6e2>
 800b094:	f7f5 f90a 	bl	80002ac <__adddf3>
 800b098:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b09c:	4604      	mov	r4, r0
 800b09e:	460d      	mov	r5, r1
 800b0a0:	f7f5 fd4a 	bl	8000b38 <__aeabi_dcmpgt>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	f040 80f9 	bne.w	800b29c <_dtoa_r+0x6bc>
 800b0aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	4629      	mov	r1, r5
 800b0b2:	f7f5 fd19 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0b6:	b118      	cbz	r0, 800b0c0 <_dtoa_r+0x4e0>
 800b0b8:	f018 0f01 	tst.w	r8, #1
 800b0bc:	f040 80ee 	bne.w	800b29c <_dtoa_r+0x6bc>
 800b0c0:	4649      	mov	r1, r9
 800b0c2:	4658      	mov	r0, fp
 800b0c4:	f000 fbec 	bl	800b8a0 <_Bfree>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	7033      	strb	r3, [r6, #0]
 800b0cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b0ce:	3701      	adds	r7, #1
 800b0d0:	601f      	str	r7, [r3, #0]
 800b0d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	f000 831d 	beq.w	800b714 <_dtoa_r+0xb34>
 800b0da:	601e      	str	r6, [r3, #0]
 800b0dc:	e31a      	b.n	800b714 <_dtoa_r+0xb34>
 800b0de:	07e2      	lsls	r2, r4, #31
 800b0e0:	d505      	bpl.n	800b0ee <_dtoa_r+0x50e>
 800b0e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0e6:	f7f5 fa97 	bl	8000618 <__aeabi_dmul>
 800b0ea:	3601      	adds	r6, #1
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	1064      	asrs	r4, r4, #1
 800b0f0:	3508      	adds	r5, #8
 800b0f2:	e73f      	b.n	800af74 <_dtoa_r+0x394>
 800b0f4:	2602      	movs	r6, #2
 800b0f6:	e742      	b.n	800af7e <_dtoa_r+0x39e>
 800b0f8:	9c07      	ldr	r4, [sp, #28]
 800b0fa:	9704      	str	r7, [sp, #16]
 800b0fc:	e761      	b.n	800afc2 <_dtoa_r+0x3e2>
 800b0fe:	4b27      	ldr	r3, [pc, #156]	@ (800b19c <_dtoa_r+0x5bc>)
 800b100:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b102:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b106:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b10a:	4454      	add	r4, sl
 800b10c:	2900      	cmp	r1, #0
 800b10e:	d053      	beq.n	800b1b8 <_dtoa_r+0x5d8>
 800b110:	4928      	ldr	r1, [pc, #160]	@ (800b1b4 <_dtoa_r+0x5d4>)
 800b112:	2000      	movs	r0, #0
 800b114:	f7f5 fbaa 	bl	800086c <__aeabi_ddiv>
 800b118:	4633      	mov	r3, r6
 800b11a:	462a      	mov	r2, r5
 800b11c:	f7f5 f8c4 	bl	80002a8 <__aeabi_dsub>
 800b120:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b124:	4656      	mov	r6, sl
 800b126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b12a:	f7f5 fd25 	bl	8000b78 <__aeabi_d2iz>
 800b12e:	4605      	mov	r5, r0
 800b130:	f7f5 fa08 	bl	8000544 <__aeabi_i2d>
 800b134:	4602      	mov	r2, r0
 800b136:	460b      	mov	r3, r1
 800b138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b13c:	f7f5 f8b4 	bl	80002a8 <__aeabi_dsub>
 800b140:	3530      	adds	r5, #48	@ 0x30
 800b142:	4602      	mov	r2, r0
 800b144:	460b      	mov	r3, r1
 800b146:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b14a:	f806 5b01 	strb.w	r5, [r6], #1
 800b14e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b152:	f7f5 fcd3 	bl	8000afc <__aeabi_dcmplt>
 800b156:	2800      	cmp	r0, #0
 800b158:	d171      	bne.n	800b23e <_dtoa_r+0x65e>
 800b15a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b15e:	4911      	ldr	r1, [pc, #68]	@ (800b1a4 <_dtoa_r+0x5c4>)
 800b160:	2000      	movs	r0, #0
 800b162:	f7f5 f8a1 	bl	80002a8 <__aeabi_dsub>
 800b166:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b16a:	f7f5 fcc7 	bl	8000afc <__aeabi_dcmplt>
 800b16e:	2800      	cmp	r0, #0
 800b170:	f040 8095 	bne.w	800b29e <_dtoa_r+0x6be>
 800b174:	42a6      	cmp	r6, r4
 800b176:	f43f af50 	beq.w	800b01a <_dtoa_r+0x43a>
 800b17a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b17e:	4b0a      	ldr	r3, [pc, #40]	@ (800b1a8 <_dtoa_r+0x5c8>)
 800b180:	2200      	movs	r2, #0
 800b182:	f7f5 fa49 	bl	8000618 <__aeabi_dmul>
 800b186:	4b08      	ldr	r3, [pc, #32]	@ (800b1a8 <_dtoa_r+0x5c8>)
 800b188:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b18c:	2200      	movs	r2, #0
 800b18e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b192:	f7f5 fa41 	bl	8000618 <__aeabi_dmul>
 800b196:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b19a:	e7c4      	b.n	800b126 <_dtoa_r+0x546>
 800b19c:	0800cf70 	.word	0x0800cf70
 800b1a0:	0800cf48 	.word	0x0800cf48
 800b1a4:	3ff00000 	.word	0x3ff00000
 800b1a8:	40240000 	.word	0x40240000
 800b1ac:	401c0000 	.word	0x401c0000
 800b1b0:	40140000 	.word	0x40140000
 800b1b4:	3fe00000 	.word	0x3fe00000
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	f7f5 fa2c 	bl	8000618 <__aeabi_dmul>
 800b1c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b1c4:	9415      	str	r4, [sp, #84]	@ 0x54
 800b1c6:	4656      	mov	r6, sl
 800b1c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1cc:	f7f5 fcd4 	bl	8000b78 <__aeabi_d2iz>
 800b1d0:	4605      	mov	r5, r0
 800b1d2:	f7f5 f9b7 	bl	8000544 <__aeabi_i2d>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1de:	f7f5 f863 	bl	80002a8 <__aeabi_dsub>
 800b1e2:	3530      	adds	r5, #48	@ 0x30
 800b1e4:	f806 5b01 	strb.w	r5, [r6], #1
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	42a6      	cmp	r6, r4
 800b1ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1f2:	f04f 0200 	mov.w	r2, #0
 800b1f6:	d124      	bne.n	800b242 <_dtoa_r+0x662>
 800b1f8:	4bac      	ldr	r3, [pc, #688]	@ (800b4ac <_dtoa_r+0x8cc>)
 800b1fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b1fe:	f7f5 f855 	bl	80002ac <__adddf3>
 800b202:	4602      	mov	r2, r0
 800b204:	460b      	mov	r3, r1
 800b206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b20a:	f7f5 fc95 	bl	8000b38 <__aeabi_dcmpgt>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d145      	bne.n	800b29e <_dtoa_r+0x6be>
 800b212:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b216:	49a5      	ldr	r1, [pc, #660]	@ (800b4ac <_dtoa_r+0x8cc>)
 800b218:	2000      	movs	r0, #0
 800b21a:	f7f5 f845 	bl	80002a8 <__aeabi_dsub>
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b226:	f7f5 fc69 	bl	8000afc <__aeabi_dcmplt>
 800b22a:	2800      	cmp	r0, #0
 800b22c:	f43f aef5 	beq.w	800b01a <_dtoa_r+0x43a>
 800b230:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b232:	1e73      	subs	r3, r6, #1
 800b234:	9315      	str	r3, [sp, #84]	@ 0x54
 800b236:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b23a:	2b30      	cmp	r3, #48	@ 0x30
 800b23c:	d0f8      	beq.n	800b230 <_dtoa_r+0x650>
 800b23e:	9f04      	ldr	r7, [sp, #16]
 800b240:	e73e      	b.n	800b0c0 <_dtoa_r+0x4e0>
 800b242:	4b9b      	ldr	r3, [pc, #620]	@ (800b4b0 <_dtoa_r+0x8d0>)
 800b244:	f7f5 f9e8 	bl	8000618 <__aeabi_dmul>
 800b248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b24c:	e7bc      	b.n	800b1c8 <_dtoa_r+0x5e8>
 800b24e:	d10c      	bne.n	800b26a <_dtoa_r+0x68a>
 800b250:	4b98      	ldr	r3, [pc, #608]	@ (800b4b4 <_dtoa_r+0x8d4>)
 800b252:	2200      	movs	r2, #0
 800b254:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b258:	f7f5 f9de 	bl	8000618 <__aeabi_dmul>
 800b25c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b260:	f7f5 fc60 	bl	8000b24 <__aeabi_dcmpge>
 800b264:	2800      	cmp	r0, #0
 800b266:	f000 8157 	beq.w	800b518 <_dtoa_r+0x938>
 800b26a:	2400      	movs	r4, #0
 800b26c:	4625      	mov	r5, r4
 800b26e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b270:	43db      	mvns	r3, r3
 800b272:	9304      	str	r3, [sp, #16]
 800b274:	4656      	mov	r6, sl
 800b276:	2700      	movs	r7, #0
 800b278:	4621      	mov	r1, r4
 800b27a:	4658      	mov	r0, fp
 800b27c:	f000 fb10 	bl	800b8a0 <_Bfree>
 800b280:	2d00      	cmp	r5, #0
 800b282:	d0dc      	beq.n	800b23e <_dtoa_r+0x65e>
 800b284:	b12f      	cbz	r7, 800b292 <_dtoa_r+0x6b2>
 800b286:	42af      	cmp	r7, r5
 800b288:	d003      	beq.n	800b292 <_dtoa_r+0x6b2>
 800b28a:	4639      	mov	r1, r7
 800b28c:	4658      	mov	r0, fp
 800b28e:	f000 fb07 	bl	800b8a0 <_Bfree>
 800b292:	4629      	mov	r1, r5
 800b294:	4658      	mov	r0, fp
 800b296:	f000 fb03 	bl	800b8a0 <_Bfree>
 800b29a:	e7d0      	b.n	800b23e <_dtoa_r+0x65e>
 800b29c:	9704      	str	r7, [sp, #16]
 800b29e:	4633      	mov	r3, r6
 800b2a0:	461e      	mov	r6, r3
 800b2a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2a6:	2a39      	cmp	r2, #57	@ 0x39
 800b2a8:	d107      	bne.n	800b2ba <_dtoa_r+0x6da>
 800b2aa:	459a      	cmp	sl, r3
 800b2ac:	d1f8      	bne.n	800b2a0 <_dtoa_r+0x6c0>
 800b2ae:	9a04      	ldr	r2, [sp, #16]
 800b2b0:	3201      	adds	r2, #1
 800b2b2:	9204      	str	r2, [sp, #16]
 800b2b4:	2230      	movs	r2, #48	@ 0x30
 800b2b6:	f88a 2000 	strb.w	r2, [sl]
 800b2ba:	781a      	ldrb	r2, [r3, #0]
 800b2bc:	3201      	adds	r2, #1
 800b2be:	701a      	strb	r2, [r3, #0]
 800b2c0:	e7bd      	b.n	800b23e <_dtoa_r+0x65e>
 800b2c2:	4b7b      	ldr	r3, [pc, #492]	@ (800b4b0 <_dtoa_r+0x8d0>)
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f7f5 f9a7 	bl	8000618 <__aeabi_dmul>
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	460d      	mov	r5, r1
 800b2d2:	f7f5 fc09 	bl	8000ae8 <__aeabi_dcmpeq>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	f43f aebb 	beq.w	800b052 <_dtoa_r+0x472>
 800b2dc:	e6f0      	b.n	800b0c0 <_dtoa_r+0x4e0>
 800b2de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b2e0:	2a00      	cmp	r2, #0
 800b2e2:	f000 80db 	beq.w	800b49c <_dtoa_r+0x8bc>
 800b2e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2e8:	2a01      	cmp	r2, #1
 800b2ea:	f300 80bf 	bgt.w	800b46c <_dtoa_r+0x88c>
 800b2ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b2f0:	2a00      	cmp	r2, #0
 800b2f2:	f000 80b7 	beq.w	800b464 <_dtoa_r+0x884>
 800b2f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b2fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b2fc:	4646      	mov	r6, r8
 800b2fe:	9a08      	ldr	r2, [sp, #32]
 800b300:	2101      	movs	r1, #1
 800b302:	441a      	add	r2, r3
 800b304:	4658      	mov	r0, fp
 800b306:	4498      	add	r8, r3
 800b308:	9208      	str	r2, [sp, #32]
 800b30a:	f000 fb7d 	bl	800ba08 <__i2b>
 800b30e:	4605      	mov	r5, r0
 800b310:	b15e      	cbz	r6, 800b32a <_dtoa_r+0x74a>
 800b312:	9b08      	ldr	r3, [sp, #32]
 800b314:	2b00      	cmp	r3, #0
 800b316:	dd08      	ble.n	800b32a <_dtoa_r+0x74a>
 800b318:	42b3      	cmp	r3, r6
 800b31a:	9a08      	ldr	r2, [sp, #32]
 800b31c:	bfa8      	it	ge
 800b31e:	4633      	movge	r3, r6
 800b320:	eba8 0803 	sub.w	r8, r8, r3
 800b324:	1af6      	subs	r6, r6, r3
 800b326:	1ad3      	subs	r3, r2, r3
 800b328:	9308      	str	r3, [sp, #32]
 800b32a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b32c:	b1f3      	cbz	r3, 800b36c <_dtoa_r+0x78c>
 800b32e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b330:	2b00      	cmp	r3, #0
 800b332:	f000 80b7 	beq.w	800b4a4 <_dtoa_r+0x8c4>
 800b336:	b18c      	cbz	r4, 800b35c <_dtoa_r+0x77c>
 800b338:	4629      	mov	r1, r5
 800b33a:	4622      	mov	r2, r4
 800b33c:	4658      	mov	r0, fp
 800b33e:	f000 fc23 	bl	800bb88 <__pow5mult>
 800b342:	464a      	mov	r2, r9
 800b344:	4601      	mov	r1, r0
 800b346:	4605      	mov	r5, r0
 800b348:	4658      	mov	r0, fp
 800b34a:	f000 fb73 	bl	800ba34 <__multiply>
 800b34e:	4649      	mov	r1, r9
 800b350:	9004      	str	r0, [sp, #16]
 800b352:	4658      	mov	r0, fp
 800b354:	f000 faa4 	bl	800b8a0 <_Bfree>
 800b358:	9b04      	ldr	r3, [sp, #16]
 800b35a:	4699      	mov	r9, r3
 800b35c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b35e:	1b1a      	subs	r2, r3, r4
 800b360:	d004      	beq.n	800b36c <_dtoa_r+0x78c>
 800b362:	4649      	mov	r1, r9
 800b364:	4658      	mov	r0, fp
 800b366:	f000 fc0f 	bl	800bb88 <__pow5mult>
 800b36a:	4681      	mov	r9, r0
 800b36c:	2101      	movs	r1, #1
 800b36e:	4658      	mov	r0, fp
 800b370:	f000 fb4a 	bl	800ba08 <__i2b>
 800b374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b376:	4604      	mov	r4, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	f000 81cf 	beq.w	800b71c <_dtoa_r+0xb3c>
 800b37e:	461a      	mov	r2, r3
 800b380:	4601      	mov	r1, r0
 800b382:	4658      	mov	r0, fp
 800b384:	f000 fc00 	bl	800bb88 <__pow5mult>
 800b388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	4604      	mov	r4, r0
 800b38e:	f300 8095 	bgt.w	800b4bc <_dtoa_r+0x8dc>
 800b392:	9b02      	ldr	r3, [sp, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	f040 8087 	bne.w	800b4a8 <_dtoa_r+0x8c8>
 800b39a:	9b03      	ldr	r3, [sp, #12]
 800b39c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f040 8089 	bne.w	800b4b8 <_dtoa_r+0x8d8>
 800b3a6:	9b03      	ldr	r3, [sp, #12]
 800b3a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3ac:	0d1b      	lsrs	r3, r3, #20
 800b3ae:	051b      	lsls	r3, r3, #20
 800b3b0:	b12b      	cbz	r3, 800b3be <_dtoa_r+0x7de>
 800b3b2:	9b08      	ldr	r3, [sp, #32]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	9308      	str	r3, [sp, #32]
 800b3b8:	f108 0801 	add.w	r8, r8, #1
 800b3bc:	2301      	movs	r3, #1
 800b3be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b3c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f000 81b0 	beq.w	800b728 <_dtoa_r+0xb48>
 800b3c8:	6923      	ldr	r3, [r4, #16]
 800b3ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b3ce:	6918      	ldr	r0, [r3, #16]
 800b3d0:	f000 face 	bl	800b970 <__hi0bits>
 800b3d4:	f1c0 0020 	rsb	r0, r0, #32
 800b3d8:	9b08      	ldr	r3, [sp, #32]
 800b3da:	4418      	add	r0, r3
 800b3dc:	f010 001f 	ands.w	r0, r0, #31
 800b3e0:	d077      	beq.n	800b4d2 <_dtoa_r+0x8f2>
 800b3e2:	f1c0 0320 	rsb	r3, r0, #32
 800b3e6:	2b04      	cmp	r3, #4
 800b3e8:	dd6b      	ble.n	800b4c2 <_dtoa_r+0x8e2>
 800b3ea:	9b08      	ldr	r3, [sp, #32]
 800b3ec:	f1c0 001c 	rsb	r0, r0, #28
 800b3f0:	4403      	add	r3, r0
 800b3f2:	4480      	add	r8, r0
 800b3f4:	4406      	add	r6, r0
 800b3f6:	9308      	str	r3, [sp, #32]
 800b3f8:	f1b8 0f00 	cmp.w	r8, #0
 800b3fc:	dd05      	ble.n	800b40a <_dtoa_r+0x82a>
 800b3fe:	4649      	mov	r1, r9
 800b400:	4642      	mov	r2, r8
 800b402:	4658      	mov	r0, fp
 800b404:	f000 fc1a 	bl	800bc3c <__lshift>
 800b408:	4681      	mov	r9, r0
 800b40a:	9b08      	ldr	r3, [sp, #32]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	dd05      	ble.n	800b41c <_dtoa_r+0x83c>
 800b410:	4621      	mov	r1, r4
 800b412:	461a      	mov	r2, r3
 800b414:	4658      	mov	r0, fp
 800b416:	f000 fc11 	bl	800bc3c <__lshift>
 800b41a:	4604      	mov	r4, r0
 800b41c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d059      	beq.n	800b4d6 <_dtoa_r+0x8f6>
 800b422:	4621      	mov	r1, r4
 800b424:	4648      	mov	r0, r9
 800b426:	f000 fc75 	bl	800bd14 <__mcmp>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	da53      	bge.n	800b4d6 <_dtoa_r+0x8f6>
 800b42e:	1e7b      	subs	r3, r7, #1
 800b430:	9304      	str	r3, [sp, #16]
 800b432:	4649      	mov	r1, r9
 800b434:	2300      	movs	r3, #0
 800b436:	220a      	movs	r2, #10
 800b438:	4658      	mov	r0, fp
 800b43a:	f000 fa53 	bl	800b8e4 <__multadd>
 800b43e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b440:	4681      	mov	r9, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	f000 8172 	beq.w	800b72c <_dtoa_r+0xb4c>
 800b448:	2300      	movs	r3, #0
 800b44a:	4629      	mov	r1, r5
 800b44c:	220a      	movs	r2, #10
 800b44e:	4658      	mov	r0, fp
 800b450:	f000 fa48 	bl	800b8e4 <__multadd>
 800b454:	9b00      	ldr	r3, [sp, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	4605      	mov	r5, r0
 800b45a:	dc67      	bgt.n	800b52c <_dtoa_r+0x94c>
 800b45c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b45e:	2b02      	cmp	r3, #2
 800b460:	dc41      	bgt.n	800b4e6 <_dtoa_r+0x906>
 800b462:	e063      	b.n	800b52c <_dtoa_r+0x94c>
 800b464:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b466:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b46a:	e746      	b.n	800b2fa <_dtoa_r+0x71a>
 800b46c:	9b07      	ldr	r3, [sp, #28]
 800b46e:	1e5c      	subs	r4, r3, #1
 800b470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b472:	42a3      	cmp	r3, r4
 800b474:	bfbf      	itttt	lt
 800b476:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b478:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b47a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b47c:	1ae3      	sublt	r3, r4, r3
 800b47e:	bfb4      	ite	lt
 800b480:	18d2      	addlt	r2, r2, r3
 800b482:	1b1c      	subge	r4, r3, r4
 800b484:	9b07      	ldr	r3, [sp, #28]
 800b486:	bfbc      	itt	lt
 800b488:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b48a:	2400      	movlt	r4, #0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	bfb5      	itete	lt
 800b490:	eba8 0603 	sublt.w	r6, r8, r3
 800b494:	9b07      	ldrge	r3, [sp, #28]
 800b496:	2300      	movlt	r3, #0
 800b498:	4646      	movge	r6, r8
 800b49a:	e730      	b.n	800b2fe <_dtoa_r+0x71e>
 800b49c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b49e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b4a0:	4646      	mov	r6, r8
 800b4a2:	e735      	b.n	800b310 <_dtoa_r+0x730>
 800b4a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b4a6:	e75c      	b.n	800b362 <_dtoa_r+0x782>
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	e788      	b.n	800b3be <_dtoa_r+0x7de>
 800b4ac:	3fe00000 	.word	0x3fe00000
 800b4b0:	40240000 	.word	0x40240000
 800b4b4:	40140000 	.word	0x40140000
 800b4b8:	9b02      	ldr	r3, [sp, #8]
 800b4ba:	e780      	b.n	800b3be <_dtoa_r+0x7de>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4c0:	e782      	b.n	800b3c8 <_dtoa_r+0x7e8>
 800b4c2:	d099      	beq.n	800b3f8 <_dtoa_r+0x818>
 800b4c4:	9a08      	ldr	r2, [sp, #32]
 800b4c6:	331c      	adds	r3, #28
 800b4c8:	441a      	add	r2, r3
 800b4ca:	4498      	add	r8, r3
 800b4cc:	441e      	add	r6, r3
 800b4ce:	9208      	str	r2, [sp, #32]
 800b4d0:	e792      	b.n	800b3f8 <_dtoa_r+0x818>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	e7f6      	b.n	800b4c4 <_dtoa_r+0x8e4>
 800b4d6:	9b07      	ldr	r3, [sp, #28]
 800b4d8:	9704      	str	r7, [sp, #16]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	dc20      	bgt.n	800b520 <_dtoa_r+0x940>
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	dd1e      	ble.n	800b524 <_dtoa_r+0x944>
 800b4e6:	9b00      	ldr	r3, [sp, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f47f aec0 	bne.w	800b26e <_dtoa_r+0x68e>
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	2205      	movs	r2, #5
 800b4f2:	4658      	mov	r0, fp
 800b4f4:	f000 f9f6 	bl	800b8e4 <__multadd>
 800b4f8:	4601      	mov	r1, r0
 800b4fa:	4604      	mov	r4, r0
 800b4fc:	4648      	mov	r0, r9
 800b4fe:	f000 fc09 	bl	800bd14 <__mcmp>
 800b502:	2800      	cmp	r0, #0
 800b504:	f77f aeb3 	ble.w	800b26e <_dtoa_r+0x68e>
 800b508:	4656      	mov	r6, sl
 800b50a:	2331      	movs	r3, #49	@ 0x31
 800b50c:	f806 3b01 	strb.w	r3, [r6], #1
 800b510:	9b04      	ldr	r3, [sp, #16]
 800b512:	3301      	adds	r3, #1
 800b514:	9304      	str	r3, [sp, #16]
 800b516:	e6ae      	b.n	800b276 <_dtoa_r+0x696>
 800b518:	9c07      	ldr	r4, [sp, #28]
 800b51a:	9704      	str	r7, [sp, #16]
 800b51c:	4625      	mov	r5, r4
 800b51e:	e7f3      	b.n	800b508 <_dtoa_r+0x928>
 800b520:	9b07      	ldr	r3, [sp, #28]
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b526:	2b00      	cmp	r3, #0
 800b528:	f000 8104 	beq.w	800b734 <_dtoa_r+0xb54>
 800b52c:	2e00      	cmp	r6, #0
 800b52e:	dd05      	ble.n	800b53c <_dtoa_r+0x95c>
 800b530:	4629      	mov	r1, r5
 800b532:	4632      	mov	r2, r6
 800b534:	4658      	mov	r0, fp
 800b536:	f000 fb81 	bl	800bc3c <__lshift>
 800b53a:	4605      	mov	r5, r0
 800b53c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d05a      	beq.n	800b5f8 <_dtoa_r+0xa18>
 800b542:	6869      	ldr	r1, [r5, #4]
 800b544:	4658      	mov	r0, fp
 800b546:	f000 f96b 	bl	800b820 <_Balloc>
 800b54a:	4606      	mov	r6, r0
 800b54c:	b928      	cbnz	r0, 800b55a <_dtoa_r+0x97a>
 800b54e:	4b84      	ldr	r3, [pc, #528]	@ (800b760 <_dtoa_r+0xb80>)
 800b550:	4602      	mov	r2, r0
 800b552:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b556:	f7ff bb5a 	b.w	800ac0e <_dtoa_r+0x2e>
 800b55a:	692a      	ldr	r2, [r5, #16]
 800b55c:	3202      	adds	r2, #2
 800b55e:	0092      	lsls	r2, r2, #2
 800b560:	f105 010c 	add.w	r1, r5, #12
 800b564:	300c      	adds	r0, #12
 800b566:	f7ff faa2 	bl	800aaae <memcpy>
 800b56a:	2201      	movs	r2, #1
 800b56c:	4631      	mov	r1, r6
 800b56e:	4658      	mov	r0, fp
 800b570:	f000 fb64 	bl	800bc3c <__lshift>
 800b574:	f10a 0301 	add.w	r3, sl, #1
 800b578:	9307      	str	r3, [sp, #28]
 800b57a:	9b00      	ldr	r3, [sp, #0]
 800b57c:	4453      	add	r3, sl
 800b57e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b580:	9b02      	ldr	r3, [sp, #8]
 800b582:	f003 0301 	and.w	r3, r3, #1
 800b586:	462f      	mov	r7, r5
 800b588:	930a      	str	r3, [sp, #40]	@ 0x28
 800b58a:	4605      	mov	r5, r0
 800b58c:	9b07      	ldr	r3, [sp, #28]
 800b58e:	4621      	mov	r1, r4
 800b590:	3b01      	subs	r3, #1
 800b592:	4648      	mov	r0, r9
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	f7ff fa98 	bl	800aaca <quorem>
 800b59a:	4639      	mov	r1, r7
 800b59c:	9002      	str	r0, [sp, #8]
 800b59e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b5a2:	4648      	mov	r0, r9
 800b5a4:	f000 fbb6 	bl	800bd14 <__mcmp>
 800b5a8:	462a      	mov	r2, r5
 800b5aa:	9008      	str	r0, [sp, #32]
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	4658      	mov	r0, fp
 800b5b0:	f000 fbcc 	bl	800bd4c <__mdiff>
 800b5b4:	68c2      	ldr	r2, [r0, #12]
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	bb02      	cbnz	r2, 800b5fc <_dtoa_r+0xa1c>
 800b5ba:	4601      	mov	r1, r0
 800b5bc:	4648      	mov	r0, r9
 800b5be:	f000 fba9 	bl	800bd14 <__mcmp>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	4631      	mov	r1, r6
 800b5c6:	4658      	mov	r0, fp
 800b5c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b5ca:	f000 f969 	bl	800b8a0 <_Bfree>
 800b5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5d2:	9e07      	ldr	r6, [sp, #28]
 800b5d4:	ea43 0102 	orr.w	r1, r3, r2
 800b5d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5da:	4319      	orrs	r1, r3
 800b5dc:	d110      	bne.n	800b600 <_dtoa_r+0xa20>
 800b5de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b5e2:	d029      	beq.n	800b638 <_dtoa_r+0xa58>
 800b5e4:	9b08      	ldr	r3, [sp, #32]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	dd02      	ble.n	800b5f0 <_dtoa_r+0xa10>
 800b5ea:	9b02      	ldr	r3, [sp, #8]
 800b5ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b5f0:	9b00      	ldr	r3, [sp, #0]
 800b5f2:	f883 8000 	strb.w	r8, [r3]
 800b5f6:	e63f      	b.n	800b278 <_dtoa_r+0x698>
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	e7bb      	b.n	800b574 <_dtoa_r+0x994>
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	e7e1      	b.n	800b5c4 <_dtoa_r+0x9e4>
 800b600:	9b08      	ldr	r3, [sp, #32]
 800b602:	2b00      	cmp	r3, #0
 800b604:	db04      	blt.n	800b610 <_dtoa_r+0xa30>
 800b606:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b608:	430b      	orrs	r3, r1
 800b60a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b60c:	430b      	orrs	r3, r1
 800b60e:	d120      	bne.n	800b652 <_dtoa_r+0xa72>
 800b610:	2a00      	cmp	r2, #0
 800b612:	dded      	ble.n	800b5f0 <_dtoa_r+0xa10>
 800b614:	4649      	mov	r1, r9
 800b616:	2201      	movs	r2, #1
 800b618:	4658      	mov	r0, fp
 800b61a:	f000 fb0f 	bl	800bc3c <__lshift>
 800b61e:	4621      	mov	r1, r4
 800b620:	4681      	mov	r9, r0
 800b622:	f000 fb77 	bl	800bd14 <__mcmp>
 800b626:	2800      	cmp	r0, #0
 800b628:	dc03      	bgt.n	800b632 <_dtoa_r+0xa52>
 800b62a:	d1e1      	bne.n	800b5f0 <_dtoa_r+0xa10>
 800b62c:	f018 0f01 	tst.w	r8, #1
 800b630:	d0de      	beq.n	800b5f0 <_dtoa_r+0xa10>
 800b632:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b636:	d1d8      	bne.n	800b5ea <_dtoa_r+0xa0a>
 800b638:	9a00      	ldr	r2, [sp, #0]
 800b63a:	2339      	movs	r3, #57	@ 0x39
 800b63c:	7013      	strb	r3, [r2, #0]
 800b63e:	4633      	mov	r3, r6
 800b640:	461e      	mov	r6, r3
 800b642:	3b01      	subs	r3, #1
 800b644:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b648:	2a39      	cmp	r2, #57	@ 0x39
 800b64a:	d052      	beq.n	800b6f2 <_dtoa_r+0xb12>
 800b64c:	3201      	adds	r2, #1
 800b64e:	701a      	strb	r2, [r3, #0]
 800b650:	e612      	b.n	800b278 <_dtoa_r+0x698>
 800b652:	2a00      	cmp	r2, #0
 800b654:	dd07      	ble.n	800b666 <_dtoa_r+0xa86>
 800b656:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b65a:	d0ed      	beq.n	800b638 <_dtoa_r+0xa58>
 800b65c:	9a00      	ldr	r2, [sp, #0]
 800b65e:	f108 0301 	add.w	r3, r8, #1
 800b662:	7013      	strb	r3, [r2, #0]
 800b664:	e608      	b.n	800b278 <_dtoa_r+0x698>
 800b666:	9b07      	ldr	r3, [sp, #28]
 800b668:	9a07      	ldr	r2, [sp, #28]
 800b66a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b66e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b670:	4293      	cmp	r3, r2
 800b672:	d028      	beq.n	800b6c6 <_dtoa_r+0xae6>
 800b674:	4649      	mov	r1, r9
 800b676:	2300      	movs	r3, #0
 800b678:	220a      	movs	r2, #10
 800b67a:	4658      	mov	r0, fp
 800b67c:	f000 f932 	bl	800b8e4 <__multadd>
 800b680:	42af      	cmp	r7, r5
 800b682:	4681      	mov	r9, r0
 800b684:	f04f 0300 	mov.w	r3, #0
 800b688:	f04f 020a 	mov.w	r2, #10
 800b68c:	4639      	mov	r1, r7
 800b68e:	4658      	mov	r0, fp
 800b690:	d107      	bne.n	800b6a2 <_dtoa_r+0xac2>
 800b692:	f000 f927 	bl	800b8e4 <__multadd>
 800b696:	4607      	mov	r7, r0
 800b698:	4605      	mov	r5, r0
 800b69a:	9b07      	ldr	r3, [sp, #28]
 800b69c:	3301      	adds	r3, #1
 800b69e:	9307      	str	r3, [sp, #28]
 800b6a0:	e774      	b.n	800b58c <_dtoa_r+0x9ac>
 800b6a2:	f000 f91f 	bl	800b8e4 <__multadd>
 800b6a6:	4629      	mov	r1, r5
 800b6a8:	4607      	mov	r7, r0
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	220a      	movs	r2, #10
 800b6ae:	4658      	mov	r0, fp
 800b6b0:	f000 f918 	bl	800b8e4 <__multadd>
 800b6b4:	4605      	mov	r5, r0
 800b6b6:	e7f0      	b.n	800b69a <_dtoa_r+0xaba>
 800b6b8:	9b00      	ldr	r3, [sp, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	bfcc      	ite	gt
 800b6be:	461e      	movgt	r6, r3
 800b6c0:	2601      	movle	r6, #1
 800b6c2:	4456      	add	r6, sl
 800b6c4:	2700      	movs	r7, #0
 800b6c6:	4649      	mov	r1, r9
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	4658      	mov	r0, fp
 800b6cc:	f000 fab6 	bl	800bc3c <__lshift>
 800b6d0:	4621      	mov	r1, r4
 800b6d2:	4681      	mov	r9, r0
 800b6d4:	f000 fb1e 	bl	800bd14 <__mcmp>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	dcb0      	bgt.n	800b63e <_dtoa_r+0xa5e>
 800b6dc:	d102      	bne.n	800b6e4 <_dtoa_r+0xb04>
 800b6de:	f018 0f01 	tst.w	r8, #1
 800b6e2:	d1ac      	bne.n	800b63e <_dtoa_r+0xa5e>
 800b6e4:	4633      	mov	r3, r6
 800b6e6:	461e      	mov	r6, r3
 800b6e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6ec:	2a30      	cmp	r2, #48	@ 0x30
 800b6ee:	d0fa      	beq.n	800b6e6 <_dtoa_r+0xb06>
 800b6f0:	e5c2      	b.n	800b278 <_dtoa_r+0x698>
 800b6f2:	459a      	cmp	sl, r3
 800b6f4:	d1a4      	bne.n	800b640 <_dtoa_r+0xa60>
 800b6f6:	9b04      	ldr	r3, [sp, #16]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	9304      	str	r3, [sp, #16]
 800b6fc:	2331      	movs	r3, #49	@ 0x31
 800b6fe:	f88a 3000 	strb.w	r3, [sl]
 800b702:	e5b9      	b.n	800b278 <_dtoa_r+0x698>
 800b704:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b706:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b764 <_dtoa_r+0xb84>
 800b70a:	b11b      	cbz	r3, 800b714 <_dtoa_r+0xb34>
 800b70c:	f10a 0308 	add.w	r3, sl, #8
 800b710:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b712:	6013      	str	r3, [r2, #0]
 800b714:	4650      	mov	r0, sl
 800b716:	b019      	add	sp, #100	@ 0x64
 800b718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b71e:	2b01      	cmp	r3, #1
 800b720:	f77f ae37 	ble.w	800b392 <_dtoa_r+0x7b2>
 800b724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b726:	930a      	str	r3, [sp, #40]	@ 0x28
 800b728:	2001      	movs	r0, #1
 800b72a:	e655      	b.n	800b3d8 <_dtoa_r+0x7f8>
 800b72c:	9b00      	ldr	r3, [sp, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f77f aed6 	ble.w	800b4e0 <_dtoa_r+0x900>
 800b734:	4656      	mov	r6, sl
 800b736:	4621      	mov	r1, r4
 800b738:	4648      	mov	r0, r9
 800b73a:	f7ff f9c6 	bl	800aaca <quorem>
 800b73e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b742:	f806 8b01 	strb.w	r8, [r6], #1
 800b746:	9b00      	ldr	r3, [sp, #0]
 800b748:	eba6 020a 	sub.w	r2, r6, sl
 800b74c:	4293      	cmp	r3, r2
 800b74e:	ddb3      	ble.n	800b6b8 <_dtoa_r+0xad8>
 800b750:	4649      	mov	r1, r9
 800b752:	2300      	movs	r3, #0
 800b754:	220a      	movs	r2, #10
 800b756:	4658      	mov	r0, fp
 800b758:	f000 f8c4 	bl	800b8e4 <__multadd>
 800b75c:	4681      	mov	r9, r0
 800b75e:	e7ea      	b.n	800b736 <_dtoa_r+0xb56>
 800b760:	0800cecb 	.word	0x0800cecb
 800b764:	0800ce4f 	.word	0x0800ce4f

0800b768 <_free_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	4605      	mov	r5, r0
 800b76c:	2900      	cmp	r1, #0
 800b76e:	d041      	beq.n	800b7f4 <_free_r+0x8c>
 800b770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b774:	1f0c      	subs	r4, r1, #4
 800b776:	2b00      	cmp	r3, #0
 800b778:	bfb8      	it	lt
 800b77a:	18e4      	addlt	r4, r4, r3
 800b77c:	f7fe f9ac 	bl	8009ad8 <__malloc_lock>
 800b780:	4a1d      	ldr	r2, [pc, #116]	@ (800b7f8 <_free_r+0x90>)
 800b782:	6813      	ldr	r3, [r2, #0]
 800b784:	b933      	cbnz	r3, 800b794 <_free_r+0x2c>
 800b786:	6063      	str	r3, [r4, #4]
 800b788:	6014      	str	r4, [r2, #0]
 800b78a:	4628      	mov	r0, r5
 800b78c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b790:	f7fe b9a8 	b.w	8009ae4 <__malloc_unlock>
 800b794:	42a3      	cmp	r3, r4
 800b796:	d908      	bls.n	800b7aa <_free_r+0x42>
 800b798:	6820      	ldr	r0, [r4, #0]
 800b79a:	1821      	adds	r1, r4, r0
 800b79c:	428b      	cmp	r3, r1
 800b79e:	bf01      	itttt	eq
 800b7a0:	6819      	ldreq	r1, [r3, #0]
 800b7a2:	685b      	ldreq	r3, [r3, #4]
 800b7a4:	1809      	addeq	r1, r1, r0
 800b7a6:	6021      	streq	r1, [r4, #0]
 800b7a8:	e7ed      	b.n	800b786 <_free_r+0x1e>
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	b10b      	cbz	r3, 800b7b4 <_free_r+0x4c>
 800b7b0:	42a3      	cmp	r3, r4
 800b7b2:	d9fa      	bls.n	800b7aa <_free_r+0x42>
 800b7b4:	6811      	ldr	r1, [r2, #0]
 800b7b6:	1850      	adds	r0, r2, r1
 800b7b8:	42a0      	cmp	r0, r4
 800b7ba:	d10b      	bne.n	800b7d4 <_free_r+0x6c>
 800b7bc:	6820      	ldr	r0, [r4, #0]
 800b7be:	4401      	add	r1, r0
 800b7c0:	1850      	adds	r0, r2, r1
 800b7c2:	4283      	cmp	r3, r0
 800b7c4:	6011      	str	r1, [r2, #0]
 800b7c6:	d1e0      	bne.n	800b78a <_free_r+0x22>
 800b7c8:	6818      	ldr	r0, [r3, #0]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	6053      	str	r3, [r2, #4]
 800b7ce:	4408      	add	r0, r1
 800b7d0:	6010      	str	r0, [r2, #0]
 800b7d2:	e7da      	b.n	800b78a <_free_r+0x22>
 800b7d4:	d902      	bls.n	800b7dc <_free_r+0x74>
 800b7d6:	230c      	movs	r3, #12
 800b7d8:	602b      	str	r3, [r5, #0]
 800b7da:	e7d6      	b.n	800b78a <_free_r+0x22>
 800b7dc:	6820      	ldr	r0, [r4, #0]
 800b7de:	1821      	adds	r1, r4, r0
 800b7e0:	428b      	cmp	r3, r1
 800b7e2:	bf04      	itt	eq
 800b7e4:	6819      	ldreq	r1, [r3, #0]
 800b7e6:	685b      	ldreq	r3, [r3, #4]
 800b7e8:	6063      	str	r3, [r4, #4]
 800b7ea:	bf04      	itt	eq
 800b7ec:	1809      	addeq	r1, r1, r0
 800b7ee:	6021      	streq	r1, [r4, #0]
 800b7f0:	6054      	str	r4, [r2, #4]
 800b7f2:	e7ca      	b.n	800b78a <_free_r+0x22>
 800b7f4:	bd38      	pop	{r3, r4, r5, pc}
 800b7f6:	bf00      	nop
 800b7f8:	2000239c 	.word	0x2000239c

0800b7fc <__ascii_mbtowc>:
 800b7fc:	b082      	sub	sp, #8
 800b7fe:	b901      	cbnz	r1, 800b802 <__ascii_mbtowc+0x6>
 800b800:	a901      	add	r1, sp, #4
 800b802:	b142      	cbz	r2, 800b816 <__ascii_mbtowc+0x1a>
 800b804:	b14b      	cbz	r3, 800b81a <__ascii_mbtowc+0x1e>
 800b806:	7813      	ldrb	r3, [r2, #0]
 800b808:	600b      	str	r3, [r1, #0]
 800b80a:	7812      	ldrb	r2, [r2, #0]
 800b80c:	1e10      	subs	r0, r2, #0
 800b80e:	bf18      	it	ne
 800b810:	2001      	movne	r0, #1
 800b812:	b002      	add	sp, #8
 800b814:	4770      	bx	lr
 800b816:	4610      	mov	r0, r2
 800b818:	e7fb      	b.n	800b812 <__ascii_mbtowc+0x16>
 800b81a:	f06f 0001 	mvn.w	r0, #1
 800b81e:	e7f8      	b.n	800b812 <__ascii_mbtowc+0x16>

0800b820 <_Balloc>:
 800b820:	b570      	push	{r4, r5, r6, lr}
 800b822:	69c6      	ldr	r6, [r0, #28]
 800b824:	4604      	mov	r4, r0
 800b826:	460d      	mov	r5, r1
 800b828:	b976      	cbnz	r6, 800b848 <_Balloc+0x28>
 800b82a:	2010      	movs	r0, #16
 800b82c:	f7fe f8a2 	bl	8009974 <malloc>
 800b830:	4602      	mov	r2, r0
 800b832:	61e0      	str	r0, [r4, #28]
 800b834:	b920      	cbnz	r0, 800b840 <_Balloc+0x20>
 800b836:	4b18      	ldr	r3, [pc, #96]	@ (800b898 <_Balloc+0x78>)
 800b838:	4818      	ldr	r0, [pc, #96]	@ (800b89c <_Balloc+0x7c>)
 800b83a:	216b      	movs	r1, #107	@ 0x6b
 800b83c:	f000 fe28 	bl	800c490 <__assert_func>
 800b840:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b844:	6006      	str	r6, [r0, #0]
 800b846:	60c6      	str	r6, [r0, #12]
 800b848:	69e6      	ldr	r6, [r4, #28]
 800b84a:	68f3      	ldr	r3, [r6, #12]
 800b84c:	b183      	cbz	r3, 800b870 <_Balloc+0x50>
 800b84e:	69e3      	ldr	r3, [r4, #28]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b856:	b9b8      	cbnz	r0, 800b888 <_Balloc+0x68>
 800b858:	2101      	movs	r1, #1
 800b85a:	fa01 f605 	lsl.w	r6, r1, r5
 800b85e:	1d72      	adds	r2, r6, #5
 800b860:	0092      	lsls	r2, r2, #2
 800b862:	4620      	mov	r0, r4
 800b864:	f000 fe32 	bl	800c4cc <_calloc_r>
 800b868:	b160      	cbz	r0, 800b884 <_Balloc+0x64>
 800b86a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b86e:	e00e      	b.n	800b88e <_Balloc+0x6e>
 800b870:	2221      	movs	r2, #33	@ 0x21
 800b872:	2104      	movs	r1, #4
 800b874:	4620      	mov	r0, r4
 800b876:	f000 fe29 	bl	800c4cc <_calloc_r>
 800b87a:	69e3      	ldr	r3, [r4, #28]
 800b87c:	60f0      	str	r0, [r6, #12]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1e4      	bne.n	800b84e <_Balloc+0x2e>
 800b884:	2000      	movs	r0, #0
 800b886:	bd70      	pop	{r4, r5, r6, pc}
 800b888:	6802      	ldr	r2, [r0, #0]
 800b88a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b88e:	2300      	movs	r3, #0
 800b890:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b894:	e7f7      	b.n	800b886 <_Balloc+0x66>
 800b896:	bf00      	nop
 800b898:	0800ce5c 	.word	0x0800ce5c
 800b89c:	0800cedc 	.word	0x0800cedc

0800b8a0 <_Bfree>:
 800b8a0:	b570      	push	{r4, r5, r6, lr}
 800b8a2:	69c6      	ldr	r6, [r0, #28]
 800b8a4:	4605      	mov	r5, r0
 800b8a6:	460c      	mov	r4, r1
 800b8a8:	b976      	cbnz	r6, 800b8c8 <_Bfree+0x28>
 800b8aa:	2010      	movs	r0, #16
 800b8ac:	f7fe f862 	bl	8009974 <malloc>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	61e8      	str	r0, [r5, #28]
 800b8b4:	b920      	cbnz	r0, 800b8c0 <_Bfree+0x20>
 800b8b6:	4b09      	ldr	r3, [pc, #36]	@ (800b8dc <_Bfree+0x3c>)
 800b8b8:	4809      	ldr	r0, [pc, #36]	@ (800b8e0 <_Bfree+0x40>)
 800b8ba:	218f      	movs	r1, #143	@ 0x8f
 800b8bc:	f000 fde8 	bl	800c490 <__assert_func>
 800b8c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8c4:	6006      	str	r6, [r0, #0]
 800b8c6:	60c6      	str	r6, [r0, #12]
 800b8c8:	b13c      	cbz	r4, 800b8da <_Bfree+0x3a>
 800b8ca:	69eb      	ldr	r3, [r5, #28]
 800b8cc:	6862      	ldr	r2, [r4, #4]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8d4:	6021      	str	r1, [r4, #0]
 800b8d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b8da:	bd70      	pop	{r4, r5, r6, pc}
 800b8dc:	0800ce5c 	.word	0x0800ce5c
 800b8e0:	0800cedc 	.word	0x0800cedc

0800b8e4 <__multadd>:
 800b8e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8e8:	690d      	ldr	r5, [r1, #16]
 800b8ea:	4607      	mov	r7, r0
 800b8ec:	460c      	mov	r4, r1
 800b8ee:	461e      	mov	r6, r3
 800b8f0:	f101 0c14 	add.w	ip, r1, #20
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	f8dc 3000 	ldr.w	r3, [ip]
 800b8fa:	b299      	uxth	r1, r3
 800b8fc:	fb02 6101 	mla	r1, r2, r1, r6
 800b900:	0c1e      	lsrs	r6, r3, #16
 800b902:	0c0b      	lsrs	r3, r1, #16
 800b904:	fb02 3306 	mla	r3, r2, r6, r3
 800b908:	b289      	uxth	r1, r1
 800b90a:	3001      	adds	r0, #1
 800b90c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b910:	4285      	cmp	r5, r0
 800b912:	f84c 1b04 	str.w	r1, [ip], #4
 800b916:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b91a:	dcec      	bgt.n	800b8f6 <__multadd+0x12>
 800b91c:	b30e      	cbz	r6, 800b962 <__multadd+0x7e>
 800b91e:	68a3      	ldr	r3, [r4, #8]
 800b920:	42ab      	cmp	r3, r5
 800b922:	dc19      	bgt.n	800b958 <__multadd+0x74>
 800b924:	6861      	ldr	r1, [r4, #4]
 800b926:	4638      	mov	r0, r7
 800b928:	3101      	adds	r1, #1
 800b92a:	f7ff ff79 	bl	800b820 <_Balloc>
 800b92e:	4680      	mov	r8, r0
 800b930:	b928      	cbnz	r0, 800b93e <__multadd+0x5a>
 800b932:	4602      	mov	r2, r0
 800b934:	4b0c      	ldr	r3, [pc, #48]	@ (800b968 <__multadd+0x84>)
 800b936:	480d      	ldr	r0, [pc, #52]	@ (800b96c <__multadd+0x88>)
 800b938:	21ba      	movs	r1, #186	@ 0xba
 800b93a:	f000 fda9 	bl	800c490 <__assert_func>
 800b93e:	6922      	ldr	r2, [r4, #16]
 800b940:	3202      	adds	r2, #2
 800b942:	f104 010c 	add.w	r1, r4, #12
 800b946:	0092      	lsls	r2, r2, #2
 800b948:	300c      	adds	r0, #12
 800b94a:	f7ff f8b0 	bl	800aaae <memcpy>
 800b94e:	4621      	mov	r1, r4
 800b950:	4638      	mov	r0, r7
 800b952:	f7ff ffa5 	bl	800b8a0 <_Bfree>
 800b956:	4644      	mov	r4, r8
 800b958:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b95c:	3501      	adds	r5, #1
 800b95e:	615e      	str	r6, [r3, #20]
 800b960:	6125      	str	r5, [r4, #16]
 800b962:	4620      	mov	r0, r4
 800b964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b968:	0800cecb 	.word	0x0800cecb
 800b96c:	0800cedc 	.word	0x0800cedc

0800b970 <__hi0bits>:
 800b970:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b974:	4603      	mov	r3, r0
 800b976:	bf36      	itet	cc
 800b978:	0403      	lslcc	r3, r0, #16
 800b97a:	2000      	movcs	r0, #0
 800b97c:	2010      	movcc	r0, #16
 800b97e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b982:	bf3c      	itt	cc
 800b984:	021b      	lslcc	r3, r3, #8
 800b986:	3008      	addcc	r0, #8
 800b988:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b98c:	bf3c      	itt	cc
 800b98e:	011b      	lslcc	r3, r3, #4
 800b990:	3004      	addcc	r0, #4
 800b992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b996:	bf3c      	itt	cc
 800b998:	009b      	lslcc	r3, r3, #2
 800b99a:	3002      	addcc	r0, #2
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	db05      	blt.n	800b9ac <__hi0bits+0x3c>
 800b9a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b9a4:	f100 0001 	add.w	r0, r0, #1
 800b9a8:	bf08      	it	eq
 800b9aa:	2020      	moveq	r0, #32
 800b9ac:	4770      	bx	lr

0800b9ae <__lo0bits>:
 800b9ae:	6803      	ldr	r3, [r0, #0]
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	f013 0007 	ands.w	r0, r3, #7
 800b9b6:	d00b      	beq.n	800b9d0 <__lo0bits+0x22>
 800b9b8:	07d9      	lsls	r1, r3, #31
 800b9ba:	d421      	bmi.n	800ba00 <__lo0bits+0x52>
 800b9bc:	0798      	lsls	r0, r3, #30
 800b9be:	bf49      	itett	mi
 800b9c0:	085b      	lsrmi	r3, r3, #1
 800b9c2:	089b      	lsrpl	r3, r3, #2
 800b9c4:	2001      	movmi	r0, #1
 800b9c6:	6013      	strmi	r3, [r2, #0]
 800b9c8:	bf5c      	itt	pl
 800b9ca:	6013      	strpl	r3, [r2, #0]
 800b9cc:	2002      	movpl	r0, #2
 800b9ce:	4770      	bx	lr
 800b9d0:	b299      	uxth	r1, r3
 800b9d2:	b909      	cbnz	r1, 800b9d8 <__lo0bits+0x2a>
 800b9d4:	0c1b      	lsrs	r3, r3, #16
 800b9d6:	2010      	movs	r0, #16
 800b9d8:	b2d9      	uxtb	r1, r3
 800b9da:	b909      	cbnz	r1, 800b9e0 <__lo0bits+0x32>
 800b9dc:	3008      	adds	r0, #8
 800b9de:	0a1b      	lsrs	r3, r3, #8
 800b9e0:	0719      	lsls	r1, r3, #28
 800b9e2:	bf04      	itt	eq
 800b9e4:	091b      	lsreq	r3, r3, #4
 800b9e6:	3004      	addeq	r0, #4
 800b9e8:	0799      	lsls	r1, r3, #30
 800b9ea:	bf04      	itt	eq
 800b9ec:	089b      	lsreq	r3, r3, #2
 800b9ee:	3002      	addeq	r0, #2
 800b9f0:	07d9      	lsls	r1, r3, #31
 800b9f2:	d403      	bmi.n	800b9fc <__lo0bits+0x4e>
 800b9f4:	085b      	lsrs	r3, r3, #1
 800b9f6:	f100 0001 	add.w	r0, r0, #1
 800b9fa:	d003      	beq.n	800ba04 <__lo0bits+0x56>
 800b9fc:	6013      	str	r3, [r2, #0]
 800b9fe:	4770      	bx	lr
 800ba00:	2000      	movs	r0, #0
 800ba02:	4770      	bx	lr
 800ba04:	2020      	movs	r0, #32
 800ba06:	4770      	bx	lr

0800ba08 <__i2b>:
 800ba08:	b510      	push	{r4, lr}
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	2101      	movs	r1, #1
 800ba0e:	f7ff ff07 	bl	800b820 <_Balloc>
 800ba12:	4602      	mov	r2, r0
 800ba14:	b928      	cbnz	r0, 800ba22 <__i2b+0x1a>
 800ba16:	4b05      	ldr	r3, [pc, #20]	@ (800ba2c <__i2b+0x24>)
 800ba18:	4805      	ldr	r0, [pc, #20]	@ (800ba30 <__i2b+0x28>)
 800ba1a:	f240 1145 	movw	r1, #325	@ 0x145
 800ba1e:	f000 fd37 	bl	800c490 <__assert_func>
 800ba22:	2301      	movs	r3, #1
 800ba24:	6144      	str	r4, [r0, #20]
 800ba26:	6103      	str	r3, [r0, #16]
 800ba28:	bd10      	pop	{r4, pc}
 800ba2a:	bf00      	nop
 800ba2c:	0800cecb 	.word	0x0800cecb
 800ba30:	0800cedc 	.word	0x0800cedc

0800ba34 <__multiply>:
 800ba34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba38:	4614      	mov	r4, r2
 800ba3a:	690a      	ldr	r2, [r1, #16]
 800ba3c:	6923      	ldr	r3, [r4, #16]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	bfa8      	it	ge
 800ba42:	4623      	movge	r3, r4
 800ba44:	460f      	mov	r7, r1
 800ba46:	bfa4      	itt	ge
 800ba48:	460c      	movge	r4, r1
 800ba4a:	461f      	movge	r7, r3
 800ba4c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ba50:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ba54:	68a3      	ldr	r3, [r4, #8]
 800ba56:	6861      	ldr	r1, [r4, #4]
 800ba58:	eb0a 0609 	add.w	r6, sl, r9
 800ba5c:	42b3      	cmp	r3, r6
 800ba5e:	b085      	sub	sp, #20
 800ba60:	bfb8      	it	lt
 800ba62:	3101      	addlt	r1, #1
 800ba64:	f7ff fedc 	bl	800b820 <_Balloc>
 800ba68:	b930      	cbnz	r0, 800ba78 <__multiply+0x44>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	4b44      	ldr	r3, [pc, #272]	@ (800bb80 <__multiply+0x14c>)
 800ba6e:	4845      	ldr	r0, [pc, #276]	@ (800bb84 <__multiply+0x150>)
 800ba70:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba74:	f000 fd0c 	bl	800c490 <__assert_func>
 800ba78:	f100 0514 	add.w	r5, r0, #20
 800ba7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba80:	462b      	mov	r3, r5
 800ba82:	2200      	movs	r2, #0
 800ba84:	4543      	cmp	r3, r8
 800ba86:	d321      	bcc.n	800bacc <__multiply+0x98>
 800ba88:	f107 0114 	add.w	r1, r7, #20
 800ba8c:	f104 0214 	add.w	r2, r4, #20
 800ba90:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ba94:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ba98:	9302      	str	r3, [sp, #8]
 800ba9a:	1b13      	subs	r3, r2, r4
 800ba9c:	3b15      	subs	r3, #21
 800ba9e:	f023 0303 	bic.w	r3, r3, #3
 800baa2:	3304      	adds	r3, #4
 800baa4:	f104 0715 	add.w	r7, r4, #21
 800baa8:	42ba      	cmp	r2, r7
 800baaa:	bf38      	it	cc
 800baac:	2304      	movcc	r3, #4
 800baae:	9301      	str	r3, [sp, #4]
 800bab0:	9b02      	ldr	r3, [sp, #8]
 800bab2:	9103      	str	r1, [sp, #12]
 800bab4:	428b      	cmp	r3, r1
 800bab6:	d80c      	bhi.n	800bad2 <__multiply+0x9e>
 800bab8:	2e00      	cmp	r6, #0
 800baba:	dd03      	ble.n	800bac4 <__multiply+0x90>
 800babc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d05b      	beq.n	800bb7c <__multiply+0x148>
 800bac4:	6106      	str	r6, [r0, #16]
 800bac6:	b005      	add	sp, #20
 800bac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bacc:	f843 2b04 	str.w	r2, [r3], #4
 800bad0:	e7d8      	b.n	800ba84 <__multiply+0x50>
 800bad2:	f8b1 a000 	ldrh.w	sl, [r1]
 800bad6:	f1ba 0f00 	cmp.w	sl, #0
 800bada:	d024      	beq.n	800bb26 <__multiply+0xf2>
 800badc:	f104 0e14 	add.w	lr, r4, #20
 800bae0:	46a9      	mov	r9, r5
 800bae2:	f04f 0c00 	mov.w	ip, #0
 800bae6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800baea:	f8d9 3000 	ldr.w	r3, [r9]
 800baee:	fa1f fb87 	uxth.w	fp, r7
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	fb0a 330b 	mla	r3, sl, fp, r3
 800baf8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800bafc:	f8d9 7000 	ldr.w	r7, [r9]
 800bb00:	4463      	add	r3, ip
 800bb02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb06:	fb0a c70b 	mla	r7, sl, fp, ip
 800bb0a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb14:	4572      	cmp	r2, lr
 800bb16:	f849 3b04 	str.w	r3, [r9], #4
 800bb1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bb1e:	d8e2      	bhi.n	800bae6 <__multiply+0xb2>
 800bb20:	9b01      	ldr	r3, [sp, #4]
 800bb22:	f845 c003 	str.w	ip, [r5, r3]
 800bb26:	9b03      	ldr	r3, [sp, #12]
 800bb28:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb2c:	3104      	adds	r1, #4
 800bb2e:	f1b9 0f00 	cmp.w	r9, #0
 800bb32:	d021      	beq.n	800bb78 <__multiply+0x144>
 800bb34:	682b      	ldr	r3, [r5, #0]
 800bb36:	f104 0c14 	add.w	ip, r4, #20
 800bb3a:	46ae      	mov	lr, r5
 800bb3c:	f04f 0a00 	mov.w	sl, #0
 800bb40:	f8bc b000 	ldrh.w	fp, [ip]
 800bb44:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bb48:	fb09 770b 	mla	r7, r9, fp, r7
 800bb4c:	4457      	add	r7, sl
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bb54:	f84e 3b04 	str.w	r3, [lr], #4
 800bb58:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb60:	f8be 3000 	ldrh.w	r3, [lr]
 800bb64:	fb09 330a 	mla	r3, r9, sl, r3
 800bb68:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bb6c:	4562      	cmp	r2, ip
 800bb6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb72:	d8e5      	bhi.n	800bb40 <__multiply+0x10c>
 800bb74:	9f01      	ldr	r7, [sp, #4]
 800bb76:	51eb      	str	r3, [r5, r7]
 800bb78:	3504      	adds	r5, #4
 800bb7a:	e799      	b.n	800bab0 <__multiply+0x7c>
 800bb7c:	3e01      	subs	r6, #1
 800bb7e:	e79b      	b.n	800bab8 <__multiply+0x84>
 800bb80:	0800cecb 	.word	0x0800cecb
 800bb84:	0800cedc 	.word	0x0800cedc

0800bb88 <__pow5mult>:
 800bb88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb8c:	4615      	mov	r5, r2
 800bb8e:	f012 0203 	ands.w	r2, r2, #3
 800bb92:	4607      	mov	r7, r0
 800bb94:	460e      	mov	r6, r1
 800bb96:	d007      	beq.n	800bba8 <__pow5mult+0x20>
 800bb98:	4c25      	ldr	r4, [pc, #148]	@ (800bc30 <__pow5mult+0xa8>)
 800bb9a:	3a01      	subs	r2, #1
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bba2:	f7ff fe9f 	bl	800b8e4 <__multadd>
 800bba6:	4606      	mov	r6, r0
 800bba8:	10ad      	asrs	r5, r5, #2
 800bbaa:	d03d      	beq.n	800bc28 <__pow5mult+0xa0>
 800bbac:	69fc      	ldr	r4, [r7, #28]
 800bbae:	b97c      	cbnz	r4, 800bbd0 <__pow5mult+0x48>
 800bbb0:	2010      	movs	r0, #16
 800bbb2:	f7fd fedf 	bl	8009974 <malloc>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	61f8      	str	r0, [r7, #28]
 800bbba:	b928      	cbnz	r0, 800bbc8 <__pow5mult+0x40>
 800bbbc:	4b1d      	ldr	r3, [pc, #116]	@ (800bc34 <__pow5mult+0xac>)
 800bbbe:	481e      	ldr	r0, [pc, #120]	@ (800bc38 <__pow5mult+0xb0>)
 800bbc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bbc4:	f000 fc64 	bl	800c490 <__assert_func>
 800bbc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbcc:	6004      	str	r4, [r0, #0]
 800bbce:	60c4      	str	r4, [r0, #12]
 800bbd0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bbd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bbd8:	b94c      	cbnz	r4, 800bbee <__pow5mult+0x66>
 800bbda:	f240 2171 	movw	r1, #625	@ 0x271
 800bbde:	4638      	mov	r0, r7
 800bbe0:	f7ff ff12 	bl	800ba08 <__i2b>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f8c8 0008 	str.w	r0, [r8, #8]
 800bbea:	4604      	mov	r4, r0
 800bbec:	6003      	str	r3, [r0, #0]
 800bbee:	f04f 0900 	mov.w	r9, #0
 800bbf2:	07eb      	lsls	r3, r5, #31
 800bbf4:	d50a      	bpl.n	800bc0c <__pow5mult+0x84>
 800bbf6:	4631      	mov	r1, r6
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	4638      	mov	r0, r7
 800bbfc:	f7ff ff1a 	bl	800ba34 <__multiply>
 800bc00:	4631      	mov	r1, r6
 800bc02:	4680      	mov	r8, r0
 800bc04:	4638      	mov	r0, r7
 800bc06:	f7ff fe4b 	bl	800b8a0 <_Bfree>
 800bc0a:	4646      	mov	r6, r8
 800bc0c:	106d      	asrs	r5, r5, #1
 800bc0e:	d00b      	beq.n	800bc28 <__pow5mult+0xa0>
 800bc10:	6820      	ldr	r0, [r4, #0]
 800bc12:	b938      	cbnz	r0, 800bc24 <__pow5mult+0x9c>
 800bc14:	4622      	mov	r2, r4
 800bc16:	4621      	mov	r1, r4
 800bc18:	4638      	mov	r0, r7
 800bc1a:	f7ff ff0b 	bl	800ba34 <__multiply>
 800bc1e:	6020      	str	r0, [r4, #0]
 800bc20:	f8c0 9000 	str.w	r9, [r0]
 800bc24:	4604      	mov	r4, r0
 800bc26:	e7e4      	b.n	800bbf2 <__pow5mult+0x6a>
 800bc28:	4630      	mov	r0, r6
 800bc2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc2e:	bf00      	nop
 800bc30:	0800cf38 	.word	0x0800cf38
 800bc34:	0800ce5c 	.word	0x0800ce5c
 800bc38:	0800cedc 	.word	0x0800cedc

0800bc3c <__lshift>:
 800bc3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc40:	460c      	mov	r4, r1
 800bc42:	6849      	ldr	r1, [r1, #4]
 800bc44:	6923      	ldr	r3, [r4, #16]
 800bc46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc4a:	68a3      	ldr	r3, [r4, #8]
 800bc4c:	4607      	mov	r7, r0
 800bc4e:	4691      	mov	r9, r2
 800bc50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc54:	f108 0601 	add.w	r6, r8, #1
 800bc58:	42b3      	cmp	r3, r6
 800bc5a:	db0b      	blt.n	800bc74 <__lshift+0x38>
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	f7ff fddf 	bl	800b820 <_Balloc>
 800bc62:	4605      	mov	r5, r0
 800bc64:	b948      	cbnz	r0, 800bc7a <__lshift+0x3e>
 800bc66:	4602      	mov	r2, r0
 800bc68:	4b28      	ldr	r3, [pc, #160]	@ (800bd0c <__lshift+0xd0>)
 800bc6a:	4829      	ldr	r0, [pc, #164]	@ (800bd10 <__lshift+0xd4>)
 800bc6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc70:	f000 fc0e 	bl	800c490 <__assert_func>
 800bc74:	3101      	adds	r1, #1
 800bc76:	005b      	lsls	r3, r3, #1
 800bc78:	e7ee      	b.n	800bc58 <__lshift+0x1c>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	f100 0114 	add.w	r1, r0, #20
 800bc80:	f100 0210 	add.w	r2, r0, #16
 800bc84:	4618      	mov	r0, r3
 800bc86:	4553      	cmp	r3, sl
 800bc88:	db33      	blt.n	800bcf2 <__lshift+0xb6>
 800bc8a:	6920      	ldr	r0, [r4, #16]
 800bc8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc90:	f104 0314 	add.w	r3, r4, #20
 800bc94:	f019 091f 	ands.w	r9, r9, #31
 800bc98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bca0:	d02b      	beq.n	800bcfa <__lshift+0xbe>
 800bca2:	f1c9 0e20 	rsb	lr, r9, #32
 800bca6:	468a      	mov	sl, r1
 800bca8:	2200      	movs	r2, #0
 800bcaa:	6818      	ldr	r0, [r3, #0]
 800bcac:	fa00 f009 	lsl.w	r0, r0, r9
 800bcb0:	4310      	orrs	r0, r2
 800bcb2:	f84a 0b04 	str.w	r0, [sl], #4
 800bcb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcba:	459c      	cmp	ip, r3
 800bcbc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bcc0:	d8f3      	bhi.n	800bcaa <__lshift+0x6e>
 800bcc2:	ebac 0304 	sub.w	r3, ip, r4
 800bcc6:	3b15      	subs	r3, #21
 800bcc8:	f023 0303 	bic.w	r3, r3, #3
 800bccc:	3304      	adds	r3, #4
 800bcce:	f104 0015 	add.w	r0, r4, #21
 800bcd2:	4584      	cmp	ip, r0
 800bcd4:	bf38      	it	cc
 800bcd6:	2304      	movcc	r3, #4
 800bcd8:	50ca      	str	r2, [r1, r3]
 800bcda:	b10a      	cbz	r2, 800bce0 <__lshift+0xa4>
 800bcdc:	f108 0602 	add.w	r6, r8, #2
 800bce0:	3e01      	subs	r6, #1
 800bce2:	4638      	mov	r0, r7
 800bce4:	612e      	str	r6, [r5, #16]
 800bce6:	4621      	mov	r1, r4
 800bce8:	f7ff fdda 	bl	800b8a0 <_Bfree>
 800bcec:	4628      	mov	r0, r5
 800bcee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcf2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	e7c5      	b.n	800bc86 <__lshift+0x4a>
 800bcfa:	3904      	subs	r1, #4
 800bcfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd00:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd04:	459c      	cmp	ip, r3
 800bd06:	d8f9      	bhi.n	800bcfc <__lshift+0xc0>
 800bd08:	e7ea      	b.n	800bce0 <__lshift+0xa4>
 800bd0a:	bf00      	nop
 800bd0c:	0800cecb 	.word	0x0800cecb
 800bd10:	0800cedc 	.word	0x0800cedc

0800bd14 <__mcmp>:
 800bd14:	690a      	ldr	r2, [r1, #16]
 800bd16:	4603      	mov	r3, r0
 800bd18:	6900      	ldr	r0, [r0, #16]
 800bd1a:	1a80      	subs	r0, r0, r2
 800bd1c:	b530      	push	{r4, r5, lr}
 800bd1e:	d10e      	bne.n	800bd3e <__mcmp+0x2a>
 800bd20:	3314      	adds	r3, #20
 800bd22:	3114      	adds	r1, #20
 800bd24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd34:	4295      	cmp	r5, r2
 800bd36:	d003      	beq.n	800bd40 <__mcmp+0x2c>
 800bd38:	d205      	bcs.n	800bd46 <__mcmp+0x32>
 800bd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3e:	bd30      	pop	{r4, r5, pc}
 800bd40:	42a3      	cmp	r3, r4
 800bd42:	d3f3      	bcc.n	800bd2c <__mcmp+0x18>
 800bd44:	e7fb      	b.n	800bd3e <__mcmp+0x2a>
 800bd46:	2001      	movs	r0, #1
 800bd48:	e7f9      	b.n	800bd3e <__mcmp+0x2a>
	...

0800bd4c <__mdiff>:
 800bd4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd50:	4689      	mov	r9, r1
 800bd52:	4606      	mov	r6, r0
 800bd54:	4611      	mov	r1, r2
 800bd56:	4648      	mov	r0, r9
 800bd58:	4614      	mov	r4, r2
 800bd5a:	f7ff ffdb 	bl	800bd14 <__mcmp>
 800bd5e:	1e05      	subs	r5, r0, #0
 800bd60:	d112      	bne.n	800bd88 <__mdiff+0x3c>
 800bd62:	4629      	mov	r1, r5
 800bd64:	4630      	mov	r0, r6
 800bd66:	f7ff fd5b 	bl	800b820 <_Balloc>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	b928      	cbnz	r0, 800bd7a <__mdiff+0x2e>
 800bd6e:	4b3f      	ldr	r3, [pc, #252]	@ (800be6c <__mdiff+0x120>)
 800bd70:	f240 2137 	movw	r1, #567	@ 0x237
 800bd74:	483e      	ldr	r0, [pc, #248]	@ (800be70 <__mdiff+0x124>)
 800bd76:	f000 fb8b 	bl	800c490 <__assert_func>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd80:	4610      	mov	r0, r2
 800bd82:	b003      	add	sp, #12
 800bd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd88:	bfbc      	itt	lt
 800bd8a:	464b      	movlt	r3, r9
 800bd8c:	46a1      	movlt	r9, r4
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd94:	bfba      	itte	lt
 800bd96:	461c      	movlt	r4, r3
 800bd98:	2501      	movlt	r5, #1
 800bd9a:	2500      	movge	r5, #0
 800bd9c:	f7ff fd40 	bl	800b820 <_Balloc>
 800bda0:	4602      	mov	r2, r0
 800bda2:	b918      	cbnz	r0, 800bdac <__mdiff+0x60>
 800bda4:	4b31      	ldr	r3, [pc, #196]	@ (800be6c <__mdiff+0x120>)
 800bda6:	f240 2145 	movw	r1, #581	@ 0x245
 800bdaa:	e7e3      	b.n	800bd74 <__mdiff+0x28>
 800bdac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bdb0:	6926      	ldr	r6, [r4, #16]
 800bdb2:	60c5      	str	r5, [r0, #12]
 800bdb4:	f109 0310 	add.w	r3, r9, #16
 800bdb8:	f109 0514 	add.w	r5, r9, #20
 800bdbc:	f104 0e14 	add.w	lr, r4, #20
 800bdc0:	f100 0b14 	add.w	fp, r0, #20
 800bdc4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bdc8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bdcc:	9301      	str	r3, [sp, #4]
 800bdce:	46d9      	mov	r9, fp
 800bdd0:	f04f 0c00 	mov.w	ip, #0
 800bdd4:	9b01      	ldr	r3, [sp, #4]
 800bdd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bdda:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bdde:	9301      	str	r3, [sp, #4]
 800bde0:	fa1f f38a 	uxth.w	r3, sl
 800bde4:	4619      	mov	r1, r3
 800bde6:	b283      	uxth	r3, r0
 800bde8:	1acb      	subs	r3, r1, r3
 800bdea:	0c00      	lsrs	r0, r0, #16
 800bdec:	4463      	add	r3, ip
 800bdee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bdf2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bdfc:	4576      	cmp	r6, lr
 800bdfe:	f849 3b04 	str.w	r3, [r9], #4
 800be02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be06:	d8e5      	bhi.n	800bdd4 <__mdiff+0x88>
 800be08:	1b33      	subs	r3, r6, r4
 800be0a:	3b15      	subs	r3, #21
 800be0c:	f023 0303 	bic.w	r3, r3, #3
 800be10:	3415      	adds	r4, #21
 800be12:	3304      	adds	r3, #4
 800be14:	42a6      	cmp	r6, r4
 800be16:	bf38      	it	cc
 800be18:	2304      	movcc	r3, #4
 800be1a:	441d      	add	r5, r3
 800be1c:	445b      	add	r3, fp
 800be1e:	461e      	mov	r6, r3
 800be20:	462c      	mov	r4, r5
 800be22:	4544      	cmp	r4, r8
 800be24:	d30e      	bcc.n	800be44 <__mdiff+0xf8>
 800be26:	f108 0103 	add.w	r1, r8, #3
 800be2a:	1b49      	subs	r1, r1, r5
 800be2c:	f021 0103 	bic.w	r1, r1, #3
 800be30:	3d03      	subs	r5, #3
 800be32:	45a8      	cmp	r8, r5
 800be34:	bf38      	it	cc
 800be36:	2100      	movcc	r1, #0
 800be38:	440b      	add	r3, r1
 800be3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be3e:	b191      	cbz	r1, 800be66 <__mdiff+0x11a>
 800be40:	6117      	str	r7, [r2, #16]
 800be42:	e79d      	b.n	800bd80 <__mdiff+0x34>
 800be44:	f854 1b04 	ldr.w	r1, [r4], #4
 800be48:	46e6      	mov	lr, ip
 800be4a:	0c08      	lsrs	r0, r1, #16
 800be4c:	fa1c fc81 	uxtah	ip, ip, r1
 800be50:	4471      	add	r1, lr
 800be52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be56:	b289      	uxth	r1, r1
 800be58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be5c:	f846 1b04 	str.w	r1, [r6], #4
 800be60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be64:	e7dd      	b.n	800be22 <__mdiff+0xd6>
 800be66:	3f01      	subs	r7, #1
 800be68:	e7e7      	b.n	800be3a <__mdiff+0xee>
 800be6a:	bf00      	nop
 800be6c:	0800cecb 	.word	0x0800cecb
 800be70:	0800cedc 	.word	0x0800cedc

0800be74 <__d2b>:
 800be74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be78:	460f      	mov	r7, r1
 800be7a:	2101      	movs	r1, #1
 800be7c:	ec59 8b10 	vmov	r8, r9, d0
 800be80:	4616      	mov	r6, r2
 800be82:	f7ff fccd 	bl	800b820 <_Balloc>
 800be86:	4604      	mov	r4, r0
 800be88:	b930      	cbnz	r0, 800be98 <__d2b+0x24>
 800be8a:	4602      	mov	r2, r0
 800be8c:	4b23      	ldr	r3, [pc, #140]	@ (800bf1c <__d2b+0xa8>)
 800be8e:	4824      	ldr	r0, [pc, #144]	@ (800bf20 <__d2b+0xac>)
 800be90:	f240 310f 	movw	r1, #783	@ 0x30f
 800be94:	f000 fafc 	bl	800c490 <__assert_func>
 800be98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bea0:	b10d      	cbz	r5, 800bea6 <__d2b+0x32>
 800bea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bea6:	9301      	str	r3, [sp, #4]
 800bea8:	f1b8 0300 	subs.w	r3, r8, #0
 800beac:	d023      	beq.n	800bef6 <__d2b+0x82>
 800beae:	4668      	mov	r0, sp
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	f7ff fd7c 	bl	800b9ae <__lo0bits>
 800beb6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800beba:	b1d0      	cbz	r0, 800bef2 <__d2b+0x7e>
 800bebc:	f1c0 0320 	rsb	r3, r0, #32
 800bec0:	fa02 f303 	lsl.w	r3, r2, r3
 800bec4:	430b      	orrs	r3, r1
 800bec6:	40c2      	lsrs	r2, r0
 800bec8:	6163      	str	r3, [r4, #20]
 800beca:	9201      	str	r2, [sp, #4]
 800becc:	9b01      	ldr	r3, [sp, #4]
 800bece:	61a3      	str	r3, [r4, #24]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	bf0c      	ite	eq
 800bed4:	2201      	moveq	r2, #1
 800bed6:	2202      	movne	r2, #2
 800bed8:	6122      	str	r2, [r4, #16]
 800beda:	b1a5      	cbz	r5, 800bf06 <__d2b+0x92>
 800bedc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bee0:	4405      	add	r5, r0
 800bee2:	603d      	str	r5, [r7, #0]
 800bee4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bee8:	6030      	str	r0, [r6, #0]
 800beea:	4620      	mov	r0, r4
 800beec:	b003      	add	sp, #12
 800beee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bef2:	6161      	str	r1, [r4, #20]
 800bef4:	e7ea      	b.n	800becc <__d2b+0x58>
 800bef6:	a801      	add	r0, sp, #4
 800bef8:	f7ff fd59 	bl	800b9ae <__lo0bits>
 800befc:	9b01      	ldr	r3, [sp, #4]
 800befe:	6163      	str	r3, [r4, #20]
 800bf00:	3020      	adds	r0, #32
 800bf02:	2201      	movs	r2, #1
 800bf04:	e7e8      	b.n	800bed8 <__d2b+0x64>
 800bf06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf0e:	6038      	str	r0, [r7, #0]
 800bf10:	6918      	ldr	r0, [r3, #16]
 800bf12:	f7ff fd2d 	bl	800b970 <__hi0bits>
 800bf16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf1a:	e7e5      	b.n	800bee8 <__d2b+0x74>
 800bf1c:	0800cecb 	.word	0x0800cecb
 800bf20:	0800cedc 	.word	0x0800cedc

0800bf24 <_malloc_usable_size_r>:
 800bf24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf28:	1f18      	subs	r0, r3, #4
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	bfbc      	itt	lt
 800bf2e:	580b      	ldrlt	r3, [r1, r0]
 800bf30:	18c0      	addlt	r0, r0, r3
 800bf32:	4770      	bx	lr

0800bf34 <__ascii_wctomb>:
 800bf34:	4603      	mov	r3, r0
 800bf36:	4608      	mov	r0, r1
 800bf38:	b141      	cbz	r1, 800bf4c <__ascii_wctomb+0x18>
 800bf3a:	2aff      	cmp	r2, #255	@ 0xff
 800bf3c:	d904      	bls.n	800bf48 <__ascii_wctomb+0x14>
 800bf3e:	228a      	movs	r2, #138	@ 0x8a
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	f04f 30ff 	mov.w	r0, #4294967295
 800bf46:	4770      	bx	lr
 800bf48:	700a      	strb	r2, [r1, #0]
 800bf4a:	2001      	movs	r0, #1
 800bf4c:	4770      	bx	lr

0800bf4e <__ssputs_r>:
 800bf4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf52:	688e      	ldr	r6, [r1, #8]
 800bf54:	461f      	mov	r7, r3
 800bf56:	42be      	cmp	r6, r7
 800bf58:	680b      	ldr	r3, [r1, #0]
 800bf5a:	4682      	mov	sl, r0
 800bf5c:	460c      	mov	r4, r1
 800bf5e:	4690      	mov	r8, r2
 800bf60:	d82d      	bhi.n	800bfbe <__ssputs_r+0x70>
 800bf62:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf66:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bf6a:	d026      	beq.n	800bfba <__ssputs_r+0x6c>
 800bf6c:	6965      	ldr	r5, [r4, #20]
 800bf6e:	6909      	ldr	r1, [r1, #16]
 800bf70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bf74:	eba3 0901 	sub.w	r9, r3, r1
 800bf78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bf7c:	1c7b      	adds	r3, r7, #1
 800bf7e:	444b      	add	r3, r9
 800bf80:	106d      	asrs	r5, r5, #1
 800bf82:	429d      	cmp	r5, r3
 800bf84:	bf38      	it	cc
 800bf86:	461d      	movcc	r5, r3
 800bf88:	0553      	lsls	r3, r2, #21
 800bf8a:	d527      	bpl.n	800bfdc <__ssputs_r+0x8e>
 800bf8c:	4629      	mov	r1, r5
 800bf8e:	f7fd fd23 	bl	80099d8 <_malloc_r>
 800bf92:	4606      	mov	r6, r0
 800bf94:	b360      	cbz	r0, 800bff0 <__ssputs_r+0xa2>
 800bf96:	6921      	ldr	r1, [r4, #16]
 800bf98:	464a      	mov	r2, r9
 800bf9a:	f7fe fd88 	bl	800aaae <memcpy>
 800bf9e:	89a3      	ldrh	r3, [r4, #12]
 800bfa0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bfa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfa8:	81a3      	strh	r3, [r4, #12]
 800bfaa:	6126      	str	r6, [r4, #16]
 800bfac:	6165      	str	r5, [r4, #20]
 800bfae:	444e      	add	r6, r9
 800bfb0:	eba5 0509 	sub.w	r5, r5, r9
 800bfb4:	6026      	str	r6, [r4, #0]
 800bfb6:	60a5      	str	r5, [r4, #8]
 800bfb8:	463e      	mov	r6, r7
 800bfba:	42be      	cmp	r6, r7
 800bfbc:	d900      	bls.n	800bfc0 <__ssputs_r+0x72>
 800bfbe:	463e      	mov	r6, r7
 800bfc0:	6820      	ldr	r0, [r4, #0]
 800bfc2:	4632      	mov	r2, r6
 800bfc4:	4641      	mov	r1, r8
 800bfc6:	f000 fa27 	bl	800c418 <memmove>
 800bfca:	68a3      	ldr	r3, [r4, #8]
 800bfcc:	1b9b      	subs	r3, r3, r6
 800bfce:	60a3      	str	r3, [r4, #8]
 800bfd0:	6823      	ldr	r3, [r4, #0]
 800bfd2:	4433      	add	r3, r6
 800bfd4:	6023      	str	r3, [r4, #0]
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfdc:	462a      	mov	r2, r5
 800bfde:	f7fd fd8f 	bl	8009b00 <_realloc_r>
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	d1e0      	bne.n	800bfaa <__ssputs_r+0x5c>
 800bfe8:	6921      	ldr	r1, [r4, #16]
 800bfea:	4650      	mov	r0, sl
 800bfec:	f7ff fbbc 	bl	800b768 <_free_r>
 800bff0:	230c      	movs	r3, #12
 800bff2:	f8ca 3000 	str.w	r3, [sl]
 800bff6:	89a3      	ldrh	r3, [r4, #12]
 800bff8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bffc:	81a3      	strh	r3, [r4, #12]
 800bffe:	f04f 30ff 	mov.w	r0, #4294967295
 800c002:	e7e9      	b.n	800bfd8 <__ssputs_r+0x8a>

0800c004 <_svfiprintf_r>:
 800c004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	4698      	mov	r8, r3
 800c00a:	898b      	ldrh	r3, [r1, #12]
 800c00c:	061b      	lsls	r3, r3, #24
 800c00e:	b09d      	sub	sp, #116	@ 0x74
 800c010:	4607      	mov	r7, r0
 800c012:	460d      	mov	r5, r1
 800c014:	4614      	mov	r4, r2
 800c016:	d510      	bpl.n	800c03a <_svfiprintf_r+0x36>
 800c018:	690b      	ldr	r3, [r1, #16]
 800c01a:	b973      	cbnz	r3, 800c03a <_svfiprintf_r+0x36>
 800c01c:	2140      	movs	r1, #64	@ 0x40
 800c01e:	f7fd fcdb 	bl	80099d8 <_malloc_r>
 800c022:	6028      	str	r0, [r5, #0]
 800c024:	6128      	str	r0, [r5, #16]
 800c026:	b930      	cbnz	r0, 800c036 <_svfiprintf_r+0x32>
 800c028:	230c      	movs	r3, #12
 800c02a:	603b      	str	r3, [r7, #0]
 800c02c:	f04f 30ff 	mov.w	r0, #4294967295
 800c030:	b01d      	add	sp, #116	@ 0x74
 800c032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c036:	2340      	movs	r3, #64	@ 0x40
 800c038:	616b      	str	r3, [r5, #20]
 800c03a:	2300      	movs	r3, #0
 800c03c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c03e:	2320      	movs	r3, #32
 800c040:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c044:	f8cd 800c 	str.w	r8, [sp, #12]
 800c048:	2330      	movs	r3, #48	@ 0x30
 800c04a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c1e8 <_svfiprintf_r+0x1e4>
 800c04e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c052:	f04f 0901 	mov.w	r9, #1
 800c056:	4623      	mov	r3, r4
 800c058:	469a      	mov	sl, r3
 800c05a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c05e:	b10a      	cbz	r2, 800c064 <_svfiprintf_r+0x60>
 800c060:	2a25      	cmp	r2, #37	@ 0x25
 800c062:	d1f9      	bne.n	800c058 <_svfiprintf_r+0x54>
 800c064:	ebba 0b04 	subs.w	fp, sl, r4
 800c068:	d00b      	beq.n	800c082 <_svfiprintf_r+0x7e>
 800c06a:	465b      	mov	r3, fp
 800c06c:	4622      	mov	r2, r4
 800c06e:	4629      	mov	r1, r5
 800c070:	4638      	mov	r0, r7
 800c072:	f7ff ff6c 	bl	800bf4e <__ssputs_r>
 800c076:	3001      	adds	r0, #1
 800c078:	f000 80a7 	beq.w	800c1ca <_svfiprintf_r+0x1c6>
 800c07c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c07e:	445a      	add	r2, fp
 800c080:	9209      	str	r2, [sp, #36]	@ 0x24
 800c082:	f89a 3000 	ldrb.w	r3, [sl]
 800c086:	2b00      	cmp	r3, #0
 800c088:	f000 809f 	beq.w	800c1ca <_svfiprintf_r+0x1c6>
 800c08c:	2300      	movs	r3, #0
 800c08e:	f04f 32ff 	mov.w	r2, #4294967295
 800c092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c096:	f10a 0a01 	add.w	sl, sl, #1
 800c09a:	9304      	str	r3, [sp, #16]
 800c09c:	9307      	str	r3, [sp, #28]
 800c09e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c0a2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c0a4:	4654      	mov	r4, sl
 800c0a6:	2205      	movs	r2, #5
 800c0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0ac:	484e      	ldr	r0, [pc, #312]	@ (800c1e8 <_svfiprintf_r+0x1e4>)
 800c0ae:	f7f4 f89f 	bl	80001f0 <memchr>
 800c0b2:	9a04      	ldr	r2, [sp, #16]
 800c0b4:	b9d8      	cbnz	r0, 800c0ee <_svfiprintf_r+0xea>
 800c0b6:	06d0      	lsls	r0, r2, #27
 800c0b8:	bf44      	itt	mi
 800c0ba:	2320      	movmi	r3, #32
 800c0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0c0:	0711      	lsls	r1, r2, #28
 800c0c2:	bf44      	itt	mi
 800c0c4:	232b      	movmi	r3, #43	@ 0x2b
 800c0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c0ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c0ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0d0:	d015      	beq.n	800c0fe <_svfiprintf_r+0xfa>
 800c0d2:	9a07      	ldr	r2, [sp, #28]
 800c0d4:	4654      	mov	r4, sl
 800c0d6:	2000      	movs	r0, #0
 800c0d8:	f04f 0c0a 	mov.w	ip, #10
 800c0dc:	4621      	mov	r1, r4
 800c0de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0e2:	3b30      	subs	r3, #48	@ 0x30
 800c0e4:	2b09      	cmp	r3, #9
 800c0e6:	d94b      	bls.n	800c180 <_svfiprintf_r+0x17c>
 800c0e8:	b1b0      	cbz	r0, 800c118 <_svfiprintf_r+0x114>
 800c0ea:	9207      	str	r2, [sp, #28]
 800c0ec:	e014      	b.n	800c118 <_svfiprintf_r+0x114>
 800c0ee:	eba0 0308 	sub.w	r3, r0, r8
 800c0f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c0f6:	4313      	orrs	r3, r2
 800c0f8:	9304      	str	r3, [sp, #16]
 800c0fa:	46a2      	mov	sl, r4
 800c0fc:	e7d2      	b.n	800c0a4 <_svfiprintf_r+0xa0>
 800c0fe:	9b03      	ldr	r3, [sp, #12]
 800c100:	1d19      	adds	r1, r3, #4
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	9103      	str	r1, [sp, #12]
 800c106:	2b00      	cmp	r3, #0
 800c108:	bfbb      	ittet	lt
 800c10a:	425b      	neglt	r3, r3
 800c10c:	f042 0202 	orrlt.w	r2, r2, #2
 800c110:	9307      	strge	r3, [sp, #28]
 800c112:	9307      	strlt	r3, [sp, #28]
 800c114:	bfb8      	it	lt
 800c116:	9204      	strlt	r2, [sp, #16]
 800c118:	7823      	ldrb	r3, [r4, #0]
 800c11a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c11c:	d10a      	bne.n	800c134 <_svfiprintf_r+0x130>
 800c11e:	7863      	ldrb	r3, [r4, #1]
 800c120:	2b2a      	cmp	r3, #42	@ 0x2a
 800c122:	d132      	bne.n	800c18a <_svfiprintf_r+0x186>
 800c124:	9b03      	ldr	r3, [sp, #12]
 800c126:	1d1a      	adds	r2, r3, #4
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	9203      	str	r2, [sp, #12]
 800c12c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c130:	3402      	adds	r4, #2
 800c132:	9305      	str	r3, [sp, #20]
 800c134:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c1f8 <_svfiprintf_r+0x1f4>
 800c138:	7821      	ldrb	r1, [r4, #0]
 800c13a:	2203      	movs	r2, #3
 800c13c:	4650      	mov	r0, sl
 800c13e:	f7f4 f857 	bl	80001f0 <memchr>
 800c142:	b138      	cbz	r0, 800c154 <_svfiprintf_r+0x150>
 800c144:	9b04      	ldr	r3, [sp, #16]
 800c146:	eba0 000a 	sub.w	r0, r0, sl
 800c14a:	2240      	movs	r2, #64	@ 0x40
 800c14c:	4082      	lsls	r2, r0
 800c14e:	4313      	orrs	r3, r2
 800c150:	3401      	adds	r4, #1
 800c152:	9304      	str	r3, [sp, #16]
 800c154:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c158:	4824      	ldr	r0, [pc, #144]	@ (800c1ec <_svfiprintf_r+0x1e8>)
 800c15a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c15e:	2206      	movs	r2, #6
 800c160:	f7f4 f846 	bl	80001f0 <memchr>
 800c164:	2800      	cmp	r0, #0
 800c166:	d036      	beq.n	800c1d6 <_svfiprintf_r+0x1d2>
 800c168:	4b21      	ldr	r3, [pc, #132]	@ (800c1f0 <_svfiprintf_r+0x1ec>)
 800c16a:	bb1b      	cbnz	r3, 800c1b4 <_svfiprintf_r+0x1b0>
 800c16c:	9b03      	ldr	r3, [sp, #12]
 800c16e:	3307      	adds	r3, #7
 800c170:	f023 0307 	bic.w	r3, r3, #7
 800c174:	3308      	adds	r3, #8
 800c176:	9303      	str	r3, [sp, #12]
 800c178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c17a:	4433      	add	r3, r6
 800c17c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c17e:	e76a      	b.n	800c056 <_svfiprintf_r+0x52>
 800c180:	fb0c 3202 	mla	r2, ip, r2, r3
 800c184:	460c      	mov	r4, r1
 800c186:	2001      	movs	r0, #1
 800c188:	e7a8      	b.n	800c0dc <_svfiprintf_r+0xd8>
 800c18a:	2300      	movs	r3, #0
 800c18c:	3401      	adds	r4, #1
 800c18e:	9305      	str	r3, [sp, #20]
 800c190:	4619      	mov	r1, r3
 800c192:	f04f 0c0a 	mov.w	ip, #10
 800c196:	4620      	mov	r0, r4
 800c198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c19c:	3a30      	subs	r2, #48	@ 0x30
 800c19e:	2a09      	cmp	r2, #9
 800c1a0:	d903      	bls.n	800c1aa <_svfiprintf_r+0x1a6>
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d0c6      	beq.n	800c134 <_svfiprintf_r+0x130>
 800c1a6:	9105      	str	r1, [sp, #20]
 800c1a8:	e7c4      	b.n	800c134 <_svfiprintf_r+0x130>
 800c1aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e7f0      	b.n	800c196 <_svfiprintf_r+0x192>
 800c1b4:	ab03      	add	r3, sp, #12
 800c1b6:	9300      	str	r3, [sp, #0]
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c1f4 <_svfiprintf_r+0x1f0>)
 800c1bc:	a904      	add	r1, sp, #16
 800c1be:	4638      	mov	r0, r7
 800c1c0:	f7fd fdf0 	bl	8009da4 <_printf_float>
 800c1c4:	1c42      	adds	r2, r0, #1
 800c1c6:	4606      	mov	r6, r0
 800c1c8:	d1d6      	bne.n	800c178 <_svfiprintf_r+0x174>
 800c1ca:	89ab      	ldrh	r3, [r5, #12]
 800c1cc:	065b      	lsls	r3, r3, #25
 800c1ce:	f53f af2d 	bmi.w	800c02c <_svfiprintf_r+0x28>
 800c1d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c1d4:	e72c      	b.n	800c030 <_svfiprintf_r+0x2c>
 800c1d6:	ab03      	add	r3, sp, #12
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	462a      	mov	r2, r5
 800c1dc:	4b05      	ldr	r3, [pc, #20]	@ (800c1f4 <_svfiprintf_r+0x1f0>)
 800c1de:	a904      	add	r1, sp, #16
 800c1e0:	4638      	mov	r0, r7
 800c1e2:	f7fe f877 	bl	800a2d4 <_printf_i>
 800c1e6:	e7ed      	b.n	800c1c4 <_svfiprintf_r+0x1c0>
 800c1e8:	0800d038 	.word	0x0800d038
 800c1ec:	0800d042 	.word	0x0800d042
 800c1f0:	08009da5 	.word	0x08009da5
 800c1f4:	0800bf4f 	.word	0x0800bf4f
 800c1f8:	0800d03e 	.word	0x0800d03e

0800c1fc <__sflush_r>:
 800c1fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c204:	0716      	lsls	r6, r2, #28
 800c206:	4605      	mov	r5, r0
 800c208:	460c      	mov	r4, r1
 800c20a:	d454      	bmi.n	800c2b6 <__sflush_r+0xba>
 800c20c:	684b      	ldr	r3, [r1, #4]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	dc02      	bgt.n	800c218 <__sflush_r+0x1c>
 800c212:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c214:	2b00      	cmp	r3, #0
 800c216:	dd48      	ble.n	800c2aa <__sflush_r+0xae>
 800c218:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c21a:	2e00      	cmp	r6, #0
 800c21c:	d045      	beq.n	800c2aa <__sflush_r+0xae>
 800c21e:	2300      	movs	r3, #0
 800c220:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c224:	682f      	ldr	r7, [r5, #0]
 800c226:	6a21      	ldr	r1, [r4, #32]
 800c228:	602b      	str	r3, [r5, #0]
 800c22a:	d030      	beq.n	800c28e <__sflush_r+0x92>
 800c22c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c22e:	89a3      	ldrh	r3, [r4, #12]
 800c230:	0759      	lsls	r1, r3, #29
 800c232:	d505      	bpl.n	800c240 <__sflush_r+0x44>
 800c234:	6863      	ldr	r3, [r4, #4]
 800c236:	1ad2      	subs	r2, r2, r3
 800c238:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c23a:	b10b      	cbz	r3, 800c240 <__sflush_r+0x44>
 800c23c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c23e:	1ad2      	subs	r2, r2, r3
 800c240:	2300      	movs	r3, #0
 800c242:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c244:	6a21      	ldr	r1, [r4, #32]
 800c246:	4628      	mov	r0, r5
 800c248:	47b0      	blx	r6
 800c24a:	1c43      	adds	r3, r0, #1
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	d106      	bne.n	800c25e <__sflush_r+0x62>
 800c250:	6829      	ldr	r1, [r5, #0]
 800c252:	291d      	cmp	r1, #29
 800c254:	d82b      	bhi.n	800c2ae <__sflush_r+0xb2>
 800c256:	4a2a      	ldr	r2, [pc, #168]	@ (800c300 <__sflush_r+0x104>)
 800c258:	410a      	asrs	r2, r1
 800c25a:	07d6      	lsls	r6, r2, #31
 800c25c:	d427      	bmi.n	800c2ae <__sflush_r+0xb2>
 800c25e:	2200      	movs	r2, #0
 800c260:	6062      	str	r2, [r4, #4]
 800c262:	04d9      	lsls	r1, r3, #19
 800c264:	6922      	ldr	r2, [r4, #16]
 800c266:	6022      	str	r2, [r4, #0]
 800c268:	d504      	bpl.n	800c274 <__sflush_r+0x78>
 800c26a:	1c42      	adds	r2, r0, #1
 800c26c:	d101      	bne.n	800c272 <__sflush_r+0x76>
 800c26e:	682b      	ldr	r3, [r5, #0]
 800c270:	b903      	cbnz	r3, 800c274 <__sflush_r+0x78>
 800c272:	6560      	str	r0, [r4, #84]	@ 0x54
 800c274:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c276:	602f      	str	r7, [r5, #0]
 800c278:	b1b9      	cbz	r1, 800c2aa <__sflush_r+0xae>
 800c27a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c27e:	4299      	cmp	r1, r3
 800c280:	d002      	beq.n	800c288 <__sflush_r+0x8c>
 800c282:	4628      	mov	r0, r5
 800c284:	f7ff fa70 	bl	800b768 <_free_r>
 800c288:	2300      	movs	r3, #0
 800c28a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c28c:	e00d      	b.n	800c2aa <__sflush_r+0xae>
 800c28e:	2301      	movs	r3, #1
 800c290:	4628      	mov	r0, r5
 800c292:	47b0      	blx	r6
 800c294:	4602      	mov	r2, r0
 800c296:	1c50      	adds	r0, r2, #1
 800c298:	d1c9      	bne.n	800c22e <__sflush_r+0x32>
 800c29a:	682b      	ldr	r3, [r5, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d0c6      	beq.n	800c22e <__sflush_r+0x32>
 800c2a0:	2b1d      	cmp	r3, #29
 800c2a2:	d001      	beq.n	800c2a8 <__sflush_r+0xac>
 800c2a4:	2b16      	cmp	r3, #22
 800c2a6:	d11e      	bne.n	800c2e6 <__sflush_r+0xea>
 800c2a8:	602f      	str	r7, [r5, #0]
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	e022      	b.n	800c2f4 <__sflush_r+0xf8>
 800c2ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2b2:	b21b      	sxth	r3, r3
 800c2b4:	e01b      	b.n	800c2ee <__sflush_r+0xf2>
 800c2b6:	690f      	ldr	r7, [r1, #16]
 800c2b8:	2f00      	cmp	r7, #0
 800c2ba:	d0f6      	beq.n	800c2aa <__sflush_r+0xae>
 800c2bc:	0793      	lsls	r3, r2, #30
 800c2be:	680e      	ldr	r6, [r1, #0]
 800c2c0:	bf08      	it	eq
 800c2c2:	694b      	ldreq	r3, [r1, #20]
 800c2c4:	600f      	str	r7, [r1, #0]
 800c2c6:	bf18      	it	ne
 800c2c8:	2300      	movne	r3, #0
 800c2ca:	eba6 0807 	sub.w	r8, r6, r7
 800c2ce:	608b      	str	r3, [r1, #8]
 800c2d0:	f1b8 0f00 	cmp.w	r8, #0
 800c2d4:	dde9      	ble.n	800c2aa <__sflush_r+0xae>
 800c2d6:	6a21      	ldr	r1, [r4, #32]
 800c2d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c2da:	4643      	mov	r3, r8
 800c2dc:	463a      	mov	r2, r7
 800c2de:	4628      	mov	r0, r5
 800c2e0:	47b0      	blx	r6
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	dc08      	bgt.n	800c2f8 <__sflush_r+0xfc>
 800c2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2ee:	81a3      	strh	r3, [r4, #12]
 800c2f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2f8:	4407      	add	r7, r0
 800c2fa:	eba8 0800 	sub.w	r8, r8, r0
 800c2fe:	e7e7      	b.n	800c2d0 <__sflush_r+0xd4>
 800c300:	dfbffffe 	.word	0xdfbffffe

0800c304 <_fflush_r>:
 800c304:	b538      	push	{r3, r4, r5, lr}
 800c306:	690b      	ldr	r3, [r1, #16]
 800c308:	4605      	mov	r5, r0
 800c30a:	460c      	mov	r4, r1
 800c30c:	b913      	cbnz	r3, 800c314 <_fflush_r+0x10>
 800c30e:	2500      	movs	r5, #0
 800c310:	4628      	mov	r0, r5
 800c312:	bd38      	pop	{r3, r4, r5, pc}
 800c314:	b118      	cbz	r0, 800c31e <_fflush_r+0x1a>
 800c316:	6a03      	ldr	r3, [r0, #32]
 800c318:	b90b      	cbnz	r3, 800c31e <_fflush_r+0x1a>
 800c31a:	f7fe f987 	bl	800a62c <__sinit>
 800c31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d0f3      	beq.n	800c30e <_fflush_r+0xa>
 800c326:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c328:	07d0      	lsls	r0, r2, #31
 800c32a:	d404      	bmi.n	800c336 <_fflush_r+0x32>
 800c32c:	0599      	lsls	r1, r3, #22
 800c32e:	d402      	bmi.n	800c336 <_fflush_r+0x32>
 800c330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c332:	f7fe fbba 	bl	800aaaa <__retarget_lock_acquire_recursive>
 800c336:	4628      	mov	r0, r5
 800c338:	4621      	mov	r1, r4
 800c33a:	f7ff ff5f 	bl	800c1fc <__sflush_r>
 800c33e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c340:	07da      	lsls	r2, r3, #31
 800c342:	4605      	mov	r5, r0
 800c344:	d4e4      	bmi.n	800c310 <_fflush_r+0xc>
 800c346:	89a3      	ldrh	r3, [r4, #12]
 800c348:	059b      	lsls	r3, r3, #22
 800c34a:	d4e1      	bmi.n	800c310 <_fflush_r+0xc>
 800c34c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c34e:	f7fe fbad 	bl	800aaac <__retarget_lock_release_recursive>
 800c352:	e7dd      	b.n	800c310 <_fflush_r+0xc>

0800c354 <__swhatbuf_r>:
 800c354:	b570      	push	{r4, r5, r6, lr}
 800c356:	460c      	mov	r4, r1
 800c358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c35c:	2900      	cmp	r1, #0
 800c35e:	b096      	sub	sp, #88	@ 0x58
 800c360:	4615      	mov	r5, r2
 800c362:	461e      	mov	r6, r3
 800c364:	da0d      	bge.n	800c382 <__swhatbuf_r+0x2e>
 800c366:	89a3      	ldrh	r3, [r4, #12]
 800c368:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c36c:	f04f 0100 	mov.w	r1, #0
 800c370:	bf14      	ite	ne
 800c372:	2340      	movne	r3, #64	@ 0x40
 800c374:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c378:	2000      	movs	r0, #0
 800c37a:	6031      	str	r1, [r6, #0]
 800c37c:	602b      	str	r3, [r5, #0]
 800c37e:	b016      	add	sp, #88	@ 0x58
 800c380:	bd70      	pop	{r4, r5, r6, pc}
 800c382:	466a      	mov	r2, sp
 800c384:	f000 f862 	bl	800c44c <_fstat_r>
 800c388:	2800      	cmp	r0, #0
 800c38a:	dbec      	blt.n	800c366 <__swhatbuf_r+0x12>
 800c38c:	9901      	ldr	r1, [sp, #4]
 800c38e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c392:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c396:	4259      	negs	r1, r3
 800c398:	4159      	adcs	r1, r3
 800c39a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c39e:	e7eb      	b.n	800c378 <__swhatbuf_r+0x24>

0800c3a0 <__smakebuf_r>:
 800c3a0:	898b      	ldrh	r3, [r1, #12]
 800c3a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3a4:	079d      	lsls	r5, r3, #30
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	d507      	bpl.n	800c3bc <__smakebuf_r+0x1c>
 800c3ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	6123      	str	r3, [r4, #16]
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	6163      	str	r3, [r4, #20]
 800c3b8:	b003      	add	sp, #12
 800c3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3bc:	ab01      	add	r3, sp, #4
 800c3be:	466a      	mov	r2, sp
 800c3c0:	f7ff ffc8 	bl	800c354 <__swhatbuf_r>
 800c3c4:	9f00      	ldr	r7, [sp, #0]
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	4639      	mov	r1, r7
 800c3ca:	4630      	mov	r0, r6
 800c3cc:	f7fd fb04 	bl	80099d8 <_malloc_r>
 800c3d0:	b948      	cbnz	r0, 800c3e6 <__smakebuf_r+0x46>
 800c3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3d6:	059a      	lsls	r2, r3, #22
 800c3d8:	d4ee      	bmi.n	800c3b8 <__smakebuf_r+0x18>
 800c3da:	f023 0303 	bic.w	r3, r3, #3
 800c3de:	f043 0302 	orr.w	r3, r3, #2
 800c3e2:	81a3      	strh	r3, [r4, #12]
 800c3e4:	e7e2      	b.n	800c3ac <__smakebuf_r+0xc>
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	6020      	str	r0, [r4, #0]
 800c3ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3ee:	81a3      	strh	r3, [r4, #12]
 800c3f0:	9b01      	ldr	r3, [sp, #4]
 800c3f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c3f6:	b15b      	cbz	r3, 800c410 <__smakebuf_r+0x70>
 800c3f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	f000 f837 	bl	800c470 <_isatty_r>
 800c402:	b128      	cbz	r0, 800c410 <__smakebuf_r+0x70>
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	f023 0303 	bic.w	r3, r3, #3
 800c40a:	f043 0301 	orr.w	r3, r3, #1
 800c40e:	81a3      	strh	r3, [r4, #12]
 800c410:	89a3      	ldrh	r3, [r4, #12]
 800c412:	431d      	orrs	r5, r3
 800c414:	81a5      	strh	r5, [r4, #12]
 800c416:	e7cf      	b.n	800c3b8 <__smakebuf_r+0x18>

0800c418 <memmove>:
 800c418:	4288      	cmp	r0, r1
 800c41a:	b510      	push	{r4, lr}
 800c41c:	eb01 0402 	add.w	r4, r1, r2
 800c420:	d902      	bls.n	800c428 <memmove+0x10>
 800c422:	4284      	cmp	r4, r0
 800c424:	4623      	mov	r3, r4
 800c426:	d807      	bhi.n	800c438 <memmove+0x20>
 800c428:	1e43      	subs	r3, r0, #1
 800c42a:	42a1      	cmp	r1, r4
 800c42c:	d008      	beq.n	800c440 <memmove+0x28>
 800c42e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c432:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c436:	e7f8      	b.n	800c42a <memmove+0x12>
 800c438:	4402      	add	r2, r0
 800c43a:	4601      	mov	r1, r0
 800c43c:	428a      	cmp	r2, r1
 800c43e:	d100      	bne.n	800c442 <memmove+0x2a>
 800c440:	bd10      	pop	{r4, pc}
 800c442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c44a:	e7f7      	b.n	800c43c <memmove+0x24>

0800c44c <_fstat_r>:
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4d07      	ldr	r5, [pc, #28]	@ (800c46c <_fstat_r+0x20>)
 800c450:	2300      	movs	r3, #0
 800c452:	4604      	mov	r4, r0
 800c454:	4608      	mov	r0, r1
 800c456:	4611      	mov	r1, r2
 800c458:	602b      	str	r3, [r5, #0]
 800c45a:	f7f5 fcd7 	bl	8001e0c <_fstat>
 800c45e:	1c43      	adds	r3, r0, #1
 800c460:	d102      	bne.n	800c468 <_fstat_r+0x1c>
 800c462:	682b      	ldr	r3, [r5, #0]
 800c464:	b103      	cbz	r3, 800c468 <_fstat_r+0x1c>
 800c466:	6023      	str	r3, [r4, #0]
 800c468:	bd38      	pop	{r3, r4, r5, pc}
 800c46a:	bf00      	nop
 800c46c:	200024dc 	.word	0x200024dc

0800c470 <_isatty_r>:
 800c470:	b538      	push	{r3, r4, r5, lr}
 800c472:	4d06      	ldr	r5, [pc, #24]	@ (800c48c <_isatty_r+0x1c>)
 800c474:	2300      	movs	r3, #0
 800c476:	4604      	mov	r4, r0
 800c478:	4608      	mov	r0, r1
 800c47a:	602b      	str	r3, [r5, #0]
 800c47c:	f7f5 fcd6 	bl	8001e2c <_isatty>
 800c480:	1c43      	adds	r3, r0, #1
 800c482:	d102      	bne.n	800c48a <_isatty_r+0x1a>
 800c484:	682b      	ldr	r3, [r5, #0]
 800c486:	b103      	cbz	r3, 800c48a <_isatty_r+0x1a>
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	bd38      	pop	{r3, r4, r5, pc}
 800c48c:	200024dc 	.word	0x200024dc

0800c490 <__assert_func>:
 800c490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c492:	4614      	mov	r4, r2
 800c494:	461a      	mov	r2, r3
 800c496:	4b09      	ldr	r3, [pc, #36]	@ (800c4bc <__assert_func+0x2c>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4605      	mov	r5, r0
 800c49c:	68d8      	ldr	r0, [r3, #12]
 800c49e:	b954      	cbnz	r4, 800c4b6 <__assert_func+0x26>
 800c4a0:	4b07      	ldr	r3, [pc, #28]	@ (800c4c0 <__assert_func+0x30>)
 800c4a2:	461c      	mov	r4, r3
 800c4a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c4a8:	9100      	str	r1, [sp, #0]
 800c4aa:	462b      	mov	r3, r5
 800c4ac:	4905      	ldr	r1, [pc, #20]	@ (800c4c4 <__assert_func+0x34>)
 800c4ae:	f000 f821 	bl	800c4f4 <fiprintf>
 800c4b2:	f000 f831 	bl	800c518 <abort>
 800c4b6:	4b04      	ldr	r3, [pc, #16]	@ (800c4c8 <__assert_func+0x38>)
 800c4b8:	e7f4      	b.n	800c4a4 <__assert_func+0x14>
 800c4ba:	bf00      	nop
 800c4bc:	20000184 	.word	0x20000184
 800c4c0:	0800d084 	.word	0x0800d084
 800c4c4:	0800d056 	.word	0x0800d056
 800c4c8:	0800d049 	.word	0x0800d049

0800c4cc <_calloc_r>:
 800c4cc:	b570      	push	{r4, r5, r6, lr}
 800c4ce:	fba1 5402 	umull	r5, r4, r1, r2
 800c4d2:	b93c      	cbnz	r4, 800c4e4 <_calloc_r+0x18>
 800c4d4:	4629      	mov	r1, r5
 800c4d6:	f7fd fa7f 	bl	80099d8 <_malloc_r>
 800c4da:	4606      	mov	r6, r0
 800c4dc:	b928      	cbnz	r0, 800c4ea <_calloc_r+0x1e>
 800c4de:	2600      	movs	r6, #0
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	bd70      	pop	{r4, r5, r6, pc}
 800c4e4:	220c      	movs	r2, #12
 800c4e6:	6002      	str	r2, [r0, #0]
 800c4e8:	e7f9      	b.n	800c4de <_calloc_r+0x12>
 800c4ea:	462a      	mov	r2, r5
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	f7fe fa3d 	bl	800a96c <memset>
 800c4f2:	e7f5      	b.n	800c4e0 <_calloc_r+0x14>

0800c4f4 <fiprintf>:
 800c4f4:	b40e      	push	{r1, r2, r3}
 800c4f6:	b503      	push	{r0, r1, lr}
 800c4f8:	4601      	mov	r1, r0
 800c4fa:	ab03      	add	r3, sp, #12
 800c4fc:	4805      	ldr	r0, [pc, #20]	@ (800c514 <fiprintf+0x20>)
 800c4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c502:	6800      	ldr	r0, [r0, #0]
 800c504:	9301      	str	r3, [sp, #4]
 800c506:	f000 f837 	bl	800c578 <_vfiprintf_r>
 800c50a:	b002      	add	sp, #8
 800c50c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c510:	b003      	add	sp, #12
 800c512:	4770      	bx	lr
 800c514:	20000184 	.word	0x20000184

0800c518 <abort>:
 800c518:	b508      	push	{r3, lr}
 800c51a:	2006      	movs	r0, #6
 800c51c:	f000 f96c 	bl	800c7f8 <raise>
 800c520:	2001      	movs	r0, #1
 800c522:	f7f5 fc23 	bl	8001d6c <_exit>

0800c526 <__sfputc_r>:
 800c526:	6893      	ldr	r3, [r2, #8]
 800c528:	3b01      	subs	r3, #1
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	b410      	push	{r4}
 800c52e:	6093      	str	r3, [r2, #8]
 800c530:	da08      	bge.n	800c544 <__sfputc_r+0x1e>
 800c532:	6994      	ldr	r4, [r2, #24]
 800c534:	42a3      	cmp	r3, r4
 800c536:	db01      	blt.n	800c53c <__sfputc_r+0x16>
 800c538:	290a      	cmp	r1, #10
 800c53a:	d103      	bne.n	800c544 <__sfputc_r+0x1e>
 800c53c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c540:	f7fe b97f 	b.w	800a842 <__swbuf_r>
 800c544:	6813      	ldr	r3, [r2, #0]
 800c546:	1c58      	adds	r0, r3, #1
 800c548:	6010      	str	r0, [r2, #0]
 800c54a:	7019      	strb	r1, [r3, #0]
 800c54c:	4608      	mov	r0, r1
 800c54e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c552:	4770      	bx	lr

0800c554 <__sfputs_r>:
 800c554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c556:	4606      	mov	r6, r0
 800c558:	460f      	mov	r7, r1
 800c55a:	4614      	mov	r4, r2
 800c55c:	18d5      	adds	r5, r2, r3
 800c55e:	42ac      	cmp	r4, r5
 800c560:	d101      	bne.n	800c566 <__sfputs_r+0x12>
 800c562:	2000      	movs	r0, #0
 800c564:	e007      	b.n	800c576 <__sfputs_r+0x22>
 800c566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c56a:	463a      	mov	r2, r7
 800c56c:	4630      	mov	r0, r6
 800c56e:	f7ff ffda 	bl	800c526 <__sfputc_r>
 800c572:	1c43      	adds	r3, r0, #1
 800c574:	d1f3      	bne.n	800c55e <__sfputs_r+0xa>
 800c576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c578 <_vfiprintf_r>:
 800c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	460d      	mov	r5, r1
 800c57e:	b09d      	sub	sp, #116	@ 0x74
 800c580:	4614      	mov	r4, r2
 800c582:	4698      	mov	r8, r3
 800c584:	4606      	mov	r6, r0
 800c586:	b118      	cbz	r0, 800c590 <_vfiprintf_r+0x18>
 800c588:	6a03      	ldr	r3, [r0, #32]
 800c58a:	b90b      	cbnz	r3, 800c590 <_vfiprintf_r+0x18>
 800c58c:	f7fe f84e 	bl	800a62c <__sinit>
 800c590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c592:	07d9      	lsls	r1, r3, #31
 800c594:	d405      	bmi.n	800c5a2 <_vfiprintf_r+0x2a>
 800c596:	89ab      	ldrh	r3, [r5, #12]
 800c598:	059a      	lsls	r2, r3, #22
 800c59a:	d402      	bmi.n	800c5a2 <_vfiprintf_r+0x2a>
 800c59c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c59e:	f7fe fa84 	bl	800aaaa <__retarget_lock_acquire_recursive>
 800c5a2:	89ab      	ldrh	r3, [r5, #12]
 800c5a4:	071b      	lsls	r3, r3, #28
 800c5a6:	d501      	bpl.n	800c5ac <_vfiprintf_r+0x34>
 800c5a8:	692b      	ldr	r3, [r5, #16]
 800c5aa:	b99b      	cbnz	r3, 800c5d4 <_vfiprintf_r+0x5c>
 800c5ac:	4629      	mov	r1, r5
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	f7fe f986 	bl	800a8c0 <__swsetup_r>
 800c5b4:	b170      	cbz	r0, 800c5d4 <_vfiprintf_r+0x5c>
 800c5b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c5b8:	07dc      	lsls	r4, r3, #31
 800c5ba:	d504      	bpl.n	800c5c6 <_vfiprintf_r+0x4e>
 800c5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5c0:	b01d      	add	sp, #116	@ 0x74
 800c5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c6:	89ab      	ldrh	r3, [r5, #12]
 800c5c8:	0598      	lsls	r0, r3, #22
 800c5ca:	d4f7      	bmi.n	800c5bc <_vfiprintf_r+0x44>
 800c5cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c5ce:	f7fe fa6d 	bl	800aaac <__retarget_lock_release_recursive>
 800c5d2:	e7f3      	b.n	800c5bc <_vfiprintf_r+0x44>
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5d8:	2320      	movs	r3, #32
 800c5da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5de:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5e2:	2330      	movs	r3, #48	@ 0x30
 800c5e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c794 <_vfiprintf_r+0x21c>
 800c5e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5ec:	f04f 0901 	mov.w	r9, #1
 800c5f0:	4623      	mov	r3, r4
 800c5f2:	469a      	mov	sl, r3
 800c5f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5f8:	b10a      	cbz	r2, 800c5fe <_vfiprintf_r+0x86>
 800c5fa:	2a25      	cmp	r2, #37	@ 0x25
 800c5fc:	d1f9      	bne.n	800c5f2 <_vfiprintf_r+0x7a>
 800c5fe:	ebba 0b04 	subs.w	fp, sl, r4
 800c602:	d00b      	beq.n	800c61c <_vfiprintf_r+0xa4>
 800c604:	465b      	mov	r3, fp
 800c606:	4622      	mov	r2, r4
 800c608:	4629      	mov	r1, r5
 800c60a:	4630      	mov	r0, r6
 800c60c:	f7ff ffa2 	bl	800c554 <__sfputs_r>
 800c610:	3001      	adds	r0, #1
 800c612:	f000 80a7 	beq.w	800c764 <_vfiprintf_r+0x1ec>
 800c616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c618:	445a      	add	r2, fp
 800c61a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c61c:	f89a 3000 	ldrb.w	r3, [sl]
 800c620:	2b00      	cmp	r3, #0
 800c622:	f000 809f 	beq.w	800c764 <_vfiprintf_r+0x1ec>
 800c626:	2300      	movs	r3, #0
 800c628:	f04f 32ff 	mov.w	r2, #4294967295
 800c62c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c630:	f10a 0a01 	add.w	sl, sl, #1
 800c634:	9304      	str	r3, [sp, #16]
 800c636:	9307      	str	r3, [sp, #28]
 800c638:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c63c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c63e:	4654      	mov	r4, sl
 800c640:	2205      	movs	r2, #5
 800c642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c646:	4853      	ldr	r0, [pc, #332]	@ (800c794 <_vfiprintf_r+0x21c>)
 800c648:	f7f3 fdd2 	bl	80001f0 <memchr>
 800c64c:	9a04      	ldr	r2, [sp, #16]
 800c64e:	b9d8      	cbnz	r0, 800c688 <_vfiprintf_r+0x110>
 800c650:	06d1      	lsls	r1, r2, #27
 800c652:	bf44      	itt	mi
 800c654:	2320      	movmi	r3, #32
 800c656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c65a:	0713      	lsls	r3, r2, #28
 800c65c:	bf44      	itt	mi
 800c65e:	232b      	movmi	r3, #43	@ 0x2b
 800c660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c664:	f89a 3000 	ldrb.w	r3, [sl]
 800c668:	2b2a      	cmp	r3, #42	@ 0x2a
 800c66a:	d015      	beq.n	800c698 <_vfiprintf_r+0x120>
 800c66c:	9a07      	ldr	r2, [sp, #28]
 800c66e:	4654      	mov	r4, sl
 800c670:	2000      	movs	r0, #0
 800c672:	f04f 0c0a 	mov.w	ip, #10
 800c676:	4621      	mov	r1, r4
 800c678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c67c:	3b30      	subs	r3, #48	@ 0x30
 800c67e:	2b09      	cmp	r3, #9
 800c680:	d94b      	bls.n	800c71a <_vfiprintf_r+0x1a2>
 800c682:	b1b0      	cbz	r0, 800c6b2 <_vfiprintf_r+0x13a>
 800c684:	9207      	str	r2, [sp, #28]
 800c686:	e014      	b.n	800c6b2 <_vfiprintf_r+0x13a>
 800c688:	eba0 0308 	sub.w	r3, r0, r8
 800c68c:	fa09 f303 	lsl.w	r3, r9, r3
 800c690:	4313      	orrs	r3, r2
 800c692:	9304      	str	r3, [sp, #16]
 800c694:	46a2      	mov	sl, r4
 800c696:	e7d2      	b.n	800c63e <_vfiprintf_r+0xc6>
 800c698:	9b03      	ldr	r3, [sp, #12]
 800c69a:	1d19      	adds	r1, r3, #4
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	9103      	str	r1, [sp, #12]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	bfbb      	ittet	lt
 800c6a4:	425b      	neglt	r3, r3
 800c6a6:	f042 0202 	orrlt.w	r2, r2, #2
 800c6aa:	9307      	strge	r3, [sp, #28]
 800c6ac:	9307      	strlt	r3, [sp, #28]
 800c6ae:	bfb8      	it	lt
 800c6b0:	9204      	strlt	r2, [sp, #16]
 800c6b2:	7823      	ldrb	r3, [r4, #0]
 800c6b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c6b6:	d10a      	bne.n	800c6ce <_vfiprintf_r+0x156>
 800c6b8:	7863      	ldrb	r3, [r4, #1]
 800c6ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6bc:	d132      	bne.n	800c724 <_vfiprintf_r+0x1ac>
 800c6be:	9b03      	ldr	r3, [sp, #12]
 800c6c0:	1d1a      	adds	r2, r3, #4
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	9203      	str	r2, [sp, #12]
 800c6c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6ca:	3402      	adds	r4, #2
 800c6cc:	9305      	str	r3, [sp, #20]
 800c6ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c7a4 <_vfiprintf_r+0x22c>
 800c6d2:	7821      	ldrb	r1, [r4, #0]
 800c6d4:	2203      	movs	r2, #3
 800c6d6:	4650      	mov	r0, sl
 800c6d8:	f7f3 fd8a 	bl	80001f0 <memchr>
 800c6dc:	b138      	cbz	r0, 800c6ee <_vfiprintf_r+0x176>
 800c6de:	9b04      	ldr	r3, [sp, #16]
 800c6e0:	eba0 000a 	sub.w	r0, r0, sl
 800c6e4:	2240      	movs	r2, #64	@ 0x40
 800c6e6:	4082      	lsls	r2, r0
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	3401      	adds	r4, #1
 800c6ec:	9304      	str	r3, [sp, #16]
 800c6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6f2:	4829      	ldr	r0, [pc, #164]	@ (800c798 <_vfiprintf_r+0x220>)
 800c6f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6f8:	2206      	movs	r2, #6
 800c6fa:	f7f3 fd79 	bl	80001f0 <memchr>
 800c6fe:	2800      	cmp	r0, #0
 800c700:	d03f      	beq.n	800c782 <_vfiprintf_r+0x20a>
 800c702:	4b26      	ldr	r3, [pc, #152]	@ (800c79c <_vfiprintf_r+0x224>)
 800c704:	bb1b      	cbnz	r3, 800c74e <_vfiprintf_r+0x1d6>
 800c706:	9b03      	ldr	r3, [sp, #12]
 800c708:	3307      	adds	r3, #7
 800c70a:	f023 0307 	bic.w	r3, r3, #7
 800c70e:	3308      	adds	r3, #8
 800c710:	9303      	str	r3, [sp, #12]
 800c712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c714:	443b      	add	r3, r7
 800c716:	9309      	str	r3, [sp, #36]	@ 0x24
 800c718:	e76a      	b.n	800c5f0 <_vfiprintf_r+0x78>
 800c71a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c71e:	460c      	mov	r4, r1
 800c720:	2001      	movs	r0, #1
 800c722:	e7a8      	b.n	800c676 <_vfiprintf_r+0xfe>
 800c724:	2300      	movs	r3, #0
 800c726:	3401      	adds	r4, #1
 800c728:	9305      	str	r3, [sp, #20]
 800c72a:	4619      	mov	r1, r3
 800c72c:	f04f 0c0a 	mov.w	ip, #10
 800c730:	4620      	mov	r0, r4
 800c732:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c736:	3a30      	subs	r2, #48	@ 0x30
 800c738:	2a09      	cmp	r2, #9
 800c73a:	d903      	bls.n	800c744 <_vfiprintf_r+0x1cc>
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d0c6      	beq.n	800c6ce <_vfiprintf_r+0x156>
 800c740:	9105      	str	r1, [sp, #20]
 800c742:	e7c4      	b.n	800c6ce <_vfiprintf_r+0x156>
 800c744:	fb0c 2101 	mla	r1, ip, r1, r2
 800c748:	4604      	mov	r4, r0
 800c74a:	2301      	movs	r3, #1
 800c74c:	e7f0      	b.n	800c730 <_vfiprintf_r+0x1b8>
 800c74e:	ab03      	add	r3, sp, #12
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	462a      	mov	r2, r5
 800c754:	4b12      	ldr	r3, [pc, #72]	@ (800c7a0 <_vfiprintf_r+0x228>)
 800c756:	a904      	add	r1, sp, #16
 800c758:	4630      	mov	r0, r6
 800c75a:	f7fd fb23 	bl	8009da4 <_printf_float>
 800c75e:	4607      	mov	r7, r0
 800c760:	1c78      	adds	r0, r7, #1
 800c762:	d1d6      	bne.n	800c712 <_vfiprintf_r+0x19a>
 800c764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c766:	07d9      	lsls	r1, r3, #31
 800c768:	d405      	bmi.n	800c776 <_vfiprintf_r+0x1fe>
 800c76a:	89ab      	ldrh	r3, [r5, #12]
 800c76c:	059a      	lsls	r2, r3, #22
 800c76e:	d402      	bmi.n	800c776 <_vfiprintf_r+0x1fe>
 800c770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c772:	f7fe f99b 	bl	800aaac <__retarget_lock_release_recursive>
 800c776:	89ab      	ldrh	r3, [r5, #12]
 800c778:	065b      	lsls	r3, r3, #25
 800c77a:	f53f af1f 	bmi.w	800c5bc <_vfiprintf_r+0x44>
 800c77e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c780:	e71e      	b.n	800c5c0 <_vfiprintf_r+0x48>
 800c782:	ab03      	add	r3, sp, #12
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	462a      	mov	r2, r5
 800c788:	4b05      	ldr	r3, [pc, #20]	@ (800c7a0 <_vfiprintf_r+0x228>)
 800c78a:	a904      	add	r1, sp, #16
 800c78c:	4630      	mov	r0, r6
 800c78e:	f7fd fda1 	bl	800a2d4 <_printf_i>
 800c792:	e7e4      	b.n	800c75e <_vfiprintf_r+0x1e6>
 800c794:	0800d038 	.word	0x0800d038
 800c798:	0800d042 	.word	0x0800d042
 800c79c:	08009da5 	.word	0x08009da5
 800c7a0:	0800c555 	.word	0x0800c555
 800c7a4:	0800d03e 	.word	0x0800d03e

0800c7a8 <_raise_r>:
 800c7a8:	291f      	cmp	r1, #31
 800c7aa:	b538      	push	{r3, r4, r5, lr}
 800c7ac:	4605      	mov	r5, r0
 800c7ae:	460c      	mov	r4, r1
 800c7b0:	d904      	bls.n	800c7bc <_raise_r+0x14>
 800c7b2:	2316      	movs	r3, #22
 800c7b4:	6003      	str	r3, [r0, #0]
 800c7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ba:	bd38      	pop	{r3, r4, r5, pc}
 800c7bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c7be:	b112      	cbz	r2, 800c7c6 <_raise_r+0x1e>
 800c7c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7c4:	b94b      	cbnz	r3, 800c7da <_raise_r+0x32>
 800c7c6:	4628      	mov	r0, r5
 800c7c8:	f000 f830 	bl	800c82c <_getpid_r>
 800c7cc:	4622      	mov	r2, r4
 800c7ce:	4601      	mov	r1, r0
 800c7d0:	4628      	mov	r0, r5
 800c7d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7d6:	f000 b817 	b.w	800c808 <_kill_r>
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d00a      	beq.n	800c7f4 <_raise_r+0x4c>
 800c7de:	1c59      	adds	r1, r3, #1
 800c7e0:	d103      	bne.n	800c7ea <_raise_r+0x42>
 800c7e2:	2316      	movs	r3, #22
 800c7e4:	6003      	str	r3, [r0, #0]
 800c7e6:	2001      	movs	r0, #1
 800c7e8:	e7e7      	b.n	800c7ba <_raise_r+0x12>
 800c7ea:	2100      	movs	r1, #0
 800c7ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	4798      	blx	r3
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	e7e0      	b.n	800c7ba <_raise_r+0x12>

0800c7f8 <raise>:
 800c7f8:	4b02      	ldr	r3, [pc, #8]	@ (800c804 <raise+0xc>)
 800c7fa:	4601      	mov	r1, r0
 800c7fc:	6818      	ldr	r0, [r3, #0]
 800c7fe:	f7ff bfd3 	b.w	800c7a8 <_raise_r>
 800c802:	bf00      	nop
 800c804:	20000184 	.word	0x20000184

0800c808 <_kill_r>:
 800c808:	b538      	push	{r3, r4, r5, lr}
 800c80a:	4d07      	ldr	r5, [pc, #28]	@ (800c828 <_kill_r+0x20>)
 800c80c:	2300      	movs	r3, #0
 800c80e:	4604      	mov	r4, r0
 800c810:	4608      	mov	r0, r1
 800c812:	4611      	mov	r1, r2
 800c814:	602b      	str	r3, [r5, #0]
 800c816:	f7f5 fa99 	bl	8001d4c <_kill>
 800c81a:	1c43      	adds	r3, r0, #1
 800c81c:	d102      	bne.n	800c824 <_kill_r+0x1c>
 800c81e:	682b      	ldr	r3, [r5, #0]
 800c820:	b103      	cbz	r3, 800c824 <_kill_r+0x1c>
 800c822:	6023      	str	r3, [r4, #0]
 800c824:	bd38      	pop	{r3, r4, r5, pc}
 800c826:	bf00      	nop
 800c828:	200024dc 	.word	0x200024dc

0800c82c <_getpid_r>:
 800c82c:	f7f5 ba86 	b.w	8001d3c <_getpid>

0800c830 <_init>:
 800c830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c832:	bf00      	nop
 800c834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c836:	bc08      	pop	{r3}
 800c838:	469e      	mov	lr, r3
 800c83a:	4770      	bx	lr

0800c83c <_fini>:
 800c83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83e:	bf00      	nop
 800c840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c842:	bc08      	pop	{r3}
 800c844:	469e      	mov	lr, r3
 800c846:	4770      	bx	lr
