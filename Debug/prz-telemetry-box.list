
prz-telemetry-box.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b3c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08008cf0  08008cf0  00009cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009148  08009148  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009148  08009148  0000a148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009150  08009150  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009150  08009150  0000a150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009154  08009154  0000a154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009158  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d4  2**0
                  CONTENTS
 10 .bss          000004f8  200001d4  200001d4  0000b1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006cc  200006cc  0000b1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011520  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029c9  00000000  00000000  0001c724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  0001f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bde  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f4d  00000000  00000000  00020c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013f35  00000000  00000000  00046b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd46e  00000000  00000000  0005aa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00137efe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050fc  00000000  00000000  00137f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0013d040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008cd4 	.word	0x08008cd4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	08008cd4 	.word	0x08008cd4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <MX_DMA_Init+0x78>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8000f30 <MX_DMA_Init+0x78>)
 8000ec8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <MX_DMA_Init+0x78>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_DMA_Init+0x78>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee2:	4a13      	ldr	r2, [pc, #76]	@ (8000f30 <MX_DMA_Init+0x78>)
 8000ee4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_DMA_Init+0x78>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	200e      	movs	r0, #14
 8000efc:	f001 fecf 	bl	8002c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f00:	200e      	movs	r0, #14
 8000f02:	f001 fee8 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2010      	movs	r0, #16
 8000f0c:	f001 fec7 	bl	8002c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f10:	2010      	movs	r0, #16
 8000f12:	f001 fee0 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	203a      	movs	r0, #58	@ 0x3a
 8000f1c:	f001 febf 	bl	8002c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f20:	203a      	movs	r0, #58	@ 0x3a
 8000f22:	f001 fed8 	bl	8002cd6 <HAL_NVIC_EnableIRQ>

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b17      	ldr	r3, [pc, #92]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a16      	ldr	r2, [pc, #88]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f44:	f043 0320 	orr.w	r3, r3, #32
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b10      	ldr	r3, [pc, #64]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b0d      	ldr	r3, [pc, #52]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a08      	ldr	r2, [pc, #32]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]

}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	f5ad 7d44 	sub.w	sp, sp, #784	@ 0x310
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa8:	f001 fd08 	bl	80029bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fac:	f000 f8f6 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb0:	f7ff ffc0 	bl	8000f34 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fb4:	f7ff ff80 	bl	8000eb8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000fb8:	f000 fbc6 	bl	8001748 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fbc:	f000 fbee 	bl	800179c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fc0:	f000 fb26 	bl	8001610 <MX_TIM2_Init>
  MX_UART7_Init();
 8000fc4:	f000 fb96 	bl	80016f4 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */

	UartRcvr_init(&usart1_rcvr, &huart1);
 8000fc8:	4967      	ldr	r1, [pc, #412]	@ (8001168 <main+0x1c8>)
 8000fca:	4868      	ldr	r0, [pc, #416]	@ (800116c <main+0x1cc>)
 8000fcc:	f001 fadc 	bl	8002588 <UartRcvr_init>
	UartRcvr_init(&usart2_rcvr, &huart2);
 8000fd0:	4967      	ldr	r1, [pc, #412]	@ (8001170 <main+0x1d0>)
 8000fd2:	4868      	ldr	r0, [pc, #416]	@ (8001174 <main+0x1d4>)
 8000fd4:	f001 fad8 	bl	8002588 <UartRcvr_init>
	UartRcvr_init(&uart7_rcvr, &huart7);
 8000fd8:	4967      	ldr	r1, [pc, #412]	@ (8001178 <main+0x1d8>)
 8000fda:	4868      	ldr	r0, [pc, #416]	@ (800117c <main+0x1dc>)
 8000fdc:	f001 fad4 	bl	8002588 <UartRcvr_init>

	FT_ERR ft_err = FT_InitCustom(&ft, &huart1, &htim2, 10000);
 8000fe0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000fe4:	4a66      	ldr	r2, [pc, #408]	@ (8001180 <main+0x1e0>)
 8000fe6:	4960      	ldr	r1, [pc, #384]	@ (8001168 <main+0x1c8>)
 8000fe8:	4866      	ldr	r0, [pc, #408]	@ (8001184 <main+0x1e4>)
 8000fea:	f000 fe2b 	bl	8001c44 <FT_InitCustom>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f8a7 330c 	strh.w	r3, [r7, #780]	@ 0x30c
	if(ft_err != FT_OK)
 8000ff4:	f8b7 330c 	ldrh.w	r3, [r7, #780]	@ 0x30c
 8000ff8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ffc:	d004      	beq.n	8001008 <main+0x68>
	{
		prints("FT_InitCustom failed\r\n");
 8000ffe:	4862      	ldr	r0, [pc, #392]	@ (8001188 <main+0x1e8>)
 8001000:	f000 fdd0 	bl	8001ba4 <prints>
		return 1;
 8001004:	2301      	movs	r3, #1
 8001006:	e0aa      	b.n	800115e <main+0x1be>
	}

	prints("PRz Telemetry Box 4.0\r\n");
 8001008:	4860      	ldr	r0, [pc, #384]	@ (800118c <main+0x1ec>)
 800100a:	f000 fdcb 	bl	8001ba4 <prints>

	HAL_Delay(1000);
 800100e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001012:	f001 fd45 	bl	8002aa0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

#define RX_BUF_SIZE 255
  	uint8_t rx_buf[RX_BUF_SIZE];
  	uint16_t rx_index = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e
	uint8_t str[STR_BUF_SIZE];
	uint16_t len;



	FT_PrintConfiguration(ft, (char*)str, 2048);
 800101c:	4b59      	ldr	r3, [pc, #356]	@ (8001184 <main+0x1e4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	1d39      	adds	r1, r7, #4
 8001022:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001026:	4618      	mov	r0, r3
 8001028:	f000 ff56 	bl	8001ed8 <FT_PrintConfiguration>
	prints((char*) str);
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4618      	mov	r0, r3
 8001030:	f000 fdb8 	bl	8001ba4 <prints>

	while (1)
	{
		if(UartRcvr_available(&usart1_rcvr))
 8001034:	484d      	ldr	r0, [pc, #308]	@ (800116c <main+0x1cc>)
 8001036:	f001 fb2b 	bl	8002690 <UartRcvr_available>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d074      	beq.n	800112a <main+0x18a>
		{
			len = UartRcvr_get_input(&usart1_rcvr, rx_buf + rx_index, RX_BUF_SIZE - rx_index - 1);
 8001040:	f8b7 330e 	ldrh.w	r3, [r7, #782]	@ 0x30e
 8001044:	f507 7201 	add.w	r2, r7, #516	@ 0x204
 8001048:	18d1      	adds	r1, r2, r3
 800104a:	f8b7 330e 	ldrh.w	r3, [r7, #782]	@ 0x30e
 800104e:	f1c3 03fe 	rsb	r3, r3, #254	@ 0xfe
 8001052:	b29b      	uxth	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	4845      	ldr	r0, [pc, #276]	@ (800116c <main+0x1cc>)
 8001058:	f001 fb60 	bl	800271c <UartRcvr_get_input>
 800105c:	4603      	mov	r3, r0
 800105e:	f8a7 330a 	strh.w	r3, [r7, #778]	@ 0x30a
			if(len == 0) continue;
 8001062:	f8b7 330a 	ldrh.w	r3, [r7, #778]	@ 0x30a
 8001066:	2b00      	cmp	r3, #0
 8001068:	d075      	beq.n	8001156 <main+0x1b6>
			rx_index += len;
 800106a:	f8b7 230e 	ldrh.w	r2, [r7, #782]	@ 0x30e
 800106e:	f8b7 330a 	ldrh.w	r3, [r7, #778]	@ 0x30a
 8001072:	4413      	add	r3, r2
 8001074:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e
			if (rx_buf[rx_index - 1] == '\n' || rx_buf[rx_index - 1] == '\r') {
 8001078:	f8b7 330e 	ldrh.w	r3, [r7, #782]	@ 0x30e
 800107c:	3b01      	subs	r3, #1
 800107e:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 8001082:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001086:	5cd3      	ldrb	r3, [r2, r3]
 8001088:	2b0a      	cmp	r3, #10
 800108a:	d009      	beq.n	80010a0 <main+0x100>
 800108c:	f8b7 330e 	ldrh.w	r3, [r7, #782]	@ 0x30e
 8001090:	3b01      	subs	r3, #1
 8001092:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 8001096:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800109a:	5cd3      	ldrb	r3, [r2, r3]
 800109c:	2b0d      	cmp	r3, #13
 800109e:	d15c      	bne.n	800115a <main+0x1ba>
				rx_buf[rx_index - 1] = 0;
 80010a0:	f8b7 330e 	ldrh.w	r3, [r7, #782]	@ 0x30e
 80010a4:	3b01      	subs	r3, #1
 80010a6:	f507 7244 	add.w	r2, r7, #784	@ 0x310
 80010aa:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80010ae:	2100      	movs	r1, #0
 80010b0:	54d1      	strb	r1, [r2, r3]
				rx_index = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f8a7 330e 	strh.w	r3, [r7, #782]	@ 0x30e
			}
			else continue;

			prints("U1: ");
 80010b8:	4835      	ldr	r0, [pc, #212]	@ (8001190 <main+0x1f0>)
 80010ba:	f000 fd73 	bl	8001ba4 <prints>
			prints((char*) rx_buf);
 80010be:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 fd6e 	bl	8001ba4 <prints>
			prints("\r\n");
 80010c8:	4832      	ldr	r0, [pc, #200]	@ (8001194 <main+0x1f4>)
 80010ca:	f000 fd6b 	bl	8001ba4 <prints>

			uint32_t baud_rate = atoi((char*) rx_buf);
 80010ce:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 feb6 	bl	8005e44 <atoi>
 80010d8:	4603      	mov	r3, r0
 80010da:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
			if (baud_rate == 115200 || baud_rate == 921600)
 80010de:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 80010e2:	f5b3 3fe1 	cmp.w	r3, #115200	@ 0x1c200
 80010e6:	d004      	beq.n	80010f2 <main+0x152>
 80010e8:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 80010ec:	f5b3 2f61 	cmp.w	r3, #921600	@ 0xe1000
 80010f0:	d111      	bne.n	8001116 <main+0x176>
			{
				snprintf((char*) str, STR_BUF_SIZE, "Changing baud rate to %ld\r\n", baud_rate);
 80010f2:	1d38      	adds	r0, r7, #4
 80010f4:	f8d7 3304 	ldr.w	r3, [r7, #772]	@ 0x304
 80010f8:	4a27      	ldr	r2, [pc, #156]	@ (8001198 <main+0x1f8>)
 80010fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010fe:	f005 fd8d 	bl	8006c1c <sniprintf>
				prints((char*) str);
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fd4d 	bl	8001ba4 <prints>
				uart_set_baudrate(&huart2, baud_rate);
 800110a:	f8d7 1304 	ldr.w	r1, [r7, #772]	@ 0x304
 800110e:	4818      	ldr	r0, [pc, #96]	@ (8001170 <main+0x1d0>)
 8001110:	f000 fcea 	bl	8001ae8 <uart_set_baudrate>
 8001114:	e009      	b.n	800112a <main+0x18a>
			}
			else
			{
				uart_print(&huart2, (char*) rx_buf);
 8001116:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 800111a:	4619      	mov	r1, r3
 800111c:	4814      	ldr	r0, [pc, #80]	@ (8001170 <main+0x1d0>)
 800111e:	f000 fccf 	bl	8001ac0 <uart_print>
				uart_print(&huart2, "\r\n");
 8001122:	491c      	ldr	r1, [pc, #112]	@ (8001194 <main+0x1f4>)
 8001124:	4812      	ldr	r0, [pc, #72]	@ (8001170 <main+0x1d0>)
 8001126:	f000 fccb 	bl	8001ac0 <uart_print>
			}

		}
		if(UartRcvr_available(&usart2_rcvr))
 800112a:	4812      	ldr	r0, [pc, #72]	@ (8001174 <main+0x1d4>)
 800112c:	f001 fab0 	bl	8002690 <UartRcvr_available>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	f43f af7e 	beq.w	8001034 <main+0x94>
		{
			len = UartRcvr_get_input(&usart2_rcvr, str, STR_BUF_SIZE);
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800113e:	4619      	mov	r1, r3
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <main+0x1d4>)
 8001142:	f001 faeb 	bl	800271c <UartRcvr_get_input>
 8001146:	4603      	mov	r3, r0
 8001148:	f8a7 330a 	strh.w	r3, [r7, #778]	@ 0x30a
			prints((char*) str);
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fd28 	bl	8001ba4 <prints>
 8001154:	e76e      	b.n	8001034 <main+0x94>
			if(len == 0) continue;
 8001156:	bf00      	nop
 8001158:	e76c      	b.n	8001034 <main+0x94>
			else continue;
 800115a:	bf00      	nop
		if(UartRcvr_available(&usart1_rcvr))
 800115c:	e76a      	b.n	8001034 <main+0x94>

    /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */
}
 800115e:	4618      	mov	r0, r3
 8001160:	f507 7744 	add.w	r7, r7, #784	@ 0x310
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200003c8 	.word	0x200003c8
 800116c:	200001f0 	.word	0x200001f0
 8001170:	20000410 	.word	0x20000410
 8001174:	2000025c 	.word	0x2000025c
 8001178:	20000380 	.word	0x20000380
 800117c:	200002c8 	.word	0x200002c8
 8001180:	20000338 	.word	0x20000338
 8001184:	20000578 	.word	0x20000578
 8001188:	08008cf0 	.word	0x08008cf0
 800118c:	08008d08 	.word	0x08008d08
 8001190:	08008d20 	.word	0x08008d20
 8001194:	08008d28 	.word	0x08008d28
 8001198:	08008d2c 	.word	0x08008d2c

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b094      	sub	sp, #80	@ 0x50
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0320 	add.w	r3, r7, #32
 80011a6:	2230      	movs	r2, #48	@ 0x30
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f005 fe42 	bl	8006e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	4b29      	ldr	r3, [pc, #164]	@ (800126c <SystemClock_Config+0xd0>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c8:	4a28      	ldr	r2, [pc, #160]	@ (800126c <SystemClock_Config+0xd0>)
 80011ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d0:	4b26      	ldr	r3, [pc, #152]	@ (800126c <SystemClock_Config+0xd0>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	4b23      	ldr	r3, [pc, #140]	@ (8001270 <SystemClock_Config+0xd4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011e8:	4a21      	ldr	r2, [pc, #132]	@ (8001270 <SystemClock_Config+0xd4>)
 80011ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <SystemClock_Config+0xd4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011fc:	2302      	movs	r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001200:	2301      	movs	r3, #1
 8001202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001204:	2310      	movs	r3, #16
 8001206:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001208:	2302      	movs	r3, #2
 800120a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800120c:	2300      	movs	r3, #0
 800120e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001210:	2308      	movs	r3, #8
 8001212:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001214:	2378      	movs	r3, #120	@ 0x78
 8001216:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001218:	2302      	movs	r3, #2
 800121a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800121c:	2304      	movs	r3, #4
 800121e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001220:	f107 0320 	add.w	r3, r7, #32
 8001224:	4618      	mov	r0, r3
 8001226:	f002 fb1f 	bl	8003868 <HAL_RCC_OscConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001230:	f000 f86c 	bl	800130c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	230f      	movs	r3, #15
 8001236:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001238:	2302      	movs	r3, #2
 800123a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001240:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001244:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800124a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2103      	movs	r1, #3
 8001252:	4618      	mov	r0, r3
 8001254:	f002 fd80 	bl	8003d58 <HAL_RCC_ClockConfig>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800125e:	f000 f855 	bl	800130c <Error_Handler>
  }
}
 8001262:	bf00      	nop
 8001264:	3750      	adds	r7, #80	@ 0x50
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40007000 	.word	0x40007000

08001274 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	460b      	mov	r3, r1
 800127e:	807b      	strh	r3, [r7, #2]
    if(huart->Instance == USART1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a1b      	ldr	r2, [pc, #108]	@ (80012f4 <HAL_UARTEx_RxEventCallback+0x80>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10c      	bne.n	80012a4 <HAL_UARTEx_RxEventCallback+0x30>
    {
    	UartRcvr_it_trigger(&usart1_rcvr, size);
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	4619      	mov	r1, r3
 800128e:	481a      	ldr	r0, [pc, #104]	@ (80012f8 <HAL_UARTEx_RxEventCallback+0x84>)
 8001290:	f001 fb4e 	bl	8002930 <UartRcvr_it_trigger>
    	if(huart->RxEventType == HAL_UART_RXEVENT_IDLE)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001298:	2b02      	cmp	r3, #2
 800129a:	d126      	bne.n	80012ea <HAL_UARTEx_RxEventCallback+0x76>
    	{
    		UartRcvr_it_swap(&usart1_rcvr);
 800129c:	4816      	ldr	r0, [pc, #88]	@ (80012f8 <HAL_UARTEx_RxEventCallback+0x84>)
 800129e:	f001 fa91 	bl	80027c4 <UartRcvr_it_swap>
		if (huart->RxEventType == HAL_UART_RXEVENT_IDLE)
		{
			UartRcvr_it_swap(&uart7_rcvr);
		}
	}
}
 80012a2:	e022      	b.n	80012ea <HAL_UARTEx_RxEventCallback+0x76>
    else if (huart->Instance == USART2)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a14      	ldr	r2, [pc, #80]	@ (80012fc <HAL_UARTEx_RxEventCallback+0x88>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d10c      	bne.n	80012c8 <HAL_UARTEx_RxEventCallback+0x54>
    	UartRcvr_it_trigger(&usart2_rcvr, size);
 80012ae:	887b      	ldrh	r3, [r7, #2]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4813      	ldr	r0, [pc, #76]	@ (8001300 <HAL_UARTEx_RxEventCallback+0x8c>)
 80012b4:	f001 fb3c 	bl	8002930 <UartRcvr_it_trigger>
    	if(huart->RxEventType == HAL_UART_RXEVENT_IDLE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d114      	bne.n	80012ea <HAL_UARTEx_RxEventCallback+0x76>
    		UartRcvr_it_swap(&usart2_rcvr);
 80012c0:	480f      	ldr	r0, [pc, #60]	@ (8001300 <HAL_UARTEx_RxEventCallback+0x8c>)
 80012c2:	f001 fa7f 	bl	80027c4 <UartRcvr_it_swap>
}
 80012c6:	e010      	b.n	80012ea <HAL_UARTEx_RxEventCallback+0x76>
    else if (huart->Instance == UART7) {
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <HAL_UARTEx_RxEventCallback+0x90>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10b      	bne.n	80012ea <HAL_UARTEx_RxEventCallback+0x76>
		UartRcvr_it_trigger(&uart7_rcvr, size);
 80012d2:	887b      	ldrh	r3, [r7, #2]
 80012d4:	4619      	mov	r1, r3
 80012d6:	480c      	ldr	r0, [pc, #48]	@ (8001308 <HAL_UARTEx_RxEventCallback+0x94>)
 80012d8:	f001 fb2a 	bl	8002930 <UartRcvr_it_trigger>
		if (huart->RxEventType == HAL_UART_RXEVENT_IDLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d102      	bne.n	80012ea <HAL_UARTEx_RxEventCallback+0x76>
			UartRcvr_it_swap(&uart7_rcvr);
 80012e4:	4808      	ldr	r0, [pc, #32]	@ (8001308 <HAL_UARTEx_RxEventCallback+0x94>)
 80012e6:	f001 fa6d 	bl	80027c4 <UartRcvr_it_swap>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40011000 	.word	0x40011000
 80012f8:	200001f0 	.word	0x200001f0
 80012fc:	40004400 	.word	0x40004400
 8001300:	2000025c 	.word	0x2000025c
 8001304:	40007800 	.word	0x40007800
 8001308:	200002c8 	.word	0x200002c8

0800130c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001310:	b672      	cpsid	i
}
 8001312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <Error_Handler+0x8>

08001318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <HAL_MspInit+0x4c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	4a0f      	ldr	r2, [pc, #60]	@ (8001364 <HAL_MspInit+0x4c>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132c:	6453      	str	r3, [r2, #68]	@ 0x44
 800132e:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <HAL_MspInit+0x4c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <HAL_MspInit+0x4c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	4a08      	ldr	r2, [pc, #32]	@ (8001364 <HAL_MspInit+0x4c>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_MspInit+0x4c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <NMI_Handler+0x4>

08001370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <MemManage_Handler+0x4>

08001380 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <UsageFault_Handler+0x4>

08001390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013be:	f001 fb4f 	bl	8002a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80013cc:	4802      	ldr	r0, [pc, #8]	@ (80013d8 <DMA1_Stream3_IRQHandler+0x10>)
 80013ce:	f001 fe35 	bl	800303c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000458 	.word	0x20000458

080013dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80013e0:	4802      	ldr	r0, [pc, #8]	@ (80013ec <DMA1_Stream5_IRQHandler+0x10>)
 80013e2:	f001 fe2b 	bl	800303c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000518 	.word	0x20000518

080013f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	FT_IT_Feed(ft);
 80013f4:	4b04      	ldr	r3, [pc, #16]	@ (8001408 <TIM2_IRQHandler+0x18>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 fc0c 	bl	8001c16 <FT_IT_Feed>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013fe:	4803      	ldr	r0, [pc, #12]	@ (800140c <TIM2_IRQHandler+0x1c>)
 8001400:	f002 ff42 	bl	8004288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000578 	.word	0x20000578
 800140c:	20000338 	.word	0x20000338

08001410 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <USART1_IRQHandler+0x10>)
 8001416:	f003 fc2f 	bl	8004c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200003c8 	.word	0x200003c8

08001424 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <USART2_IRQHandler+0x10>)
 800142a:	f003 fc25 	bl	8004c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000410 	.word	0x20000410

08001438 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <DMA2_Stream2_IRQHandler+0x10>)
 800143e:	f001 fdfd 	bl	800303c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200004b8 	.word	0x200004b8

0800144c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <UART7_IRQHandler+0x10>)
 8001452:	f003 fc11 	bl	8004c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000380 	.word	0x20000380

08001460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return 1;
 8001464:	2301      	movs	r3, #1
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <_kill>:

int _kill(int pid, int sig)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800147a:	f005 fd3d 	bl	8006ef8 <__errno>
 800147e:	4603      	mov	r3, r0
 8001480:	2216      	movs	r2, #22
 8001482:	601a      	str	r2, [r3, #0]
  return -1;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <_exit>:

void _exit (int status)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001498:	f04f 31ff 	mov.w	r1, #4294967295
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ffe7 	bl	8001470 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014a2:	bf00      	nop
 80014a4:	e7fd      	b.n	80014a2 <_exit+0x12>

080014a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e00a      	b.n	80014ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014b8:	f3af 8000 	nop.w
 80014bc:	4601      	mov	r1, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	60ba      	str	r2, [r7, #8]
 80014c4:	b2ca      	uxtb	r2, r1
 80014c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	3301      	adds	r3, #1
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dbf0      	blt.n	80014b8 <_read+0x12>
  }

  return len;
 80014d6:	687b      	ldr	r3, [r7, #4]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	e009      	b.n	8001506 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	60ba      	str	r2, [r7, #8]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3301      	adds	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	429a      	cmp	r2, r3
 800150c:	dbf1      	blt.n	80014f2 <_write+0x12>
  }
  return len;
 800150e:	687b      	ldr	r3, [r7, #4]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_close>:

int _close(int file)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001540:	605a      	str	r2, [r3, #4]
  return 0;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <_isatty>:

int _isatty(int file)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001566:	b480      	push	{r7}
 8001568:	b085      	sub	sp, #20
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001588:	4a14      	ldr	r2, [pc, #80]	@ (80015dc <_sbrk+0x5c>)
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <_sbrk+0x60>)
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <_sbrk+0x64>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800159c:	4b11      	ldr	r3, [pc, #68]	@ (80015e4 <_sbrk+0x64>)
 800159e:	4a12      	ldr	r2, [pc, #72]	@ (80015e8 <_sbrk+0x68>)
 80015a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015a2:	4b10      	ldr	r3, [pc, #64]	@ (80015e4 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d207      	bcs.n	80015c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b0:	f005 fca2 	bl	8006ef8 <__errno>
 80015b4:	4603      	mov	r3, r0
 80015b6:	220c      	movs	r2, #12
 80015b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	e009      	b.n	80015d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c0:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <_sbrk+0x64>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	4a05      	ldr	r2, [pc, #20]	@ (80015e4 <_sbrk+0x64>)
 80015d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015d2:	68fb      	ldr	r3, [r7, #12]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20030000 	.word	0x20030000
 80015e0:	00000400 	.word	0x00000400
 80015e4:	20000334 	.word	0x20000334
 80015e8:	200006d0 	.word	0x200006d0

080015ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <SystemInit+0x20>)
 80015f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015f6:	4a05      	ldr	r2, [pc, #20]	@ (800160c <SystemInit+0x20>)
 80015f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	463b      	mov	r3, r7
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800162c:	4b1d      	ldr	r3, [pc, #116]	@ (80016a4 <MX_TIM2_Init+0x94>)
 800162e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001632:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <MX_TIM2_Init+0x94>)
 8001636:	2200      	movs	r2, #0
 8001638:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163a:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <MX_TIM2_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001640:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <MX_TIM2_Init+0x94>)
 8001642:	f04f 32ff 	mov.w	r2, #4294967295
 8001646:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001648:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <MX_TIM2_Init+0x94>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <MX_TIM2_Init+0x94>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001654:	4813      	ldr	r0, [pc, #76]	@ (80016a4 <MX_TIM2_Init+0x94>)
 8001656:	f002 fd5f 	bl	8004118 <HAL_TIM_Base_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001660:	f7ff fe54 	bl	800130c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001668:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	@ (80016a4 <MX_TIM2_Init+0x94>)
 8001672:	f002 fef9 	bl	8004468 <HAL_TIM_ConfigClockSource>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800167c:	f7ff fe46 	bl	800130c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001688:	463b      	mov	r3, r7
 800168a:	4619      	mov	r1, r3
 800168c:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <MX_TIM2_Init+0x94>)
 800168e:	f003 f92b 	bl	80048e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001698:	f7ff fe38 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	3718      	adds	r7, #24
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000338 	.word	0x20000338

080016a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016b8:	d115      	bne.n	80016e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <HAL_TIM_Base_MspInit+0x48>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <HAL_TIM_Base_MspInit+0x48>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_TIM_Base_MspInit+0x48>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	201c      	movs	r0, #28
 80016dc:	f001 fadf 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016e0:	201c      	movs	r0, #28
 80016e2:	f001 faf8 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800

080016f4 <MX_UART7_Init>:
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART7 init function */
void MX_UART7_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <MX_UART7_Init+0x4c>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <MX_UART7_Init+0x50>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <MX_UART7_Init+0x4c>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <MX_UART7_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <MX_UART7_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <MX_UART7_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <MX_UART7_Init+0x4c>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <MX_UART7_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <MX_UART7_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	@ (8001740 <MX_UART7_Init+0x4c>)
 800172c:	f003 f96c 	bl	8004a08 <HAL_UART_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_UART7_Init+0x46>
  {
    Error_Handler();
 8001736:	f7ff fde9 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000380 	.word	0x20000380
 8001744:	40007800 	.word	0x40007800

08001748 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <MX_USART1_UART_Init+0x4c>)
 800174e:	4a12      	ldr	r2, [pc, #72]	@ (8001798 <MX_USART1_UART_Init+0x50>)
 8001750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <MX_USART1_UART_Init+0x4c>)
 8001754:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8001758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <MX_USART1_UART_Init+0x4c>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <MX_USART1_UART_Init+0x4c>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <MX_USART1_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <MX_USART1_UART_Init+0x4c>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <MX_USART1_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <MX_USART1_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	@ (8001794 <MX_USART1_UART_Init+0x4c>)
 8001780:	f003 f942 	bl	8004a08 <HAL_UART_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800178a:	f7ff fdbf 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200003c8 	.word	0x200003c8
 8001798:	40011000 	.word	0x40011000

0800179c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <MX_USART2_UART_Init+0x50>)
 80017a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	@ (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017c2:	220c      	movs	r2, #12
 80017c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017c6:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017d2:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_USART2_UART_Init+0x4c>)
 80017d4:	f003 f918 	bl	8004a08 <HAL_UART_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017de:	f7ff fd95 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000410 	.word	0x20000410
 80017ec:	40004400 	.word	0x40004400

080017f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08e      	sub	sp, #56	@ 0x38
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART7)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a9f      	ldr	r2, [pc, #636]	@ (8001a8c <HAL_UART_MspInit+0x29c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d163      	bne.n	80018da <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
 8001816:	4b9e      	ldr	r3, [pc, #632]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	4a9d      	ldr	r2, [pc, #628]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 800181c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001820:	6413      	str	r3, [r2, #64]	@ 0x40
 8001822:	4b9b      	ldr	r3, [pc, #620]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800182a:	623b      	str	r3, [r7, #32]
 800182c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	4b97      	ldr	r3, [pc, #604]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	4a96      	ldr	r2, [pc, #600]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 8001838:	f043 0320 	orr.w	r3, r3, #32
 800183c:	6313      	str	r3, [r2, #48]	@ 0x30
 800183e:	4b94      	ldr	r3, [pc, #592]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	61fb      	str	r3, [r7, #28]
 8001848:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800184a:	23c0      	movs	r3, #192	@ 0xc0
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800185a:	2308      	movs	r3, #8
 800185c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800185e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001862:	4619      	mov	r1, r3
 8001864:	488b      	ldr	r0, [pc, #556]	@ (8001a94 <HAL_UART_MspInit+0x2a4>)
 8001866:	f001 fe53 	bl	8003510 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 800186a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 800186c:	4a8b      	ldr	r2, [pc, #556]	@ (8001a9c <HAL_UART_MspInit+0x2ac>)
 800186e:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8001870:	4b89      	ldr	r3, [pc, #548]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 8001872:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001876:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001878:	4b87      	ldr	r3, [pc, #540]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800187e:	4b86      	ldr	r3, [pc, #536]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001884:	4b84      	ldr	r3, [pc, #528]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 8001886:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800188a:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800188c:	4b82      	ldr	r3, [pc, #520]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001892:	4b81      	ldr	r3, [pc, #516]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_CIRCULAR;
 8001898:	4b7f      	ldr	r3, [pc, #508]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 800189a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800189e:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018a0:	4b7d      	ldr	r3, [pc, #500]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80018ac:	487a      	ldr	r0, [pc, #488]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 80018ae:	f001 fa2d 	bl	8002d0c <HAL_DMA_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80018b8:	f7ff fd28 	bl	800130c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart7_rx);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a76      	ldr	r2, [pc, #472]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 80018c0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018c2:	4a75      	ldr	r2, [pc, #468]	@ (8001a98 <HAL_UART_MspInit+0x2a8>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2100      	movs	r1, #0
 80018cc:	2052      	movs	r0, #82	@ 0x52
 80018ce:	f001 f9e6 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80018d2:	2052      	movs	r0, #82	@ 0x52
 80018d4:	f001 f9ff 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018d8:	e0d3      	b.n	8001a82 <HAL_UART_MspInit+0x292>
  else if(uartHandle->Instance==USART1)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a70      	ldr	r2, [pc, #448]	@ (8001aa0 <HAL_UART_MspInit+0x2b0>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d165      	bne.n	80019b0 <HAL_UART_MspInit+0x1c0>
    __HAL_RCC_USART1_CLK_ENABLE();
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
 80018e8:	4b69      	ldr	r3, [pc, #420]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 80018ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ec:	4a68      	ldr	r2, [pc, #416]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 80018ee:	f043 0310 	orr.w	r3, r3, #16
 80018f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80018f4:	4b66      	ldr	r3, [pc, #408]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 80018f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f8:	f003 0310 	and.w	r3, r3, #16
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	4b62      	ldr	r3, [pc, #392]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 8001906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001908:	4a61      	ldr	r2, [pc, #388]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001910:	4b5f      	ldr	r3, [pc, #380]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800191c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800192e:	2307      	movs	r3, #7
 8001930:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001936:	4619      	mov	r1, r3
 8001938:	485a      	ldr	r0, [pc, #360]	@ (8001aa4 <HAL_UART_MspInit+0x2b4>)
 800193a:	f001 fde9 	bl	8003510 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800193e:	4b5a      	ldr	r3, [pc, #360]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 8001940:	4a5a      	ldr	r2, [pc, #360]	@ (8001aac <HAL_UART_MspInit+0x2bc>)
 8001942:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001944:	4b58      	ldr	r3, [pc, #352]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 8001946:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800194a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800194c:	4b56      	ldr	r3, [pc, #344]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001952:	4b55      	ldr	r3, [pc, #340]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001958:	4b53      	ldr	r3, [pc, #332]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 800195a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800195e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001960:	4b51      	ldr	r3, [pc, #324]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 8001962:	2200      	movs	r2, #0
 8001964:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001966:	4b50      	ldr	r3, [pc, #320]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800196c:	4b4e      	ldr	r3, [pc, #312]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 800196e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001972:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001974:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 8001976:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800197a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800197c:	4b4a      	ldr	r3, [pc, #296]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001982:	4849      	ldr	r0, [pc, #292]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 8001984:	f001 f9c2 	bl	8002d0c <HAL_DMA_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_UART_MspInit+0x1a2>
      Error_Handler();
 800198e:	f7ff fcbd 	bl	800130c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a44      	ldr	r2, [pc, #272]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 8001996:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001998:	4a43      	ldr	r2, [pc, #268]	@ (8001aa8 <HAL_UART_MspInit+0x2b8>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	2025      	movs	r0, #37	@ 0x25
 80019a4:	f001 f97b 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019a8:	2025      	movs	r0, #37	@ 0x25
 80019aa:	f001 f994 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
}
 80019ae:	e068      	b.n	8001a82 <HAL_UART_MspInit+0x292>
  else if(uartHandle->Instance==USART2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a3e      	ldr	r2, [pc, #248]	@ (8001ab0 <HAL_UART_MspInit+0x2c0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d163      	bne.n	8001a82 <HAL_UART_MspInit+0x292>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	4b34      	ldr	r3, [pc, #208]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	4a33      	ldr	r2, [pc, #204]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ca:	4b31      	ldr	r3, [pc, #196]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b2d      	ldr	r3, [pc, #180]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a2c      	ldr	r2, [pc, #176]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <HAL_UART_MspInit+0x2a0>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80019f2:	2360      	movs	r3, #96	@ 0x60
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a02:	2307      	movs	r3, #7
 8001a04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4829      	ldr	r0, [pc, #164]	@ (8001ab4 <HAL_UART_MspInit+0x2c4>)
 8001a0e:	f001 fd7f 	bl	8003510 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001a12:	4b29      	ldr	r3, [pc, #164]	@ (8001ab8 <HAL_UART_MspInit+0x2c8>)
 8001a14:	4a29      	ldr	r2, [pc, #164]	@ (8001abc <HAL_UART_MspInit+0x2cc>)
 8001a16:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001a18:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <HAL_UART_MspInit+0x2c8>)
 8001a1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001a1e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a20:	4b25      	ldr	r3, [pc, #148]	@ (8001ab8 <HAL_UART_MspInit+0x2c8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a26:	4b24      	ldr	r3, [pc, #144]	@ (8001ab8 <HAL_UART_MspInit+0x2c8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a2c:	4b22      	ldr	r3, [pc, #136]	@ (8001ab8 <HAL_UART_MspInit+0x2c8>)
 8001a2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a32:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a34:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <HAL_UART_MspInit+0x2c8>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <HAL_UART_MspInit+0x2c8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <HAL_UART_MspInit+0x2c8>)
 8001a42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a46:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <HAL_UART_MspInit+0x2c8>)
 8001a4a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a4e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_UART_MspInit+0x2c8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a56:	4818      	ldr	r0, [pc, #96]	@ (8001ab8 <HAL_UART_MspInit+0x2c8>)
 8001a58:	f001 f958 	bl	8002d0c <HAL_DMA_Init>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_UART_MspInit+0x276>
      Error_Handler();
 8001a62:	f7ff fc53 	bl	800130c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a13      	ldr	r2, [pc, #76]	@ (8001ab8 <HAL_UART_MspInit+0x2c8>)
 8001a6a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a6c:	4a12      	ldr	r2, [pc, #72]	@ (8001ab8 <HAL_UART_MspInit+0x2c8>)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	2026      	movs	r0, #38	@ 0x26
 8001a78:	f001 f911 	bl	8002c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a7c:	2026      	movs	r0, #38	@ 0x26
 8001a7e:	f001 f92a 	bl	8002cd6 <HAL_NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3738      	adds	r7, #56	@ 0x38
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40007800 	.word	0x40007800
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40021400 	.word	0x40021400
 8001a98:	20000458 	.word	0x20000458
 8001a9c:	40026058 	.word	0x40026058
 8001aa0:	40011000 	.word	0x40011000
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	200004b8 	.word	0x200004b8
 8001aac:	40026440 	.word	0x40026440
 8001ab0:	40004400 	.word	0x40004400
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	20000518 	.word	0x20000518
 8001abc:	40026088 	.word	0x40026088

08001ac0 <uart_print>:
	HAL_StatusTypeDef res = HAL_UART_Transmit(p_huart, (uint8_t*)&c, 1, UART_TX_TIMEOUT);
	return res;
}

HAL_StatusTypeDef uart_print(UART_HandleTypeDef* huart, const char* str)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
	return HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), UART_TX_TIMEOUT);
 8001aca:	6838      	ldr	r0, [r7, #0]
 8001acc:	f7fe fbe0 	bl	8000290 <strlen>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	2364      	movs	r3, #100	@ 0x64
 8001ad6:	6839      	ldr	r1, [r7, #0]
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f002 ffe5 	bl	8004aa8 <HAL_UART_Transmit>
 8001ade:	4603      	mov	r3, r0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <uart_set_baudrate>:

void uart_set_baudrate(UART_HandleTypeDef* huart, uint32_t baud_rate)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	uint32_t pclk;
	if (huart->Instance == USART1 || huart->Instance == USART6) {
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a29      	ldr	r2, [pc, #164]	@ (8001b9c <uart_set_baudrate+0xb4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d004      	beq.n	8001b06 <uart_set_baudrate+0x1e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a27      	ldr	r2, [pc, #156]	@ (8001ba0 <uart_set_baudrate+0xb8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d103      	bne.n	8001b0e <uart_set_baudrate+0x26>
		// USART1 and USART6 are on APB2
		pclk = HAL_RCC_GetPCLK2Freq();
 8001b06:	f002 faf3 	bl	80040f0 <HAL_RCC_GetPCLK2Freq>
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	e002      	b.n	8001b14 <uart_set_baudrate+0x2c>
	} else {
		// USART2, USART3, UART4, UART5 are on APB1
		pclk = HAL_RCC_GetPCLK1Freq();
 8001b0e:	f002 fadb 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 8001b12:	60f8      	str	r0, [r7, #12]
	}
    uint32_t usartdiv = (pclk + (baud_rate / 2)) / baud_rate;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	085a      	lsrs	r2, r3, #1
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	441a      	add	r2, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	60bb      	str	r3, [r7, #8]

    while(__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE) == RESET); // wait for transmission complete
 8001b24:	bf00      	nop
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b30:	2b80      	cmp	r3, #128	@ 0x80
 8001b32:	d1f8      	bne.n	8001b26 <uart_set_baudrate+0x3e>

    huart->Instance->CR1 &= ~(USART_CR1_UE);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b42:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b44:	f3bf 8f4f 	dsb	sy
}
 8001b48:	bf00      	nop
	__DSB(); // barrier
	(void)(huart->Instance->CR1); // read-back
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001b50:	f3bf 8f5f 	dmb	sy
}
 8001b54:	bf00      	nop
	__DMB();

    huart->Instance->BRR = usartdiv;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b5e:	f3bf 8f4f 	dsb	sy
}
 8001b62:	bf00      	nop
    __DSB();
    (void)(huart->Instance->BRR);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689b      	ldr	r3, [r3, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8001b6a:	f3bf 8f5f 	dmb	sy
}
 8001b6e:	bf00      	nop
    __DMB();

    huart->Instance->CR1 |= USART_CR1_UE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b7e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b80:	f3bf 8f4f 	dsb	sy
}
 8001b84:	bf00      	nop
	__DSB();
	(void)(huart->Instance->CR1);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8001b8c:	f3bf 8f5f 	dmb	sy
}
 8001b90:	bf00      	nop
	__DMB();
}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40011000 	.word	0x40011000
 8001ba0:	40011400 	.word	0x40011400

08001ba4 <prints>:

HAL_StatusTypeDef prints(const char* str)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	return uart_print(&huart1, str);
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4804      	ldr	r0, [pc, #16]	@ (8001bc0 <prints+0x1c>)
 8001bb0:	f7ff ff86 	bl	8001ac0 <uart_print>
 8001bb4:	4603      	mov	r3, r0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200003c8 	.word	0x200003c8

08001bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001bc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bc8:	f7ff fd10 	bl	80015ec <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bcc:	480c      	ldr	r0, [pc, #48]	@ (8001c00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bce:	490d      	ldr	r1, [pc, #52]	@ (8001c04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd4:	e002      	b.n	8001bdc <LoopCopyDataInit>

08001bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bda:	3304      	adds	r3, #4

08001bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be0:	d3f9      	bcc.n	8001bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be4:	4c0a      	ldr	r4, [pc, #40]	@ (8001c10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be8:	e001      	b.n	8001bee <LoopFillZerobss>

08001bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bec:	3204      	adds	r2, #4

08001bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf0:	d3fb      	bcc.n	8001bea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bf2:	f005 f987 	bl	8006f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bf6:	f7ff f9d3 	bl	8000fa0 <main>
  bx  lr    
 8001bfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001bfc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c08:	08009158 	.word	0x08009158
  ldr r2, =_sbss
 8001c0c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c10:	200006cc 	.word	0x200006cc

08001c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC_IRQHandler>

08001c16 <FT_IT_Feed>:
#include "../fancy_timer/fancy_timer.h"

FT_base* ft = NULL;

FT_ERR FT_IT_Feed(FT_base* ft)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
	if(ft == NULL) return FT_INVALID_ARGUMENT;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <FT_IT_Feed+0x14>
 8001c24:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001c28:	e006      	b.n	8001c38 <FT_IT_Feed+0x22>
	ft->SRCR++;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	645a      	str	r2, [r3, #68]	@ 0x44
	return FT_OK;
 8001c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <FT_InitCustom>:
	if(target_frequency == 0) return FT_INVALID_ARGUMENT;
	return FT_InitCustom(ft, huart, htim, target_frequency);
}

FT_ERR FT_InitCustom(FT_base** ftimer, UART_HandleTypeDef *huart, TIM_HandleTypeDef* htim, uint32_t target_frequency)
{
 8001c44:	b5b0      	push	{r4, r5, r7, lr}
 8001c46:	b098      	sub	sp, #96	@ 0x60
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	603b      	str	r3, [r7, #0]
	if(ftimer == NULL || htim == NULL || target_frequency == 0)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <FT_InitCustom+0x20>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <FT_InitCustom+0x20>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d102      	bne.n	8001c6a <FT_InitCustom+0x26>
	{
		return FT_INVALID_ARGUMENT;
 8001c64:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001c68:	e117      	b.n	8001e9a <FT_InitCustom+0x256>
	}

	ft_timebase timebase = FT_TB_UNKNOWN;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if(target_frequency == 1) timebase = FT_TB_SEC;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d102      	bne.n	8001c7c <FT_InitCustom+0x38>
 8001c76:	2303      	movs	r3, #3
 8001c78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if(target_frequency == 1000) timebase = FT_TB_MS;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c82:	d102      	bne.n	8001c8a <FT_InitCustom+0x46>
 8001c84:	2302      	movs	r3, #2
 8001c86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if(target_frequency == 1000000) timebase = FT_TB_US;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	4a85      	ldr	r2, [pc, #532]	@ (8001ea4 <FT_InitCustom+0x260>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d102      	bne.n	8001c98 <FT_InitCustom+0x54>
 8001c92:	2301      	movs	r3, #1
 8001c94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	ft_source source = FT_GetSource(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f9eb 	bl	8002074 <FT_GetSource>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	ft_type type = FT_GetType(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f973 	bl	8001f90 <FT_GetType>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	ft_resolution resolution = FT_GetResolution(htim);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fa4f 	bl	8002154 <FT_GetResolution>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	ft_prescaler_range prescaler_range = FT_GetPrescalerRange(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fab9 	bl	8002234 <FT_GetPrescalerRange>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	if(source == FT_SRC_UNKNOWN ||
 8001cc8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00b      	beq.n	8001ce8 <FT_InitCustom+0xa4>
 8001cd0:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <FT_InitCustom+0xa4>
		type == FT_TYPE_UNKNOWN ||
 8001cd8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <FT_InitCustom+0xa4>
		resolution == FT_RES_UNKNOWN ||
 8001ce0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d102      	bne.n	8001cee <FT_InitCustom+0xaa>
		prescaler_range == FT_PRE_UNKNOWN )
	{
		return FT_INVALID_TIM_INSTANCE;
 8001ce8:	f241 0310 	movw	r3, #4112	@ 0x1010
 8001cec:	e0d5      	b.n	8001e9a <FT_InitCustom+0x256>
	}

	uint32_t src_freq = FT_GetFrequency(source);
 8001cee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 faaa 	bl	800224c <FT_GetFrequency>
 8001cf8:	6538      	str	r0, [r7, #80]	@ 0x50
	if(src_freq == 0)
 8001cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <FT_InitCustom+0xc2>
	{
		return FT_INVALID_TIM_INSTANCE;
 8001d00:	f241 0310 	movw	r3, #4112	@ 0x1010
 8001d04:	e0c9      	b.n	8001e9a <FT_InitCustom+0x256>
	}

	uint32_t max_prescaler;
	switch(prescaler_range)
 8001d06:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d108      	bne.n	8001d20 <FT_InitCustom+0xdc>
	{
	case FT_PRE_1_65536: max_prescaler = 65536; break;
 8001d0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d14:	bf00      	nop
	default: return FT_INVALID_TIM_INSTANCE;
	}

	uint32_t counter_period;
	switch(resolution)
 8001d16:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d011      	beq.n	8001d42 <FT_InitCustom+0xfe>
 8001d1e:	e002      	b.n	8001d26 <FT_InitCustom+0xe2>
	default: return FT_INVALID_TIM_INSTANCE;
 8001d20:	f241 0310 	movw	r3, #4112	@ 0x1010
 8001d24:	e0b9      	b.n	8001e9a <FT_InitCustom+0x256>
	switch(resolution)
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	dc0f      	bgt.n	8001d4a <FT_InitCustom+0x106>
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d002      	beq.n	8001d34 <FT_InitCustom+0xf0>
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d003      	beq.n	8001d3a <FT_InitCustom+0xf6>
 8001d32:	e00a      	b.n	8001d4a <FT_InitCustom+0x106>
	{
	case FT_RES_8: counter_period = UINT8_MAX; break;
 8001d34:	23ff      	movs	r3, #255	@ 0xff
 8001d36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d38:	e00a      	b.n	8001d50 <FT_InitCustom+0x10c>
	case FT_RES_16: counter_period = UINT16_MAX; break;
 8001d3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d40:	e006      	b.n	8001d50 <FT_InitCustom+0x10c>
	case FT_RES_32: counter_period = UINT32_MAX; break;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001d48:	e002      	b.n	8001d50 <FT_InitCustom+0x10c>
	default: return FT_INVALID_TIM_INSTANCE;
 8001d4a:	f241 0310 	movw	r3, #4112	@ 0x1010
 8001d4e:	e0a4      	b.n	8001e9a <FT_InitCustom+0x256>
	}

	if(target_frequency > src_freq)
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d902      	bls.n	8001d5e <FT_InitCustom+0x11a>
	{
		return FT_INVALID_ARGUMENT;
 8001d58:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001d5c:	e09d      	b.n	8001e9a <FT_InitCustom+0x256>
	}


	ft_config config;
	config.timebase = timebase;
 8001d5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001d62:	753b      	strb	r3, [r7, #20]
	config.src_freq = src_freq;
 8001d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d66:	61bb      	str	r3, [r7, #24]
	config.des_freq = target_frequency;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	61fb      	str	r3, [r7, #28]
	config.max_prescaler = max_prescaler;
 8001d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	config.counter_period = counter_period;
 8001d70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001d72:	637b      	str	r3, [r7, #52]	@ 0x34

	FT_ERR res = FT_GetTimerConfiguration(&config);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 fa95 	bl	80022a8 <FT_GetTimerConfiguration>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

	if(res != FT_OK) return res;
 8001d84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d8c:	d002      	beq.n	8001d94 <FT_InitCustom+0x150>
 8001d8e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001d92:	e082      	b.n	8001e9a <FT_InitCustom+0x256>

	if(*ftimer != NULL) {
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d007      	beq.n	8001dac <FT_InitCustom+0x168>
		FT_Free(*ftimer);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 f885 	bl	8001eb0 <FT_Free>
		*ftimer = NULL;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
	}

	FT_base* ft = (FT_base*)malloc(sizeof(FT_base));
 8001dac:	2058      	movs	r0, #88	@ 0x58
 8001dae:	f004 f84d 	bl	8005e4c <malloc>
 8001db2:	4603      	mov	r3, r0
 8001db4:	647b      	str	r3, [r7, #68]	@ 0x44
	if(ft == NULL) return FT_OUT_OF_MEMORY;
 8001db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <FT_InitCustom+0x17e>
 8001dbc:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001dc0:	e06b      	b.n	8001e9a <FT_InitCustom+0x256>
	memset(ft, 0, sizeof(FT_base));
 8001dc2:	2258      	movs	r2, #88	@ 0x58
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001dc8:	f005 f834 	bl	8006e34 <memset>


	ft->timers_count = 0;
 8001dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dce:	2200      	movs	r2, #0
 8001dd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
	ft->timers_size = FT_DEFAULT_SIZE;
 8001dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	879a      	strh	r2, [r3, #60]	@ 0x3c
	ft->timers = (ft_def**)malloc(sizeof(ft_def*) * ft->timers_size);
 8001dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dda:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4618      	mov	r0, r3
 8001de0:	f004 f834 	bl	8005e4c <malloc>
 8001de4:	4603      	mov	r3, r0
 8001de6:	461a      	mov	r2, r3
 8001de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dea:	639a      	str	r2, [r3, #56]	@ 0x38
	if(ft->timers == NULL) {
 8001dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d105      	bne.n	8001e00 <FT_InitCustom+0x1bc>
		free(ft);
 8001df4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001df6:	f004 f831 	bl	8005e5c <free>
		return FT_OUT_OF_MEMORY;
 8001dfa:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001dfe:	e04c      	b.n	8001e9a <FT_InitCustom+0x256>
	}
	memset(ft->timers, 0, sizeof(ft_def*) * ft->timers_size);
 8001e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e02:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e06:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	f005 f811 	bl	8006e34 <memset>

	ft->source = source;
 8001e12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e14:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001e18:	715a      	strb	r2, [r3, #5]
	ft->type = type;
 8001e1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e1c:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8001e20:	711a      	strb	r2, [r3, #4]
	ft->resolution = resolution;
 8001e22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e24:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8001e28:	719a      	strb	r2, [r3, #6]

	// that's software now
	//ft->has_repetition_counter = IS_TIM_REPETITION_COUNTER_INSTANCE(htim->Instance);

	ft->ticks_remainder = 0;
 8001e2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	641a      	str	r2, [r3, #64]	@ 0x40

	ft->config = config;
 8001e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e32:	f103 0408 	add.w	r4, r3, #8
 8001e36:	f107 0514 	add.w	r5, r7, #20
 8001e3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	ft->htimer = htim;
 8001e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	601a      	str	r2, [r3, #0]
	ft->huart = huart;
 8001e50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	651a      	str	r2, [r3, #80]	@ 0x50

	*ftimer = ft;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e5a:	601a      	str	r2, [r3, #0]

	// update timer configuration
	htim->Instance->PSC = config.prescaler;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e62:	629a      	str	r2, [r3, #40]	@ 0x28
	htim->Instance->ARR = config.counter_period;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	{
		// enable repetition counter (if available)
		htim->Instance->RCR = FT_REPETITION_COUNTER;
	}*/

	if(IS_TIM_REPETITION_COUNTER_INSTANCE(htim->Instance))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea8 <FT_InitCustom+0x264>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d004      	beq.n	8001e80 <FT_InitCustom+0x23c>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001eac <FT_InitCustom+0x268>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d103      	bne.n	8001e88 <FT_InitCustom+0x244>
	{
		htim->Instance->RCR = 0;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2200      	movs	r2, #0
 8001e86:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	// set flag to update prescaler and repetition counter
	htim->Instance->EGR = TIM_EGR_UG;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	615a      	str	r2, [r3, #20]

	// start timer
	HAL_TIM_Base_Start(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f002 f991 	bl	80041b8 <HAL_TIM_Base_Start>

	return FT_OK;
 8001e96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3760      	adds	r7, #96	@ 0x60
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	000f4240 	.word	0x000f4240
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	40010400 	.word	0x40010400

08001eb0 <FT_Free>:

void FT_Free(FT_base* ft)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	if(ft == NULL) return;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d008      	beq.n	8001ed0 <FT_Free+0x20>
	free(ft->timers);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 ffca 	bl	8005e5c <free>
	free(ft);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f003 ffc7 	bl	8005e5c <free>
 8001ece:	e000      	b.n	8001ed2 <FT_Free+0x22>
	if(ft == NULL) return;
 8001ed0:	bf00      	nop
}
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <FT_PrintConfiguration>:
	}
	return FT_INVALID_ID;
}

FT_ERR FT_PrintConfiguration(FT_base* ft, char* str, uint32_t max_length)
{
 8001ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001edc:	b093      	sub	sp, #76	@ 0x4c
 8001ede:	af0c      	add	r7, sp, #48	@ 0x30
 8001ee0:	6178      	str	r0, [r7, #20]
 8001ee2:	6139      	str	r1, [r7, #16]
 8001ee4:	60fa      	str	r2, [r7, #12]
	if(ft == NULL || str == NULL || max_length == 0) return FT_INVALID_ARGUMENT;
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <FT_PrintConfiguration+0x20>
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <FT_PrintConfiguration+0x20>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <FT_PrintConfiguration+0x26>
 8001ef8:	f241 0303 	movw	r3, #4099	@ 0x1003
 8001efc:	e040      	b.n	8001f80 <FT_PrintConfiguration+0xa8>
	str[0] = '\0';
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
	snprintf(str, max_length, "srcfq:%lu\r\n"
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	60bb      	str	r3, [r7, #8]
						"psc:%lu/%lu\r\n"
						"arr:%lu/%lu\r\n"
						"cycl/fq/ms:%u/%lu/%lu\r\n"
						"stable:%c\r\n",
			ft->config.src_freq,
			ft->config.frequency, ft->config.des_freq,
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	695b      	ldr	r3, [r3, #20]
	snprintf(str, max_length, "srcfq:%lu\r\n"
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7fe fb2a 	bl	8000568 <__aeabi_f2d>
 8001f14:	4680      	mov	r8, r0
 8001f16:	4689      	mov	r9, r1
 8001f18:	6979      	ldr	r1, [r7, #20]
 8001f1a:	6909      	ldr	r1, [r1, #16]
			ft->config.prescaler + 1, ft->config.max_prescaler,
 8001f1c:	6978      	ldr	r0, [r7, #20]
 8001f1e:	69c0      	ldr	r0, [r0, #28]
	snprintf(str, max_length, "srcfq:%lu\r\n"
 8001f20:	3001      	adds	r0, #1
 8001f22:	697c      	ldr	r4, [r7, #20]
 8001f24:	6a24      	ldr	r4, [r4, #32]
 8001f26:	697d      	ldr	r5, [r7, #20]
 8001f28:	6a6d      	ldr	r5, [r5, #36]	@ 0x24
 8001f2a:	697e      	ldr	r6, [r7, #20]
 8001f2c:	6ab6      	ldr	r6, [r6, #40]	@ 0x28
			ft->config.divider, ft->config.counter_period,
			ft->config.cycle_length, ft->config.cycle_freq, ft->config.cycle_ms,
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	@ 0x2c
	snprintf(str, max_length, "srcfq:%lu\r\n"
 8001f34:	4662      	mov	r2, ip
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f40:	603b      	str	r3, [r7, #0]
			ft->config.is_stable ? 'T' : 'F'
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f893 c018 	ldrb.w	ip, [r3, #24]
	snprintf(str, max_length, "srcfq:%lu\r\n"
 8001f48:	f1bc 0f00 	cmp.w	ip, #0
 8001f4c:	d001      	beq.n	8001f52 <FT_PrintConfiguration+0x7a>
 8001f4e:	2354      	movs	r3, #84	@ 0x54
 8001f50:	e000      	b.n	8001f54 <FT_PrintConfiguration+0x7c>
 8001f52:	2346      	movs	r3, #70	@ 0x46
 8001f54:	930a      	str	r3, [sp, #40]	@ 0x28
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	9308      	str	r3, [sp, #32]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	9307      	str	r3, [sp, #28]
 8001f62:	9606      	str	r6, [sp, #24]
 8001f64:	9505      	str	r5, [sp, #20]
 8001f66:	9404      	str	r4, [sp, #16]
 8001f68:	9003      	str	r0, [sp, #12]
 8001f6a:	9102      	str	r1, [sp, #8]
 8001f6c:	e9cd 8900 	strd	r8, r9, [sp]
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	4a06      	ldr	r2, [pc, #24]	@ (8001f8c <FT_PrintConfiguration+0xb4>)
 8001f74:	68f9      	ldr	r1, [r7, #12]
 8001f76:	6938      	ldr	r0, [r7, #16]
 8001f78:	f004 fe50 	bl	8006c1c <sniprintf>
			);
	return FT_OK;
 8001f7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f8a:	bf00      	nop
 8001f8c:	08008d48 	.word	0x08008d48

08001f90 <FT_GetType>:

	return 0;
}

ft_type FT_GetType(TIM_HandleTypeDef* htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	if (
#ifdef TIM1
			htim->Instance == TIM1 ||
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
	if (
 8001f9c:	4a28      	ldr	r2, [pc, #160]	@ (8002040 <FT_GetType+0xb0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d004      	beq.n	8001fac <FT_GetType+0x1c>
#endif
#ifdef TIM8
			htim->Instance == TIM8 ||
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a27      	ldr	r2, [pc, #156]	@ (8002044 <FT_GetType+0xb4>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d101      	bne.n	8001fb0 <FT_GetType+0x20>
#endif
			0)
	{
		return FT_TYPE_ADVANCED;
 8001fac:	2305      	movs	r3, #5
 8001fae:	e040      	b.n	8002032 <FT_GetType+0xa2>
	}
	else if (
#ifdef TIM2
			htim->Instance == TIM2 ||
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
	else if (
 8001fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fb8:	d02c      	beq.n	8002014 <FT_GetType+0x84>
#endif
#ifdef TIM3
			htim->Instance == TIM3 ||
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM2 ||
 8001fbe:	4a22      	ldr	r2, [pc, #136]	@ (8002048 <FT_GetType+0xb8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d027      	beq.n	8002014 <FT_GetType+0x84>
#endif
#ifdef TIM4
			htim->Instance == TIM4 ||
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM3 ||
 8001fc8:	4a20      	ldr	r2, [pc, #128]	@ (800204c <FT_GetType+0xbc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d022      	beq.n	8002014 <FT_GetType+0x84>
#endif
#ifdef TIM5
			htim->Instance == TIM5 ||
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM4 ||
 8001fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002050 <FT_GetType+0xc0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d01d      	beq.n	8002014 <FT_GetType+0x84>
#endif
#ifdef TIM9
			htim->Instance == TIM9 ||
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM5 ||
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002054 <FT_GetType+0xc4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d018      	beq.n	8002014 <FT_GetType+0x84>
#endif
#ifdef TIM10
			htim->Instance == TIM10 ||
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM9 ||
 8001fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8002058 <FT_GetType+0xc8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d013      	beq.n	8002014 <FT_GetType+0x84>
#endif
#ifdef TIM11
			htim->Instance == TIM11 ||
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM10 ||
 8001ff0:	4a1a      	ldr	r2, [pc, #104]	@ (800205c <FT_GetType+0xcc>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d00e      	beq.n	8002014 <FT_GetType+0x84>
#endif
#ifdef TIM12
			htim->Instance == TIM12 ||
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM11 ||
 8001ffa:	4a19      	ldr	r2, [pc, #100]	@ (8002060 <FT_GetType+0xd0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d009      	beq.n	8002014 <FT_GetType+0x84>
#endif
#ifdef TIM13
			htim->Instance == TIM13 ||
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM12 ||
 8002004:	4a17      	ldr	r2, [pc, #92]	@ (8002064 <FT_GetType+0xd4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d004      	beq.n	8002014 <FT_GetType+0x84>
#endif
#ifdef TIM14
			htim->Instance == TIM14 ||
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a16      	ldr	r2, [pc, #88]	@ (8002068 <FT_GetType+0xd8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d101      	bne.n	8002018 <FT_GetType+0x88>
#ifdef TIM17
			htim->Instance == TIM17 ||
#endif
			0)
	{
		return FT_TYPE_GP;
 8002014:	2302      	movs	r3, #2
 8002016:	e00c      	b.n	8002032 <FT_GetType+0xa2>
	}
	else if (
#ifdef TIM6
			htim->Instance == TIM6 ||
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
	else if (
 800201c:	4a13      	ldr	r2, [pc, #76]	@ (800206c <FT_GetType+0xdc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <FT_GetType+0x9c>
#endif
#ifdef TIM7
			htim->Instance == TIM7 ||
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a12      	ldr	r2, [pc, #72]	@ (8002070 <FT_GetType+0xe0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d101      	bne.n	8002030 <FT_GetType+0xa0>
#endif
			0)
	{
		return FT_TYPE_BASIC;
 800202c:	2303      	movs	r3, #3
 800202e:	e000      	b.n	8002032 <FT_GetType+0xa2>
	}
	return FT_TYPE_UNKNOWN;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40010000 	.word	0x40010000
 8002044:	40010400 	.word	0x40010400
 8002048:	40000400 	.word	0x40000400
 800204c:	40000800 	.word	0x40000800
 8002050:	40000c00 	.word	0x40000c00
 8002054:	40014000 	.word	0x40014000
 8002058:	40014400 	.word	0x40014400
 800205c:	40014800 	.word	0x40014800
 8002060:	40001800 	.word	0x40001800
 8002064:	40001c00 	.word	0x40001c00
 8002068:	40002000 	.word	0x40002000
 800206c:	40001000 	.word	0x40001000
 8002070:	40001400 	.word	0x40001400

08002074 <FT_GetSource>:

ft_source FT_GetSource(TIM_HandleTypeDef* htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	if(
#ifdef TIM2
			htim->Instance == TIM2 ||
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
	if(
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002084:	d027      	beq.n	80020d6 <FT_GetSource+0x62>
#endif
#ifdef TIM3
			htim->Instance == TIM3 ||
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM2 ||
 800208a:	4a25      	ldr	r2, [pc, #148]	@ (8002120 <FT_GetSource+0xac>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d022      	beq.n	80020d6 <FT_GetSource+0x62>
#endif
#ifdef TIM4
			htim->Instance == TIM4 ||
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM3 ||
 8002094:	4a23      	ldr	r2, [pc, #140]	@ (8002124 <FT_GetSource+0xb0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01d      	beq.n	80020d6 <FT_GetSource+0x62>
#endif
#ifdef TIM5
			htim->Instance == TIM5 ||
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM4 ||
 800209e:	4a22      	ldr	r2, [pc, #136]	@ (8002128 <FT_GetSource+0xb4>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d018      	beq.n	80020d6 <FT_GetSource+0x62>
#endif
#ifdef TIM6
			htim->Instance == TIM6 ||
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM5 ||
 80020a8:	4a20      	ldr	r2, [pc, #128]	@ (800212c <FT_GetSource+0xb8>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <FT_GetSource+0x62>
#endif
#ifdef TIM7
			htim->Instance == TIM7 ||
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM6 ||
 80020b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002130 <FT_GetSource+0xbc>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00e      	beq.n	80020d6 <FT_GetSource+0x62>
#endif
#ifdef TIM12
			htim->Instance == TIM12 ||
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM7 ||
 80020bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002134 <FT_GetSource+0xc0>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d009      	beq.n	80020d6 <FT_GetSource+0x62>
#endif
#ifdef TIM13
			htim->Instance == TIM13 ||
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM12 ||
 80020c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002138 <FT_GetSource+0xc4>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d004      	beq.n	80020d6 <FT_GetSource+0x62>
#endif
#ifdef TIM14
			htim->Instance == TIM14 ||
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1a      	ldr	r2, [pc, #104]	@ (800213c <FT_GetSource+0xc8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d101      	bne.n	80020da <FT_GetSource+0x66>
#endif
			0)
	{
		return FT_SRC_APB1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e01b      	b.n	8002112 <FT_GetSource+0x9e>
	}
	else if(
#ifdef TIM1
			htim->Instance == TIM1 ||
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
	else if(
 80020de:	4a18      	ldr	r2, [pc, #96]	@ (8002140 <FT_GetSource+0xcc>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d013      	beq.n	800210c <FT_GetSource+0x98>
#endif
#ifdef TIM8
			htim->Instance == TIM8 ||
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM1 ||
 80020e8:	4a16      	ldr	r2, [pc, #88]	@ (8002144 <FT_GetSource+0xd0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00e      	beq.n	800210c <FT_GetSource+0x98>
#endif
#ifdef TIM9
			htim->Instance == TIM9 ||
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM8 ||
 80020f2:	4a15      	ldr	r2, [pc, #84]	@ (8002148 <FT_GetSource+0xd4>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d009      	beq.n	800210c <FT_GetSource+0x98>
#endif
#ifdef TIM10
			htim->Instance == TIM10 ||
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
			htim->Instance == TIM9 ||
 80020fc:	4a13      	ldr	r2, [pc, #76]	@ (800214c <FT_GetSource+0xd8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d004      	beq.n	800210c <FT_GetSource+0x98>
#endif
#ifdef TIM11
			htim->Instance == TIM11 ||
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a12      	ldr	r2, [pc, #72]	@ (8002150 <FT_GetSource+0xdc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d101      	bne.n	8002110 <FT_GetSource+0x9c>
#ifdef TIM17
			htim->Instance == TIM17 ||
#endif
		0)
	{
		return FT_SRC_APB2;
 800210c:	2302      	movs	r3, #2
 800210e:	e000      	b.n	8002112 <FT_GetSource+0x9e>
	}
	return FT_SRC_UNKNOWN;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40000400 	.word	0x40000400
 8002124:	40000800 	.word	0x40000800
 8002128:	40000c00 	.word	0x40000c00
 800212c:	40001000 	.word	0x40001000
 8002130:	40001400 	.word	0x40001400
 8002134:	40001800 	.word	0x40001800
 8002138:	40001c00 	.word	0x40001c00
 800213c:	40002000 	.word	0x40002000
 8002140:	40010000 	.word	0x40010000
 8002144:	40010400 	.word	0x40010400
 8002148:	40014000 	.word	0x40014000
 800214c:	40014400 	.word	0x40014400
 8002150:	40014800 	.word	0x40014800

08002154 <FT_GetResolution>:

ft_resolution FT_GetResolution(TIM_HandleTypeDef* htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	if(
#ifdef TIM1
		htim->Instance == TIM1 ||
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
	if(
 8002160:	4a27      	ldr	r2, [pc, #156]	@ (8002200 <FT_GetResolution+0xac>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d036      	beq.n	80021d4 <FT_GetResolution+0x80>
#endif
#ifdef TIM3
		htim->Instance == TIM3 ||
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM1 ||
 800216a:	4a26      	ldr	r2, [pc, #152]	@ (8002204 <FT_GetResolution+0xb0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d031      	beq.n	80021d4 <FT_GetResolution+0x80>
#endif
#ifdef TIM4
		htim->Instance == TIM4 ||
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM3 ||
 8002174:	4a24      	ldr	r2, [pc, #144]	@ (8002208 <FT_GetResolution+0xb4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02c      	beq.n	80021d4 <FT_GetResolution+0x80>
#endif
#ifdef TIM6
		htim->Instance == TIM6 ||
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM4 ||
 800217e:	4a23      	ldr	r2, [pc, #140]	@ (800220c <FT_GetResolution+0xb8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d027      	beq.n	80021d4 <FT_GetResolution+0x80>
#endif
#ifdef TIM7
		htim->Instance == TIM7 ||
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM6 ||
 8002188:	4a21      	ldr	r2, [pc, #132]	@ (8002210 <FT_GetResolution+0xbc>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d022      	beq.n	80021d4 <FT_GetResolution+0x80>
#endif
#ifdef TIM8
		htim->Instance == TIM8 ||
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM7 ||
 8002192:	4a20      	ldr	r2, [pc, #128]	@ (8002214 <FT_GetResolution+0xc0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d01d      	beq.n	80021d4 <FT_GetResolution+0x80>
#endif
#ifdef TIM9
		htim->Instance == TIM9 ||
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM8 ||
 800219c:	4a1e      	ldr	r2, [pc, #120]	@ (8002218 <FT_GetResolution+0xc4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d018      	beq.n	80021d4 <FT_GetResolution+0x80>
#endif
#ifdef TIM10
		htim->Instance == TIM10 ||
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM9 ||
 80021a6:	4a1d      	ldr	r2, [pc, #116]	@ (800221c <FT_GetResolution+0xc8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d013      	beq.n	80021d4 <FT_GetResolution+0x80>
#endif
#ifdef TIM11
		htim->Instance == TIM11 ||
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM10 ||
 80021b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002220 <FT_GetResolution+0xcc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00e      	beq.n	80021d4 <FT_GetResolution+0x80>
#endif
#ifdef TIM12
		htim->Instance == TIM12 ||
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM11 ||
 80021ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002224 <FT_GetResolution+0xd0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d009      	beq.n	80021d4 <FT_GetResolution+0x80>
#endif
#ifdef TIM13
		htim->Instance == TIM13 ||
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
		htim->Instance == TIM12 ||
 80021c4:	4a18      	ldr	r2, [pc, #96]	@ (8002228 <FT_GetResolution+0xd4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d004      	beq.n	80021d4 <FT_GetResolution+0x80>
#endif
#ifdef TIM14
		htim->Instance == TIM14 ||
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a17      	ldr	r2, [pc, #92]	@ (800222c <FT_GetResolution+0xd8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <FT_GetResolution+0x84>
#ifdef TIM17
		htim->Instance == TIM17 ||
#endif
		0)
	{
		return FT_RES_16;
 80021d4:	2302      	movs	r3, #2
 80021d6:	e00c      	b.n	80021f2 <FT_GetResolution+0x9e>
	}
	else if(
#ifdef TIM2
		htim->Instance == TIM2 ||
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
	else if(
 80021dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021e0:	d004      	beq.n	80021ec <FT_GetResolution+0x98>
#endif
#ifdef TIM5
		htim->Instance == TIM5 ||
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a12      	ldr	r2, [pc, #72]	@ (8002230 <FT_GetResolution+0xdc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d101      	bne.n	80021f0 <FT_GetResolution+0x9c>
#endif
		0)
	{
		return FT_RES_32;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e000      	b.n	80021f2 <FT_GetResolution+0x9e>
	}
	return FT_RES_UNKNOWN;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40000400 	.word	0x40000400
 8002208:	40000800 	.word	0x40000800
 800220c:	40001000 	.word	0x40001000
 8002210:	40001400 	.word	0x40001400
 8002214:	40010400 	.word	0x40010400
 8002218:	40014000 	.word	0x40014000
 800221c:	40014400 	.word	0x40014400
 8002220:	40014800 	.word	0x40014800
 8002224:	40001800 	.word	0x40001800
 8002228:	40001c00 	.word	0x40001c00
 800222c:	40002000 	.word	0x40002000
 8002230:	40000c00 	.word	0x40000c00

08002234 <FT_GetPrescalerRange>:

ft_prescaler_range FT_GetPrescalerRange(TIM_HandleTypeDef* htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
#if defined(STM32H747xx) || defined(STM32F429xx)
	return FT_PRE_1_65536;
 800223c:	2301      	movs	r3, #1
#else
#error No prescaler values specified for current module!
#endif
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <FT_GetFrequency>:

uint32_t FT_GetFrequency(ft_source source)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
	if (source == FT_SRC_APB1) {
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d10d      	bne.n	8002278 <FT_GetFrequency+0x2c>
		uint32_t pclk1 = HAL_RCC_GetPCLK1Freq();
 800225c:	f001 ff34 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 8002260:	60b8      	str	r0, [r7, #8]
#if defined(STM32H747xx)
		if((RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) == 0)
#else
		if((RCC->CFGR & RCC_CFGR_PPRE1) == 0)
 8002262:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <FT_GetFrequency+0x58>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <FT_GetFrequency+0x26>
#endif
		{
			/* PCLK1 prescaler equal to 1 => TIMCLK = PCLK1 */
			return (pclk1);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	e014      	b.n	800229c <FT_GetFrequency+0x50>
		}
		else
		{
			/* PCLK1 prescaler different from 1 => TIMCLK = 2 * PCLK1 */
			return(2 * pclk1);
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	e011      	b.n	800229c <FT_GetFrequency+0x50>
		}
	}
	else if (source == FT_SRC_APB2) {
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d10d      	bne.n	800229a <FT_GetFrequency+0x4e>
		uint32_t pclk2 = HAL_RCC_GetPCLK2Freq();
 800227e:	f001 ff37 	bl	80040f0 <HAL_RCC_GetPCLK2Freq>
 8002282:	60f8      	str	r0, [r7, #12]
#if defined(STM32H747xx)
		if((RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) == 0)
#else
		if((RCC->CFGR & RCC_CFGR_PPRE2) == 0)
 8002284:	4b07      	ldr	r3, [pc, #28]	@ (80022a4 <FT_GetFrequency+0x58>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <FT_GetFrequency+0x48>
#endif
		{
			/* PCLK2 prescaler equal to 1 => TIMCLK = PCLK2 */
			return (pclk2);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	e003      	b.n	800229c <FT_GetFrequency+0x50>
		}
		else
		{
			/* PCLK2 prescaler different from 1 => TIMCLK = 2 * PCLK2 */
			return(2 * pclk2);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	e000      	b.n	800229c <FT_GetFrequency+0x50>
		}
	}
	return 0;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40023800 	.word	0x40023800

080022a8 <FT_GetTimerConfiguration>:

FT_ERR FT_GetTimerConfiguration(ft_config* config) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08e      	sub	sp, #56	@ 0x38
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	if(config == NULL) return FT_INVALID_ARGUMENT;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d102      	bne.n	80022bc <FT_GetTimerConfiguration+0x14>
 80022b6:	f241 0303 	movw	r3, #4099	@ 0x1003
 80022ba:	e15b      	b.n	8002574 <FT_GetTimerConfiguration+0x2cc>


	uint32_t src_freq = config->src_freq;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	623b      	str	r3, [r7, #32]
	uint32_t des_freq = config->des_freq;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61fb      	str	r3, [r7, #28]
	uint32_t prescaler = 1;
 80022c8:	2301      	movs	r3, #1
 80022ca:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t max_prescaler = config->max_prescaler;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	61bb      	str	r3, [r7, #24]
	uint32_t divider = 1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t counter_period = config->counter_period;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	617b      	str	r3, [r7, #20]


	if(max_prescaler == UINT32_MAX /*||
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e2:	d102      	bne.n	80022ea <FT_GetTimerConfiguration+0x42>
			counter_period == UINT32_MAX*/) return FT_INVALID_ARGUMENT;
 80022e4:	f241 0303 	movw	r3, #4099	@ 0x1003
 80022e8:	e144      	b.n	8002574 <FT_GetTimerConfiguration+0x2cc>

    float prescaler_divider = (float)src_freq / des_freq;
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80022fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002302:	edc7 7a04 	vstr	s15, [r7, #16]

    if(des_freq > src_freq || prescaler_divider / counter_period >= max_prescaler ) {
 8002306:	69fa      	ldr	r2, [r7, #28]
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	429a      	cmp	r2, r3
 800230c:	d812      	bhi.n	8002334 <FT_GetTimerConfiguration+0x8c>
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	ee07 3a90 	vmov	s15, r3
 8002314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002318:	edd7 6a04 	vldr	s13, [r7, #16]
 800231c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800232a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800232e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002332:	db02      	blt.n	800233a <FT_GetTimerConfiguration+0x92>
        return FT_IMPOSSIBLE_FREQUENCY;
 8002334:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8002338:	e11c      	b.n	8002574 <FT_GetTimerConfiguration+0x2cc>
    }


    float current_freq, current_freq_diff, best_freq_diff = src_freq;
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	ee07 3a90 	vmov	s15, r3
 8002340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002344:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    uint32_t best_prescaler = 1, best_divider = 1;
 8002348:	2301      	movs	r3, #1
 800234a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800234c:	2301      	movs	r3, #1
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24

    for (divider = 1; divider <= counter_period; divider++)
 8002350:	2301      	movs	r3, #1
 8002352:	633b      	str	r3, [r7, #48]	@ 0x30
 8002354:	e0bb      	b.n	80024ce <FT_GetTimerConfiguration+0x226>
    {
        for(prescaler = 1; prescaler <= max_prescaler; prescaler++)
 8002356:	2301      	movs	r3, #1
 8002358:	637b      	str	r3, [r7, #52]	@ 0x34
 800235a:	e0ae      	b.n	80024ba <FT_GetTimerConfiguration+0x212>
        {
            current_freq = (float)src_freq / (prescaler * divider);
 800235c:	6a3b      	ldr	r3, [r7, #32]
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800236a:	fb02 f303 	mul.w	r3, r2, r3
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800237a:	edc7 7a03 	vstr	s15, [r7, #12]
            current_freq_diff = fabs(des_freq - current_freq);
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	ee07 3a90 	vmov	s15, r3
 8002384:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002388:	edd7 7a03 	vldr	s15, [r7, #12]
 800238c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002390:	eef0 7ae7 	vabs.f32	s15, s15
 8002394:	edc7 7a02 	vstr	s15, [r7, #8]
            if(current_freq == des_freq)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	ee07 3a90 	vmov	s15, r3
 800239e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80023a6:	eeb4 7a67 	vcmp.f32	s14, s15
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	d165      	bne.n	800247c <FT_GetTimerConfiguration+0x1d4>
            {
                printf("Perfect hit!\r\n");
 80023b0:	4872      	ldr	r0, [pc, #456]	@ (800257c <FT_GetTimerConfiguration+0x2d4>)
 80023b2:	f004 fc2b 	bl	8006c0c <puts>

                config->is_stable = 1;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	741a      	strb	r2, [r3, #16]

                config->prescaler = prescaler - 1;
 80023bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023be:	1e5a      	subs	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	615a      	str	r2, [r3, #20]
                config->divider = divider;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023c8:	61da      	str	r2, [r3, #28]
                config->counter_period = (int)(counter_period / divider) * divider;
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023d4:	fb03 f202 	mul.w	r2, r3, r2
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	621a      	str	r2, [r3, #32]

                config->frequency = (float)src_freq / (prescaler * divider);
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ea:	fb02 f303 	mul.w	r3, r2, r3
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	edc3 7a03 	vstr	s15, [r3, #12]
                config->cycle_length = counter_period / divider;
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
 8002408:	b29a      	uxth	r2, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	849a      	strh	r2, [r3, #36]	@ 0x24
                config->cycle_freq = ((float)src_freq / config->frequency) * config->cycle_length;
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	edd3 7a03 	vldr	s15, [r3, #12]
 800241e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800242e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002436:	ee17 2a90 	vmov	r2, s15
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	629a      	str	r2, [r3, #40]	@ 0x28
                config->cycle_ms = ((float)src_freq / config->frequency) * ((float)config->cycle_length / 1000);
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	ee07 3a90 	vmov	s15, r3
 8002444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	edd3 7a03 	vldr	s15, [r3, #12]
 800244e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800245e:	ed9f 6a48 	vldr	s12, [pc, #288]	@ 8002580 <FT_GetTimerConfiguration+0x2d8>
 8002462:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800246e:	ee17 2a90 	vmov	r2, s15
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	62da      	str	r2, [r3, #44]	@ 0x2c

                return FT_OK;
 8002476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800247a:	e07b      	b.n	8002574 <FT_GetTimerConfiguration+0x2cc>
            }
            else if(current_freq_diff < best_freq_diff)
 800247c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002480:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002484:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248c:	d506      	bpl.n	800249c <FT_GetTimerConfiguration+0x1f4>
            {
                best_freq_diff = current_freq_diff;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	62fb      	str	r3, [r7, #44]	@ 0x2c
                best_prescaler = prescaler;
 8002492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002494:	62bb      	str	r3, [r7, #40]	@ 0x28
                best_divider = divider;
 8002496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
 800249a:	e00b      	b.n	80024b4 <FT_GetTimerConfiguration+0x20c>
            }
            else if(current_freq < des_freq)
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a6:	ed97 7a03 	vldr	s14, [r7, #12]
 80024aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b2:	d408      	bmi.n	80024c6 <FT_GetTimerConfiguration+0x21e>
        for(prescaler = 1; prescaler <= max_prescaler; prescaler++)
 80024b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b6:	3301      	adds	r3, #1
 80024b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80024ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	429a      	cmp	r2, r3
 80024c0:	f67f af4c 	bls.w	800235c <FT_GetTimerConfiguration+0xb4>
 80024c4:	e000      	b.n	80024c8 <FT_GetTimerConfiguration+0x220>
            {
                break;
 80024c6:	bf00      	nop
    for (divider = 1; divider <= counter_period; divider++)
 80024c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ca:	3301      	adds	r3, #1
 80024cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80024ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	f67f af3f 	bls.w	8002356 <FT_GetTimerConfiguration+0xae>
            }
        }
    }

    config->is_stable = 0;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	741a      	strb	r2, [r3, #16]

    config->prescaler = best_prescaler - 1;
 80024de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	615a      	str	r2, [r3, #20]
    config->divider = best_divider;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ea:	61da      	str	r2, [r3, #28]
    config->counter_period = (int)(counter_period / best_divider) * best_divider;
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f6:	fb03 f202 	mul.w	r2, r3, r2
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	621a      	str	r2, [r3, #32]

    config->frequency = (float)src_freq / (best_prescaler * best_divider);
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	ee07 3a90 	vmov	s15, r3
 8002504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	edc3 7a03 	vstr	s15, [r3, #12]
    config->cycle_length = counter_period / best_divider;
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	b29a      	uxth	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	849a      	strh	r2, [r3, #36]	@ 0x24
    config->cycle_freq = ((float)src_freq / config->frequency) * config->cycle_length;
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	ee07 3a90 	vmov	s15, r3
 8002536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002548:	ee07 3a90 	vmov	s15, r3
 800254c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002558:	ee17 2a90 	vmov	r2, s15
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	@ 0x28
    config->cycle_ms = config->cycle_freq / 1000;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	4a07      	ldr	r2, [pc, #28]	@ (8002584 <FT_GetTimerConfiguration+0x2dc>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	099a      	lsrs	r2, r3, #6
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	62da      	str	r2, [r3, #44]	@ 0x2c

    return FT_OK;
 8002570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
}
 8002574:	4618      	mov	r0, r3
 8002576:	3738      	adds	r7, #56	@ 0x38
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	08008da4 	.word	0x08008da4
 8002580:	447a0000 	.word	0x447a0000
 8002584:	10624dd3 	.word	0x10624dd3

08002588 <UartRcvr_init>:
 */

#include "uart_receiver.h"

uint8_t UartRcvr_init(uart_receiver_t* uart_rcvr, UART_HandleTypeDef* huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
	if(uart_rcvr == NULL || huart == NULL) return 0;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <UartRcvr_init+0x16>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <UartRcvr_init+0x1a>
 800259e:	2300      	movs	r3, #0
 80025a0:	e038      	b.n	8002614 <UartRcvr_init+0x8c>
	UartRcvr_deinit(uart_rcvr);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f83a 	bl	800261c <UartRcvr_deinit>

	uart_rcvr->buffer_active.data = (uint8_t*)malloc(UART_RECEIVER_CIRCULAR_BUFFER_SIZE);
 80025a8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80025ac:	f003 fc4e 	bl	8005e4c <malloc>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	651a      	str	r2, [r3, #80]	@ 0x50
	uart_rcvr->buffer_active.len = 0;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
	if (uart_rcvr->buffer_active.data == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d104      	bne.n	80025d2 <UartRcvr_init+0x4a>
	{
		UartRcvr_deinit(uart_rcvr);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 f827 	bl	800261c <UartRcvr_deinit>
		return 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e020      	b.n	8002614 <UartRcvr_init+0x8c>
	}

	uart_rcvr->buffer_pending.data = (uint8_t*)malloc(UART_RECEIVER_MAX_BUFFER_LENGTH);
 80025d2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80025d6:	f003 fc39 	bl	8005e4c <malloc>
 80025da:	4603      	mov	r3, r0
 80025dc:	461a      	mov	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	659a      	str	r2, [r3, #88]	@ 0x58
	uart_rcvr->buffer_pending.len = 0;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	if (uart_rcvr->buffer_pending.data == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d104      	bne.n	80025fc <UartRcvr_init+0x74>
	{
		UartRcvr_deinit(uart_rcvr);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f812 	bl	800261c <UartRcvr_deinit>
		return 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e00b      	b.n	8002614 <UartRcvr_init+0x8c>
	}

	uart_rcvr->huart = huart;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	669a      	str	r2, [r3, #104]	@ 0x68

	HAL_UARTEx_ReceiveToIdle_DMA(huart, uart_rcvr->buffer_active.data, UART_RECEIVER_CIRCULAR_BUFFER_SIZE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002606:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800260a:	4619      	mov	r1, r3
 800260c:	6838      	ldr	r0, [r7, #0]
 800260e:	f002 fad6 	bl	8004bbe <HAL_UARTEx_ReceiveToIdle_DMA>
	return 1;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <UartRcvr_deinit>:

void UartRcvr_deinit(uart_receiver_t *uart_rcvr)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	if(uart_rcvr == NULL) return;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d02d      	beq.n	8002686 <UartRcvr_deinit+0x6a>
	if(uart_rcvr->buffer_active.data != NULL) free(uart_rcvr->buffer_active.data);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <UartRcvr_deinit+0x20>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002636:	4618      	mov	r0, r3
 8002638:	f003 fc10 	bl	8005e5c <free>
	if(uart_rcvr->buffer_pending.data != NULL) free(uart_rcvr->buffer_pending.data);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <UartRcvr_deinit+0x32>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002648:	4618      	mov	r0, r3
 800264a:	f003 fc07 	bl	8005e5c <free>
	for (uint8_t i = 0; i < UART_RECEIVER_MAX_BUFFERS; i++)
 800264e:	2300      	movs	r3, #0
 8002650:	73fb      	strb	r3, [r7, #15]
 8002652:	e00f      	b.n	8002674 <UartRcvr_deinit+0x58>
	{
		if(uart_rcvr->buffers[i].data != NULL) free(uart_rcvr->buffers[i].data);
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d006      	beq.n	800266e <UartRcvr_deinit+0x52>
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002668:	4618      	mov	r0, r3
 800266a:	f003 fbf7 	bl	8005e5c <free>
	for (uint8_t i = 0; i < UART_RECEIVER_MAX_BUFFERS; i++)
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	3301      	adds	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	7bfb      	ldrb	r3, [r7, #15]
 8002676:	2b09      	cmp	r3, #9
 8002678:	d9ec      	bls.n	8002654 <UartRcvr_deinit+0x38>
	}
	memset(uart_rcvr, 0, sizeof(uart_receiver_t));
 800267a:	226c      	movs	r2, #108	@ 0x6c
 800267c:	2100      	movs	r1, #0
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f004 fbd8 	bl	8006e34 <memset>
 8002684:	e000      	b.n	8002688 <UartRcvr_deinit+0x6c>
	if(uart_rcvr == NULL) return;
 8002686:	bf00      	nop
}
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <UartRcvr_available>:

uint8_t UartRcvr_available(uart_receiver_t *uart_rcvr)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return 0;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <UartRcvr_available+0x16>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d114      	bne.n	80026d0 <UartRcvr_available+0x40>
 80026a6:	2300      	movs	r3, #0
 80026a8:	e02f      	b.n	800270a <UartRcvr_available+0x7a>

	while (uart_rcvr->buffer_index_pending != uart_rcvr->buffer_index_active
			&& uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data == NULL)
	{
		uart_rcvr->buffer_index_pending = (uart_rcvr->buffer_index_pending + 1) % UART_RECEIVER_MAX_BUFFERS;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <UartRcvr_available+0x88>)
 80026b4:	fb83 1302 	smull	r1, r3, r3, r2
 80026b8:	1099      	asrs	r1, r3, #2
 80026ba:	17d3      	asrs	r3, r2, #31
 80026bc:	1ac9      	subs	r1, r1, r3
 80026be:	460b      	mov	r3, r1
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	1ad1      	subs	r1, r2, r3
 80026c8:	b28a      	uxth	r2, r1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	while (uart_rcvr->buffer_index_pending != uart_rcvr->buffer_index_active
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
			&& uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data == NULL)
 80026dc:	429a      	cmp	r2, r3
 80026de:	d008      	beq.n	80026f2 <UartRcvr_available+0x62>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80026e6:	461a      	mov	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0db      	beq.n	80026aa <UartRcvr_available+0x1a>
	}

	return uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data != NULL;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80026f8:	461a      	mov	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf14      	ite	ne
 8002704:	2301      	movne	r3, #1
 8002706:	2300      	moveq	r3, #0
 8002708:	b2db      	uxtb	r3, r3
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	66666667 	.word	0x66666667

0800271c <UartRcvr_get_input>:

uint16_t UartRcvr_get_input(uart_receiver_t *uart_rcvr, uint8_t* str, uint16_t max_len)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return 0;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <UartRcvr_get_input+0x1c>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <UartRcvr_get_input+0x20>
 8002738:	2300      	movs	r3, #0
 800273a:	e03e      	b.n	80027ba <UartRcvr_get_input+0x9e>

	if (uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data == NULL) return 0;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <UartRcvr_get_input+0x36>
 800274e:	2300      	movs	r3, #0
 8002750:	e033      	b.n	80027ba <UartRcvr_get_input+0x9e>

	uint16_t len = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	82fb      	strh	r3, [r7, #22]
	if(str != NULL)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01b      	beq.n	8002794 <UartRcvr_get_input+0x78>
	{
		len = uart_rcvr->buffers[uart_rcvr->buffer_index_pending].len;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	889b      	ldrh	r3, [r3, #4]
 800276a:	82fb      	strh	r3, [r7, #22]
		if (len + 1 > max_len) len = max_len - 1;
 800276c:	8afa      	ldrh	r2, [r7, #22]
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	429a      	cmp	r2, r3
 8002772:	d302      	bcc.n	800277a <UartRcvr_get_input+0x5e>
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	3b01      	subs	r3, #1
 8002778:	82fb      	strh	r3, [r7, #22]
		memcpy(str, uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data, len + 1);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002780:	461a      	mov	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f853 1032 	ldr.w	r1, [r3, r2, lsl #3]
 8002788:	8afb      	ldrh	r3, [r7, #22]
 800278a:	3301      	adds	r3, #1
 800278c:	461a      	mov	r2, r3
 800278e:	68b8      	ldr	r0, [r7, #8]
 8002790:	f004 fbdf 	bl	8006f52 <memcpy>
	}

	free(uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800279a:	461a      	mov	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fb5a 	bl	8005e5c <free>
	uart_rcvr->buffers[uart_rcvr->buffer_index_pending].data = NULL;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80027ae:	4619      	mov	r1, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
	return len;
 80027b8:	8afb      	ldrh	r3, [r7, #22]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <UartRcvr_it_swap>:


void UartRcvr_it_swap(uart_receiver_t *uart_rcvr)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d055      	beq.n	800287e <UartRcvr_it_swap+0xba>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d051      	beq.n	800287e <UartRcvr_it_swap+0xba>

	uint16_t next_index = (uart_rcvr->buffer_index_active + 1) % UART_RECEIVER_MAX_BUFFERS;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002890 <UartRcvr_it_swap+0xcc>)
 80027e4:	fb83 1302 	smull	r1, r3, r3, r2
 80027e8:	1099      	asrs	r1, r3, #2
 80027ea:	17d3      	asrs	r3, r2, #31
 80027ec:	1ac9      	subs	r1, r1, r3
 80027ee:	460b      	mov	r3, r1
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	1ad1      	subs	r1, r2, r3
 80027f8:	460b      	mov	r3, r1
 80027fa:	81fb      	strh	r3, [r7, #14]
	if (uart_rcvr->buffers[next_index].data != NULL) return;
 80027fc:	89fa      	ldrh	r2, [r7, #14]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d13c      	bne.n	8002882 <UartRcvr_it_swap+0xbe>

	uart_rcvr->buffers[next_index].data = (uint8_t*)malloc(uart_rcvr->buffer_pending.len + 1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800280e:	3301      	adds	r3, #1
 8002810:	89fc      	ldrh	r4, [r7, #14]
 8002812:	4618      	mov	r0, r3
 8002814:	f003 fb1a 	bl	8005e4c <malloc>
 8002818:	4603      	mov	r3, r0
 800281a:	461a      	mov	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
	if (uart_rcvr->buffers[next_index].data == NULL) return;
 8002822:	89fa      	ldrh	r2, [r7, #14]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d02b      	beq.n	8002886 <UartRcvr_it_swap+0xc2>

	memcpy(uart_rcvr->buffers[next_index].data, uart_rcvr->buffer_pending.data, uart_rcvr->buffer_pending.len);
 800282e:	89fa      	ldrh	r2, [r7, #14]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002840:	461a      	mov	r2, r3
 8002842:	f004 fb86 	bl	8006f52 <memcpy>
	uart_rcvr->buffers[next_index].data[uart_rcvr->buffer_pending.len] = '\0';
 8002846:	89fa      	ldrh	r2, [r7, #14]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8002854:	4413      	add	r3, r2
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
	uart_rcvr->buffers[next_index].len = uart_rcvr->buffer_pending.len;
 800285a:	89fb      	ldrh	r3, [r7, #14]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	4413      	add	r3, r2
 8002868:	460a      	mov	r2, r1
 800286a:	809a      	strh	r2, [r3, #4]

	uart_rcvr->buffer_index_active = next_index;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	89fa      	ldrh	r2, [r7, #14]
 8002870:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	uart_rcvr->buffer_pending.len = 0;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800287c:	e004      	b.n	8002888 <UartRcvr_it_swap+0xc4>
	if (uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 800287e:	bf00      	nop
 8002880:	e002      	b.n	8002888 <UartRcvr_it_swap+0xc4>
	if (uart_rcvr->buffers[next_index].data != NULL) return;
 8002882:	bf00      	nop
 8002884:	e000      	b.n	8002888 <UartRcvr_it_swap+0xc4>
	if (uart_rcvr->buffers[next_index].data == NULL) return;
 8002886:	bf00      	nop
}
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bd90      	pop	{r4, r7, pc}
 800288e:	bf00      	nop
 8002890:	66666667 	.word	0x66666667

08002894 <UartRcvr_it_process>:


void UartRcvr_it_process(uart_receiver_t *uart_rcvr, uint16_t offset, uint16_t size)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	807b      	strh	r3, [r7, #2]
 80028a0:	4613      	mov	r3, r2
 80028a2:	803b      	strh	r3, [r7, #0]
	uint16_t size_left = ((uart_rcvr->buffer_pending.len + size) <= UART_RECEIVER_MAX_BUFFER_LENGTH)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80028aa:	461a      	mov	r2, r3
 80028ac:	883b      	ldrh	r3, [r7, #0]
 80028ae:	4413      	add	r3, r2
 80028b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028b4:	d906      	bls.n	80028c4 <UartRcvr_it_process+0x30>
			? size
			: (UART_RECEIVER_MAX_BUFFER_LENGTH - uart_rcvr->buffer_pending.len);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
	uint16_t size_left = ((uart_rcvr->buffer_pending.len + size) <= UART_RECEIVER_MAX_BUFFER_LENGTH)
 80028bc:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	e000      	b.n	80028c6 <UartRcvr_it_process+0x32>
 80028c4:	883b      	ldrh	r3, [r7, #0]
 80028c6:	81fb      	strh	r3, [r7, #14]
	if(size_left != 0)
 80028c8:	89fb      	ldrh	r3, [r7, #14]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d016      	beq.n	80028fc <UartRcvr_it_process+0x68>
	{
		memcpy(uart_rcvr->buffer_pending.data + uart_rcvr->buffer_pending.len, uart_rcvr->buffer_active.data + offset, size_left);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80028d8:	1898      	adds	r0, r3, r2
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	4413      	add	r3, r2
 80028e2:	89fa      	ldrh	r2, [r7, #14]
 80028e4:	4619      	mov	r1, r3
 80028e6:	f004 fb34 	bl	8006f52 <memcpy>
		uart_rcvr->buffer_pending.len += size_left;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80028f0:	89fb      	ldrh	r3, [r7, #14]
 80028f2:	4413      	add	r3, r2
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
	}
	if (size_left != size) {
 80028fc:	89fa      	ldrh	r2, [r7, #14]
 80028fe:	883b      	ldrh	r3, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d011      	beq.n	8002928 <UartRcvr_it_process+0x94>
		UartRcvr_it_swap(uart_rcvr);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ff5d 	bl	80027c4 <UartRcvr_it_swap>
		UartRcvr_it_process(uart_rcvr, (offset + size_left) % UART_RECEIVER_CIRCULAR_BUFFER_SIZE, size - size_left);
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	89fb      	ldrh	r3, [r7, #14]
 800290e:	4413      	add	r3, r2
 8002910:	b29b      	uxth	r3, r3
 8002912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002916:	b299      	uxth	r1, r3
 8002918:	883a      	ldrh	r2, [r7, #0]
 800291a:	89fb      	ldrh	r3, [r7, #14]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	b29b      	uxth	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ffb6 	bl	8002894 <UartRcvr_it_process>
	}
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <UartRcvr_it_trigger>:

void UartRcvr_it_trigger(uart_receiver_t *uart_rcvr, uint16_t pos)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	807b      	strh	r3, [r7, #2]
	if(uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d038      	beq.n	80029b4 <UartRcvr_it_trigger+0x84>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002946:	2b00      	cmp	r3, #0
 8002948:	d034      	beq.n	80029b4 <UartRcvr_it_trigger+0x84>
	if(uart_rcvr->old_pos != pos)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002950:	887a      	ldrh	r2, [r7, #2]
 8002952:	429a      	cmp	r2, r3
 8002954:	d02f      	beq.n	80029b6 <UartRcvr_it_trigger+0x86>
	{
		if(pos > uart_rcvr->old_pos)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800295c:	887a      	ldrh	r2, [r7, #2]
 800295e:	429a      	cmp	r2, r3
 8002960:	d90d      	bls.n	800297e <UartRcvr_it_trigger+0x4e>
		{
			UartRcvr_it_process(uart_rcvr, uart_rcvr->old_pos, pos - uart_rcvr->old_pos);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800296e:	887a      	ldrh	r2, [r7, #2]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	b29b      	uxth	r3, r3
 8002974:	461a      	mov	r2, r3
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ff8c 	bl	8002894 <UartRcvr_it_process>
 800297c:	e015      	b.n	80029aa <UartRcvr_it_trigger+0x7a>
		}
		else
		{
			UartRcvr_it_process(uart_rcvr, uart_rcvr->old_pos, UART_RECEIVER_CIRCULAR_BUFFER_SIZE - uart_rcvr->old_pos);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8b3 1064 	ldrh.w	r1, [r3, #100]	@ 0x64
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800298a:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800298e:	b29b      	uxth	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff7e 	bl	8002894 <UartRcvr_it_process>
			if(pos > 0)
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d005      	beq.n	80029aa <UartRcvr_it_trigger+0x7a>
			{
				UartRcvr_it_process(uart_rcvr, 0, pos);
 800299e:	887b      	ldrh	r3, [r7, #2]
 80029a0:	461a      	mov	r2, r3
 80029a2:	2100      	movs	r1, #0
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ff75 	bl	8002894 <UartRcvr_it_process>
			}
		}
		uart_rcvr->old_pos = pos;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	887a      	ldrh	r2, [r7, #2]
 80029ae:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
 80029b2:	e000      	b.n	80029b6 <UartRcvr_it_trigger+0x86>
	if(uart_rcvr == NULL || uart_rcvr->huart == NULL) return;
 80029b4:	bf00      	nop
	}
}
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c0:	4b0e      	ldr	r3, [pc, #56]	@ (80029fc <HAL_Init+0x40>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0d      	ldr	r2, [pc, #52]	@ (80029fc <HAL_Init+0x40>)
 80029c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029cc:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <HAL_Init+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a0a      	ldr	r2, [pc, #40]	@ (80029fc <HAL_Init+0x40>)
 80029d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d8:	4b08      	ldr	r3, [pc, #32]	@ (80029fc <HAL_Init+0x40>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a07      	ldr	r2, [pc, #28]	@ (80029fc <HAL_Init+0x40>)
 80029de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e4:	2003      	movs	r0, #3
 80029e6:	f000 f94f 	bl	8002c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ea:	200f      	movs	r0, #15
 80029ec:	f000 f808 	bl	8002a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f0:	f7fe fc92 	bl	8001318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023c00 	.word	0x40023c00

08002a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a08:	4b12      	ldr	r3, [pc, #72]	@ (8002a54 <HAL_InitTick+0x54>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <HAL_InitTick+0x58>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	4619      	mov	r1, r3
 8002a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f967 	bl	8002cf2 <HAL_SYSTICK_Config>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00e      	b.n	8002a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b0f      	cmp	r3, #15
 8002a32:	d80a      	bhi.n	8002a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a34:	2200      	movs	r2, #0
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	f000 f92f 	bl	8002c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a40:	4a06      	ldr	r2, [pc, #24]	@ (8002a5c <HAL_InitTick+0x5c>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000000 	.word	0x20000000
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a64:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <HAL_IncTick+0x20>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <HAL_IncTick+0x24>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a04      	ldr	r2, [pc, #16]	@ (8002a84 <HAL_IncTick+0x24>)
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000008 	.word	0x20000008
 8002a84:	2000057c 	.word	0x2000057c

08002a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a8c:	4b03      	ldr	r3, [pc, #12]	@ (8002a9c <HAL_GetTick+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	2000057c 	.word	0x2000057c

08002aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff ffee 	bl	8002a88 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d005      	beq.n	8002ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <HAL_Delay+0x44>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ac6:	bf00      	nop
 8002ac8:	f7ff ffde 	bl	8002a88 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d8f7      	bhi.n	8002ac8 <HAL_Delay+0x28>
  {
  }
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000008 	.word	0x20000008

08002ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af8:	4b0c      	ldr	r3, [pc, #48]	@ (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b04:	4013      	ands	r3, r2
 8002b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b1a:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	60d3      	str	r3, [r2, #12]
}
 8002b20:	bf00      	nop
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b34:	4b04      	ldr	r3, [pc, #16]	@ (8002b48 <__NVIC_GetPriorityGrouping+0x18>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	0a1b      	lsrs	r3, r3, #8
 8002b3a:	f003 0307 	and.w	r3, r3, #7
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	db0b      	blt.n	8002b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	4907      	ldr	r1, [pc, #28]	@ (8002b84 <__NVIC_EnableIRQ+0x38>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000e100 	.word	0xe000e100

08002b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	6039      	str	r1, [r7, #0]
 8002b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	db0a      	blt.n	8002bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	490c      	ldr	r1, [pc, #48]	@ (8002bd4 <__NVIC_SetPriority+0x4c>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	0112      	lsls	r2, r2, #4
 8002ba8:	b2d2      	uxtb	r2, r2
 8002baa:	440b      	add	r3, r1
 8002bac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bb0:	e00a      	b.n	8002bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	4908      	ldr	r1, [pc, #32]	@ (8002bd8 <__NVIC_SetPriority+0x50>)
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	3b04      	subs	r3, #4
 8002bc0:	0112      	lsls	r2, r2, #4
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	761a      	strb	r2, [r3, #24]
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000e100 	.word	0xe000e100
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	@ 0x24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f1c3 0307 	rsb	r3, r3, #7
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	bf28      	it	cs
 8002bfa:	2304      	movcs	r3, #4
 8002bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d902      	bls.n	8002c0c <NVIC_EncodePriority+0x30>
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3b03      	subs	r3, #3
 8002c0a:	e000      	b.n	8002c0e <NVIC_EncodePriority+0x32>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	401a      	ands	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c24:	f04f 31ff 	mov.w	r1, #4294967295
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2e:	43d9      	mvns	r1, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c34:	4313      	orrs	r3, r2
         );
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3724      	adds	r7, #36	@ 0x24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c54:	d301      	bcc.n	8002c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00f      	b.n	8002c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <SysTick_Config+0x40>)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c62:	210f      	movs	r1, #15
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	f7ff ff8e 	bl	8002b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <SysTick_Config+0x40>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c72:	4b04      	ldr	r3, [pc, #16]	@ (8002c84 <SysTick_Config+0x40>)
 8002c74:	2207      	movs	r2, #7
 8002c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	e000e010 	.word	0xe000e010

08002c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff ff29 	bl	8002ae8 <__NVIC_SetPriorityGrouping>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	607a      	str	r2, [r7, #4]
 8002caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cb0:	f7ff ff3e 	bl	8002b30 <__NVIC_GetPriorityGrouping>
 8002cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7ff ff8e 	bl	8002bdc <NVIC_EncodePriority>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff ff5d 	bl	8002b88 <__NVIC_SetPriority>
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	4603      	mov	r3, r0
 8002cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff31 	bl	8002b4c <__NVIC_EnableIRQ>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b082      	sub	sp, #8
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ffa2 	bl	8002c44 <SysTick_Config>
 8002d00:	4603      	mov	r3, r0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff feb6 	bl	8002a88 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e099      	b.n	8002e5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0201 	bic.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d48:	e00f      	b.n	8002d6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d4a:	f7ff fe9d 	bl	8002a88 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d908      	bls.n	8002d6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2203      	movs	r2, #3
 8002d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e078      	b.n	8002e5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e8      	bne.n	8002d4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4b38      	ldr	r3, [pc, #224]	@ (8002e64 <HAL_DMA_Init+0x158>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db6:	697a      	ldr	r2, [r7, #20]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d107      	bne.n	8002dd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	697a      	ldr	r2, [r7, #20]
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 0307 	bic.w	r3, r3, #7
 8002dea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d117      	bne.n	8002e2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00e      	beq.n	8002e2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fb01 	bl	8003418 <DMA_CheckFifoParam>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2240      	movs	r2, #64	@ 0x40
 8002e20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e016      	b.n	8002e5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fab8 	bl	80033ac <DMA_CalcBaseAndBitshift>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e44:	223f      	movs	r2, #63	@ 0x3f
 8002e46:	409a      	lsls	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	f010803f 	.word	0xf010803f

08002e68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
 8002e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e76:	2300      	movs	r3, #0
 8002e78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_DMA_Start_IT+0x26>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e040      	b.n	8002f10 <HAL_DMA_Start_IT+0xa8>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d12f      	bne.n	8002f02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 fa4a 	bl	8003350 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec0:	223f      	movs	r2, #63	@ 0x3f
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0216 	orr.w	r2, r2, #22
 8002ed6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d007      	beq.n	8002ef0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0208 	orr.w	r2, r2, #8
 8002eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e005      	b.n	8002f0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f26:	f7ff fdaf 	bl	8002a88 <HAL_GetTick>
 8002f2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d008      	beq.n	8002f4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2280      	movs	r2, #128	@ 0x80
 8002f3c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e052      	b.n	8002ff0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0216 	bic.w	r2, r2, #22
 8002f58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <HAL_DMA_Abort+0x62>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0208 	bic.w	r2, r2, #8
 8002f88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f9a:	e013      	b.n	8002fc4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f9c:	f7ff fd74 	bl	8002a88 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d90c      	bls.n	8002fc4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e015      	b.n	8002ff0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e4      	bne.n	8002f9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd6:	223f      	movs	r2, #63	@ 0x3f
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d004      	beq.n	8003016 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2280      	movs	r2, #128	@ 0x80
 8003010:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e00c      	b.n	8003030 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2205      	movs	r2, #5
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003044:	2300      	movs	r3, #0
 8003046:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003048:	4b8e      	ldr	r3, [pc, #568]	@ (8003284 <HAL_DMA_IRQHandler+0x248>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a8e      	ldr	r2, [pc, #568]	@ (8003288 <HAL_DMA_IRQHandler+0x24c>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0a9b      	lsrs	r3, r3, #10
 8003054:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003066:	2208      	movs	r2, #8
 8003068:	409a      	lsls	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01a      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0204 	bic.w	r2, r2, #4
 800308e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003094:	2208      	movs	r2, #8
 8003096:	409a      	lsls	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a0:	f043 0201 	orr.w	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	2201      	movs	r2, #1
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d012      	beq.n	80030de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ca:	2201      	movs	r2, #1
 80030cc:	409a      	lsls	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d6:	f043 0202 	orr.w	r2, r3, #2
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e2:	2204      	movs	r2, #4
 80030e4:	409a      	lsls	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d012      	beq.n	8003114 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003100:	2204      	movs	r2, #4
 8003102:	409a      	lsls	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310c:	f043 0204 	orr.w	r2, r3, #4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003118:	2210      	movs	r2, #16
 800311a:	409a      	lsls	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d043      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d03c      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003136:	2210      	movs	r2, #16
 8003138:	409a      	lsls	r2, r3
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d018      	beq.n	800317e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d108      	bne.n	800316c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d024      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4798      	blx	r3
 800316a:	e01f      	b.n	80031ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01b      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
 800317c:	e016      	b.n	80031ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d107      	bne.n	800319c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0208 	bic.w	r2, r2, #8
 800319a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b0:	2220      	movs	r2, #32
 80031b2:	409a      	lsls	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 808f 	beq.w	80032dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8087 	beq.w	80032dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d2:	2220      	movs	r2, #32
 80031d4:	409a      	lsls	r2, r3
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	d136      	bne.n	8003254 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0216 	bic.w	r2, r2, #22
 80031f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003204:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_DMA_IRQHandler+0x1da>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0208 	bic.w	r2, r2, #8
 8003224:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800322a:	223f      	movs	r2, #63	@ 0x3f
 800322c:	409a      	lsls	r2, r3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003246:	2b00      	cmp	r3, #0
 8003248:	d07e      	beq.n	8003348 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
        }
        return;
 8003252:	e079      	b.n	8003348 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01d      	beq.n	800329e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10d      	bne.n	800328c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003274:	2b00      	cmp	r3, #0
 8003276:	d031      	beq.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
 8003280:	e02c      	b.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
 8003282:	bf00      	nop
 8003284:	20000000 	.word	0x20000000
 8003288:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d023      	beq.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	4798      	blx	r3
 800329c:	e01e      	b.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10f      	bne.n	80032cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0210 	bic.w	r2, r2, #16
 80032ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d032      	beq.n	800334a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2205      	movs	r2, #5
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	3301      	adds	r3, #1
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	429a      	cmp	r2, r3
 8003312:	d307      	bcc.n	8003324 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f2      	bne.n	8003308 <HAL_DMA_IRQHandler+0x2cc>
 8003322:	e000      	b.n	8003326 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003324:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d005      	beq.n	800334a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
 8003346:	e000      	b.n	800334a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003348:	bf00      	nop
    }
  }
}
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800336c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	2b40      	cmp	r3, #64	@ 0x40
 800337c:	d108      	bne.n	8003390 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800338e:	e007      	b.n	80033a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	60da      	str	r2, [r3, #12]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	3b10      	subs	r3, #16
 80033bc:	4a14      	ldr	r2, [pc, #80]	@ (8003410 <DMA_CalcBaseAndBitshift+0x64>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80033c6:	4a13      	ldr	r2, [pc, #76]	@ (8003414 <DMA_CalcBaseAndBitshift+0x68>)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b03      	cmp	r3, #3
 80033d8:	d909      	bls.n	80033ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033e2:	f023 0303 	bic.w	r3, r3, #3
 80033e6:	1d1a      	adds	r2, r3, #4
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80033ec:	e007      	b.n	80033fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	aaaaaaab 	.word	0xaaaaaaab
 8003414:	08008dcc 	.word	0x08008dcc

08003418 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003428:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	699b      	ldr	r3, [r3, #24]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d11f      	bne.n	8003472 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b03      	cmp	r3, #3
 8003436:	d856      	bhi.n	80034e6 <DMA_CheckFifoParam+0xce>
 8003438:	a201      	add	r2, pc, #4	@ (adr r2, 8003440 <DMA_CheckFifoParam+0x28>)
 800343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343e:	bf00      	nop
 8003440:	08003451 	.word	0x08003451
 8003444:	08003463 	.word	0x08003463
 8003448:	08003451 	.word	0x08003451
 800344c:	080034e7 	.word	0x080034e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d046      	beq.n	80034ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003460:	e043      	b.n	80034ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003466:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800346a:	d140      	bne.n	80034ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003470:	e03d      	b.n	80034ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800347a:	d121      	bne.n	80034c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2b03      	cmp	r3, #3
 8003480:	d837      	bhi.n	80034f2 <DMA_CheckFifoParam+0xda>
 8003482:	a201      	add	r2, pc, #4	@ (adr r2, 8003488 <DMA_CheckFifoParam+0x70>)
 8003484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003488:	08003499 	.word	0x08003499
 800348c:	0800349f 	.word	0x0800349f
 8003490:	08003499 	.word	0x08003499
 8003494:	080034b1 	.word	0x080034b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	73fb      	strb	r3, [r7, #15]
      break;
 800349c:	e030      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d025      	beq.n	80034f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ae:	e022      	b.n	80034f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80034b8:	d11f      	bne.n	80034fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80034be:	e01c      	b.n	80034fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d903      	bls.n	80034ce <DMA_CheckFifoParam+0xb6>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d003      	beq.n	80034d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80034cc:	e018      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	73fb      	strb	r3, [r7, #15]
      break;
 80034d2:	e015      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00e      	beq.n	80034fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      break;
 80034e4:	e00b      	b.n	80034fe <DMA_CheckFifoParam+0xe6>
      break;
 80034e6:	bf00      	nop
 80034e8:	e00a      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034ea:	bf00      	nop
 80034ec:	e008      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034ee:	bf00      	nop
 80034f0:	e006      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034f2:	bf00      	nop
 80034f4:	e004      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034f6:	bf00      	nop
 80034f8:	e002      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;   
 80034fa:	bf00      	nop
 80034fc:	e000      	b.n	8003500 <DMA_CheckFifoParam+0xe8>
      break;
 80034fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003500:	7bfb      	ldrb	r3, [r7, #15]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop

08003510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003510:	b480      	push	{r7}
 8003512:	b089      	sub	sp, #36	@ 0x24
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800351e:	2300      	movs	r3, #0
 8003520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003526:	2300      	movs	r3, #0
 8003528:	61fb      	str	r3, [r7, #28]
 800352a:	e177      	b.n	800381c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800352c:	2201      	movs	r2, #1
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4013      	ands	r3, r2
 800353e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	429a      	cmp	r2, r3
 8003546:	f040 8166 	bne.w	8003816 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b01      	cmp	r3, #1
 8003554:	d005      	beq.n	8003562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800355e:	2b02      	cmp	r3, #2
 8003560:	d130      	bne.n	80035c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	2203      	movs	r2, #3
 800356e:	fa02 f303 	lsl.w	r3, r2, r3
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003598:	2201      	movs	r2, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	091b      	lsrs	r3, r3, #4
 80035ae:	f003 0201 	and.w	r2, r3, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 0303 	and.w	r3, r3, #3
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d017      	beq.n	8003600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	2203      	movs	r2, #3
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d123      	bne.n	8003654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	08da      	lsrs	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3208      	adds	r2, #8
 8003614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	220f      	movs	r2, #15
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	43db      	mvns	r3, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4013      	ands	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	4313      	orrs	r3, r2
 8003644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	08da      	lsrs	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3208      	adds	r2, #8
 800364e:	69b9      	ldr	r1, [r7, #24]
 8003650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 0203 	and.w	r2, r3, #3
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80c0 	beq.w	8003816 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	4b66      	ldr	r3, [pc, #408]	@ (8003834 <HAL_GPIO_Init+0x324>)
 800369c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369e:	4a65      	ldr	r2, [pc, #404]	@ (8003834 <HAL_GPIO_Init+0x324>)
 80036a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80036a6:	4b63      	ldr	r3, [pc, #396]	@ (8003834 <HAL_GPIO_Init+0x324>)
 80036a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036b2:	4a61      	ldr	r2, [pc, #388]	@ (8003838 <HAL_GPIO_Init+0x328>)
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	089b      	lsrs	r3, r3, #2
 80036b8:	3302      	adds	r3, #2
 80036ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0303 	and.w	r3, r3, #3
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	220f      	movs	r2, #15
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a58      	ldr	r2, [pc, #352]	@ (800383c <HAL_GPIO_Init+0x32c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d037      	beq.n	800374e <HAL_GPIO_Init+0x23e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a57      	ldr	r2, [pc, #348]	@ (8003840 <HAL_GPIO_Init+0x330>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d031      	beq.n	800374a <HAL_GPIO_Init+0x23a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a56      	ldr	r2, [pc, #344]	@ (8003844 <HAL_GPIO_Init+0x334>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d02b      	beq.n	8003746 <HAL_GPIO_Init+0x236>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a55      	ldr	r2, [pc, #340]	@ (8003848 <HAL_GPIO_Init+0x338>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d025      	beq.n	8003742 <HAL_GPIO_Init+0x232>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a54      	ldr	r2, [pc, #336]	@ (800384c <HAL_GPIO_Init+0x33c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01f      	beq.n	800373e <HAL_GPIO_Init+0x22e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a53      	ldr	r2, [pc, #332]	@ (8003850 <HAL_GPIO_Init+0x340>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d019      	beq.n	800373a <HAL_GPIO_Init+0x22a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a52      	ldr	r2, [pc, #328]	@ (8003854 <HAL_GPIO_Init+0x344>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <HAL_GPIO_Init+0x226>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a51      	ldr	r2, [pc, #324]	@ (8003858 <HAL_GPIO_Init+0x348>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00d      	beq.n	8003732 <HAL_GPIO_Init+0x222>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a50      	ldr	r2, [pc, #320]	@ (800385c <HAL_GPIO_Init+0x34c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <HAL_GPIO_Init+0x21e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4f      	ldr	r2, [pc, #316]	@ (8003860 <HAL_GPIO_Init+0x350>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_GPIO_Init+0x21a>
 8003726:	2309      	movs	r3, #9
 8003728:	e012      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800372a:	230a      	movs	r3, #10
 800372c:	e010      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800372e:	2308      	movs	r3, #8
 8003730:	e00e      	b.n	8003750 <HAL_GPIO_Init+0x240>
 8003732:	2307      	movs	r3, #7
 8003734:	e00c      	b.n	8003750 <HAL_GPIO_Init+0x240>
 8003736:	2306      	movs	r3, #6
 8003738:	e00a      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800373a:	2305      	movs	r3, #5
 800373c:	e008      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800373e:	2304      	movs	r3, #4
 8003740:	e006      	b.n	8003750 <HAL_GPIO_Init+0x240>
 8003742:	2303      	movs	r3, #3
 8003744:	e004      	b.n	8003750 <HAL_GPIO_Init+0x240>
 8003746:	2302      	movs	r3, #2
 8003748:	e002      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <HAL_GPIO_Init+0x240>
 800374e:	2300      	movs	r3, #0
 8003750:	69fa      	ldr	r2, [r7, #28]
 8003752:	f002 0203 	and.w	r2, r2, #3
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	4093      	lsls	r3, r2
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4313      	orrs	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003760:	4935      	ldr	r1, [pc, #212]	@ (8003838 <HAL_GPIO_Init+0x328>)
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	089b      	lsrs	r3, r3, #2
 8003766:	3302      	adds	r3, #2
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800376e:	4b3d      	ldr	r3, [pc, #244]	@ (8003864 <HAL_GPIO_Init+0x354>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003792:	4a34      	ldr	r2, [pc, #208]	@ (8003864 <HAL_GPIO_Init+0x354>)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003798:	4b32      	ldr	r3, [pc, #200]	@ (8003864 <HAL_GPIO_Init+0x354>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4013      	ands	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037bc:	4a29      	ldr	r2, [pc, #164]	@ (8003864 <HAL_GPIO_Init+0x354>)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037c2:	4b28      	ldr	r3, [pc, #160]	@ (8003864 <HAL_GPIO_Init+0x354>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003864 <HAL_GPIO_Init+0x354>)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003864 <HAL_GPIO_Init+0x354>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003810:	4a14      	ldr	r2, [pc, #80]	@ (8003864 <HAL_GPIO_Init+0x354>)
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	3301      	adds	r3, #1
 800381a:	61fb      	str	r3, [r7, #28]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	2b0f      	cmp	r3, #15
 8003820:	f67f ae84 	bls.w	800352c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003824:	bf00      	nop
 8003826:	bf00      	nop
 8003828:	3724      	adds	r7, #36	@ 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	40023800 	.word	0x40023800
 8003838:	40013800 	.word	0x40013800
 800383c:	40020000 	.word	0x40020000
 8003840:	40020400 	.word	0x40020400
 8003844:	40020800 	.word	0x40020800
 8003848:	40020c00 	.word	0x40020c00
 800384c:	40021000 	.word	0x40021000
 8003850:	40021400 	.word	0x40021400
 8003854:	40021800 	.word	0x40021800
 8003858:	40021c00 	.word	0x40021c00
 800385c:	40022000 	.word	0x40022000
 8003860:	40022400 	.word	0x40022400
 8003864:	40013c00 	.word	0x40013c00

08003868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e267      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d075      	beq.n	8003972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003886:	4b88      	ldr	r3, [pc, #544]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 030c 	and.w	r3, r3, #12
 800388e:	2b04      	cmp	r3, #4
 8003890:	d00c      	beq.n	80038ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003892:	4b85      	ldr	r3, [pc, #532]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800389a:	2b08      	cmp	r3, #8
 800389c:	d112      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800389e:	4b82      	ldr	r3, [pc, #520]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038aa:	d10b      	bne.n	80038c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	4b7e      	ldr	r3, [pc, #504]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d05b      	beq.n	8003970 <HAL_RCC_OscConfig+0x108>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d157      	bne.n	8003970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e242      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038cc:	d106      	bne.n	80038dc <HAL_RCC_OscConfig+0x74>
 80038ce:	4b76      	ldr	r3, [pc, #472]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a75      	ldr	r2, [pc, #468]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e01d      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x98>
 80038e6:	4b70      	ldr	r3, [pc, #448]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a6f      	ldr	r2, [pc, #444]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b6d      	ldr	r3, [pc, #436]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6c      	ldr	r2, [pc, #432]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e00b      	b.n	8003918 <HAL_RCC_OscConfig+0xb0>
 8003900:	4b69      	ldr	r3, [pc, #420]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a68      	ldr	r2, [pc, #416]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	4b66      	ldr	r3, [pc, #408]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a65      	ldr	r2, [pc, #404]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d013      	beq.n	8003948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7ff f8b2 	bl	8002a88 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003928:	f7ff f8ae 	bl	8002a88 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	@ 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e207      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b5b      	ldr	r3, [pc, #364]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d0f0      	beq.n	8003928 <HAL_RCC_OscConfig+0xc0>
 8003946:	e014      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7ff f89e 	bl	8002a88 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003950:	f7ff f89a 	bl	8002a88 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b64      	cmp	r3, #100	@ 0x64
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e1f3      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003962:	4b51      	ldr	r3, [pc, #324]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0xe8>
 800396e:	e000      	b.n	8003972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d063      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800397e:	4b4a      	ldr	r3, [pc, #296]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00b      	beq.n	80039a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800398a:	4b47      	ldr	r3, [pc, #284]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003992:	2b08      	cmp	r3, #8
 8003994:	d11c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003996:	4b44      	ldr	r3, [pc, #272]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d116      	bne.n	80039d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039a2:	4b41      	ldr	r3, [pc, #260]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_RCC_OscConfig+0x152>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d001      	beq.n	80039ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e1c7      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ba:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4937      	ldr	r1, [pc, #220]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ce:	e03a      	b.n	8003a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d8:	4b34      	ldr	r3, [pc, #208]	@ (8003aac <HAL_RCC_OscConfig+0x244>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039de:	f7ff f853 	bl	8002a88 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e6:	f7ff f84f 	bl	8002a88 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e1a8      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f8:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a04:	4b28      	ldr	r3, [pc, #160]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4925      	ldr	r1, [pc, #148]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	600b      	str	r3, [r1, #0]
 8003a18:	e015      	b.n	8003a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a1a:	4b24      	ldr	r3, [pc, #144]	@ (8003aac <HAL_RCC_OscConfig+0x244>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7ff f832 	bl	8002a88 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a28:	f7ff f82e 	bl	8002a88 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e187      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1f0      	bne.n	8003a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d036      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d016      	beq.n	8003a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a5a:	4b15      	ldr	r3, [pc, #84]	@ (8003ab0 <HAL_RCC_OscConfig+0x248>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7ff f812 	bl	8002a88 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a68:	f7ff f80e 	bl	8002a88 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e167      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa8 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0f0      	beq.n	8003a68 <HAL_RCC_OscConfig+0x200>
 8003a86:	e01b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a88:	4b09      	ldr	r3, [pc, #36]	@ (8003ab0 <HAL_RCC_OscConfig+0x248>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8e:	f7fe fffb 	bl	8002a88 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a94:	e00e      	b.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a96:	f7fe fff7 	bl	8002a88 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d907      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e150      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	42470000 	.word	0x42470000
 8003ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b88      	ldr	r3, [pc, #544]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ea      	bne.n	8003a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8097 	beq.w	8003bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad2:	4b81      	ldr	r3, [pc, #516]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10f      	bne.n	8003afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b7d      	ldr	r3, [pc, #500]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	4a7c      	ldr	r2, [pc, #496]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aee:	4b7a      	ldr	r3, [pc, #488]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b77      	ldr	r3, [pc, #476]	@ (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d118      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b74      	ldr	r3, [pc, #464]	@ (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a73      	ldr	r2, [pc, #460]	@ (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fe ffb7 	bl	8002a88 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fe ffb3 	bl	8002a88 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e10c      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	4b6a      	ldr	r3, [pc, #424]	@ (8003cdc <HAL_RCC_OscConfig+0x474>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_OscConfig+0x2ea>
 8003b44:	4b64      	ldr	r3, [pc, #400]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b48:	4a63      	ldr	r2, [pc, #396]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b50:	e01c      	b.n	8003b8c <HAL_RCC_OscConfig+0x324>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x30c>
 8003b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5e:	4a5e      	ldr	r2, [pc, #376]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b60:	f043 0304 	orr.w	r3, r3, #4
 8003b64:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b66:	4b5c      	ldr	r3, [pc, #368]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b6a:	4a5b      	ldr	r2, [pc, #364]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b72:	e00b      	b.n	8003b8c <HAL_RCC_OscConfig+0x324>
 8003b74:	4b58      	ldr	r3, [pc, #352]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b78:	4a57      	ldr	r2, [pc, #348]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b80:	4b55      	ldr	r3, [pc, #340]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b84:	4a54      	ldr	r2, [pc, #336]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003b86:	f023 0304 	bic.w	r3, r3, #4
 8003b8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d015      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fe ff78 	bl	8002a88 <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b9c:	f7fe ff74 	bl	8002a88 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e0cb      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb2:	4b49      	ldr	r3, [pc, #292]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0ee      	beq.n	8003b9c <HAL_RCC_OscConfig+0x334>
 8003bbe:	e014      	b.n	8003bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc0:	f7fe ff62 	bl	8002a88 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bc8:	f7fe ff5e 	bl	8002a88 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e0b5      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bde:	4b3e      	ldr	r3, [pc, #248]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1ee      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d105      	bne.n	8003bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf0:	4b39      	ldr	r3, [pc, #228]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	4a38      	ldr	r2, [pc, #224]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003bf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80a1 	beq.w	8003d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c06:	4b34      	ldr	r3, [pc, #208]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d05c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d141      	bne.n	8003c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b31      	ldr	r3, [pc, #196]	@ (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe ff32 	bl	8002a88 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fe ff2e 	bl	8002a88 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e087      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c3a:	4b27      	ldr	r3, [pc, #156]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69da      	ldr	r2, [r3, #28]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	019b      	lsls	r3, r3, #6
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	041b      	lsls	r3, r3, #16
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	061b      	lsls	r3, r3, #24
 8003c6a:	491b      	ldr	r1, [pc, #108]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c76:	f7fe ff07 	bl	8002a88 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c7e:	f7fe ff03 	bl	8002a88 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e05c      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c90:	4b11      	ldr	r3, [pc, #68]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x416>
 8003c9c:	e054      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ce0 <HAL_RCC_OscConfig+0x478>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7fe fef0 	bl	8002a88 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cac:	f7fe feec 	bl	8002a88 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e045      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x444>
 8003cca:	e03d      	b.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d107      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e038      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d54 <HAL_RCC_OscConfig+0x4ec>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d028      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d121      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d11a      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d111      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2a:	085b      	lsrs	r3, r3, #1
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40023800 	.word	0x40023800

08003d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0cc      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d6c:	4b68      	ldr	r3, [pc, #416]	@ (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d90c      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d7a:	4b65      	ldr	r3, [pc, #404]	@ (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b63      	ldr	r3, [pc, #396]	@ (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0b8      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dac:	4b59      	ldr	r3, [pc, #356]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4a58      	ldr	r2, [pc, #352]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003db2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc4:	4b53      	ldr	r3, [pc, #332]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a52      	ldr	r2, [pc, #328]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd0:	4b50      	ldr	r3, [pc, #320]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	494d      	ldr	r1, [pc, #308]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d044      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d119      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e07f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e12:	2b03      	cmp	r3, #3
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e16:	4b3f      	ldr	r3, [pc, #252]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d109      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e06f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e26:	4b3b      	ldr	r3, [pc, #236]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e067      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e36:	4b37      	ldr	r3, [pc, #220]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f023 0203 	bic.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	4934      	ldr	r1, [pc, #208]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e48:	f7fe fe1e 	bl	8002a88 <HAL_GetTick>
 8003e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fe fe1a 	bl	8002a88 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e04f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	4b2b      	ldr	r3, [pc, #172]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 020c 	and.w	r2, r3, #12
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d1eb      	bne.n	8003e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e78:	4b25      	ldr	r3, [pc, #148]	@ (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d20c      	bcs.n	8003ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b22      	ldr	r3, [pc, #136]	@ (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b20      	ldr	r3, [pc, #128]	@ (8003f10 <HAL_RCC_ClockConfig+0x1b8>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e032      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eac:	4b19      	ldr	r3, [pc, #100]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4916      	ldr	r1, [pc, #88]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eca:	4b12      	ldr	r3, [pc, #72]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	490e      	ldr	r1, [pc, #56]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ede:	f000 f821 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	490a      	ldr	r1, [pc, #40]	@ (8003f18 <HAL_RCC_ClockConfig+0x1c0>)
 8003ef0:	5ccb      	ldrb	r3, [r1, r3]
 8003ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef6:	4a09      	ldr	r2, [pc, #36]	@ (8003f1c <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003efa:	4b09      	ldr	r3, [pc, #36]	@ (8003f20 <HAL_RCC_ClockConfig+0x1c8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe fd7e 	bl	8002a00 <HAL_InitTick>

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023c00 	.word	0x40023c00
 8003f14:	40023800 	.word	0x40023800
 8003f18:	08008db4 	.word	0x08008db4
 8003f1c:	20000000 	.word	0x20000000
 8003f20:	20000004 	.word	0x20000004

08003f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f28:	b090      	sub	sp, #64	@ 0x40
 8003f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f30:	2300      	movs	r3, #0
 8003f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f34:	2300      	movs	r3, #0
 8003f36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f3c:	4b59      	ldr	r3, [pc, #356]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d00d      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x40>
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	f200 80a1 	bhi.w	8004090 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x34>
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f56:	e09b      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f58:	4b53      	ldr	r3, [pc, #332]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f5a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003f5c:	e09b      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f5e:	4b53      	ldr	r3, [pc, #332]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003f60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003f62:	e098      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f64:	4b4f      	ldr	r3, [pc, #316]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f6e:	4b4d      	ldr	r3, [pc, #308]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d028      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f7a:	4b4a      	ldr	r3, [pc, #296]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	099b      	lsrs	r3, r3, #6
 8003f80:	2200      	movs	r2, #0
 8003f82:	623b      	str	r3, [r7, #32]
 8003f84:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4b47      	ldr	r3, [pc, #284]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003f90:	fb03 f201 	mul.w	r2, r3, r1
 8003f94:	2300      	movs	r3, #0
 8003f96:	fb00 f303 	mul.w	r3, r0, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	4a43      	ldr	r2, [pc, #268]	@ (80040ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003f9e:	fba0 1202 	umull	r1, r2, r0, r2
 8003fa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fa4:	460a      	mov	r2, r1
 8003fa6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003faa:	4413      	add	r3, r2
 8003fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	61fa      	str	r2, [r7, #28]
 8003fb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003fbe:	f7fc fe03 	bl	8000bc8 <__aeabi_uldivmod>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fca:	e053      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fcc:	4b35      	ldr	r3, [pc, #212]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	099b      	lsrs	r3, r3, #6
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	617a      	str	r2, [r7, #20]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003fde:	f04f 0b00 	mov.w	fp, #0
 8003fe2:	4652      	mov	r2, sl
 8003fe4:	465b      	mov	r3, fp
 8003fe6:	f04f 0000 	mov.w	r0, #0
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	0159      	lsls	r1, r3, #5
 8003ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff4:	0150      	lsls	r0, r2, #5
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	ebb2 080a 	subs.w	r8, r2, sl
 8003ffe:	eb63 090b 	sbc.w	r9, r3, fp
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800400e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004012:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004016:	ebb2 0408 	subs.w	r4, r2, r8
 800401a:	eb63 0509 	sbc.w	r5, r3, r9
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	00eb      	lsls	r3, r5, #3
 8004028:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800402c:	00e2      	lsls	r2, r4, #3
 800402e:	4614      	mov	r4, r2
 8004030:	461d      	mov	r5, r3
 8004032:	eb14 030a 	adds.w	r3, r4, sl
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	eb45 030b 	adc.w	r3, r5, fp
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	e9d7 4500 	ldrd	r4, r5, [r7]
 800404a:	4629      	mov	r1, r5
 800404c:	028b      	lsls	r3, r1, #10
 800404e:	4621      	mov	r1, r4
 8004050:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004054:	4621      	mov	r1, r4
 8004056:	028a      	lsls	r2, r1, #10
 8004058:	4610      	mov	r0, r2
 800405a:	4619      	mov	r1, r3
 800405c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800405e:	2200      	movs	r2, #0
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	60fa      	str	r2, [r7, #12]
 8004064:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004068:	f7fc fdae 	bl	8000bc8 <__aeabi_uldivmod>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4613      	mov	r3, r2
 8004072:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004074:	4b0b      	ldr	r3, [pc, #44]	@ (80040a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	3301      	adds	r3, #1
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004084:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800408e:	e002      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b05      	ldr	r3, [pc, #20]	@ (80040a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004092:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004098:	4618      	mov	r0, r3
 800409a:	3740      	adds	r7, #64	@ 0x40
 800409c:	46bd      	mov	sp, r7
 800409e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	017d7840 	.word	0x017d7840

080040b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b4:	4b03      	ldr	r3, [pc, #12]	@ (80040c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000000 	.word	0x20000000

080040c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040cc:	f7ff fff0 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040d0:	4602      	mov	r2, r0
 80040d2:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	0a9b      	lsrs	r3, r3, #10
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4903      	ldr	r1, [pc, #12]	@ (80040ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80040de:	5ccb      	ldrb	r3, [r1, r3]
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40023800 	.word	0x40023800
 80040ec:	08008dc4 	.word	0x08008dc4

080040f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040f4:	f7ff ffdc 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	0b5b      	lsrs	r3, r3, #13
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	4903      	ldr	r1, [pc, #12]	@ (8004114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004106:	5ccb      	ldrb	r3, [r1, r3]
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40023800 	.word	0x40023800
 8004114:	08008dc4 	.word	0x08008dc4

08004118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e041      	b.n	80041ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fd fab2 	bl	80016a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3304      	adds	r3, #4
 8004154:	4619      	mov	r1, r3
 8004156:	4610      	mov	r0, r2
 8004158:	f000 fa80 	bl	800465c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
	...

080041b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d001      	beq.n	80041d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e046      	b.n	800425e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2202      	movs	r2, #2
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a23      	ldr	r2, [pc, #140]	@ (800426c <HAL_TIM_Base_Start+0xb4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d022      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ea:	d01d      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004270 <HAL_TIM_Base_Start+0xb8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d018      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004274 <HAL_TIM_Base_Start+0xbc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1c      	ldr	r2, [pc, #112]	@ (8004278 <HAL_TIM_Base_Start+0xc0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00e      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1b      	ldr	r2, [pc, #108]	@ (800427c <HAL_TIM_Base_Start+0xc4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d009      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a19      	ldr	r2, [pc, #100]	@ (8004280 <HAL_TIM_Base_Start+0xc8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <HAL_TIM_Base_Start+0x70>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a18      	ldr	r2, [pc, #96]	@ (8004284 <HAL_TIM_Base_Start+0xcc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d111      	bne.n	800424c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b06      	cmp	r3, #6
 8004238:	d010      	beq.n	800425c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424a:	e007      	b.n	800425c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0201 	orr.w	r2, r2, #1
 800425a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40010000 	.word	0x40010000
 8004270:	40000400 	.word	0x40000400
 8004274:	40000800 	.word	0x40000800
 8004278:	40000c00 	.word	0x40000c00
 800427c:	40010400 	.word	0x40010400
 8004280:	40014000 	.word	0x40014000
 8004284:	40001800 	.word	0x40001800

08004288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d020      	beq.n	80042ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01b      	beq.n	80042ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0202 	mvn.w	r2, #2
 80042bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f9a3 	bl	800461e <HAL_TIM_IC_CaptureCallback>
 80042d8:	e005      	b.n	80042e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f995 	bl	800460a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 f9a6 	bl	8004632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d020      	beq.n	8004338 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01b      	beq.n	8004338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0204 	mvn.w	r2, #4
 8004308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2202      	movs	r2, #2
 800430e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f97d 	bl	800461e <HAL_TIM_IC_CaptureCallback>
 8004324:	e005      	b.n	8004332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f96f 	bl	800460a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f980 	bl	8004632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 0308 	and.w	r3, r3, #8
 800433e:	2b00      	cmp	r3, #0
 8004340:	d020      	beq.n	8004384 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01b      	beq.n	8004384 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0208 	mvn.w	r2, #8
 8004354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2204      	movs	r2, #4
 800435a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f957 	bl	800461e <HAL_TIM_IC_CaptureCallback>
 8004370:	e005      	b.n	800437e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f949 	bl	800460a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f95a 	bl	8004632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	f003 0310 	and.w	r3, r3, #16
 800438a:	2b00      	cmp	r3, #0
 800438c:	d020      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01b      	beq.n	80043d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0210 	mvn.w	r2, #16
 80043a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2208      	movs	r2, #8
 80043a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f931 	bl	800461e <HAL_TIM_IC_CaptureCallback>
 80043bc:	e005      	b.n	80043ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f923 	bl	800460a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f934 	bl	8004632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00c      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0201 	mvn.w	r2, #1
 80043ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f901 	bl	80045f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 faee 	bl	80049f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f905 	bl	8004646 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0320 	and.w	r3, r3, #32
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0220 	mvn.w	r2, #32
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fac0 	bl	80049e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004460:	bf00      	nop
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_TIM_ConfigClockSource+0x1c>
 8004480:	2302      	movs	r3, #2
 8004482:	e0b4      	b.n	80045ee <HAL_TIM_ConfigClockSource+0x186>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044bc:	d03e      	beq.n	800453c <HAL_TIM_ConfigClockSource+0xd4>
 80044be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c2:	f200 8087 	bhi.w	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ca:	f000 8086 	beq.w	80045da <HAL_TIM_ConfigClockSource+0x172>
 80044ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d2:	d87f      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044d4:	2b70      	cmp	r3, #112	@ 0x70
 80044d6:	d01a      	beq.n	800450e <HAL_TIM_ConfigClockSource+0xa6>
 80044d8:	2b70      	cmp	r3, #112	@ 0x70
 80044da:	d87b      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044dc:	2b60      	cmp	r3, #96	@ 0x60
 80044de:	d050      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x11a>
 80044e0:	2b60      	cmp	r3, #96	@ 0x60
 80044e2:	d877      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044e4:	2b50      	cmp	r3, #80	@ 0x50
 80044e6:	d03c      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0xfa>
 80044e8:	2b50      	cmp	r3, #80	@ 0x50
 80044ea:	d873      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044ec:	2b40      	cmp	r3, #64	@ 0x40
 80044ee:	d058      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0x13a>
 80044f0:	2b40      	cmp	r3, #64	@ 0x40
 80044f2:	d86f      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044f4:	2b30      	cmp	r3, #48	@ 0x30
 80044f6:	d064      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x15a>
 80044f8:	2b30      	cmp	r3, #48	@ 0x30
 80044fa:	d86b      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d060      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004500:	2b20      	cmp	r3, #32
 8004502:	d867      	bhi.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d05c      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004508:	2b10      	cmp	r3, #16
 800450a:	d05a      	beq.n	80045c2 <HAL_TIM_ConfigClockSource+0x15a>
 800450c:	e062      	b.n	80045d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800451e:	f000 f9c3 	bl	80048a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	609a      	str	r2, [r3, #8]
      break;
 800453a:	e04f      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800454c:	f000 f9ac 	bl	80048a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800455e:	609a      	str	r2, [r3, #8]
      break;
 8004560:	e03c      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800456e:	461a      	mov	r2, r3
 8004570:	f000 f920 	bl	80047b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2150      	movs	r1, #80	@ 0x50
 800457a:	4618      	mov	r0, r3
 800457c:	f000 f979 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 8004580:	e02c      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800458e:	461a      	mov	r2, r3
 8004590:	f000 f93f 	bl	8004812 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2160      	movs	r1, #96	@ 0x60
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f969 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 80045a0:	e01c      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ae:	461a      	mov	r2, r3
 80045b0:	f000 f900 	bl	80047b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2140      	movs	r1, #64	@ 0x40
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f959 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 80045c0:	e00c      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4619      	mov	r1, r3
 80045cc:	4610      	mov	r0, r2
 80045ce:	f000 f950 	bl	8004872 <TIM_ITRx_SetConfig>
      break;
 80045d2:	e003      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      break;
 80045d8:	e000      	b.n	80045dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80045da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80045fe:	bf00      	nop
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004626:	bf00      	nop
 8004628:	370c      	adds	r7, #12
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
	...

0800465c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a46      	ldr	r2, [pc, #280]	@ (8004788 <TIM_Base_SetConfig+0x12c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d013      	beq.n	800469c <TIM_Base_SetConfig+0x40>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800467a:	d00f      	beq.n	800469c <TIM_Base_SetConfig+0x40>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a43      	ldr	r2, [pc, #268]	@ (800478c <TIM_Base_SetConfig+0x130>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00b      	beq.n	800469c <TIM_Base_SetConfig+0x40>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a42      	ldr	r2, [pc, #264]	@ (8004790 <TIM_Base_SetConfig+0x134>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d007      	beq.n	800469c <TIM_Base_SetConfig+0x40>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a41      	ldr	r2, [pc, #260]	@ (8004794 <TIM_Base_SetConfig+0x138>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <TIM_Base_SetConfig+0x40>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a40      	ldr	r2, [pc, #256]	@ (8004798 <TIM_Base_SetConfig+0x13c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d108      	bne.n	80046ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a35      	ldr	r2, [pc, #212]	@ (8004788 <TIM_Base_SetConfig+0x12c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d02b      	beq.n	800470e <TIM_Base_SetConfig+0xb2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046bc:	d027      	beq.n	800470e <TIM_Base_SetConfig+0xb2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a32      	ldr	r2, [pc, #200]	@ (800478c <TIM_Base_SetConfig+0x130>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d023      	beq.n	800470e <TIM_Base_SetConfig+0xb2>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a31      	ldr	r2, [pc, #196]	@ (8004790 <TIM_Base_SetConfig+0x134>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01f      	beq.n	800470e <TIM_Base_SetConfig+0xb2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a30      	ldr	r2, [pc, #192]	@ (8004794 <TIM_Base_SetConfig+0x138>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d01b      	beq.n	800470e <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a2f      	ldr	r2, [pc, #188]	@ (8004798 <TIM_Base_SetConfig+0x13c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d017      	beq.n	800470e <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a2e      	ldr	r2, [pc, #184]	@ (800479c <TIM_Base_SetConfig+0x140>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2d      	ldr	r2, [pc, #180]	@ (80047a0 <TIM_Base_SetConfig+0x144>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00f      	beq.n	800470e <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a2c      	ldr	r2, [pc, #176]	@ (80047a4 <TIM_Base_SetConfig+0x148>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d00b      	beq.n	800470e <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a2b      	ldr	r2, [pc, #172]	@ (80047a8 <TIM_Base_SetConfig+0x14c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d007      	beq.n	800470e <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a2a      	ldr	r2, [pc, #168]	@ (80047ac <TIM_Base_SetConfig+0x150>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d003      	beq.n	800470e <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a29      	ldr	r2, [pc, #164]	@ (80047b0 <TIM_Base_SetConfig+0x154>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d108      	bne.n	8004720 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4313      	orrs	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a10      	ldr	r2, [pc, #64]	@ (8004788 <TIM_Base_SetConfig+0x12c>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d003      	beq.n	8004754 <TIM_Base_SetConfig+0xf8>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a12      	ldr	r2, [pc, #72]	@ (8004798 <TIM_Base_SetConfig+0x13c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d103      	bne.n	800475c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b01      	cmp	r3, #1
 800476c:	d105      	bne.n	800477a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	691b      	ldr	r3, [r3, #16]
 8004772:	f023 0201 	bic.w	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	611a      	str	r2, [r3, #16]
  }
}
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010000 	.word	0x40010000
 800478c:	40000400 	.word	0x40000400
 8004790:	40000800 	.word	0x40000800
 8004794:	40000c00 	.word	0x40000c00
 8004798:	40010400 	.word	0x40010400
 800479c:	40014000 	.word	0x40014000
 80047a0:	40014400 	.word	0x40014400
 80047a4:	40014800 	.word	0x40014800
 80047a8:	40001800 	.word	0x40001800
 80047ac:	40001c00 	.word	0x40001c00
 80047b0:	40002000 	.word	0x40002000

080047b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 030a 	bic.w	r3, r3, #10
 80047f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	621a      	str	r2, [r3, #32]
}
 8004806:	bf00      	nop
 8004808:	371c      	adds	r7, #28
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004812:	b480      	push	{r7}
 8004814:	b087      	sub	sp, #28
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f023 0210 	bic.w	r2, r3, #16
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800483c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	031b      	lsls	r3, r3, #12
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800484e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	621a      	str	r2, [r3, #32]
}
 8004866:	bf00      	nop
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004872:	b480      	push	{r7}
 8004874:	b085      	sub	sp, #20
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	f043 0307 	orr.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	021a      	lsls	r2, r3, #8
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	609a      	str	r2, [r3, #8]
}
 80048dc:	bf00      	nop
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e05a      	b.n	80049b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a21      	ldr	r2, [pc, #132]	@ (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d022      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800494c:	d01d      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a1d      	ldr	r2, [pc, #116]	@ (80049c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d018      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a1b      	ldr	r2, [pc, #108]	@ (80049cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d013      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1a      	ldr	r2, [pc, #104]	@ (80049d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d00e      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a18      	ldr	r2, [pc, #96]	@ (80049d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d009      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a17      	ldr	r2, [pc, #92]	@ (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d004      	beq.n	800498a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a15      	ldr	r2, [pc, #84]	@ (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d10c      	bne.n	80049a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	4313      	orrs	r3, r2
 800499a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40010000 	.word	0x40010000
 80049c8:	40000400 	.word	0x40000400
 80049cc:	40000800 	.word	0x40000800
 80049d0:	40000c00 	.word	0x40000c00
 80049d4:	40010400 	.word	0x40010400
 80049d8:	40014000 	.word	0x40014000
 80049dc:	40001800 	.word	0x40001800

080049e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e042      	b.n	8004aa0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fc fede 	bl	80017f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2224      	movs	r2, #36	@ 0x24
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 ff85 	bl	800595c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	695a      	ldr	r2, [r3, #20]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08a      	sub	sp, #40	@ 0x28
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d175      	bne.n	8004bb4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_UART_Transmit+0x2c>
 8004ace:	88fb      	ldrh	r3, [r7, #6]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e06e      	b.n	8004bb6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2221      	movs	r2, #33	@ 0x21
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ae6:	f7fd ffcf 	bl	8002a88 <HAL_GetTick>
 8004aea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	88fa      	ldrh	r2, [r7, #6]
 8004af0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	88fa      	ldrh	r2, [r7, #6]
 8004af6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b00:	d108      	bne.n	8004b14 <HAL_UART_Transmit+0x6c>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	e003      	b.n	8004b1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b1c:	e02e      	b.n	8004b7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	2200      	movs	r2, #0
 8004b26:	2180      	movs	r1, #128	@ 0x80
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fc5d 	bl	80053e8 <UART_WaitOnFlagUntilTimeout>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e03a      	b.n	8004bb6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10b      	bne.n	8004b5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	3302      	adds	r3, #2
 8004b5a:	61bb      	str	r3, [r7, #24]
 8004b5c:	e007      	b.n	8004b6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	781a      	ldrb	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1cb      	bne.n	8004b1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2140      	movs	r1, #64	@ 0x40
 8004b90:	68f8      	ldr	r0, [r7, #12]
 8004b92:	f000 fc29 	bl	80053e8 <UART_WaitOnFlagUntilTimeout>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d005      	beq.n	8004ba8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e006      	b.n	8004bb6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e000      	b.n	8004bb6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
  }
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3720      	adds	r7, #32
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b08c      	sub	sp, #48	@ 0x30
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b20      	cmp	r3, #32
 8004bd6:	d14a      	bne.n	8004c6e <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e043      	b.n	8004c70 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2201      	movs	r2, #1
 8004bec:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 fc4e 	bl	800549c <UART_Start_Receive_DMA>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004c06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d12c      	bne.n	8004c68 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d125      	bne.n	8004c62 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c16:	2300      	movs	r3, #0
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	330c      	adds	r3, #12
 8004c32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	617b      	str	r3, [r7, #20]
   return(result);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f043 0310 	orr.w	r3, r3, #16
 8004c42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c4c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	6a39      	ldr	r1, [r7, #32]
 8004c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e5      	bne.n	8004c2c <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004c60:	e002      	b.n	8004c68 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004c68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c6c:	e000      	b.n	8004c70 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004c6e:	2302      	movs	r3, #2
  }
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3730      	adds	r7, #48	@ 0x30
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b0ba      	sub	sp, #232	@ 0xe8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cae:	f003 030f 	and.w	r3, r3, #15
 8004cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10f      	bne.n	8004cde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <HAL_UART_IRQHandler+0x66>
 8004cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fd81 	bl	80057de <UART_Receive_IT>
      return;
 8004cdc:	e25b      	b.n	8005196 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 80de 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x22c>
 8004ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80d1 	beq.w	8004ea4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00b      	beq.n	8004d26 <HAL_UART_IRQHandler+0xae>
 8004d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1e:	f043 0201 	orr.w	r2, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00b      	beq.n	8004d4a <HAL_UART_IRQHandler+0xd2>
 8004d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d42:	f043 0202 	orr.w	r2, r3, #2
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4e:	f003 0302 	and.w	r3, r3, #2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00b      	beq.n	8004d6e <HAL_UART_IRQHandler+0xf6>
 8004d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d66:	f043 0204 	orr.w	r2, r3, #4
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d011      	beq.n	8004d9e <HAL_UART_IRQHandler+0x126>
 8004d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d105      	bne.n	8004d92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d96:	f043 0208 	orr.w	r2, r3, #8
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f000 81f2 	beq.w	800518c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dac:	f003 0320 	and.w	r3, r3, #32
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d008      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x14e>
 8004db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fd0c 	bl	80057de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd0:	2b40      	cmp	r3, #64	@ 0x40
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d103      	bne.n	8004df2 <HAL_UART_IRQHandler+0x17a>
 8004dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d04f      	beq.n	8004e92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fc14 	bl	8005620 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e02:	2b40      	cmp	r3, #64	@ 0x40
 8004e04:	d141      	bne.n	8004e8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3314      	adds	r3, #20
 8004e0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	3314      	adds	r3, #20
 8004e2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1d9      	bne.n	8004e06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d013      	beq.n	8004e82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5e:	4a7e      	ldr	r2, [pc, #504]	@ (8005058 <HAL_UART_IRQHandler+0x3e0>)
 8004e60:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e66:	4618      	mov	r0, r3
 8004e68:	f7fe f8c6 	bl	8002ff8 <HAL_DMA_Abort_IT>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d016      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e80:	e00e      	b.n	8004ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 f9a8 	bl	80051d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e88:	e00a      	b.n	8004ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f9a4 	bl	80051d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e90:	e006      	b.n	8004ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f9a0 	bl	80051d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e9e:	e175      	b.n	800518c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	bf00      	nop
    return;
 8004ea2:	e173      	b.n	800518c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	f040 814f 	bne.w	800514c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb2:	f003 0310 	and.w	r3, r3, #16
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8148 	beq.w	800514c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8141 	beq.w	800514c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eea:	2b40      	cmp	r3, #64	@ 0x40
 8004eec:	f040 80b6 	bne.w	800505c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 8145 	beq.w	8005190 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	f080 813e 	bcs.w	8005190 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f1a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f20:	69db      	ldr	r3, [r3, #28]
 8004f22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f26:	f000 8088 	beq.w	800503a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f38:	e853 3f00 	ldrex	r3, [r3]
 8004f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	330c      	adds	r3, #12
 8004f52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f66:	e841 2300 	strex	r3, r2, [r1]
 8004f6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1d9      	bne.n	8004f2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3314      	adds	r3, #20
 8004f7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f80:	e853 3f00 	ldrex	r3, [r3]
 8004f84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3314      	adds	r3, #20
 8004f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e1      	bne.n	8004f76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	3314      	adds	r3, #20
 8004fb8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3314      	adds	r3, #20
 8004fd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004fdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e3      	bne.n	8004fb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	330c      	adds	r3, #12
 8004ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800500a:	f023 0310 	bic.w	r3, r3, #16
 800500e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	330c      	adds	r3, #12
 8005018:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800501c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800501e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005022:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800502a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e3      	bne.n	8004ff8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005034:	4618      	mov	r0, r3
 8005036:	f7fd ff6f 	bl	8002f18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005048:	b29b      	uxth	r3, r3
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	b29b      	uxth	r3, r3
 800504e:	4619      	mov	r1, r3
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7fc f90f 	bl	8001274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005056:	e09b      	b.n	8005190 <HAL_UART_IRQHandler+0x518>
 8005058:	080056e7 	.word	0x080056e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005064:	b29b      	uxth	r3, r3
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005070:	b29b      	uxth	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	f000 808e 	beq.w	8005194 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800507c:	2b00      	cmp	r3, #0
 800507e:	f000 8089 	beq.w	8005194 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005094:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005098:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80050a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e3      	bne.n	8005082 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3314      	adds	r3, #20
 80050c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	623b      	str	r3, [r7, #32]
   return(result);
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3314      	adds	r3, #20
 80050da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050de:	633a      	str	r2, [r7, #48]	@ 0x30
 80050e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e3      	bne.n	80050ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	330c      	adds	r3, #12
 8005106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0310 	bic.w	r3, r3, #16
 8005116:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	330c      	adds	r3, #12
 8005120:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005124:	61fa      	str	r2, [r7, #28]
 8005126:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	69b9      	ldr	r1, [r7, #24]
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	617b      	str	r3, [r7, #20]
   return(result);
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e3      	bne.n	8005100 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800513e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005142:	4619      	mov	r1, r3
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7fc f895 	bl	8001274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800514a:	e023      	b.n	8005194 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800514c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005154:	2b00      	cmp	r3, #0
 8005156:	d009      	beq.n	800516c <HAL_UART_IRQHandler+0x4f4>
 8005158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800515c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fad2 	bl	800570e <UART_Transmit_IT>
    return;
 800516a:	e014      	b.n	8005196 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800516c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005170:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00e      	beq.n	8005196 <HAL_UART_IRQHandler+0x51e>
 8005178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800517c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d008      	beq.n	8005196 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fb12 	bl	80057ae <UART_EndTransmit_IT>
    return;
 800518a:	e004      	b.n	8005196 <HAL_UART_IRQHandler+0x51e>
    return;
 800518c:	bf00      	nop
 800518e:	e002      	b.n	8005196 <HAL_UART_IRQHandler+0x51e>
      return;
 8005190:	bf00      	nop
 8005192:	e000      	b.n	8005196 <HAL_UART_IRQHandler+0x51e>
      return;
 8005194:	bf00      	nop
  }
}
 8005196:	37e8      	adds	r7, #232	@ 0xe8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b09c      	sub	sp, #112	@ 0x70
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d172      	bne.n	80052ee <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800520a:	2200      	movs	r2, #0
 800520c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800520e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	330c      	adds	r3, #12
 8005214:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800521e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	330c      	adds	r3, #12
 800522c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800522e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005230:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005234:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800523c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e5      	bne.n	800520e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3314      	adds	r3, #20
 8005248:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524c:	e853 3f00 	ldrex	r3, [r3]
 8005250:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005254:	f023 0301 	bic.w	r3, r3, #1
 8005258:	667b      	str	r3, [r7, #100]	@ 0x64
 800525a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3314      	adds	r3, #20
 8005260:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005262:	647a      	str	r2, [r7, #68]	@ 0x44
 8005264:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005266:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005268:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e5      	bne.n	8005242 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3314      	adds	r3, #20
 800527c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	623b      	str	r3, [r7, #32]
   return(result);
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800528c:	663b      	str	r3, [r7, #96]	@ 0x60
 800528e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3314      	adds	r3, #20
 8005294:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005296:	633a      	str	r2, [r7, #48]	@ 0x30
 8005298:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800529c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529e:	e841 2300 	strex	r3, r2, [r1]
 80052a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1e5      	bne.n	8005276 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052ac:	2220      	movs	r2, #32
 80052ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d119      	bne.n	80052ee <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f023 0310 	bic.w	r3, r3, #16
 80052d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	330c      	adds	r3, #12
 80052d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80052da:	61fa      	str	r2, [r7, #28]
 80052dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	69b9      	ldr	r1, [r7, #24]
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	617b      	str	r3, [r7, #20]
   return(result);
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e5      	bne.n	80052ba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f0:	2200      	movs	r2, #0
 80052f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d106      	bne.n	800530a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005300:	4619      	mov	r1, r3
 8005302:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005304:	f7fb ffb6 	bl	8001274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005308:	e002      	b.n	8005310 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800530a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800530c:	f7ff ff50 	bl	80051b0 <HAL_UART_RxCpltCallback>
}
 8005310:	bf00      	nop
 8005312:	3770      	adds	r7, #112	@ 0x70
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005324:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005330:	2b01      	cmp	r3, #1
 8005332:	d108      	bne.n	8005346 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005338:	085b      	lsrs	r3, r3, #1
 800533a:	b29b      	uxth	r3, r3
 800533c:	4619      	mov	r1, r3
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7fb ff98 	bl	8001274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005344:	e002      	b.n	800534c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff ff3c 	bl	80051c4 <HAL_UART_RxHalfCpltCallback>
}
 800534c:	bf00      	nop
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005364:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	695b      	ldr	r3, [r3, #20]
 800536c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005370:	2b80      	cmp	r3, #128	@ 0x80
 8005372:	bf0c      	ite	eq
 8005374:	2301      	moveq	r3, #1
 8005376:	2300      	movne	r3, #0
 8005378:	b2db      	uxtb	r3, r3
 800537a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005382:	b2db      	uxtb	r3, r3
 8005384:	2b21      	cmp	r3, #33	@ 0x21
 8005386:	d108      	bne.n	800539a <UART_DMAError+0x46>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d005      	beq.n	800539a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2200      	movs	r2, #0
 8005392:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005394:	68b8      	ldr	r0, [r7, #8]
 8005396:	f000 f91b 	bl	80055d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a4:	2b40      	cmp	r3, #64	@ 0x40
 80053a6:	bf0c      	ite	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2300      	movne	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b22      	cmp	r3, #34	@ 0x22
 80053ba:	d108      	bne.n	80053ce <UART_DMAError+0x7a>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2200      	movs	r2, #0
 80053c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80053c8:	68b8      	ldr	r0, [r7, #8]
 80053ca:	f000 f929 	bl	8005620 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053d2:	f043 0210 	orr.w	r2, r3, #16
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053da:	68b8      	ldr	r0, [r7, #8]
 80053dc:	f7ff fefc 	bl	80051d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053e0:	bf00      	nop
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	4613      	mov	r3, r2
 80053f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f8:	e03b      	b.n	8005472 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d037      	beq.n	8005472 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005402:	f7fd fb41 	bl	8002a88 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	6a3a      	ldr	r2, [r7, #32]
 800540e:	429a      	cmp	r2, r3
 8005410:	d302      	bcc.n	8005418 <UART_WaitOnFlagUntilTimeout+0x30>
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e03a      	b.n	8005492 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d023      	beq.n	8005472 <UART_WaitOnFlagUntilTimeout+0x8a>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b80      	cmp	r3, #128	@ 0x80
 800542e:	d020      	beq.n	8005472 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b40      	cmp	r3, #64	@ 0x40
 8005434:	d01d      	beq.n	8005472 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b08      	cmp	r3, #8
 8005442:	d116      	bne.n	8005472 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 f8e0 	bl	8005620 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2208      	movs	r2, #8
 8005464:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e00f      	b.n	8005492 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4013      	ands	r3, r2
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	bf0c      	ite	eq
 8005482:	2301      	moveq	r3, #1
 8005484:	2300      	movne	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	79fb      	ldrb	r3, [r7, #7]
 800548c:	429a      	cmp	r2, r3
 800548e:	d0b4      	beq.n	80053fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b098      	sub	sp, #96	@ 0x60
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	4613      	mov	r3, r2
 80054a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	88fa      	ldrh	r2, [r7, #6]
 80054b4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2222      	movs	r2, #34	@ 0x22
 80054c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c8:	4a3e      	ldr	r2, [pc, #248]	@ (80055c4 <UART_Start_Receive_DMA+0x128>)
 80054ca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d0:	4a3d      	ldr	r2, [pc, #244]	@ (80055c8 <UART_Start_Receive_DMA+0x12c>)
 80054d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d8:	4a3c      	ldr	r2, [pc, #240]	@ (80055cc <UART_Start_Receive_DMA+0x130>)
 80054da:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054e0:	2200      	movs	r2, #0
 80054e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80054e4:	f107 0308 	add.w	r3, r7, #8
 80054e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4619      	mov	r1, r3
 80054f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	88fb      	ldrh	r3, [r7, #6]
 80054fc:	f7fd fcb4 	bl	8002e68 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	613b      	str	r3, [r7, #16]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d019      	beq.n	8005552 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	330c      	adds	r3, #12
 8005524:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800552e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005534:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	330c      	adds	r3, #12
 800553c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800553e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005540:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005544:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800554c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e5      	bne.n	800551e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3314      	adds	r3, #20
 8005558:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	f043 0301 	orr.w	r3, r3, #1
 8005568:	657b      	str	r3, [r7, #84]	@ 0x54
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3314      	adds	r3, #20
 8005570:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005572:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005574:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005578:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3314      	adds	r3, #20
 800558c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	617b      	str	r3, [r7, #20]
   return(result);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800559c:	653b      	str	r3, [r7, #80]	@ 0x50
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3314      	adds	r3, #20
 80055a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80055a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80055a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	6a39      	ldr	r1, [r7, #32]
 80055ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e5      	bne.n	8005586 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3760      	adds	r7, #96	@ 0x60
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	080051ed 	.word	0x080051ed
 80055c8:	08005319 	.word	0x08005319
 80055cc:	08005355 	.word	0x08005355

080055d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b089      	sub	sp, #36	@ 0x24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	330c      	adds	r3, #12
 80055de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	e853 3f00 	ldrex	r3, [r3]
 80055e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	330c      	adds	r3, #12
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	61ba      	str	r2, [r7, #24]
 80055fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6979      	ldr	r1, [r7, #20]
 80055fe:	69ba      	ldr	r2, [r7, #24]
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	613b      	str	r3, [r7, #16]
   return(result);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e5      	bne.n	80055d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005614:	bf00      	nop
 8005616:	3724      	adds	r7, #36	@ 0x24
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005620:	b480      	push	{r7}
 8005622:	b095      	sub	sp, #84	@ 0x54
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	330c      	adds	r3, #12
 800562e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800563e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	330c      	adds	r3, #12
 8005646:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005648:	643a      	str	r2, [r7, #64]	@ 0x40
 800564a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800564e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e5      	bne.n	8005628 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3314      	adds	r3, #20
 8005662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005664:	6a3b      	ldr	r3, [r7, #32]
 8005666:	e853 3f00 	ldrex	r3, [r3]
 800566a:	61fb      	str	r3, [r7, #28]
   return(result);
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	f023 0301 	bic.w	r3, r3, #1
 8005672:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3314      	adds	r3, #20
 800567a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800567c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800567e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e5      	bne.n	800565c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005694:	2b01      	cmp	r3, #1
 8005696:	d119      	bne.n	80056cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	330c      	adds	r3, #12
 800569e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f023 0310 	bic.w	r3, r3, #16
 80056ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056b8:	61ba      	str	r2, [r7, #24]
 80056ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	6979      	ldr	r1, [r7, #20]
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	613b      	str	r3, [r7, #16]
   return(result);
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e5      	bne.n	8005698 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80056da:	bf00      	nop
 80056dc:	3754      	adds	r7, #84	@ 0x54
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f7ff fd69 	bl	80051d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800570e:	b480      	push	{r7}
 8005710:	b085      	sub	sp, #20
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b21      	cmp	r3, #33	@ 0x21
 8005720:	d13e      	bne.n	80057a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800572a:	d114      	bne.n	8005756 <UART_Transmit_IT+0x48>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d110      	bne.n	8005756 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005748:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	1c9a      	adds	r2, r3, #2
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	621a      	str	r2, [r3, #32]
 8005754:	e008      	b.n	8005768 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	1c59      	adds	r1, r3, #1
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6211      	str	r1, [r2, #32]
 8005760:	781a      	ldrb	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b01      	subs	r3, #1
 8005770:	b29b      	uxth	r3, r3
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	4619      	mov	r1, r3
 8005776:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10f      	bne.n	800579c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800578a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800579a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800579c:	2300      	movs	r3, #0
 800579e:	e000      	b.n	80057a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057a0:	2302      	movs	r3, #2
  }
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff fce4 	bl	800519c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3708      	adds	r7, #8
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b08c      	sub	sp, #48	@ 0x30
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b22      	cmp	r3, #34	@ 0x22
 80057f0:	f040 80ae 	bne.w	8005950 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fc:	d117      	bne.n	800582e <UART_Receive_IT+0x50>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d113      	bne.n	800582e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005806:	2300      	movs	r3, #0
 8005808:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	b29b      	uxth	r3, r3
 8005818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581c:	b29a      	uxth	r2, r3
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	1c9a      	adds	r2, r3, #2
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	629a      	str	r2, [r3, #40]	@ 0x28
 800582c:	e026      	b.n	800587c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005832:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005834:	2300      	movs	r3, #0
 8005836:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005840:	d007      	beq.n	8005852 <UART_Receive_IT+0x74>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <UART_Receive_IT+0x82>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	b2da      	uxtb	r2, r3
 800585a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800585c:	701a      	strb	r2, [r3, #0]
 800585e:	e008      	b.n	8005872 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800586c:	b2da      	uxtb	r2, r3
 800586e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005870:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29b      	uxth	r3, r3
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	4619      	mov	r1, r3
 800588a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800588c:	2b00      	cmp	r3, #0
 800588e:	d15d      	bne.n	800594c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0220 	bic.w	r2, r2, #32
 800589e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695a      	ldr	r2, [r3, #20]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0201 	bic.w	r2, r2, #1
 80058be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2220      	movs	r2, #32
 80058c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d135      	bne.n	8005942 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	330c      	adds	r3, #12
 80058e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	e853 3f00 	ldrex	r3, [r3]
 80058ea:	613b      	str	r3, [r7, #16]
   return(result);
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	f023 0310 	bic.w	r3, r3, #16
 80058f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	330c      	adds	r3, #12
 80058fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058fc:	623a      	str	r2, [r7, #32]
 80058fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005900:	69f9      	ldr	r1, [r7, #28]
 8005902:	6a3a      	ldr	r2, [r7, #32]
 8005904:	e841 2300 	strex	r3, r2, [r1]
 8005908:	61bb      	str	r3, [r7, #24]
   return(result);
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e5      	bne.n	80058dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	2b10      	cmp	r3, #16
 800591c:	d10a      	bne.n	8005934 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60fb      	str	r3, [r7, #12]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	60fb      	str	r3, [r7, #12]
 8005932:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fb fc9a 	bl	8001274 <HAL_UARTEx_RxEventCallback>
 8005940:	e002      	b.n	8005948 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff fc34 	bl	80051b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005948:	2300      	movs	r3, #0
 800594a:	e002      	b.n	8005952 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800594c:	2300      	movs	r3, #0
 800594e:	e000      	b.n	8005952 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005950:	2302      	movs	r3, #2
  }
}
 8005952:	4618      	mov	r0, r3
 8005954:	3730      	adds	r7, #48	@ 0x30
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800595c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005960:	b0c0      	sub	sp, #256	@ 0x100
 8005962:	af00      	add	r7, sp, #0
 8005964:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005978:	68d9      	ldr	r1, [r3, #12]
 800597a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	ea40 0301 	orr.w	r3, r0, r1
 8005984:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	431a      	orrs	r2, r3
 8005994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	431a      	orrs	r2, r3
 800599c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059b4:	f021 010c 	bic.w	r1, r1, #12
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059c2:	430b      	orrs	r3, r1
 80059c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80059d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d6:	6999      	ldr	r1, [r3, #24]
 80059d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	ea40 0301 	orr.w	r3, r0, r1
 80059e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	4b8f      	ldr	r3, [pc, #572]	@ (8005c28 <UART_SetConfig+0x2cc>)
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d005      	beq.n	80059fc <UART_SetConfig+0xa0>
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4b8d      	ldr	r3, [pc, #564]	@ (8005c2c <UART_SetConfig+0x2d0>)
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d104      	bne.n	8005a06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80059fc:	f7fe fb78 	bl	80040f0 <HAL_RCC_GetPCLK2Freq>
 8005a00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a04:	e003      	b.n	8005a0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a06:	f7fe fb5f 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 8005a0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a18:	f040 810c 	bne.w	8005c34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a20:	2200      	movs	r2, #0
 8005a22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a2e:	4622      	mov	r2, r4
 8005a30:	462b      	mov	r3, r5
 8005a32:	1891      	adds	r1, r2, r2
 8005a34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a36:	415b      	adcs	r3, r3
 8005a38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a3e:	4621      	mov	r1, r4
 8005a40:	eb12 0801 	adds.w	r8, r2, r1
 8005a44:	4629      	mov	r1, r5
 8005a46:	eb43 0901 	adc.w	r9, r3, r1
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a5e:	4690      	mov	r8, r2
 8005a60:	4699      	mov	r9, r3
 8005a62:	4623      	mov	r3, r4
 8005a64:	eb18 0303 	adds.w	r3, r8, r3
 8005a68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a6c:	462b      	mov	r3, r5
 8005a6e:	eb49 0303 	adc.w	r3, r9, r3
 8005a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005a82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	18db      	adds	r3, r3, r3
 8005a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a90:	4613      	mov	r3, r2
 8005a92:	eb42 0303 	adc.w	r3, r2, r3
 8005a96:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005aa0:	f7fb f892 	bl	8000bc8 <__aeabi_uldivmod>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4b61      	ldr	r3, [pc, #388]	@ (8005c30 <UART_SetConfig+0x2d4>)
 8005aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	011c      	lsls	r4, r3, #4
 8005ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005abc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ac0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	464b      	mov	r3, r9
 8005ac8:	1891      	adds	r1, r2, r2
 8005aca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005acc:	415b      	adcs	r3, r3
 8005ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ad0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	eb12 0a01 	adds.w	sl, r2, r1
 8005ada:	4649      	mov	r1, r9
 8005adc:	eb43 0b01 	adc.w	fp, r3, r1
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005aec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005af4:	4692      	mov	sl, r2
 8005af6:	469b      	mov	fp, r3
 8005af8:	4643      	mov	r3, r8
 8005afa:	eb1a 0303 	adds.w	r3, sl, r3
 8005afe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b02:	464b      	mov	r3, r9
 8005b04:	eb4b 0303 	adc.w	r3, fp, r3
 8005b08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b20:	460b      	mov	r3, r1
 8005b22:	18db      	adds	r3, r3, r3
 8005b24:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b26:	4613      	mov	r3, r2
 8005b28:	eb42 0303 	adc.w	r3, r2, r3
 8005b2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b36:	f7fb f847 	bl	8000bc8 <__aeabi_uldivmod>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4611      	mov	r1, r2
 8005b40:	4b3b      	ldr	r3, [pc, #236]	@ (8005c30 <UART_SetConfig+0x2d4>)
 8005b42:	fba3 2301 	umull	r2, r3, r3, r1
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	2264      	movs	r2, #100	@ 0x64
 8005b4a:	fb02 f303 	mul.w	r3, r2, r3
 8005b4e:	1acb      	subs	r3, r1, r3
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b56:	4b36      	ldr	r3, [pc, #216]	@ (8005c30 <UART_SetConfig+0x2d4>)
 8005b58:	fba3 2302 	umull	r2, r3, r3, r2
 8005b5c:	095b      	lsrs	r3, r3, #5
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b64:	441c      	add	r4, r3
 8005b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b78:	4642      	mov	r2, r8
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	1891      	adds	r1, r2, r2
 8005b7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005b80:	415b      	adcs	r3, r3
 8005b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005b88:	4641      	mov	r1, r8
 8005b8a:	1851      	adds	r1, r2, r1
 8005b8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005b8e:	4649      	mov	r1, r9
 8005b90:	414b      	adcs	r3, r1
 8005b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ba0:	4659      	mov	r1, fp
 8005ba2:	00cb      	lsls	r3, r1, #3
 8005ba4:	4651      	mov	r1, sl
 8005ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005baa:	4651      	mov	r1, sl
 8005bac:	00ca      	lsls	r2, r1, #3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	189b      	adds	r3, r3, r2
 8005bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005bbc:	464b      	mov	r3, r9
 8005bbe:	460a      	mov	r2, r1
 8005bc0:	eb42 0303 	adc.w	r3, r2, r3
 8005bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005bd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005bd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005bdc:	460b      	mov	r3, r1
 8005bde:	18db      	adds	r3, r3, r3
 8005be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005be2:	4613      	mov	r3, r2
 8005be4:	eb42 0303 	adc.w	r3, r2, r3
 8005be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005bee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005bf2:	f7fa ffe9 	bl	8000bc8 <__aeabi_uldivmod>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005c30 <UART_SetConfig+0x2d4>)
 8005bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8005c00:	095b      	lsrs	r3, r3, #5
 8005c02:	2164      	movs	r1, #100	@ 0x64
 8005c04:	fb01 f303 	mul.w	r3, r1, r3
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	00db      	lsls	r3, r3, #3
 8005c0c:	3332      	adds	r3, #50	@ 0x32
 8005c0e:	4a08      	ldr	r2, [pc, #32]	@ (8005c30 <UART_SetConfig+0x2d4>)
 8005c10:	fba2 2303 	umull	r2, r3, r2, r3
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	f003 0207 	and.w	r2, r3, #7
 8005c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4422      	add	r2, r4
 8005c22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c24:	e106      	b.n	8005e34 <UART_SetConfig+0x4d8>
 8005c26:	bf00      	nop
 8005c28:	40011000 	.word	0x40011000
 8005c2c:	40011400 	.word	0x40011400
 8005c30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c46:	4642      	mov	r2, r8
 8005c48:	464b      	mov	r3, r9
 8005c4a:	1891      	adds	r1, r2, r2
 8005c4c:	6239      	str	r1, [r7, #32]
 8005c4e:	415b      	adcs	r3, r3
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c56:	4641      	mov	r1, r8
 8005c58:	1854      	adds	r4, r2, r1
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	eb43 0501 	adc.w	r5, r3, r1
 8005c60:	f04f 0200 	mov.w	r2, #0
 8005c64:	f04f 0300 	mov.w	r3, #0
 8005c68:	00eb      	lsls	r3, r5, #3
 8005c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c6e:	00e2      	lsls	r2, r4, #3
 8005c70:	4614      	mov	r4, r2
 8005c72:	461d      	mov	r5, r3
 8005c74:	4643      	mov	r3, r8
 8005c76:	18e3      	adds	r3, r4, r3
 8005c78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005c7c:	464b      	mov	r3, r9
 8005c7e:	eb45 0303 	adc.w	r3, r5, r3
 8005c82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	008b      	lsls	r3, r1, #2
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cac:	4621      	mov	r1, r4
 8005cae:	008a      	lsls	r2, r1, #2
 8005cb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005cb4:	f7fa ff88 	bl	8000bc8 <__aeabi_uldivmod>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4b60      	ldr	r3, [pc, #384]	@ (8005e40 <UART_SetConfig+0x4e4>)
 8005cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	011c      	lsls	r4, r3, #4
 8005cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005cd0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005cd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005cd8:	4642      	mov	r2, r8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	1891      	adds	r1, r2, r2
 8005cde:	61b9      	str	r1, [r7, #24]
 8005ce0:	415b      	adcs	r3, r3
 8005ce2:	61fb      	str	r3, [r7, #28]
 8005ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ce8:	4641      	mov	r1, r8
 8005cea:	1851      	adds	r1, r2, r1
 8005cec:	6139      	str	r1, [r7, #16]
 8005cee:	4649      	mov	r1, r9
 8005cf0:	414b      	adcs	r3, r1
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d00:	4659      	mov	r1, fp
 8005d02:	00cb      	lsls	r3, r1, #3
 8005d04:	4651      	mov	r1, sl
 8005d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d0a:	4651      	mov	r1, sl
 8005d0c:	00ca      	lsls	r2, r1, #3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	4619      	mov	r1, r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	4642      	mov	r2, r8
 8005d16:	189b      	adds	r3, r3, r2
 8005d18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	460a      	mov	r2, r1
 8005d20:	eb42 0303 	adc.w	r3, r2, r3
 8005d24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d34:	f04f 0200 	mov.w	r2, #0
 8005d38:	f04f 0300 	mov.w	r3, #0
 8005d3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d40:	4649      	mov	r1, r9
 8005d42:	008b      	lsls	r3, r1, #2
 8005d44:	4641      	mov	r1, r8
 8005d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d4a:	4641      	mov	r1, r8
 8005d4c:	008a      	lsls	r2, r1, #2
 8005d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d52:	f7fa ff39 	bl	8000bc8 <__aeabi_uldivmod>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4b38      	ldr	r3, [pc, #224]	@ (8005e40 <UART_SetConfig+0x4e4>)
 8005d5e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d62:	095b      	lsrs	r3, r3, #5
 8005d64:	2264      	movs	r2, #100	@ 0x64
 8005d66:	fb02 f303 	mul.w	r3, r2, r3
 8005d6a:	1acb      	subs	r3, r1, r3
 8005d6c:	011b      	lsls	r3, r3, #4
 8005d6e:	3332      	adds	r3, #50	@ 0x32
 8005d70:	4a33      	ldr	r2, [pc, #204]	@ (8005e40 <UART_SetConfig+0x4e4>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	095b      	lsrs	r3, r3, #5
 8005d78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d7c:	441c      	add	r4, r3
 8005d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d82:	2200      	movs	r2, #0
 8005d84:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d86:	677a      	str	r2, [r7, #116]	@ 0x74
 8005d88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	464b      	mov	r3, r9
 8005d90:	1891      	adds	r1, r2, r2
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	415b      	adcs	r3, r3
 8005d96:	60fb      	str	r3, [r7, #12]
 8005d98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	1851      	adds	r1, r2, r1
 8005da0:	6039      	str	r1, [r7, #0]
 8005da2:	4649      	mov	r1, r9
 8005da4:	414b      	adcs	r3, r1
 8005da6:	607b      	str	r3, [r7, #4]
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005db4:	4659      	mov	r1, fp
 8005db6:	00cb      	lsls	r3, r1, #3
 8005db8:	4651      	mov	r1, sl
 8005dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dbe:	4651      	mov	r1, sl
 8005dc0:	00ca      	lsls	r2, r1, #3
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	4642      	mov	r2, r8
 8005dca:	189b      	adds	r3, r3, r2
 8005dcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dce:	464b      	mov	r3, r9
 8005dd0:	460a      	mov	r2, r1
 8005dd2:	eb42 0303 	adc.w	r3, r2, r3
 8005dd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005de2:	667a      	str	r2, [r7, #100]	@ 0x64
 8005de4:	f04f 0200 	mov.w	r2, #0
 8005de8:	f04f 0300 	mov.w	r3, #0
 8005dec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005df0:	4649      	mov	r1, r9
 8005df2:	008b      	lsls	r3, r1, #2
 8005df4:	4641      	mov	r1, r8
 8005df6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dfa:	4641      	mov	r1, r8
 8005dfc:	008a      	lsls	r2, r1, #2
 8005dfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e02:	f7fa fee1 	bl	8000bc8 <__aeabi_uldivmod>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e40 <UART_SetConfig+0x4e4>)
 8005e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	2164      	movs	r1, #100	@ 0x64
 8005e14:	fb01 f303 	mul.w	r3, r1, r3
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	3332      	adds	r3, #50	@ 0x32
 8005e1e:	4a08      	ldr	r2, [pc, #32]	@ (8005e40 <UART_SetConfig+0x4e4>)
 8005e20:	fba2 2303 	umull	r2, r3, r2, r3
 8005e24:	095b      	lsrs	r3, r3, #5
 8005e26:	f003 020f 	and.w	r2, r3, #15
 8005e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4422      	add	r2, r4
 8005e32:	609a      	str	r2, [r3, #8]
}
 8005e34:	bf00      	nop
 8005e36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e40:	51eb851f 	.word	0x51eb851f

08005e44 <atoi>:
 8005e44:	220a      	movs	r2, #10
 8005e46:	2100      	movs	r1, #0
 8005e48:	f000 b966 	b.w	8006118 <strtol>

08005e4c <malloc>:
 8005e4c:	4b02      	ldr	r3, [pc, #8]	@ (8005e58 <malloc+0xc>)
 8005e4e:	4601      	mov	r1, r0
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	f000 b82d 	b.w	8005eb0 <_malloc_r>
 8005e56:	bf00      	nop
 8005e58:	20000018 	.word	0x20000018

08005e5c <free>:
 8005e5c:	4b02      	ldr	r3, [pc, #8]	@ (8005e68 <free+0xc>)
 8005e5e:	4601      	mov	r1, r0
 8005e60:	6818      	ldr	r0, [r3, #0]
 8005e62:	f001 bed1 	b.w	8007c08 <_free_r>
 8005e66:	bf00      	nop
 8005e68:	20000018 	.word	0x20000018

08005e6c <sbrk_aligned>:
 8005e6c:	b570      	push	{r4, r5, r6, lr}
 8005e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8005eac <sbrk_aligned+0x40>)
 8005e70:	460c      	mov	r4, r1
 8005e72:	6831      	ldr	r1, [r6, #0]
 8005e74:	4605      	mov	r5, r0
 8005e76:	b911      	cbnz	r1, 8005e7e <sbrk_aligned+0x12>
 8005e78:	f001 f81c 	bl	8006eb4 <_sbrk_r>
 8005e7c:	6030      	str	r0, [r6, #0]
 8005e7e:	4621      	mov	r1, r4
 8005e80:	4628      	mov	r0, r5
 8005e82:	f001 f817 	bl	8006eb4 <_sbrk_r>
 8005e86:	1c43      	adds	r3, r0, #1
 8005e88:	d103      	bne.n	8005e92 <sbrk_aligned+0x26>
 8005e8a:	f04f 34ff 	mov.w	r4, #4294967295
 8005e8e:	4620      	mov	r0, r4
 8005e90:	bd70      	pop	{r4, r5, r6, pc}
 8005e92:	1cc4      	adds	r4, r0, #3
 8005e94:	f024 0403 	bic.w	r4, r4, #3
 8005e98:	42a0      	cmp	r0, r4
 8005e9a:	d0f8      	beq.n	8005e8e <sbrk_aligned+0x22>
 8005e9c:	1a21      	subs	r1, r4, r0
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f001 f808 	bl	8006eb4 <_sbrk_r>
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d1f2      	bne.n	8005e8e <sbrk_aligned+0x22>
 8005ea8:	e7ef      	b.n	8005e8a <sbrk_aligned+0x1e>
 8005eaa:	bf00      	nop
 8005eac:	20000580 	.word	0x20000580

08005eb0 <_malloc_r>:
 8005eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb4:	1ccd      	adds	r5, r1, #3
 8005eb6:	f025 0503 	bic.w	r5, r5, #3
 8005eba:	3508      	adds	r5, #8
 8005ebc:	2d0c      	cmp	r5, #12
 8005ebe:	bf38      	it	cc
 8005ec0:	250c      	movcc	r5, #12
 8005ec2:	2d00      	cmp	r5, #0
 8005ec4:	4606      	mov	r6, r0
 8005ec6:	db01      	blt.n	8005ecc <_malloc_r+0x1c>
 8005ec8:	42a9      	cmp	r1, r5
 8005eca:	d904      	bls.n	8005ed6 <_malloc_r+0x26>
 8005ecc:	230c      	movs	r3, #12
 8005ece:	6033      	str	r3, [r6, #0]
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ed6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005fac <_malloc_r+0xfc>
 8005eda:	f000 f869 	bl	8005fb0 <__malloc_lock>
 8005ede:	f8d8 3000 	ldr.w	r3, [r8]
 8005ee2:	461c      	mov	r4, r3
 8005ee4:	bb44      	cbnz	r4, 8005f38 <_malloc_r+0x88>
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f7ff ffbf 	bl	8005e6c <sbrk_aligned>
 8005eee:	1c43      	adds	r3, r0, #1
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	d158      	bne.n	8005fa6 <_malloc_r+0xf6>
 8005ef4:	f8d8 4000 	ldr.w	r4, [r8]
 8005ef8:	4627      	mov	r7, r4
 8005efa:	2f00      	cmp	r7, #0
 8005efc:	d143      	bne.n	8005f86 <_malloc_r+0xd6>
 8005efe:	2c00      	cmp	r4, #0
 8005f00:	d04b      	beq.n	8005f9a <_malloc_r+0xea>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	4639      	mov	r1, r7
 8005f06:	4630      	mov	r0, r6
 8005f08:	eb04 0903 	add.w	r9, r4, r3
 8005f0c:	f000 ffd2 	bl	8006eb4 <_sbrk_r>
 8005f10:	4581      	cmp	r9, r0
 8005f12:	d142      	bne.n	8005f9a <_malloc_r+0xea>
 8005f14:	6821      	ldr	r1, [r4, #0]
 8005f16:	1a6d      	subs	r5, r5, r1
 8005f18:	4629      	mov	r1, r5
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f7ff ffa6 	bl	8005e6c <sbrk_aligned>
 8005f20:	3001      	adds	r0, #1
 8005f22:	d03a      	beq.n	8005f9a <_malloc_r+0xea>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	442b      	add	r3, r5
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	bb62      	cbnz	r2, 8005f8c <_malloc_r+0xdc>
 8005f32:	f8c8 7000 	str.w	r7, [r8]
 8005f36:	e00f      	b.n	8005f58 <_malloc_r+0xa8>
 8005f38:	6822      	ldr	r2, [r4, #0]
 8005f3a:	1b52      	subs	r2, r2, r5
 8005f3c:	d420      	bmi.n	8005f80 <_malloc_r+0xd0>
 8005f3e:	2a0b      	cmp	r2, #11
 8005f40:	d917      	bls.n	8005f72 <_malloc_r+0xc2>
 8005f42:	1961      	adds	r1, r4, r5
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	6025      	str	r5, [r4, #0]
 8005f48:	bf18      	it	ne
 8005f4a:	6059      	strne	r1, [r3, #4]
 8005f4c:	6863      	ldr	r3, [r4, #4]
 8005f4e:	bf08      	it	eq
 8005f50:	f8c8 1000 	streq.w	r1, [r8]
 8005f54:	5162      	str	r2, [r4, r5]
 8005f56:	604b      	str	r3, [r1, #4]
 8005f58:	4630      	mov	r0, r6
 8005f5a:	f000 f82f 	bl	8005fbc <__malloc_unlock>
 8005f5e:	f104 000b 	add.w	r0, r4, #11
 8005f62:	1d23      	adds	r3, r4, #4
 8005f64:	f020 0007 	bic.w	r0, r0, #7
 8005f68:	1ac2      	subs	r2, r0, r3
 8005f6a:	bf1c      	itt	ne
 8005f6c:	1a1b      	subne	r3, r3, r0
 8005f6e:	50a3      	strne	r3, [r4, r2]
 8005f70:	e7af      	b.n	8005ed2 <_malloc_r+0x22>
 8005f72:	6862      	ldr	r2, [r4, #4]
 8005f74:	42a3      	cmp	r3, r4
 8005f76:	bf0c      	ite	eq
 8005f78:	f8c8 2000 	streq.w	r2, [r8]
 8005f7c:	605a      	strne	r2, [r3, #4]
 8005f7e:	e7eb      	b.n	8005f58 <_malloc_r+0xa8>
 8005f80:	4623      	mov	r3, r4
 8005f82:	6864      	ldr	r4, [r4, #4]
 8005f84:	e7ae      	b.n	8005ee4 <_malloc_r+0x34>
 8005f86:	463c      	mov	r4, r7
 8005f88:	687f      	ldr	r7, [r7, #4]
 8005f8a:	e7b6      	b.n	8005efa <_malloc_r+0x4a>
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	d1fb      	bne.n	8005f8c <_malloc_r+0xdc>
 8005f94:	2300      	movs	r3, #0
 8005f96:	6053      	str	r3, [r2, #4]
 8005f98:	e7de      	b.n	8005f58 <_malloc_r+0xa8>
 8005f9a:	230c      	movs	r3, #12
 8005f9c:	6033      	str	r3, [r6, #0]
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f000 f80c 	bl	8005fbc <__malloc_unlock>
 8005fa4:	e794      	b.n	8005ed0 <_malloc_r+0x20>
 8005fa6:	6005      	str	r5, [r0, #0]
 8005fa8:	e7d6      	b.n	8005f58 <_malloc_r+0xa8>
 8005faa:	bf00      	nop
 8005fac:	20000584 	.word	0x20000584

08005fb0 <__malloc_lock>:
 8005fb0:	4801      	ldr	r0, [pc, #4]	@ (8005fb8 <__malloc_lock+0x8>)
 8005fb2:	f000 bfcc 	b.w	8006f4e <__retarget_lock_acquire_recursive>
 8005fb6:	bf00      	nop
 8005fb8:	200006c8 	.word	0x200006c8

08005fbc <__malloc_unlock>:
 8005fbc:	4801      	ldr	r0, [pc, #4]	@ (8005fc4 <__malloc_unlock+0x8>)
 8005fbe:	f000 bfc7 	b.w	8006f50 <__retarget_lock_release_recursive>
 8005fc2:	bf00      	nop
 8005fc4:	200006c8 	.word	0x200006c8

08005fc8 <_realloc_r>:
 8005fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fcc:	4680      	mov	r8, r0
 8005fce:	4615      	mov	r5, r2
 8005fd0:	460c      	mov	r4, r1
 8005fd2:	b921      	cbnz	r1, 8005fde <_realloc_r+0x16>
 8005fd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd8:	4611      	mov	r1, r2
 8005fda:	f7ff bf69 	b.w	8005eb0 <_malloc_r>
 8005fde:	b92a      	cbnz	r2, 8005fec <_realloc_r+0x24>
 8005fe0:	f001 fe12 	bl	8007c08 <_free_r>
 8005fe4:	2400      	movs	r4, #0
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fec:	f002 f9d8 	bl	80083a0 <_malloc_usable_size_r>
 8005ff0:	4285      	cmp	r5, r0
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	d802      	bhi.n	8005ffc <_realloc_r+0x34>
 8005ff6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005ffa:	d8f4      	bhi.n	8005fe6 <_realloc_r+0x1e>
 8005ffc:	4629      	mov	r1, r5
 8005ffe:	4640      	mov	r0, r8
 8006000:	f7ff ff56 	bl	8005eb0 <_malloc_r>
 8006004:	4607      	mov	r7, r0
 8006006:	2800      	cmp	r0, #0
 8006008:	d0ec      	beq.n	8005fe4 <_realloc_r+0x1c>
 800600a:	42b5      	cmp	r5, r6
 800600c:	462a      	mov	r2, r5
 800600e:	4621      	mov	r1, r4
 8006010:	bf28      	it	cs
 8006012:	4632      	movcs	r2, r6
 8006014:	f000 ff9d 	bl	8006f52 <memcpy>
 8006018:	4621      	mov	r1, r4
 800601a:	4640      	mov	r0, r8
 800601c:	f001 fdf4 	bl	8007c08 <_free_r>
 8006020:	463c      	mov	r4, r7
 8006022:	e7e0      	b.n	8005fe6 <_realloc_r+0x1e>

08006024 <_strtol_l.constprop.0>:
 8006024:	2b24      	cmp	r3, #36	@ 0x24
 8006026:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800602a:	4686      	mov	lr, r0
 800602c:	4690      	mov	r8, r2
 800602e:	d801      	bhi.n	8006034 <_strtol_l.constprop.0+0x10>
 8006030:	2b01      	cmp	r3, #1
 8006032:	d106      	bne.n	8006042 <_strtol_l.constprop.0+0x1e>
 8006034:	f000 ff60 	bl	8006ef8 <__errno>
 8006038:	2316      	movs	r3, #22
 800603a:	6003      	str	r3, [r0, #0]
 800603c:	2000      	movs	r0, #0
 800603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006042:	4834      	ldr	r0, [pc, #208]	@ (8006114 <_strtol_l.constprop.0+0xf0>)
 8006044:	460d      	mov	r5, r1
 8006046:	462a      	mov	r2, r5
 8006048:	f815 4b01 	ldrb.w	r4, [r5], #1
 800604c:	5d06      	ldrb	r6, [r0, r4]
 800604e:	f016 0608 	ands.w	r6, r6, #8
 8006052:	d1f8      	bne.n	8006046 <_strtol_l.constprop.0+0x22>
 8006054:	2c2d      	cmp	r4, #45	@ 0x2d
 8006056:	d12d      	bne.n	80060b4 <_strtol_l.constprop.0+0x90>
 8006058:	782c      	ldrb	r4, [r5, #0]
 800605a:	2601      	movs	r6, #1
 800605c:	1c95      	adds	r5, r2, #2
 800605e:	f033 0210 	bics.w	r2, r3, #16
 8006062:	d109      	bne.n	8006078 <_strtol_l.constprop.0+0x54>
 8006064:	2c30      	cmp	r4, #48	@ 0x30
 8006066:	d12a      	bne.n	80060be <_strtol_l.constprop.0+0x9a>
 8006068:	782a      	ldrb	r2, [r5, #0]
 800606a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800606e:	2a58      	cmp	r2, #88	@ 0x58
 8006070:	d125      	bne.n	80060be <_strtol_l.constprop.0+0x9a>
 8006072:	786c      	ldrb	r4, [r5, #1]
 8006074:	2310      	movs	r3, #16
 8006076:	3502      	adds	r5, #2
 8006078:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800607c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006080:	2200      	movs	r2, #0
 8006082:	fbbc f9f3 	udiv	r9, ip, r3
 8006086:	4610      	mov	r0, r2
 8006088:	fb03 ca19 	mls	sl, r3, r9, ip
 800608c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006090:	2f09      	cmp	r7, #9
 8006092:	d81b      	bhi.n	80060cc <_strtol_l.constprop.0+0xa8>
 8006094:	463c      	mov	r4, r7
 8006096:	42a3      	cmp	r3, r4
 8006098:	dd27      	ble.n	80060ea <_strtol_l.constprop.0+0xc6>
 800609a:	1c57      	adds	r7, r2, #1
 800609c:	d007      	beq.n	80060ae <_strtol_l.constprop.0+0x8a>
 800609e:	4581      	cmp	r9, r0
 80060a0:	d320      	bcc.n	80060e4 <_strtol_l.constprop.0+0xc0>
 80060a2:	d101      	bne.n	80060a8 <_strtol_l.constprop.0+0x84>
 80060a4:	45a2      	cmp	sl, r4
 80060a6:	db1d      	blt.n	80060e4 <_strtol_l.constprop.0+0xc0>
 80060a8:	fb00 4003 	mla	r0, r0, r3, r4
 80060ac:	2201      	movs	r2, #1
 80060ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060b2:	e7eb      	b.n	800608c <_strtol_l.constprop.0+0x68>
 80060b4:	2c2b      	cmp	r4, #43	@ 0x2b
 80060b6:	bf04      	itt	eq
 80060b8:	782c      	ldrbeq	r4, [r5, #0]
 80060ba:	1c95      	addeq	r5, r2, #2
 80060bc:	e7cf      	b.n	800605e <_strtol_l.constprop.0+0x3a>
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1da      	bne.n	8006078 <_strtol_l.constprop.0+0x54>
 80060c2:	2c30      	cmp	r4, #48	@ 0x30
 80060c4:	bf0c      	ite	eq
 80060c6:	2308      	moveq	r3, #8
 80060c8:	230a      	movne	r3, #10
 80060ca:	e7d5      	b.n	8006078 <_strtol_l.constprop.0+0x54>
 80060cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80060d0:	2f19      	cmp	r7, #25
 80060d2:	d801      	bhi.n	80060d8 <_strtol_l.constprop.0+0xb4>
 80060d4:	3c37      	subs	r4, #55	@ 0x37
 80060d6:	e7de      	b.n	8006096 <_strtol_l.constprop.0+0x72>
 80060d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80060dc:	2f19      	cmp	r7, #25
 80060de:	d804      	bhi.n	80060ea <_strtol_l.constprop.0+0xc6>
 80060e0:	3c57      	subs	r4, #87	@ 0x57
 80060e2:	e7d8      	b.n	8006096 <_strtol_l.constprop.0+0x72>
 80060e4:	f04f 32ff 	mov.w	r2, #4294967295
 80060e8:	e7e1      	b.n	80060ae <_strtol_l.constprop.0+0x8a>
 80060ea:	1c53      	adds	r3, r2, #1
 80060ec:	d108      	bne.n	8006100 <_strtol_l.constprop.0+0xdc>
 80060ee:	2322      	movs	r3, #34	@ 0x22
 80060f0:	f8ce 3000 	str.w	r3, [lr]
 80060f4:	4660      	mov	r0, ip
 80060f6:	f1b8 0f00 	cmp.w	r8, #0
 80060fa:	d0a0      	beq.n	800603e <_strtol_l.constprop.0+0x1a>
 80060fc:	1e69      	subs	r1, r5, #1
 80060fe:	e006      	b.n	800610e <_strtol_l.constprop.0+0xea>
 8006100:	b106      	cbz	r6, 8006104 <_strtol_l.constprop.0+0xe0>
 8006102:	4240      	negs	r0, r0
 8006104:	f1b8 0f00 	cmp.w	r8, #0
 8006108:	d099      	beq.n	800603e <_strtol_l.constprop.0+0x1a>
 800610a:	2a00      	cmp	r2, #0
 800610c:	d1f6      	bne.n	80060fc <_strtol_l.constprop.0+0xd8>
 800610e:	f8c8 1000 	str.w	r1, [r8]
 8006112:	e794      	b.n	800603e <_strtol_l.constprop.0+0x1a>
 8006114:	08008dd5 	.word	0x08008dd5

08006118 <strtol>:
 8006118:	4613      	mov	r3, r2
 800611a:	460a      	mov	r2, r1
 800611c:	4601      	mov	r1, r0
 800611e:	4802      	ldr	r0, [pc, #8]	@ (8006128 <strtol+0x10>)
 8006120:	6800      	ldr	r0, [r0, #0]
 8006122:	f7ff bf7f 	b.w	8006024 <_strtol_l.constprop.0>
 8006126:	bf00      	nop
 8006128:	20000018 	.word	0x20000018

0800612c <__cvt>:
 800612c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	ec57 6b10 	vmov	r6, r7, d0
 8006134:	2f00      	cmp	r7, #0
 8006136:	460c      	mov	r4, r1
 8006138:	4619      	mov	r1, r3
 800613a:	463b      	mov	r3, r7
 800613c:	bfbb      	ittet	lt
 800613e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006142:	461f      	movlt	r7, r3
 8006144:	2300      	movge	r3, #0
 8006146:	232d      	movlt	r3, #45	@ 0x2d
 8006148:	700b      	strb	r3, [r1, #0]
 800614a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800614c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006150:	4691      	mov	r9, r2
 8006152:	f023 0820 	bic.w	r8, r3, #32
 8006156:	bfbc      	itt	lt
 8006158:	4632      	movlt	r2, r6
 800615a:	4616      	movlt	r6, r2
 800615c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006160:	d005      	beq.n	800616e <__cvt+0x42>
 8006162:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006166:	d100      	bne.n	800616a <__cvt+0x3e>
 8006168:	3401      	adds	r4, #1
 800616a:	2102      	movs	r1, #2
 800616c:	e000      	b.n	8006170 <__cvt+0x44>
 800616e:	2103      	movs	r1, #3
 8006170:	ab03      	add	r3, sp, #12
 8006172:	9301      	str	r3, [sp, #4]
 8006174:	ab02      	add	r3, sp, #8
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	ec47 6b10 	vmov	d0, r6, r7
 800617c:	4653      	mov	r3, sl
 800617e:	4622      	mov	r2, r4
 8006180:	f000 ff7e 	bl	8007080 <_dtoa_r>
 8006184:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006188:	4605      	mov	r5, r0
 800618a:	d119      	bne.n	80061c0 <__cvt+0x94>
 800618c:	f019 0f01 	tst.w	r9, #1
 8006190:	d00e      	beq.n	80061b0 <__cvt+0x84>
 8006192:	eb00 0904 	add.w	r9, r0, r4
 8006196:	2200      	movs	r2, #0
 8006198:	2300      	movs	r3, #0
 800619a:	4630      	mov	r0, r6
 800619c:	4639      	mov	r1, r7
 800619e:	f7fa fca3 	bl	8000ae8 <__aeabi_dcmpeq>
 80061a2:	b108      	cbz	r0, 80061a8 <__cvt+0x7c>
 80061a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80061a8:	2230      	movs	r2, #48	@ 0x30
 80061aa:	9b03      	ldr	r3, [sp, #12]
 80061ac:	454b      	cmp	r3, r9
 80061ae:	d31e      	bcc.n	80061ee <__cvt+0xc2>
 80061b0:	9b03      	ldr	r3, [sp, #12]
 80061b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061b4:	1b5b      	subs	r3, r3, r5
 80061b6:	4628      	mov	r0, r5
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	b004      	add	sp, #16
 80061bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061c4:	eb00 0904 	add.w	r9, r0, r4
 80061c8:	d1e5      	bne.n	8006196 <__cvt+0x6a>
 80061ca:	7803      	ldrb	r3, [r0, #0]
 80061cc:	2b30      	cmp	r3, #48	@ 0x30
 80061ce:	d10a      	bne.n	80061e6 <__cvt+0xba>
 80061d0:	2200      	movs	r2, #0
 80061d2:	2300      	movs	r3, #0
 80061d4:	4630      	mov	r0, r6
 80061d6:	4639      	mov	r1, r7
 80061d8:	f7fa fc86 	bl	8000ae8 <__aeabi_dcmpeq>
 80061dc:	b918      	cbnz	r0, 80061e6 <__cvt+0xba>
 80061de:	f1c4 0401 	rsb	r4, r4, #1
 80061e2:	f8ca 4000 	str.w	r4, [sl]
 80061e6:	f8da 3000 	ldr.w	r3, [sl]
 80061ea:	4499      	add	r9, r3
 80061ec:	e7d3      	b.n	8006196 <__cvt+0x6a>
 80061ee:	1c59      	adds	r1, r3, #1
 80061f0:	9103      	str	r1, [sp, #12]
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	e7d9      	b.n	80061aa <__cvt+0x7e>

080061f6 <__exponent>:
 80061f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061f8:	2900      	cmp	r1, #0
 80061fa:	bfba      	itte	lt
 80061fc:	4249      	neglt	r1, r1
 80061fe:	232d      	movlt	r3, #45	@ 0x2d
 8006200:	232b      	movge	r3, #43	@ 0x2b
 8006202:	2909      	cmp	r1, #9
 8006204:	7002      	strb	r2, [r0, #0]
 8006206:	7043      	strb	r3, [r0, #1]
 8006208:	dd29      	ble.n	800625e <__exponent+0x68>
 800620a:	f10d 0307 	add.w	r3, sp, #7
 800620e:	461d      	mov	r5, r3
 8006210:	270a      	movs	r7, #10
 8006212:	461a      	mov	r2, r3
 8006214:	fbb1 f6f7 	udiv	r6, r1, r7
 8006218:	fb07 1416 	mls	r4, r7, r6, r1
 800621c:	3430      	adds	r4, #48	@ 0x30
 800621e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006222:	460c      	mov	r4, r1
 8006224:	2c63      	cmp	r4, #99	@ 0x63
 8006226:	f103 33ff 	add.w	r3, r3, #4294967295
 800622a:	4631      	mov	r1, r6
 800622c:	dcf1      	bgt.n	8006212 <__exponent+0x1c>
 800622e:	3130      	adds	r1, #48	@ 0x30
 8006230:	1e94      	subs	r4, r2, #2
 8006232:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006236:	1c41      	adds	r1, r0, #1
 8006238:	4623      	mov	r3, r4
 800623a:	42ab      	cmp	r3, r5
 800623c:	d30a      	bcc.n	8006254 <__exponent+0x5e>
 800623e:	f10d 0309 	add.w	r3, sp, #9
 8006242:	1a9b      	subs	r3, r3, r2
 8006244:	42ac      	cmp	r4, r5
 8006246:	bf88      	it	hi
 8006248:	2300      	movhi	r3, #0
 800624a:	3302      	adds	r3, #2
 800624c:	4403      	add	r3, r0
 800624e:	1a18      	subs	r0, r3, r0
 8006250:	b003      	add	sp, #12
 8006252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006254:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006258:	f801 6f01 	strb.w	r6, [r1, #1]!
 800625c:	e7ed      	b.n	800623a <__exponent+0x44>
 800625e:	2330      	movs	r3, #48	@ 0x30
 8006260:	3130      	adds	r1, #48	@ 0x30
 8006262:	7083      	strb	r3, [r0, #2]
 8006264:	70c1      	strb	r1, [r0, #3]
 8006266:	1d03      	adds	r3, r0, #4
 8006268:	e7f1      	b.n	800624e <__exponent+0x58>
	...

0800626c <_printf_float>:
 800626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006270:	b08d      	sub	sp, #52	@ 0x34
 8006272:	460c      	mov	r4, r1
 8006274:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006278:	4616      	mov	r6, r2
 800627a:	461f      	mov	r7, r3
 800627c:	4605      	mov	r5, r0
 800627e:	f000 fde1 	bl	8006e44 <_localeconv_r>
 8006282:	6803      	ldr	r3, [r0, #0]
 8006284:	9304      	str	r3, [sp, #16]
 8006286:	4618      	mov	r0, r3
 8006288:	f7fa f802 	bl	8000290 <strlen>
 800628c:	2300      	movs	r3, #0
 800628e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006290:	f8d8 3000 	ldr.w	r3, [r8]
 8006294:	9005      	str	r0, [sp, #20]
 8006296:	3307      	adds	r3, #7
 8006298:	f023 0307 	bic.w	r3, r3, #7
 800629c:	f103 0208 	add.w	r2, r3, #8
 80062a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80062a4:	f8d4 b000 	ldr.w	fp, [r4]
 80062a8:	f8c8 2000 	str.w	r2, [r8]
 80062ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80062b4:	9307      	str	r3, [sp, #28]
 80062b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80062ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80062be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062c2:	4b9c      	ldr	r3, [pc, #624]	@ (8006534 <_printf_float+0x2c8>)
 80062c4:	f04f 32ff 	mov.w	r2, #4294967295
 80062c8:	f7fa fc40 	bl	8000b4c <__aeabi_dcmpun>
 80062cc:	bb70      	cbnz	r0, 800632c <_printf_float+0xc0>
 80062ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062d2:	4b98      	ldr	r3, [pc, #608]	@ (8006534 <_printf_float+0x2c8>)
 80062d4:	f04f 32ff 	mov.w	r2, #4294967295
 80062d8:	f7fa fc1a 	bl	8000b10 <__aeabi_dcmple>
 80062dc:	bb30      	cbnz	r0, 800632c <_printf_float+0xc0>
 80062de:	2200      	movs	r2, #0
 80062e0:	2300      	movs	r3, #0
 80062e2:	4640      	mov	r0, r8
 80062e4:	4649      	mov	r1, r9
 80062e6:	f7fa fc09 	bl	8000afc <__aeabi_dcmplt>
 80062ea:	b110      	cbz	r0, 80062f2 <_printf_float+0x86>
 80062ec:	232d      	movs	r3, #45	@ 0x2d
 80062ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062f2:	4a91      	ldr	r2, [pc, #580]	@ (8006538 <_printf_float+0x2cc>)
 80062f4:	4b91      	ldr	r3, [pc, #580]	@ (800653c <_printf_float+0x2d0>)
 80062f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80062fa:	bf94      	ite	ls
 80062fc:	4690      	movls	r8, r2
 80062fe:	4698      	movhi	r8, r3
 8006300:	2303      	movs	r3, #3
 8006302:	6123      	str	r3, [r4, #16]
 8006304:	f02b 0304 	bic.w	r3, fp, #4
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	f04f 0900 	mov.w	r9, #0
 800630e:	9700      	str	r7, [sp, #0]
 8006310:	4633      	mov	r3, r6
 8006312:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006314:	4621      	mov	r1, r4
 8006316:	4628      	mov	r0, r5
 8006318:	f000 f9d2 	bl	80066c0 <_printf_common>
 800631c:	3001      	adds	r0, #1
 800631e:	f040 808d 	bne.w	800643c <_printf_float+0x1d0>
 8006322:	f04f 30ff 	mov.w	r0, #4294967295
 8006326:	b00d      	add	sp, #52	@ 0x34
 8006328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632c:	4642      	mov	r2, r8
 800632e:	464b      	mov	r3, r9
 8006330:	4640      	mov	r0, r8
 8006332:	4649      	mov	r1, r9
 8006334:	f7fa fc0a 	bl	8000b4c <__aeabi_dcmpun>
 8006338:	b140      	cbz	r0, 800634c <_printf_float+0xe0>
 800633a:	464b      	mov	r3, r9
 800633c:	2b00      	cmp	r3, #0
 800633e:	bfbc      	itt	lt
 8006340:	232d      	movlt	r3, #45	@ 0x2d
 8006342:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006346:	4a7e      	ldr	r2, [pc, #504]	@ (8006540 <_printf_float+0x2d4>)
 8006348:	4b7e      	ldr	r3, [pc, #504]	@ (8006544 <_printf_float+0x2d8>)
 800634a:	e7d4      	b.n	80062f6 <_printf_float+0x8a>
 800634c:	6863      	ldr	r3, [r4, #4]
 800634e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006352:	9206      	str	r2, [sp, #24]
 8006354:	1c5a      	adds	r2, r3, #1
 8006356:	d13b      	bne.n	80063d0 <_printf_float+0x164>
 8006358:	2306      	movs	r3, #6
 800635a:	6063      	str	r3, [r4, #4]
 800635c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006360:	2300      	movs	r3, #0
 8006362:	6022      	str	r2, [r4, #0]
 8006364:	9303      	str	r3, [sp, #12]
 8006366:	ab0a      	add	r3, sp, #40	@ 0x28
 8006368:	e9cd a301 	strd	sl, r3, [sp, #4]
 800636c:	ab09      	add	r3, sp, #36	@ 0x24
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	6861      	ldr	r1, [r4, #4]
 8006372:	ec49 8b10 	vmov	d0, r8, r9
 8006376:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800637a:	4628      	mov	r0, r5
 800637c:	f7ff fed6 	bl	800612c <__cvt>
 8006380:	9b06      	ldr	r3, [sp, #24]
 8006382:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006384:	2b47      	cmp	r3, #71	@ 0x47
 8006386:	4680      	mov	r8, r0
 8006388:	d129      	bne.n	80063de <_printf_float+0x172>
 800638a:	1cc8      	adds	r0, r1, #3
 800638c:	db02      	blt.n	8006394 <_printf_float+0x128>
 800638e:	6863      	ldr	r3, [r4, #4]
 8006390:	4299      	cmp	r1, r3
 8006392:	dd41      	ble.n	8006418 <_printf_float+0x1ac>
 8006394:	f1aa 0a02 	sub.w	sl, sl, #2
 8006398:	fa5f fa8a 	uxtb.w	sl, sl
 800639c:	3901      	subs	r1, #1
 800639e:	4652      	mov	r2, sl
 80063a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80063a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80063a6:	f7ff ff26 	bl	80061f6 <__exponent>
 80063aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063ac:	1813      	adds	r3, r2, r0
 80063ae:	2a01      	cmp	r2, #1
 80063b0:	4681      	mov	r9, r0
 80063b2:	6123      	str	r3, [r4, #16]
 80063b4:	dc02      	bgt.n	80063bc <_printf_float+0x150>
 80063b6:	6822      	ldr	r2, [r4, #0]
 80063b8:	07d2      	lsls	r2, r2, #31
 80063ba:	d501      	bpl.n	80063c0 <_printf_float+0x154>
 80063bc:	3301      	adds	r3, #1
 80063be:	6123      	str	r3, [r4, #16]
 80063c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d0a2      	beq.n	800630e <_printf_float+0xa2>
 80063c8:	232d      	movs	r3, #45	@ 0x2d
 80063ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063ce:	e79e      	b.n	800630e <_printf_float+0xa2>
 80063d0:	9a06      	ldr	r2, [sp, #24]
 80063d2:	2a47      	cmp	r2, #71	@ 0x47
 80063d4:	d1c2      	bne.n	800635c <_printf_float+0xf0>
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1c0      	bne.n	800635c <_printf_float+0xf0>
 80063da:	2301      	movs	r3, #1
 80063dc:	e7bd      	b.n	800635a <_printf_float+0xee>
 80063de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063e2:	d9db      	bls.n	800639c <_printf_float+0x130>
 80063e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80063e8:	d118      	bne.n	800641c <_printf_float+0x1b0>
 80063ea:	2900      	cmp	r1, #0
 80063ec:	6863      	ldr	r3, [r4, #4]
 80063ee:	dd0b      	ble.n	8006408 <_printf_float+0x19c>
 80063f0:	6121      	str	r1, [r4, #16]
 80063f2:	b913      	cbnz	r3, 80063fa <_printf_float+0x18e>
 80063f4:	6822      	ldr	r2, [r4, #0]
 80063f6:	07d0      	lsls	r0, r2, #31
 80063f8:	d502      	bpl.n	8006400 <_printf_float+0x194>
 80063fa:	3301      	adds	r3, #1
 80063fc:	440b      	add	r3, r1
 80063fe:	6123      	str	r3, [r4, #16]
 8006400:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006402:	f04f 0900 	mov.w	r9, #0
 8006406:	e7db      	b.n	80063c0 <_printf_float+0x154>
 8006408:	b913      	cbnz	r3, 8006410 <_printf_float+0x1a4>
 800640a:	6822      	ldr	r2, [r4, #0]
 800640c:	07d2      	lsls	r2, r2, #31
 800640e:	d501      	bpl.n	8006414 <_printf_float+0x1a8>
 8006410:	3302      	adds	r3, #2
 8006412:	e7f4      	b.n	80063fe <_printf_float+0x192>
 8006414:	2301      	movs	r3, #1
 8006416:	e7f2      	b.n	80063fe <_printf_float+0x192>
 8006418:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800641c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800641e:	4299      	cmp	r1, r3
 8006420:	db05      	blt.n	800642e <_printf_float+0x1c2>
 8006422:	6823      	ldr	r3, [r4, #0]
 8006424:	6121      	str	r1, [r4, #16]
 8006426:	07d8      	lsls	r0, r3, #31
 8006428:	d5ea      	bpl.n	8006400 <_printf_float+0x194>
 800642a:	1c4b      	adds	r3, r1, #1
 800642c:	e7e7      	b.n	80063fe <_printf_float+0x192>
 800642e:	2900      	cmp	r1, #0
 8006430:	bfd4      	ite	le
 8006432:	f1c1 0202 	rsble	r2, r1, #2
 8006436:	2201      	movgt	r2, #1
 8006438:	4413      	add	r3, r2
 800643a:	e7e0      	b.n	80063fe <_printf_float+0x192>
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	055a      	lsls	r2, r3, #21
 8006440:	d407      	bmi.n	8006452 <_printf_float+0x1e6>
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	4642      	mov	r2, r8
 8006446:	4631      	mov	r1, r6
 8006448:	4628      	mov	r0, r5
 800644a:	47b8      	blx	r7
 800644c:	3001      	adds	r0, #1
 800644e:	d12b      	bne.n	80064a8 <_printf_float+0x23c>
 8006450:	e767      	b.n	8006322 <_printf_float+0xb6>
 8006452:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006456:	f240 80dd 	bls.w	8006614 <_printf_float+0x3a8>
 800645a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800645e:	2200      	movs	r2, #0
 8006460:	2300      	movs	r3, #0
 8006462:	f7fa fb41 	bl	8000ae8 <__aeabi_dcmpeq>
 8006466:	2800      	cmp	r0, #0
 8006468:	d033      	beq.n	80064d2 <_printf_float+0x266>
 800646a:	4a37      	ldr	r2, [pc, #220]	@ (8006548 <_printf_float+0x2dc>)
 800646c:	2301      	movs	r3, #1
 800646e:	4631      	mov	r1, r6
 8006470:	4628      	mov	r0, r5
 8006472:	47b8      	blx	r7
 8006474:	3001      	adds	r0, #1
 8006476:	f43f af54 	beq.w	8006322 <_printf_float+0xb6>
 800647a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800647e:	4543      	cmp	r3, r8
 8006480:	db02      	blt.n	8006488 <_printf_float+0x21c>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	07d8      	lsls	r0, r3, #31
 8006486:	d50f      	bpl.n	80064a8 <_printf_float+0x23c>
 8006488:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800648c:	4631      	mov	r1, r6
 800648e:	4628      	mov	r0, r5
 8006490:	47b8      	blx	r7
 8006492:	3001      	adds	r0, #1
 8006494:	f43f af45 	beq.w	8006322 <_printf_float+0xb6>
 8006498:	f04f 0900 	mov.w	r9, #0
 800649c:	f108 38ff 	add.w	r8, r8, #4294967295
 80064a0:	f104 0a1a 	add.w	sl, r4, #26
 80064a4:	45c8      	cmp	r8, r9
 80064a6:	dc09      	bgt.n	80064bc <_printf_float+0x250>
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	079b      	lsls	r3, r3, #30
 80064ac:	f100 8103 	bmi.w	80066b6 <_printf_float+0x44a>
 80064b0:	68e0      	ldr	r0, [r4, #12]
 80064b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064b4:	4298      	cmp	r0, r3
 80064b6:	bfb8      	it	lt
 80064b8:	4618      	movlt	r0, r3
 80064ba:	e734      	b.n	8006326 <_printf_float+0xba>
 80064bc:	2301      	movs	r3, #1
 80064be:	4652      	mov	r2, sl
 80064c0:	4631      	mov	r1, r6
 80064c2:	4628      	mov	r0, r5
 80064c4:	47b8      	blx	r7
 80064c6:	3001      	adds	r0, #1
 80064c8:	f43f af2b 	beq.w	8006322 <_printf_float+0xb6>
 80064cc:	f109 0901 	add.w	r9, r9, #1
 80064d0:	e7e8      	b.n	80064a4 <_printf_float+0x238>
 80064d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	dc39      	bgt.n	800654c <_printf_float+0x2e0>
 80064d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006548 <_printf_float+0x2dc>)
 80064da:	2301      	movs	r3, #1
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	47b8      	blx	r7
 80064e2:	3001      	adds	r0, #1
 80064e4:	f43f af1d 	beq.w	8006322 <_printf_float+0xb6>
 80064e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80064ec:	ea59 0303 	orrs.w	r3, r9, r3
 80064f0:	d102      	bne.n	80064f8 <_printf_float+0x28c>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	07d9      	lsls	r1, r3, #31
 80064f6:	d5d7      	bpl.n	80064a8 <_printf_float+0x23c>
 80064f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	f43f af0d 	beq.w	8006322 <_printf_float+0xb6>
 8006508:	f04f 0a00 	mov.w	sl, #0
 800650c:	f104 0b1a 	add.w	fp, r4, #26
 8006510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006512:	425b      	negs	r3, r3
 8006514:	4553      	cmp	r3, sl
 8006516:	dc01      	bgt.n	800651c <_printf_float+0x2b0>
 8006518:	464b      	mov	r3, r9
 800651a:	e793      	b.n	8006444 <_printf_float+0x1d8>
 800651c:	2301      	movs	r3, #1
 800651e:	465a      	mov	r2, fp
 8006520:	4631      	mov	r1, r6
 8006522:	4628      	mov	r0, r5
 8006524:	47b8      	blx	r7
 8006526:	3001      	adds	r0, #1
 8006528:	f43f aefb 	beq.w	8006322 <_printf_float+0xb6>
 800652c:	f10a 0a01 	add.w	sl, sl, #1
 8006530:	e7ee      	b.n	8006510 <_printf_float+0x2a4>
 8006532:	bf00      	nop
 8006534:	7fefffff 	.word	0x7fefffff
 8006538:	08008ed5 	.word	0x08008ed5
 800653c:	08008ed9 	.word	0x08008ed9
 8006540:	08008edd 	.word	0x08008edd
 8006544:	08008ee1 	.word	0x08008ee1
 8006548:	08008ee5 	.word	0x08008ee5
 800654c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800654e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006552:	4553      	cmp	r3, sl
 8006554:	bfa8      	it	ge
 8006556:	4653      	movge	r3, sl
 8006558:	2b00      	cmp	r3, #0
 800655a:	4699      	mov	r9, r3
 800655c:	dc36      	bgt.n	80065cc <_printf_float+0x360>
 800655e:	f04f 0b00 	mov.w	fp, #0
 8006562:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006566:	f104 021a 	add.w	r2, r4, #26
 800656a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800656c:	9306      	str	r3, [sp, #24]
 800656e:	eba3 0309 	sub.w	r3, r3, r9
 8006572:	455b      	cmp	r3, fp
 8006574:	dc31      	bgt.n	80065da <_printf_float+0x36e>
 8006576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006578:	459a      	cmp	sl, r3
 800657a:	dc3a      	bgt.n	80065f2 <_printf_float+0x386>
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	07da      	lsls	r2, r3, #31
 8006580:	d437      	bmi.n	80065f2 <_printf_float+0x386>
 8006582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006584:	ebaa 0903 	sub.w	r9, sl, r3
 8006588:	9b06      	ldr	r3, [sp, #24]
 800658a:	ebaa 0303 	sub.w	r3, sl, r3
 800658e:	4599      	cmp	r9, r3
 8006590:	bfa8      	it	ge
 8006592:	4699      	movge	r9, r3
 8006594:	f1b9 0f00 	cmp.w	r9, #0
 8006598:	dc33      	bgt.n	8006602 <_printf_float+0x396>
 800659a:	f04f 0800 	mov.w	r8, #0
 800659e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065a2:	f104 0b1a 	add.w	fp, r4, #26
 80065a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a8:	ebaa 0303 	sub.w	r3, sl, r3
 80065ac:	eba3 0309 	sub.w	r3, r3, r9
 80065b0:	4543      	cmp	r3, r8
 80065b2:	f77f af79 	ble.w	80064a8 <_printf_float+0x23c>
 80065b6:	2301      	movs	r3, #1
 80065b8:	465a      	mov	r2, fp
 80065ba:	4631      	mov	r1, r6
 80065bc:	4628      	mov	r0, r5
 80065be:	47b8      	blx	r7
 80065c0:	3001      	adds	r0, #1
 80065c2:	f43f aeae 	beq.w	8006322 <_printf_float+0xb6>
 80065c6:	f108 0801 	add.w	r8, r8, #1
 80065ca:	e7ec      	b.n	80065a6 <_printf_float+0x33a>
 80065cc:	4642      	mov	r2, r8
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	47b8      	blx	r7
 80065d4:	3001      	adds	r0, #1
 80065d6:	d1c2      	bne.n	800655e <_printf_float+0x2f2>
 80065d8:	e6a3      	b.n	8006322 <_printf_float+0xb6>
 80065da:	2301      	movs	r3, #1
 80065dc:	4631      	mov	r1, r6
 80065de:	4628      	mov	r0, r5
 80065e0:	9206      	str	r2, [sp, #24]
 80065e2:	47b8      	blx	r7
 80065e4:	3001      	adds	r0, #1
 80065e6:	f43f ae9c 	beq.w	8006322 <_printf_float+0xb6>
 80065ea:	9a06      	ldr	r2, [sp, #24]
 80065ec:	f10b 0b01 	add.w	fp, fp, #1
 80065f0:	e7bb      	b.n	800656a <_printf_float+0x2fe>
 80065f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065f6:	4631      	mov	r1, r6
 80065f8:	4628      	mov	r0, r5
 80065fa:	47b8      	blx	r7
 80065fc:	3001      	adds	r0, #1
 80065fe:	d1c0      	bne.n	8006582 <_printf_float+0x316>
 8006600:	e68f      	b.n	8006322 <_printf_float+0xb6>
 8006602:	9a06      	ldr	r2, [sp, #24]
 8006604:	464b      	mov	r3, r9
 8006606:	4442      	add	r2, r8
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	d1c3      	bne.n	800659a <_printf_float+0x32e>
 8006612:	e686      	b.n	8006322 <_printf_float+0xb6>
 8006614:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006618:	f1ba 0f01 	cmp.w	sl, #1
 800661c:	dc01      	bgt.n	8006622 <_printf_float+0x3b6>
 800661e:	07db      	lsls	r3, r3, #31
 8006620:	d536      	bpl.n	8006690 <_printf_float+0x424>
 8006622:	2301      	movs	r3, #1
 8006624:	4642      	mov	r2, r8
 8006626:	4631      	mov	r1, r6
 8006628:	4628      	mov	r0, r5
 800662a:	47b8      	blx	r7
 800662c:	3001      	adds	r0, #1
 800662e:	f43f ae78 	beq.w	8006322 <_printf_float+0xb6>
 8006632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006636:	4631      	mov	r1, r6
 8006638:	4628      	mov	r0, r5
 800663a:	47b8      	blx	r7
 800663c:	3001      	adds	r0, #1
 800663e:	f43f ae70 	beq.w	8006322 <_printf_float+0xb6>
 8006642:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006646:	2200      	movs	r2, #0
 8006648:	2300      	movs	r3, #0
 800664a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800664e:	f7fa fa4b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006652:	b9c0      	cbnz	r0, 8006686 <_printf_float+0x41a>
 8006654:	4653      	mov	r3, sl
 8006656:	f108 0201 	add.w	r2, r8, #1
 800665a:	4631      	mov	r1, r6
 800665c:	4628      	mov	r0, r5
 800665e:	47b8      	blx	r7
 8006660:	3001      	adds	r0, #1
 8006662:	d10c      	bne.n	800667e <_printf_float+0x412>
 8006664:	e65d      	b.n	8006322 <_printf_float+0xb6>
 8006666:	2301      	movs	r3, #1
 8006668:	465a      	mov	r2, fp
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	f43f ae56 	beq.w	8006322 <_printf_float+0xb6>
 8006676:	f108 0801 	add.w	r8, r8, #1
 800667a:	45d0      	cmp	r8, sl
 800667c:	dbf3      	blt.n	8006666 <_printf_float+0x3fa>
 800667e:	464b      	mov	r3, r9
 8006680:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006684:	e6df      	b.n	8006446 <_printf_float+0x1da>
 8006686:	f04f 0800 	mov.w	r8, #0
 800668a:	f104 0b1a 	add.w	fp, r4, #26
 800668e:	e7f4      	b.n	800667a <_printf_float+0x40e>
 8006690:	2301      	movs	r3, #1
 8006692:	4642      	mov	r2, r8
 8006694:	e7e1      	b.n	800665a <_printf_float+0x3ee>
 8006696:	2301      	movs	r3, #1
 8006698:	464a      	mov	r2, r9
 800669a:	4631      	mov	r1, r6
 800669c:	4628      	mov	r0, r5
 800669e:	47b8      	blx	r7
 80066a0:	3001      	adds	r0, #1
 80066a2:	f43f ae3e 	beq.w	8006322 <_printf_float+0xb6>
 80066a6:	f108 0801 	add.w	r8, r8, #1
 80066aa:	68e3      	ldr	r3, [r4, #12]
 80066ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066ae:	1a5b      	subs	r3, r3, r1
 80066b0:	4543      	cmp	r3, r8
 80066b2:	dcf0      	bgt.n	8006696 <_printf_float+0x42a>
 80066b4:	e6fc      	b.n	80064b0 <_printf_float+0x244>
 80066b6:	f04f 0800 	mov.w	r8, #0
 80066ba:	f104 0919 	add.w	r9, r4, #25
 80066be:	e7f4      	b.n	80066aa <_printf_float+0x43e>

080066c0 <_printf_common>:
 80066c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c4:	4616      	mov	r6, r2
 80066c6:	4698      	mov	r8, r3
 80066c8:	688a      	ldr	r2, [r1, #8]
 80066ca:	690b      	ldr	r3, [r1, #16]
 80066cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066d0:	4293      	cmp	r3, r2
 80066d2:	bfb8      	it	lt
 80066d4:	4613      	movlt	r3, r2
 80066d6:	6033      	str	r3, [r6, #0]
 80066d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066dc:	4607      	mov	r7, r0
 80066de:	460c      	mov	r4, r1
 80066e0:	b10a      	cbz	r2, 80066e6 <_printf_common+0x26>
 80066e2:	3301      	adds	r3, #1
 80066e4:	6033      	str	r3, [r6, #0]
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	0699      	lsls	r1, r3, #26
 80066ea:	bf42      	ittt	mi
 80066ec:	6833      	ldrmi	r3, [r6, #0]
 80066ee:	3302      	addmi	r3, #2
 80066f0:	6033      	strmi	r3, [r6, #0]
 80066f2:	6825      	ldr	r5, [r4, #0]
 80066f4:	f015 0506 	ands.w	r5, r5, #6
 80066f8:	d106      	bne.n	8006708 <_printf_common+0x48>
 80066fa:	f104 0a19 	add.w	sl, r4, #25
 80066fe:	68e3      	ldr	r3, [r4, #12]
 8006700:	6832      	ldr	r2, [r6, #0]
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	42ab      	cmp	r3, r5
 8006706:	dc26      	bgt.n	8006756 <_printf_common+0x96>
 8006708:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800670c:	6822      	ldr	r2, [r4, #0]
 800670e:	3b00      	subs	r3, #0
 8006710:	bf18      	it	ne
 8006712:	2301      	movne	r3, #1
 8006714:	0692      	lsls	r2, r2, #26
 8006716:	d42b      	bmi.n	8006770 <_printf_common+0xb0>
 8006718:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800671c:	4641      	mov	r1, r8
 800671e:	4638      	mov	r0, r7
 8006720:	47c8      	blx	r9
 8006722:	3001      	adds	r0, #1
 8006724:	d01e      	beq.n	8006764 <_printf_common+0xa4>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	6922      	ldr	r2, [r4, #16]
 800672a:	f003 0306 	and.w	r3, r3, #6
 800672e:	2b04      	cmp	r3, #4
 8006730:	bf02      	ittt	eq
 8006732:	68e5      	ldreq	r5, [r4, #12]
 8006734:	6833      	ldreq	r3, [r6, #0]
 8006736:	1aed      	subeq	r5, r5, r3
 8006738:	68a3      	ldr	r3, [r4, #8]
 800673a:	bf0c      	ite	eq
 800673c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006740:	2500      	movne	r5, #0
 8006742:	4293      	cmp	r3, r2
 8006744:	bfc4      	itt	gt
 8006746:	1a9b      	subgt	r3, r3, r2
 8006748:	18ed      	addgt	r5, r5, r3
 800674a:	2600      	movs	r6, #0
 800674c:	341a      	adds	r4, #26
 800674e:	42b5      	cmp	r5, r6
 8006750:	d11a      	bne.n	8006788 <_printf_common+0xc8>
 8006752:	2000      	movs	r0, #0
 8006754:	e008      	b.n	8006768 <_printf_common+0xa8>
 8006756:	2301      	movs	r3, #1
 8006758:	4652      	mov	r2, sl
 800675a:	4641      	mov	r1, r8
 800675c:	4638      	mov	r0, r7
 800675e:	47c8      	blx	r9
 8006760:	3001      	adds	r0, #1
 8006762:	d103      	bne.n	800676c <_printf_common+0xac>
 8006764:	f04f 30ff 	mov.w	r0, #4294967295
 8006768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676c:	3501      	adds	r5, #1
 800676e:	e7c6      	b.n	80066fe <_printf_common+0x3e>
 8006770:	18e1      	adds	r1, r4, r3
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	2030      	movs	r0, #48	@ 0x30
 8006776:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800677a:	4422      	add	r2, r4
 800677c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006780:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006784:	3302      	adds	r3, #2
 8006786:	e7c7      	b.n	8006718 <_printf_common+0x58>
 8006788:	2301      	movs	r3, #1
 800678a:	4622      	mov	r2, r4
 800678c:	4641      	mov	r1, r8
 800678e:	4638      	mov	r0, r7
 8006790:	47c8      	blx	r9
 8006792:	3001      	adds	r0, #1
 8006794:	d0e6      	beq.n	8006764 <_printf_common+0xa4>
 8006796:	3601      	adds	r6, #1
 8006798:	e7d9      	b.n	800674e <_printf_common+0x8e>
	...

0800679c <_printf_i>:
 800679c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067a0:	7e0f      	ldrb	r7, [r1, #24]
 80067a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067a4:	2f78      	cmp	r7, #120	@ 0x78
 80067a6:	4691      	mov	r9, r2
 80067a8:	4680      	mov	r8, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	469a      	mov	sl, r3
 80067ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067b2:	d807      	bhi.n	80067c4 <_printf_i+0x28>
 80067b4:	2f62      	cmp	r7, #98	@ 0x62
 80067b6:	d80a      	bhi.n	80067ce <_printf_i+0x32>
 80067b8:	2f00      	cmp	r7, #0
 80067ba:	f000 80d2 	beq.w	8006962 <_printf_i+0x1c6>
 80067be:	2f58      	cmp	r7, #88	@ 0x58
 80067c0:	f000 80b9 	beq.w	8006936 <_printf_i+0x19a>
 80067c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067cc:	e03a      	b.n	8006844 <_printf_i+0xa8>
 80067ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067d2:	2b15      	cmp	r3, #21
 80067d4:	d8f6      	bhi.n	80067c4 <_printf_i+0x28>
 80067d6:	a101      	add	r1, pc, #4	@ (adr r1, 80067dc <_printf_i+0x40>)
 80067d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067dc:	08006835 	.word	0x08006835
 80067e0:	08006849 	.word	0x08006849
 80067e4:	080067c5 	.word	0x080067c5
 80067e8:	080067c5 	.word	0x080067c5
 80067ec:	080067c5 	.word	0x080067c5
 80067f0:	080067c5 	.word	0x080067c5
 80067f4:	08006849 	.word	0x08006849
 80067f8:	080067c5 	.word	0x080067c5
 80067fc:	080067c5 	.word	0x080067c5
 8006800:	080067c5 	.word	0x080067c5
 8006804:	080067c5 	.word	0x080067c5
 8006808:	08006949 	.word	0x08006949
 800680c:	08006873 	.word	0x08006873
 8006810:	08006903 	.word	0x08006903
 8006814:	080067c5 	.word	0x080067c5
 8006818:	080067c5 	.word	0x080067c5
 800681c:	0800696b 	.word	0x0800696b
 8006820:	080067c5 	.word	0x080067c5
 8006824:	08006873 	.word	0x08006873
 8006828:	080067c5 	.word	0x080067c5
 800682c:	080067c5 	.word	0x080067c5
 8006830:	0800690b 	.word	0x0800690b
 8006834:	6833      	ldr	r3, [r6, #0]
 8006836:	1d1a      	adds	r2, r3, #4
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6032      	str	r2, [r6, #0]
 800683c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006840:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006844:	2301      	movs	r3, #1
 8006846:	e09d      	b.n	8006984 <_printf_i+0x1e8>
 8006848:	6833      	ldr	r3, [r6, #0]
 800684a:	6820      	ldr	r0, [r4, #0]
 800684c:	1d19      	adds	r1, r3, #4
 800684e:	6031      	str	r1, [r6, #0]
 8006850:	0606      	lsls	r6, r0, #24
 8006852:	d501      	bpl.n	8006858 <_printf_i+0xbc>
 8006854:	681d      	ldr	r5, [r3, #0]
 8006856:	e003      	b.n	8006860 <_printf_i+0xc4>
 8006858:	0645      	lsls	r5, r0, #25
 800685a:	d5fb      	bpl.n	8006854 <_printf_i+0xb8>
 800685c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006860:	2d00      	cmp	r5, #0
 8006862:	da03      	bge.n	800686c <_printf_i+0xd0>
 8006864:	232d      	movs	r3, #45	@ 0x2d
 8006866:	426d      	negs	r5, r5
 8006868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800686c:	4859      	ldr	r0, [pc, #356]	@ (80069d4 <_printf_i+0x238>)
 800686e:	230a      	movs	r3, #10
 8006870:	e011      	b.n	8006896 <_printf_i+0xfa>
 8006872:	6821      	ldr	r1, [r4, #0]
 8006874:	6833      	ldr	r3, [r6, #0]
 8006876:	0608      	lsls	r0, r1, #24
 8006878:	f853 5b04 	ldr.w	r5, [r3], #4
 800687c:	d402      	bmi.n	8006884 <_printf_i+0xe8>
 800687e:	0649      	lsls	r1, r1, #25
 8006880:	bf48      	it	mi
 8006882:	b2ad      	uxthmi	r5, r5
 8006884:	2f6f      	cmp	r7, #111	@ 0x6f
 8006886:	4853      	ldr	r0, [pc, #332]	@ (80069d4 <_printf_i+0x238>)
 8006888:	6033      	str	r3, [r6, #0]
 800688a:	bf14      	ite	ne
 800688c:	230a      	movne	r3, #10
 800688e:	2308      	moveq	r3, #8
 8006890:	2100      	movs	r1, #0
 8006892:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006896:	6866      	ldr	r6, [r4, #4]
 8006898:	60a6      	str	r6, [r4, #8]
 800689a:	2e00      	cmp	r6, #0
 800689c:	bfa2      	ittt	ge
 800689e:	6821      	ldrge	r1, [r4, #0]
 80068a0:	f021 0104 	bicge.w	r1, r1, #4
 80068a4:	6021      	strge	r1, [r4, #0]
 80068a6:	b90d      	cbnz	r5, 80068ac <_printf_i+0x110>
 80068a8:	2e00      	cmp	r6, #0
 80068aa:	d04b      	beq.n	8006944 <_printf_i+0x1a8>
 80068ac:	4616      	mov	r6, r2
 80068ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80068b2:	fb03 5711 	mls	r7, r3, r1, r5
 80068b6:	5dc7      	ldrb	r7, [r0, r7]
 80068b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068bc:	462f      	mov	r7, r5
 80068be:	42bb      	cmp	r3, r7
 80068c0:	460d      	mov	r5, r1
 80068c2:	d9f4      	bls.n	80068ae <_printf_i+0x112>
 80068c4:	2b08      	cmp	r3, #8
 80068c6:	d10b      	bne.n	80068e0 <_printf_i+0x144>
 80068c8:	6823      	ldr	r3, [r4, #0]
 80068ca:	07df      	lsls	r7, r3, #31
 80068cc:	d508      	bpl.n	80068e0 <_printf_i+0x144>
 80068ce:	6923      	ldr	r3, [r4, #16]
 80068d0:	6861      	ldr	r1, [r4, #4]
 80068d2:	4299      	cmp	r1, r3
 80068d4:	bfde      	ittt	le
 80068d6:	2330      	movle	r3, #48	@ 0x30
 80068d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068e0:	1b92      	subs	r2, r2, r6
 80068e2:	6122      	str	r2, [r4, #16]
 80068e4:	f8cd a000 	str.w	sl, [sp]
 80068e8:	464b      	mov	r3, r9
 80068ea:	aa03      	add	r2, sp, #12
 80068ec:	4621      	mov	r1, r4
 80068ee:	4640      	mov	r0, r8
 80068f0:	f7ff fee6 	bl	80066c0 <_printf_common>
 80068f4:	3001      	adds	r0, #1
 80068f6:	d14a      	bne.n	800698e <_printf_i+0x1f2>
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295
 80068fc:	b004      	add	sp, #16
 80068fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	f043 0320 	orr.w	r3, r3, #32
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	4833      	ldr	r0, [pc, #204]	@ (80069d8 <_printf_i+0x23c>)
 800690c:	2778      	movs	r7, #120	@ 0x78
 800690e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	6831      	ldr	r1, [r6, #0]
 8006916:	061f      	lsls	r7, r3, #24
 8006918:	f851 5b04 	ldr.w	r5, [r1], #4
 800691c:	d402      	bmi.n	8006924 <_printf_i+0x188>
 800691e:	065f      	lsls	r7, r3, #25
 8006920:	bf48      	it	mi
 8006922:	b2ad      	uxthmi	r5, r5
 8006924:	6031      	str	r1, [r6, #0]
 8006926:	07d9      	lsls	r1, r3, #31
 8006928:	bf44      	itt	mi
 800692a:	f043 0320 	orrmi.w	r3, r3, #32
 800692e:	6023      	strmi	r3, [r4, #0]
 8006930:	b11d      	cbz	r5, 800693a <_printf_i+0x19e>
 8006932:	2310      	movs	r3, #16
 8006934:	e7ac      	b.n	8006890 <_printf_i+0xf4>
 8006936:	4827      	ldr	r0, [pc, #156]	@ (80069d4 <_printf_i+0x238>)
 8006938:	e7e9      	b.n	800690e <_printf_i+0x172>
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	f023 0320 	bic.w	r3, r3, #32
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	e7f6      	b.n	8006932 <_printf_i+0x196>
 8006944:	4616      	mov	r6, r2
 8006946:	e7bd      	b.n	80068c4 <_printf_i+0x128>
 8006948:	6833      	ldr	r3, [r6, #0]
 800694a:	6825      	ldr	r5, [r4, #0]
 800694c:	6961      	ldr	r1, [r4, #20]
 800694e:	1d18      	adds	r0, r3, #4
 8006950:	6030      	str	r0, [r6, #0]
 8006952:	062e      	lsls	r6, r5, #24
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	d501      	bpl.n	800695c <_printf_i+0x1c0>
 8006958:	6019      	str	r1, [r3, #0]
 800695a:	e002      	b.n	8006962 <_printf_i+0x1c6>
 800695c:	0668      	lsls	r0, r5, #25
 800695e:	d5fb      	bpl.n	8006958 <_printf_i+0x1bc>
 8006960:	8019      	strh	r1, [r3, #0]
 8006962:	2300      	movs	r3, #0
 8006964:	6123      	str	r3, [r4, #16]
 8006966:	4616      	mov	r6, r2
 8006968:	e7bc      	b.n	80068e4 <_printf_i+0x148>
 800696a:	6833      	ldr	r3, [r6, #0]
 800696c:	1d1a      	adds	r2, r3, #4
 800696e:	6032      	str	r2, [r6, #0]
 8006970:	681e      	ldr	r6, [r3, #0]
 8006972:	6862      	ldr	r2, [r4, #4]
 8006974:	2100      	movs	r1, #0
 8006976:	4630      	mov	r0, r6
 8006978:	f7f9 fc3a 	bl	80001f0 <memchr>
 800697c:	b108      	cbz	r0, 8006982 <_printf_i+0x1e6>
 800697e:	1b80      	subs	r0, r0, r6
 8006980:	6060      	str	r0, [r4, #4]
 8006982:	6863      	ldr	r3, [r4, #4]
 8006984:	6123      	str	r3, [r4, #16]
 8006986:	2300      	movs	r3, #0
 8006988:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800698c:	e7aa      	b.n	80068e4 <_printf_i+0x148>
 800698e:	6923      	ldr	r3, [r4, #16]
 8006990:	4632      	mov	r2, r6
 8006992:	4649      	mov	r1, r9
 8006994:	4640      	mov	r0, r8
 8006996:	47d0      	blx	sl
 8006998:	3001      	adds	r0, #1
 800699a:	d0ad      	beq.n	80068f8 <_printf_i+0x15c>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	079b      	lsls	r3, r3, #30
 80069a0:	d413      	bmi.n	80069ca <_printf_i+0x22e>
 80069a2:	68e0      	ldr	r0, [r4, #12]
 80069a4:	9b03      	ldr	r3, [sp, #12]
 80069a6:	4298      	cmp	r0, r3
 80069a8:	bfb8      	it	lt
 80069aa:	4618      	movlt	r0, r3
 80069ac:	e7a6      	b.n	80068fc <_printf_i+0x160>
 80069ae:	2301      	movs	r3, #1
 80069b0:	4632      	mov	r2, r6
 80069b2:	4649      	mov	r1, r9
 80069b4:	4640      	mov	r0, r8
 80069b6:	47d0      	blx	sl
 80069b8:	3001      	adds	r0, #1
 80069ba:	d09d      	beq.n	80068f8 <_printf_i+0x15c>
 80069bc:	3501      	adds	r5, #1
 80069be:	68e3      	ldr	r3, [r4, #12]
 80069c0:	9903      	ldr	r1, [sp, #12]
 80069c2:	1a5b      	subs	r3, r3, r1
 80069c4:	42ab      	cmp	r3, r5
 80069c6:	dcf2      	bgt.n	80069ae <_printf_i+0x212>
 80069c8:	e7eb      	b.n	80069a2 <_printf_i+0x206>
 80069ca:	2500      	movs	r5, #0
 80069cc:	f104 0619 	add.w	r6, r4, #25
 80069d0:	e7f5      	b.n	80069be <_printf_i+0x222>
 80069d2:	bf00      	nop
 80069d4:	08008ee7 	.word	0x08008ee7
 80069d8:	08008ef8 	.word	0x08008ef8

080069dc <std>:
 80069dc:	2300      	movs	r3, #0
 80069de:	b510      	push	{r4, lr}
 80069e0:	4604      	mov	r4, r0
 80069e2:	e9c0 3300 	strd	r3, r3, [r0]
 80069e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ea:	6083      	str	r3, [r0, #8]
 80069ec:	8181      	strh	r1, [r0, #12]
 80069ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80069f0:	81c2      	strh	r2, [r0, #14]
 80069f2:	6183      	str	r3, [r0, #24]
 80069f4:	4619      	mov	r1, r3
 80069f6:	2208      	movs	r2, #8
 80069f8:	305c      	adds	r0, #92	@ 0x5c
 80069fa:	f000 fa1b 	bl	8006e34 <memset>
 80069fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006a34 <std+0x58>)
 8006a00:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a02:	4b0d      	ldr	r3, [pc, #52]	@ (8006a38 <std+0x5c>)
 8006a04:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a06:	4b0d      	ldr	r3, [pc, #52]	@ (8006a3c <std+0x60>)
 8006a08:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a40 <std+0x64>)
 8006a0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <std+0x68>)
 8006a10:	6224      	str	r4, [r4, #32]
 8006a12:	429c      	cmp	r4, r3
 8006a14:	d006      	beq.n	8006a24 <std+0x48>
 8006a16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a1a:	4294      	cmp	r4, r2
 8006a1c:	d002      	beq.n	8006a24 <std+0x48>
 8006a1e:	33d0      	adds	r3, #208	@ 0xd0
 8006a20:	429c      	cmp	r4, r3
 8006a22:	d105      	bne.n	8006a30 <std+0x54>
 8006a24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a2c:	f000 ba8e 	b.w	8006f4c <__retarget_lock_init_recursive>
 8006a30:	bd10      	pop	{r4, pc}
 8006a32:	bf00      	nop
 8006a34:	08006c85 	.word	0x08006c85
 8006a38:	08006ca7 	.word	0x08006ca7
 8006a3c:	08006cdf 	.word	0x08006cdf
 8006a40:	08006d03 	.word	0x08006d03
 8006a44:	20000588 	.word	0x20000588

08006a48 <stdio_exit_handler>:
 8006a48:	4a02      	ldr	r2, [pc, #8]	@ (8006a54 <stdio_exit_handler+0xc>)
 8006a4a:	4903      	ldr	r1, [pc, #12]	@ (8006a58 <stdio_exit_handler+0x10>)
 8006a4c:	4803      	ldr	r0, [pc, #12]	@ (8006a5c <stdio_exit_handler+0x14>)
 8006a4e:	f000 b869 	b.w	8006b24 <_fwalk_sglue>
 8006a52:	bf00      	nop
 8006a54:	2000000c 	.word	0x2000000c
 8006a58:	08008769 	.word	0x08008769
 8006a5c:	2000001c 	.word	0x2000001c

08006a60 <cleanup_stdio>:
 8006a60:	6841      	ldr	r1, [r0, #4]
 8006a62:	4b0c      	ldr	r3, [pc, #48]	@ (8006a94 <cleanup_stdio+0x34>)
 8006a64:	4299      	cmp	r1, r3
 8006a66:	b510      	push	{r4, lr}
 8006a68:	4604      	mov	r4, r0
 8006a6a:	d001      	beq.n	8006a70 <cleanup_stdio+0x10>
 8006a6c:	f001 fe7c 	bl	8008768 <_fflush_r>
 8006a70:	68a1      	ldr	r1, [r4, #8]
 8006a72:	4b09      	ldr	r3, [pc, #36]	@ (8006a98 <cleanup_stdio+0x38>)
 8006a74:	4299      	cmp	r1, r3
 8006a76:	d002      	beq.n	8006a7e <cleanup_stdio+0x1e>
 8006a78:	4620      	mov	r0, r4
 8006a7a:	f001 fe75 	bl	8008768 <_fflush_r>
 8006a7e:	68e1      	ldr	r1, [r4, #12]
 8006a80:	4b06      	ldr	r3, [pc, #24]	@ (8006a9c <cleanup_stdio+0x3c>)
 8006a82:	4299      	cmp	r1, r3
 8006a84:	d004      	beq.n	8006a90 <cleanup_stdio+0x30>
 8006a86:	4620      	mov	r0, r4
 8006a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a8c:	f001 be6c 	b.w	8008768 <_fflush_r>
 8006a90:	bd10      	pop	{r4, pc}
 8006a92:	bf00      	nop
 8006a94:	20000588 	.word	0x20000588
 8006a98:	200005f0 	.word	0x200005f0
 8006a9c:	20000658 	.word	0x20000658

08006aa0 <global_stdio_init.part.0>:
 8006aa0:	b510      	push	{r4, lr}
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad0 <global_stdio_init.part.0+0x30>)
 8006aa4:	4c0b      	ldr	r4, [pc, #44]	@ (8006ad4 <global_stdio_init.part.0+0x34>)
 8006aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad8 <global_stdio_init.part.0+0x38>)
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	4620      	mov	r0, r4
 8006aac:	2200      	movs	r2, #0
 8006aae:	2104      	movs	r1, #4
 8006ab0:	f7ff ff94 	bl	80069dc <std>
 8006ab4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ab8:	2201      	movs	r2, #1
 8006aba:	2109      	movs	r1, #9
 8006abc:	f7ff ff8e 	bl	80069dc <std>
 8006ac0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aca:	2112      	movs	r1, #18
 8006acc:	f7ff bf86 	b.w	80069dc <std>
 8006ad0:	200006c0 	.word	0x200006c0
 8006ad4:	20000588 	.word	0x20000588
 8006ad8:	08006a49 	.word	0x08006a49

08006adc <__sfp_lock_acquire>:
 8006adc:	4801      	ldr	r0, [pc, #4]	@ (8006ae4 <__sfp_lock_acquire+0x8>)
 8006ade:	f000 ba36 	b.w	8006f4e <__retarget_lock_acquire_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	200006c9 	.word	0x200006c9

08006ae8 <__sfp_lock_release>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	@ (8006af0 <__sfp_lock_release+0x8>)
 8006aea:	f000 ba31 	b.w	8006f50 <__retarget_lock_release_recursive>
 8006aee:	bf00      	nop
 8006af0:	200006c9 	.word	0x200006c9

08006af4 <__sinit>:
 8006af4:	b510      	push	{r4, lr}
 8006af6:	4604      	mov	r4, r0
 8006af8:	f7ff fff0 	bl	8006adc <__sfp_lock_acquire>
 8006afc:	6a23      	ldr	r3, [r4, #32]
 8006afe:	b11b      	cbz	r3, 8006b08 <__sinit+0x14>
 8006b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b04:	f7ff bff0 	b.w	8006ae8 <__sfp_lock_release>
 8006b08:	4b04      	ldr	r3, [pc, #16]	@ (8006b1c <__sinit+0x28>)
 8006b0a:	6223      	str	r3, [r4, #32]
 8006b0c:	4b04      	ldr	r3, [pc, #16]	@ (8006b20 <__sinit+0x2c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1f5      	bne.n	8006b00 <__sinit+0xc>
 8006b14:	f7ff ffc4 	bl	8006aa0 <global_stdio_init.part.0>
 8006b18:	e7f2      	b.n	8006b00 <__sinit+0xc>
 8006b1a:	bf00      	nop
 8006b1c:	08006a61 	.word	0x08006a61
 8006b20:	200006c0 	.word	0x200006c0

08006b24 <_fwalk_sglue>:
 8006b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b28:	4607      	mov	r7, r0
 8006b2a:	4688      	mov	r8, r1
 8006b2c:	4614      	mov	r4, r2
 8006b2e:	2600      	movs	r6, #0
 8006b30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b34:	f1b9 0901 	subs.w	r9, r9, #1
 8006b38:	d505      	bpl.n	8006b46 <_fwalk_sglue+0x22>
 8006b3a:	6824      	ldr	r4, [r4, #0]
 8006b3c:	2c00      	cmp	r4, #0
 8006b3e:	d1f7      	bne.n	8006b30 <_fwalk_sglue+0xc>
 8006b40:	4630      	mov	r0, r6
 8006b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b46:	89ab      	ldrh	r3, [r5, #12]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d907      	bls.n	8006b5c <_fwalk_sglue+0x38>
 8006b4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b50:	3301      	adds	r3, #1
 8006b52:	d003      	beq.n	8006b5c <_fwalk_sglue+0x38>
 8006b54:	4629      	mov	r1, r5
 8006b56:	4638      	mov	r0, r7
 8006b58:	47c0      	blx	r8
 8006b5a:	4306      	orrs	r6, r0
 8006b5c:	3568      	adds	r5, #104	@ 0x68
 8006b5e:	e7e9      	b.n	8006b34 <_fwalk_sglue+0x10>

08006b60 <_puts_r>:
 8006b60:	6a03      	ldr	r3, [r0, #32]
 8006b62:	b570      	push	{r4, r5, r6, lr}
 8006b64:	6884      	ldr	r4, [r0, #8]
 8006b66:	4605      	mov	r5, r0
 8006b68:	460e      	mov	r6, r1
 8006b6a:	b90b      	cbnz	r3, 8006b70 <_puts_r+0x10>
 8006b6c:	f7ff ffc2 	bl	8006af4 <__sinit>
 8006b70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b72:	07db      	lsls	r3, r3, #31
 8006b74:	d405      	bmi.n	8006b82 <_puts_r+0x22>
 8006b76:	89a3      	ldrh	r3, [r4, #12]
 8006b78:	0598      	lsls	r0, r3, #22
 8006b7a:	d402      	bmi.n	8006b82 <_puts_r+0x22>
 8006b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b7e:	f000 f9e6 	bl	8006f4e <__retarget_lock_acquire_recursive>
 8006b82:	89a3      	ldrh	r3, [r4, #12]
 8006b84:	0719      	lsls	r1, r3, #28
 8006b86:	d502      	bpl.n	8006b8e <_puts_r+0x2e>
 8006b88:	6923      	ldr	r3, [r4, #16]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d135      	bne.n	8006bfa <_puts_r+0x9a>
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4628      	mov	r0, r5
 8006b92:	f000 f8f9 	bl	8006d88 <__swsetup_r>
 8006b96:	b380      	cbz	r0, 8006bfa <_puts_r+0x9a>
 8006b98:	f04f 35ff 	mov.w	r5, #4294967295
 8006b9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b9e:	07da      	lsls	r2, r3, #31
 8006ba0:	d405      	bmi.n	8006bae <_puts_r+0x4e>
 8006ba2:	89a3      	ldrh	r3, [r4, #12]
 8006ba4:	059b      	lsls	r3, r3, #22
 8006ba6:	d402      	bmi.n	8006bae <_puts_r+0x4e>
 8006ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006baa:	f000 f9d1 	bl	8006f50 <__retarget_lock_release_recursive>
 8006bae:	4628      	mov	r0, r5
 8006bb0:	bd70      	pop	{r4, r5, r6, pc}
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	da04      	bge.n	8006bc0 <_puts_r+0x60>
 8006bb6:	69a2      	ldr	r2, [r4, #24]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	dc17      	bgt.n	8006bec <_puts_r+0x8c>
 8006bbc:	290a      	cmp	r1, #10
 8006bbe:	d015      	beq.n	8006bec <_puts_r+0x8c>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	7019      	strb	r1, [r3, #0]
 8006bc8:	68a3      	ldr	r3, [r4, #8]
 8006bca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	60a3      	str	r3, [r4, #8]
 8006bd2:	2900      	cmp	r1, #0
 8006bd4:	d1ed      	bne.n	8006bb2 <_puts_r+0x52>
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	da11      	bge.n	8006bfe <_puts_r+0x9e>
 8006bda:	4622      	mov	r2, r4
 8006bdc:	210a      	movs	r1, #10
 8006bde:	4628      	mov	r0, r5
 8006be0:	f000 f893 	bl	8006d0a <__swbuf_r>
 8006be4:	3001      	adds	r0, #1
 8006be6:	d0d7      	beq.n	8006b98 <_puts_r+0x38>
 8006be8:	250a      	movs	r5, #10
 8006bea:	e7d7      	b.n	8006b9c <_puts_r+0x3c>
 8006bec:	4622      	mov	r2, r4
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f000 f88b 	bl	8006d0a <__swbuf_r>
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d1e7      	bne.n	8006bc8 <_puts_r+0x68>
 8006bf8:	e7ce      	b.n	8006b98 <_puts_r+0x38>
 8006bfa:	3e01      	subs	r6, #1
 8006bfc:	e7e4      	b.n	8006bc8 <_puts_r+0x68>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	6022      	str	r2, [r4, #0]
 8006c04:	220a      	movs	r2, #10
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	e7ee      	b.n	8006be8 <_puts_r+0x88>
	...

08006c0c <puts>:
 8006c0c:	4b02      	ldr	r3, [pc, #8]	@ (8006c18 <puts+0xc>)
 8006c0e:	4601      	mov	r1, r0
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	f7ff bfa5 	b.w	8006b60 <_puts_r>
 8006c16:	bf00      	nop
 8006c18:	20000018 	.word	0x20000018

08006c1c <sniprintf>:
 8006c1c:	b40c      	push	{r2, r3}
 8006c1e:	b530      	push	{r4, r5, lr}
 8006c20:	4b17      	ldr	r3, [pc, #92]	@ (8006c80 <sniprintf+0x64>)
 8006c22:	1e0c      	subs	r4, r1, #0
 8006c24:	681d      	ldr	r5, [r3, #0]
 8006c26:	b09d      	sub	sp, #116	@ 0x74
 8006c28:	da08      	bge.n	8006c3c <sniprintf+0x20>
 8006c2a:	238b      	movs	r3, #139	@ 0x8b
 8006c2c:	602b      	str	r3, [r5, #0]
 8006c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c32:	b01d      	add	sp, #116	@ 0x74
 8006c34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c38:	b002      	add	sp, #8
 8006c3a:	4770      	bx	lr
 8006c3c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006c40:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c44:	bf14      	ite	ne
 8006c46:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c4a:	4623      	moveq	r3, r4
 8006c4c:	9304      	str	r3, [sp, #16]
 8006c4e:	9307      	str	r3, [sp, #28]
 8006c50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c54:	9002      	str	r0, [sp, #8]
 8006c56:	9006      	str	r0, [sp, #24]
 8006c58:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c5c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c5e:	ab21      	add	r3, sp, #132	@ 0x84
 8006c60:	a902      	add	r1, sp, #8
 8006c62:	4628      	mov	r0, r5
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	f001 fbff 	bl	8008468 <_svfiprintf_r>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	bfbc      	itt	lt
 8006c6e:	238b      	movlt	r3, #139	@ 0x8b
 8006c70:	602b      	strlt	r3, [r5, #0]
 8006c72:	2c00      	cmp	r4, #0
 8006c74:	d0dd      	beq.n	8006c32 <sniprintf+0x16>
 8006c76:	9b02      	ldr	r3, [sp, #8]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	e7d9      	b.n	8006c32 <sniprintf+0x16>
 8006c7e:	bf00      	nop
 8006c80:	20000018 	.word	0x20000018

08006c84 <__sread>:
 8006c84:	b510      	push	{r4, lr}
 8006c86:	460c      	mov	r4, r1
 8006c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c8c:	f000 f900 	bl	8006e90 <_read_r>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	bfab      	itete	ge
 8006c94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c96:	89a3      	ldrhlt	r3, [r4, #12]
 8006c98:	181b      	addge	r3, r3, r0
 8006c9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c9e:	bfac      	ite	ge
 8006ca0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ca2:	81a3      	strhlt	r3, [r4, #12]
 8006ca4:	bd10      	pop	{r4, pc}

08006ca6 <__swrite>:
 8006ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006caa:	461f      	mov	r7, r3
 8006cac:	898b      	ldrh	r3, [r1, #12]
 8006cae:	05db      	lsls	r3, r3, #23
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	4616      	mov	r6, r2
 8006cb6:	d505      	bpl.n	8006cc4 <__swrite+0x1e>
 8006cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f000 f8d4 	bl	8006e6c <_lseek_r>
 8006cc4:	89a3      	ldrh	r3, [r4, #12]
 8006cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cce:	81a3      	strh	r3, [r4, #12]
 8006cd0:	4632      	mov	r2, r6
 8006cd2:	463b      	mov	r3, r7
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cda:	f000 b8fb 	b.w	8006ed4 <_write_r>

08006cde <__sseek>:
 8006cde:	b510      	push	{r4, lr}
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce6:	f000 f8c1 	bl	8006e6c <_lseek_r>
 8006cea:	1c43      	adds	r3, r0, #1
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	bf15      	itete	ne
 8006cf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cfa:	81a3      	strheq	r3, [r4, #12]
 8006cfc:	bf18      	it	ne
 8006cfe:	81a3      	strhne	r3, [r4, #12]
 8006d00:	bd10      	pop	{r4, pc}

08006d02 <__sclose>:
 8006d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d06:	f000 b8a1 	b.w	8006e4c <_close_r>

08006d0a <__swbuf_r>:
 8006d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0c:	460e      	mov	r6, r1
 8006d0e:	4614      	mov	r4, r2
 8006d10:	4605      	mov	r5, r0
 8006d12:	b118      	cbz	r0, 8006d1c <__swbuf_r+0x12>
 8006d14:	6a03      	ldr	r3, [r0, #32]
 8006d16:	b90b      	cbnz	r3, 8006d1c <__swbuf_r+0x12>
 8006d18:	f7ff feec 	bl	8006af4 <__sinit>
 8006d1c:	69a3      	ldr	r3, [r4, #24]
 8006d1e:	60a3      	str	r3, [r4, #8]
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	071a      	lsls	r2, r3, #28
 8006d24:	d501      	bpl.n	8006d2a <__swbuf_r+0x20>
 8006d26:	6923      	ldr	r3, [r4, #16]
 8006d28:	b943      	cbnz	r3, 8006d3c <__swbuf_r+0x32>
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f000 f82b 	bl	8006d88 <__swsetup_r>
 8006d32:	b118      	cbz	r0, 8006d3c <__swbuf_r+0x32>
 8006d34:	f04f 37ff 	mov.w	r7, #4294967295
 8006d38:	4638      	mov	r0, r7
 8006d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	6922      	ldr	r2, [r4, #16]
 8006d40:	1a98      	subs	r0, r3, r2
 8006d42:	6963      	ldr	r3, [r4, #20]
 8006d44:	b2f6      	uxtb	r6, r6
 8006d46:	4283      	cmp	r3, r0
 8006d48:	4637      	mov	r7, r6
 8006d4a:	dc05      	bgt.n	8006d58 <__swbuf_r+0x4e>
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	4628      	mov	r0, r5
 8006d50:	f001 fd0a 	bl	8008768 <_fflush_r>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d1ed      	bne.n	8006d34 <__swbuf_r+0x2a>
 8006d58:	68a3      	ldr	r3, [r4, #8]
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	60a3      	str	r3, [r4, #8]
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	1c5a      	adds	r2, r3, #1
 8006d62:	6022      	str	r2, [r4, #0]
 8006d64:	701e      	strb	r6, [r3, #0]
 8006d66:	6962      	ldr	r2, [r4, #20]
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d004      	beq.n	8006d78 <__swbuf_r+0x6e>
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	07db      	lsls	r3, r3, #31
 8006d72:	d5e1      	bpl.n	8006d38 <__swbuf_r+0x2e>
 8006d74:	2e0a      	cmp	r6, #10
 8006d76:	d1df      	bne.n	8006d38 <__swbuf_r+0x2e>
 8006d78:	4621      	mov	r1, r4
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f001 fcf4 	bl	8008768 <_fflush_r>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d0d9      	beq.n	8006d38 <__swbuf_r+0x2e>
 8006d84:	e7d6      	b.n	8006d34 <__swbuf_r+0x2a>
	...

08006d88 <__swsetup_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	4b29      	ldr	r3, [pc, #164]	@ (8006e30 <__swsetup_r+0xa8>)
 8006d8c:	4605      	mov	r5, r0
 8006d8e:	6818      	ldr	r0, [r3, #0]
 8006d90:	460c      	mov	r4, r1
 8006d92:	b118      	cbz	r0, 8006d9c <__swsetup_r+0x14>
 8006d94:	6a03      	ldr	r3, [r0, #32]
 8006d96:	b90b      	cbnz	r3, 8006d9c <__swsetup_r+0x14>
 8006d98:	f7ff feac 	bl	8006af4 <__sinit>
 8006d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006da0:	0719      	lsls	r1, r3, #28
 8006da2:	d422      	bmi.n	8006dea <__swsetup_r+0x62>
 8006da4:	06da      	lsls	r2, r3, #27
 8006da6:	d407      	bmi.n	8006db8 <__swsetup_r+0x30>
 8006da8:	2209      	movs	r2, #9
 8006daa:	602a      	str	r2, [r5, #0]
 8006dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006db0:	81a3      	strh	r3, [r4, #12]
 8006db2:	f04f 30ff 	mov.w	r0, #4294967295
 8006db6:	e033      	b.n	8006e20 <__swsetup_r+0x98>
 8006db8:	0758      	lsls	r0, r3, #29
 8006dba:	d512      	bpl.n	8006de2 <__swsetup_r+0x5a>
 8006dbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dbe:	b141      	cbz	r1, 8006dd2 <__swsetup_r+0x4a>
 8006dc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dc4:	4299      	cmp	r1, r3
 8006dc6:	d002      	beq.n	8006dce <__swsetup_r+0x46>
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f000 ff1d 	bl	8007c08 <_free_r>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dd2:	89a3      	ldrh	r3, [r4, #12]
 8006dd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006dd8:	81a3      	strh	r3, [r4, #12]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	6063      	str	r3, [r4, #4]
 8006dde:	6923      	ldr	r3, [r4, #16]
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	f043 0308 	orr.w	r3, r3, #8
 8006de8:	81a3      	strh	r3, [r4, #12]
 8006dea:	6923      	ldr	r3, [r4, #16]
 8006dec:	b94b      	cbnz	r3, 8006e02 <__swsetup_r+0x7a>
 8006dee:	89a3      	ldrh	r3, [r4, #12]
 8006df0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006df8:	d003      	beq.n	8006e02 <__swsetup_r+0x7a>
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	f001 fd01 	bl	8008804 <__smakebuf_r>
 8006e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e06:	f013 0201 	ands.w	r2, r3, #1
 8006e0a:	d00a      	beq.n	8006e22 <__swsetup_r+0x9a>
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	60a2      	str	r2, [r4, #8]
 8006e10:	6962      	ldr	r2, [r4, #20]
 8006e12:	4252      	negs	r2, r2
 8006e14:	61a2      	str	r2, [r4, #24]
 8006e16:	6922      	ldr	r2, [r4, #16]
 8006e18:	b942      	cbnz	r2, 8006e2c <__swsetup_r+0xa4>
 8006e1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e1e:	d1c5      	bne.n	8006dac <__swsetup_r+0x24>
 8006e20:	bd38      	pop	{r3, r4, r5, pc}
 8006e22:	0799      	lsls	r1, r3, #30
 8006e24:	bf58      	it	pl
 8006e26:	6962      	ldrpl	r2, [r4, #20]
 8006e28:	60a2      	str	r2, [r4, #8]
 8006e2a:	e7f4      	b.n	8006e16 <__swsetup_r+0x8e>
 8006e2c:	2000      	movs	r0, #0
 8006e2e:	e7f7      	b.n	8006e20 <__swsetup_r+0x98>
 8006e30:	20000018 	.word	0x20000018

08006e34 <memset>:
 8006e34:	4402      	add	r2, r0
 8006e36:	4603      	mov	r3, r0
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d100      	bne.n	8006e3e <memset+0xa>
 8006e3c:	4770      	bx	lr
 8006e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e42:	e7f9      	b.n	8006e38 <memset+0x4>

08006e44 <_localeconv_r>:
 8006e44:	4800      	ldr	r0, [pc, #0]	@ (8006e48 <_localeconv_r+0x4>)
 8006e46:	4770      	bx	lr
 8006e48:	20000158 	.word	0x20000158

08006e4c <_close_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4d06      	ldr	r5, [pc, #24]	@ (8006e68 <_close_r+0x1c>)
 8006e50:	2300      	movs	r3, #0
 8006e52:	4604      	mov	r4, r0
 8006e54:	4608      	mov	r0, r1
 8006e56:	602b      	str	r3, [r5, #0]
 8006e58:	f7fa fb5e 	bl	8001518 <_close>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_close_r+0x1a>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_close_r+0x1a>
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	200006c4 	.word	0x200006c4

08006e6c <_lseek_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4d07      	ldr	r5, [pc, #28]	@ (8006e8c <_lseek_r+0x20>)
 8006e70:	4604      	mov	r4, r0
 8006e72:	4608      	mov	r0, r1
 8006e74:	4611      	mov	r1, r2
 8006e76:	2200      	movs	r2, #0
 8006e78:	602a      	str	r2, [r5, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f7fa fb73 	bl	8001566 <_lseek>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_lseek_r+0x1e>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_lseek_r+0x1e>
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	200006c4 	.word	0x200006c4

08006e90 <_read_r>:
 8006e90:	b538      	push	{r3, r4, r5, lr}
 8006e92:	4d07      	ldr	r5, [pc, #28]	@ (8006eb0 <_read_r+0x20>)
 8006e94:	4604      	mov	r4, r0
 8006e96:	4608      	mov	r0, r1
 8006e98:	4611      	mov	r1, r2
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	602a      	str	r2, [r5, #0]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f7fa fb01 	bl	80014a6 <_read>
 8006ea4:	1c43      	adds	r3, r0, #1
 8006ea6:	d102      	bne.n	8006eae <_read_r+0x1e>
 8006ea8:	682b      	ldr	r3, [r5, #0]
 8006eaa:	b103      	cbz	r3, 8006eae <_read_r+0x1e>
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	bd38      	pop	{r3, r4, r5, pc}
 8006eb0:	200006c4 	.word	0x200006c4

08006eb4 <_sbrk_r>:
 8006eb4:	b538      	push	{r3, r4, r5, lr}
 8006eb6:	4d06      	ldr	r5, [pc, #24]	@ (8006ed0 <_sbrk_r+0x1c>)
 8006eb8:	2300      	movs	r3, #0
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	602b      	str	r3, [r5, #0]
 8006ec0:	f7fa fb5e 	bl	8001580 <_sbrk>
 8006ec4:	1c43      	adds	r3, r0, #1
 8006ec6:	d102      	bne.n	8006ece <_sbrk_r+0x1a>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	b103      	cbz	r3, 8006ece <_sbrk_r+0x1a>
 8006ecc:	6023      	str	r3, [r4, #0]
 8006ece:	bd38      	pop	{r3, r4, r5, pc}
 8006ed0:	200006c4 	.word	0x200006c4

08006ed4 <_write_r>:
 8006ed4:	b538      	push	{r3, r4, r5, lr}
 8006ed6:	4d07      	ldr	r5, [pc, #28]	@ (8006ef4 <_write_r+0x20>)
 8006ed8:	4604      	mov	r4, r0
 8006eda:	4608      	mov	r0, r1
 8006edc:	4611      	mov	r1, r2
 8006ede:	2200      	movs	r2, #0
 8006ee0:	602a      	str	r2, [r5, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f7fa fafc 	bl	80014e0 <_write>
 8006ee8:	1c43      	adds	r3, r0, #1
 8006eea:	d102      	bne.n	8006ef2 <_write_r+0x1e>
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	b103      	cbz	r3, 8006ef2 <_write_r+0x1e>
 8006ef0:	6023      	str	r3, [r4, #0]
 8006ef2:	bd38      	pop	{r3, r4, r5, pc}
 8006ef4:	200006c4 	.word	0x200006c4

08006ef8 <__errno>:
 8006ef8:	4b01      	ldr	r3, [pc, #4]	@ (8006f00 <__errno+0x8>)
 8006efa:	6818      	ldr	r0, [r3, #0]
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	20000018 	.word	0x20000018

08006f04 <__libc_init_array>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	4d0d      	ldr	r5, [pc, #52]	@ (8006f3c <__libc_init_array+0x38>)
 8006f08:	4c0d      	ldr	r4, [pc, #52]	@ (8006f40 <__libc_init_array+0x3c>)
 8006f0a:	1b64      	subs	r4, r4, r5
 8006f0c:	10a4      	asrs	r4, r4, #2
 8006f0e:	2600      	movs	r6, #0
 8006f10:	42a6      	cmp	r6, r4
 8006f12:	d109      	bne.n	8006f28 <__libc_init_array+0x24>
 8006f14:	4d0b      	ldr	r5, [pc, #44]	@ (8006f44 <__libc_init_array+0x40>)
 8006f16:	4c0c      	ldr	r4, [pc, #48]	@ (8006f48 <__libc_init_array+0x44>)
 8006f18:	f001 fedc 	bl	8008cd4 <_init>
 8006f1c:	1b64      	subs	r4, r4, r5
 8006f1e:	10a4      	asrs	r4, r4, #2
 8006f20:	2600      	movs	r6, #0
 8006f22:	42a6      	cmp	r6, r4
 8006f24:	d105      	bne.n	8006f32 <__libc_init_array+0x2e>
 8006f26:	bd70      	pop	{r4, r5, r6, pc}
 8006f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2c:	4798      	blx	r3
 8006f2e:	3601      	adds	r6, #1
 8006f30:	e7ee      	b.n	8006f10 <__libc_init_array+0xc>
 8006f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f36:	4798      	blx	r3
 8006f38:	3601      	adds	r6, #1
 8006f3a:	e7f2      	b.n	8006f22 <__libc_init_array+0x1e>
 8006f3c:	08009150 	.word	0x08009150
 8006f40:	08009150 	.word	0x08009150
 8006f44:	08009150 	.word	0x08009150
 8006f48:	08009154 	.word	0x08009154

08006f4c <__retarget_lock_init_recursive>:
 8006f4c:	4770      	bx	lr

08006f4e <__retarget_lock_acquire_recursive>:
 8006f4e:	4770      	bx	lr

08006f50 <__retarget_lock_release_recursive>:
 8006f50:	4770      	bx	lr

08006f52 <memcpy>:
 8006f52:	440a      	add	r2, r1
 8006f54:	4291      	cmp	r1, r2
 8006f56:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f5a:	d100      	bne.n	8006f5e <memcpy+0xc>
 8006f5c:	4770      	bx	lr
 8006f5e:	b510      	push	{r4, lr}
 8006f60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f68:	4291      	cmp	r1, r2
 8006f6a:	d1f9      	bne.n	8006f60 <memcpy+0xe>
 8006f6c:	bd10      	pop	{r4, pc}

08006f6e <quorem>:
 8006f6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f72:	6903      	ldr	r3, [r0, #16]
 8006f74:	690c      	ldr	r4, [r1, #16]
 8006f76:	42a3      	cmp	r3, r4
 8006f78:	4607      	mov	r7, r0
 8006f7a:	db7e      	blt.n	800707a <quorem+0x10c>
 8006f7c:	3c01      	subs	r4, #1
 8006f7e:	f101 0814 	add.w	r8, r1, #20
 8006f82:	00a3      	lsls	r3, r4, #2
 8006f84:	f100 0514 	add.w	r5, r0, #20
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006fa0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fa4:	d32e      	bcc.n	8007004 <quorem+0x96>
 8006fa6:	f04f 0a00 	mov.w	sl, #0
 8006faa:	46c4      	mov	ip, r8
 8006fac:	46ae      	mov	lr, r5
 8006fae:	46d3      	mov	fp, sl
 8006fb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fb4:	b298      	uxth	r0, r3
 8006fb6:	fb06 a000 	mla	r0, r6, r0, sl
 8006fba:	0c02      	lsrs	r2, r0, #16
 8006fbc:	0c1b      	lsrs	r3, r3, #16
 8006fbe:	fb06 2303 	mla	r3, r6, r3, r2
 8006fc2:	f8de 2000 	ldr.w	r2, [lr]
 8006fc6:	b280      	uxth	r0, r0
 8006fc8:	b292      	uxth	r2, r2
 8006fca:	1a12      	subs	r2, r2, r0
 8006fcc:	445a      	add	r2, fp
 8006fce:	f8de 0000 	ldr.w	r0, [lr]
 8006fd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006fdc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006fe0:	b292      	uxth	r2, r2
 8006fe2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006fe6:	45e1      	cmp	r9, ip
 8006fe8:	f84e 2b04 	str.w	r2, [lr], #4
 8006fec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006ff0:	d2de      	bcs.n	8006fb0 <quorem+0x42>
 8006ff2:	9b00      	ldr	r3, [sp, #0]
 8006ff4:	58eb      	ldr	r3, [r5, r3]
 8006ff6:	b92b      	cbnz	r3, 8007004 <quorem+0x96>
 8006ff8:	9b01      	ldr	r3, [sp, #4]
 8006ffa:	3b04      	subs	r3, #4
 8006ffc:	429d      	cmp	r5, r3
 8006ffe:	461a      	mov	r2, r3
 8007000:	d32f      	bcc.n	8007062 <quorem+0xf4>
 8007002:	613c      	str	r4, [r7, #16]
 8007004:	4638      	mov	r0, r7
 8007006:	f001 f8c3 	bl	8008190 <__mcmp>
 800700a:	2800      	cmp	r0, #0
 800700c:	db25      	blt.n	800705a <quorem+0xec>
 800700e:	4629      	mov	r1, r5
 8007010:	2000      	movs	r0, #0
 8007012:	f858 2b04 	ldr.w	r2, [r8], #4
 8007016:	f8d1 c000 	ldr.w	ip, [r1]
 800701a:	fa1f fe82 	uxth.w	lr, r2
 800701e:	fa1f f38c 	uxth.w	r3, ip
 8007022:	eba3 030e 	sub.w	r3, r3, lr
 8007026:	4403      	add	r3, r0
 8007028:	0c12      	lsrs	r2, r2, #16
 800702a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800702e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007032:	b29b      	uxth	r3, r3
 8007034:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007038:	45c1      	cmp	r9, r8
 800703a:	f841 3b04 	str.w	r3, [r1], #4
 800703e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007042:	d2e6      	bcs.n	8007012 <quorem+0xa4>
 8007044:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007048:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800704c:	b922      	cbnz	r2, 8007058 <quorem+0xea>
 800704e:	3b04      	subs	r3, #4
 8007050:	429d      	cmp	r5, r3
 8007052:	461a      	mov	r2, r3
 8007054:	d30b      	bcc.n	800706e <quorem+0x100>
 8007056:	613c      	str	r4, [r7, #16]
 8007058:	3601      	adds	r6, #1
 800705a:	4630      	mov	r0, r6
 800705c:	b003      	add	sp, #12
 800705e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007062:	6812      	ldr	r2, [r2, #0]
 8007064:	3b04      	subs	r3, #4
 8007066:	2a00      	cmp	r2, #0
 8007068:	d1cb      	bne.n	8007002 <quorem+0x94>
 800706a:	3c01      	subs	r4, #1
 800706c:	e7c6      	b.n	8006ffc <quorem+0x8e>
 800706e:	6812      	ldr	r2, [r2, #0]
 8007070:	3b04      	subs	r3, #4
 8007072:	2a00      	cmp	r2, #0
 8007074:	d1ef      	bne.n	8007056 <quorem+0xe8>
 8007076:	3c01      	subs	r4, #1
 8007078:	e7ea      	b.n	8007050 <quorem+0xe2>
 800707a:	2000      	movs	r0, #0
 800707c:	e7ee      	b.n	800705c <quorem+0xee>
	...

08007080 <_dtoa_r>:
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	69c7      	ldr	r7, [r0, #28]
 8007086:	b099      	sub	sp, #100	@ 0x64
 8007088:	ed8d 0b02 	vstr	d0, [sp, #8]
 800708c:	ec55 4b10 	vmov	r4, r5, d0
 8007090:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007092:	9109      	str	r1, [sp, #36]	@ 0x24
 8007094:	4683      	mov	fp, r0
 8007096:	920e      	str	r2, [sp, #56]	@ 0x38
 8007098:	9313      	str	r3, [sp, #76]	@ 0x4c
 800709a:	b97f      	cbnz	r7, 80070bc <_dtoa_r+0x3c>
 800709c:	2010      	movs	r0, #16
 800709e:	f7fe fed5 	bl	8005e4c <malloc>
 80070a2:	4602      	mov	r2, r0
 80070a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80070a8:	b920      	cbnz	r0, 80070b4 <_dtoa_r+0x34>
 80070aa:	4ba7      	ldr	r3, [pc, #668]	@ (8007348 <_dtoa_r+0x2c8>)
 80070ac:	21ef      	movs	r1, #239	@ 0xef
 80070ae:	48a7      	ldr	r0, [pc, #668]	@ (800734c <_dtoa_r+0x2cc>)
 80070b0:	f001 fc20 	bl	80088f4 <__assert_func>
 80070b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80070b8:	6007      	str	r7, [r0, #0]
 80070ba:	60c7      	str	r7, [r0, #12]
 80070bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070c0:	6819      	ldr	r1, [r3, #0]
 80070c2:	b159      	cbz	r1, 80070dc <_dtoa_r+0x5c>
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	604a      	str	r2, [r1, #4]
 80070c8:	2301      	movs	r3, #1
 80070ca:	4093      	lsls	r3, r2
 80070cc:	608b      	str	r3, [r1, #8]
 80070ce:	4658      	mov	r0, fp
 80070d0:	f000 fe24 	bl	8007d1c <_Bfree>
 80070d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	1e2b      	subs	r3, r5, #0
 80070de:	bfb9      	ittee	lt
 80070e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80070e4:	9303      	strlt	r3, [sp, #12]
 80070e6:	2300      	movge	r3, #0
 80070e8:	6033      	strge	r3, [r6, #0]
 80070ea:	9f03      	ldr	r7, [sp, #12]
 80070ec:	4b98      	ldr	r3, [pc, #608]	@ (8007350 <_dtoa_r+0x2d0>)
 80070ee:	bfbc      	itt	lt
 80070f0:	2201      	movlt	r2, #1
 80070f2:	6032      	strlt	r2, [r6, #0]
 80070f4:	43bb      	bics	r3, r7
 80070f6:	d112      	bne.n	800711e <_dtoa_r+0x9e>
 80070f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80070fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80070fe:	6013      	str	r3, [r2, #0]
 8007100:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007104:	4323      	orrs	r3, r4
 8007106:	f000 854d 	beq.w	8007ba4 <_dtoa_r+0xb24>
 800710a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800710c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007364 <_dtoa_r+0x2e4>
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 854f 	beq.w	8007bb4 <_dtoa_r+0xb34>
 8007116:	f10a 0303 	add.w	r3, sl, #3
 800711a:	f000 bd49 	b.w	8007bb0 <_dtoa_r+0xb30>
 800711e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007122:	2200      	movs	r2, #0
 8007124:	ec51 0b17 	vmov	r0, r1, d7
 8007128:	2300      	movs	r3, #0
 800712a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800712e:	f7f9 fcdb 	bl	8000ae8 <__aeabi_dcmpeq>
 8007132:	4680      	mov	r8, r0
 8007134:	b158      	cbz	r0, 800714e <_dtoa_r+0xce>
 8007136:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007138:	2301      	movs	r3, #1
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800713e:	b113      	cbz	r3, 8007146 <_dtoa_r+0xc6>
 8007140:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007142:	4b84      	ldr	r3, [pc, #528]	@ (8007354 <_dtoa_r+0x2d4>)
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007368 <_dtoa_r+0x2e8>
 800714a:	f000 bd33 	b.w	8007bb4 <_dtoa_r+0xb34>
 800714e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007152:	aa16      	add	r2, sp, #88	@ 0x58
 8007154:	a917      	add	r1, sp, #92	@ 0x5c
 8007156:	4658      	mov	r0, fp
 8007158:	f001 f8ca 	bl	80082f0 <__d2b>
 800715c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007160:	4681      	mov	r9, r0
 8007162:	2e00      	cmp	r6, #0
 8007164:	d077      	beq.n	8007256 <_dtoa_r+0x1d6>
 8007166:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007168:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800716c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007174:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007178:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800717c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007180:	4619      	mov	r1, r3
 8007182:	2200      	movs	r2, #0
 8007184:	4b74      	ldr	r3, [pc, #464]	@ (8007358 <_dtoa_r+0x2d8>)
 8007186:	f7f9 f88f 	bl	80002a8 <__aeabi_dsub>
 800718a:	a369      	add	r3, pc, #420	@ (adr r3, 8007330 <_dtoa_r+0x2b0>)
 800718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007190:	f7f9 fa42 	bl	8000618 <__aeabi_dmul>
 8007194:	a368      	add	r3, pc, #416	@ (adr r3, 8007338 <_dtoa_r+0x2b8>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f7f9 f887 	bl	80002ac <__adddf3>
 800719e:	4604      	mov	r4, r0
 80071a0:	4630      	mov	r0, r6
 80071a2:	460d      	mov	r5, r1
 80071a4:	f7f9 f9ce 	bl	8000544 <__aeabi_i2d>
 80071a8:	a365      	add	r3, pc, #404	@ (adr r3, 8007340 <_dtoa_r+0x2c0>)
 80071aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ae:	f7f9 fa33 	bl	8000618 <__aeabi_dmul>
 80071b2:	4602      	mov	r2, r0
 80071b4:	460b      	mov	r3, r1
 80071b6:	4620      	mov	r0, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	f7f9 f877 	bl	80002ac <__adddf3>
 80071be:	4604      	mov	r4, r0
 80071c0:	460d      	mov	r5, r1
 80071c2:	f7f9 fcd9 	bl	8000b78 <__aeabi_d2iz>
 80071c6:	2200      	movs	r2, #0
 80071c8:	4607      	mov	r7, r0
 80071ca:	2300      	movs	r3, #0
 80071cc:	4620      	mov	r0, r4
 80071ce:	4629      	mov	r1, r5
 80071d0:	f7f9 fc94 	bl	8000afc <__aeabi_dcmplt>
 80071d4:	b140      	cbz	r0, 80071e8 <_dtoa_r+0x168>
 80071d6:	4638      	mov	r0, r7
 80071d8:	f7f9 f9b4 	bl	8000544 <__aeabi_i2d>
 80071dc:	4622      	mov	r2, r4
 80071de:	462b      	mov	r3, r5
 80071e0:	f7f9 fc82 	bl	8000ae8 <__aeabi_dcmpeq>
 80071e4:	b900      	cbnz	r0, 80071e8 <_dtoa_r+0x168>
 80071e6:	3f01      	subs	r7, #1
 80071e8:	2f16      	cmp	r7, #22
 80071ea:	d851      	bhi.n	8007290 <_dtoa_r+0x210>
 80071ec:	4b5b      	ldr	r3, [pc, #364]	@ (800735c <_dtoa_r+0x2dc>)
 80071ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071fa:	f7f9 fc7f 	bl	8000afc <__aeabi_dcmplt>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d048      	beq.n	8007294 <_dtoa_r+0x214>
 8007202:	3f01      	subs	r7, #1
 8007204:	2300      	movs	r3, #0
 8007206:	9312      	str	r3, [sp, #72]	@ 0x48
 8007208:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800720a:	1b9b      	subs	r3, r3, r6
 800720c:	1e5a      	subs	r2, r3, #1
 800720e:	bf44      	itt	mi
 8007210:	f1c3 0801 	rsbmi	r8, r3, #1
 8007214:	2300      	movmi	r3, #0
 8007216:	9208      	str	r2, [sp, #32]
 8007218:	bf54      	ite	pl
 800721a:	f04f 0800 	movpl.w	r8, #0
 800721e:	9308      	strmi	r3, [sp, #32]
 8007220:	2f00      	cmp	r7, #0
 8007222:	db39      	blt.n	8007298 <_dtoa_r+0x218>
 8007224:	9b08      	ldr	r3, [sp, #32]
 8007226:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007228:	443b      	add	r3, r7
 800722a:	9308      	str	r3, [sp, #32]
 800722c:	2300      	movs	r3, #0
 800722e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007232:	2b09      	cmp	r3, #9
 8007234:	d864      	bhi.n	8007300 <_dtoa_r+0x280>
 8007236:	2b05      	cmp	r3, #5
 8007238:	bfc4      	itt	gt
 800723a:	3b04      	subgt	r3, #4
 800723c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800723e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007240:	f1a3 0302 	sub.w	r3, r3, #2
 8007244:	bfcc      	ite	gt
 8007246:	2400      	movgt	r4, #0
 8007248:	2401      	movle	r4, #1
 800724a:	2b03      	cmp	r3, #3
 800724c:	d863      	bhi.n	8007316 <_dtoa_r+0x296>
 800724e:	e8df f003 	tbb	[pc, r3]
 8007252:	372a      	.short	0x372a
 8007254:	5535      	.short	0x5535
 8007256:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800725a:	441e      	add	r6, r3
 800725c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007260:	2b20      	cmp	r3, #32
 8007262:	bfc1      	itttt	gt
 8007264:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007268:	409f      	lslgt	r7, r3
 800726a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800726e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007272:	bfd6      	itet	le
 8007274:	f1c3 0320 	rsble	r3, r3, #32
 8007278:	ea47 0003 	orrgt.w	r0, r7, r3
 800727c:	fa04 f003 	lslle.w	r0, r4, r3
 8007280:	f7f9 f950 	bl	8000524 <__aeabi_ui2d>
 8007284:	2201      	movs	r2, #1
 8007286:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800728a:	3e01      	subs	r6, #1
 800728c:	9214      	str	r2, [sp, #80]	@ 0x50
 800728e:	e777      	b.n	8007180 <_dtoa_r+0x100>
 8007290:	2301      	movs	r3, #1
 8007292:	e7b8      	b.n	8007206 <_dtoa_r+0x186>
 8007294:	9012      	str	r0, [sp, #72]	@ 0x48
 8007296:	e7b7      	b.n	8007208 <_dtoa_r+0x188>
 8007298:	427b      	negs	r3, r7
 800729a:	930a      	str	r3, [sp, #40]	@ 0x28
 800729c:	2300      	movs	r3, #0
 800729e:	eba8 0807 	sub.w	r8, r8, r7
 80072a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80072a4:	e7c4      	b.n	8007230 <_dtoa_r+0x1b0>
 80072a6:	2300      	movs	r3, #0
 80072a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	dc35      	bgt.n	800731c <_dtoa_r+0x29c>
 80072b0:	2301      	movs	r3, #1
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	9307      	str	r3, [sp, #28]
 80072b6:	461a      	mov	r2, r3
 80072b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80072ba:	e00b      	b.n	80072d4 <_dtoa_r+0x254>
 80072bc:	2301      	movs	r3, #1
 80072be:	e7f3      	b.n	80072a8 <_dtoa_r+0x228>
 80072c0:	2300      	movs	r3, #0
 80072c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072c6:	18fb      	adds	r3, r7, r3
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	3301      	adds	r3, #1
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	9307      	str	r3, [sp, #28]
 80072d0:	bfb8      	it	lt
 80072d2:	2301      	movlt	r3, #1
 80072d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80072d8:	2100      	movs	r1, #0
 80072da:	2204      	movs	r2, #4
 80072dc:	f102 0514 	add.w	r5, r2, #20
 80072e0:	429d      	cmp	r5, r3
 80072e2:	d91f      	bls.n	8007324 <_dtoa_r+0x2a4>
 80072e4:	6041      	str	r1, [r0, #4]
 80072e6:	4658      	mov	r0, fp
 80072e8:	f000 fcd8 	bl	8007c9c <_Balloc>
 80072ec:	4682      	mov	sl, r0
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d13c      	bne.n	800736c <_dtoa_r+0x2ec>
 80072f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007360 <_dtoa_r+0x2e0>)
 80072f4:	4602      	mov	r2, r0
 80072f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80072fa:	e6d8      	b.n	80070ae <_dtoa_r+0x2e>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e7e0      	b.n	80072c2 <_dtoa_r+0x242>
 8007300:	2401      	movs	r4, #1
 8007302:	2300      	movs	r3, #0
 8007304:	9309      	str	r3, [sp, #36]	@ 0x24
 8007306:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007308:	f04f 33ff 	mov.w	r3, #4294967295
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	9307      	str	r3, [sp, #28]
 8007310:	2200      	movs	r2, #0
 8007312:	2312      	movs	r3, #18
 8007314:	e7d0      	b.n	80072b8 <_dtoa_r+0x238>
 8007316:	2301      	movs	r3, #1
 8007318:	930b      	str	r3, [sp, #44]	@ 0x2c
 800731a:	e7f5      	b.n	8007308 <_dtoa_r+0x288>
 800731c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	9307      	str	r3, [sp, #28]
 8007322:	e7d7      	b.n	80072d4 <_dtoa_r+0x254>
 8007324:	3101      	adds	r1, #1
 8007326:	0052      	lsls	r2, r2, #1
 8007328:	e7d8      	b.n	80072dc <_dtoa_r+0x25c>
 800732a:	bf00      	nop
 800732c:	f3af 8000 	nop.w
 8007330:	636f4361 	.word	0x636f4361
 8007334:	3fd287a7 	.word	0x3fd287a7
 8007338:	8b60c8b3 	.word	0x8b60c8b3
 800733c:	3fc68a28 	.word	0x3fc68a28
 8007340:	509f79fb 	.word	0x509f79fb
 8007344:	3fd34413 	.word	0x3fd34413
 8007348:	08008f16 	.word	0x08008f16
 800734c:	08008f2d 	.word	0x08008f2d
 8007350:	7ff00000 	.word	0x7ff00000
 8007354:	08008ee6 	.word	0x08008ee6
 8007358:	3ff80000 	.word	0x3ff80000
 800735c:	08009028 	.word	0x08009028
 8007360:	08008f85 	.word	0x08008f85
 8007364:	08008f12 	.word	0x08008f12
 8007368:	08008ee5 	.word	0x08008ee5
 800736c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007370:	6018      	str	r0, [r3, #0]
 8007372:	9b07      	ldr	r3, [sp, #28]
 8007374:	2b0e      	cmp	r3, #14
 8007376:	f200 80a4 	bhi.w	80074c2 <_dtoa_r+0x442>
 800737a:	2c00      	cmp	r4, #0
 800737c:	f000 80a1 	beq.w	80074c2 <_dtoa_r+0x442>
 8007380:	2f00      	cmp	r7, #0
 8007382:	dd33      	ble.n	80073ec <_dtoa_r+0x36c>
 8007384:	4bad      	ldr	r3, [pc, #692]	@ (800763c <_dtoa_r+0x5bc>)
 8007386:	f007 020f 	and.w	r2, r7, #15
 800738a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800738e:	ed93 7b00 	vldr	d7, [r3]
 8007392:	05f8      	lsls	r0, r7, #23
 8007394:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007398:	ea4f 1427 	mov.w	r4, r7, asr #4
 800739c:	d516      	bpl.n	80073cc <_dtoa_r+0x34c>
 800739e:	4ba8      	ldr	r3, [pc, #672]	@ (8007640 <_dtoa_r+0x5c0>)
 80073a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073a8:	f7f9 fa60 	bl	800086c <__aeabi_ddiv>
 80073ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073b0:	f004 040f 	and.w	r4, r4, #15
 80073b4:	2603      	movs	r6, #3
 80073b6:	4da2      	ldr	r5, [pc, #648]	@ (8007640 <_dtoa_r+0x5c0>)
 80073b8:	b954      	cbnz	r4, 80073d0 <_dtoa_r+0x350>
 80073ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c2:	f7f9 fa53 	bl	800086c <__aeabi_ddiv>
 80073c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ca:	e028      	b.n	800741e <_dtoa_r+0x39e>
 80073cc:	2602      	movs	r6, #2
 80073ce:	e7f2      	b.n	80073b6 <_dtoa_r+0x336>
 80073d0:	07e1      	lsls	r1, r4, #31
 80073d2:	d508      	bpl.n	80073e6 <_dtoa_r+0x366>
 80073d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073dc:	f7f9 f91c 	bl	8000618 <__aeabi_dmul>
 80073e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073e4:	3601      	adds	r6, #1
 80073e6:	1064      	asrs	r4, r4, #1
 80073e8:	3508      	adds	r5, #8
 80073ea:	e7e5      	b.n	80073b8 <_dtoa_r+0x338>
 80073ec:	f000 80d2 	beq.w	8007594 <_dtoa_r+0x514>
 80073f0:	427c      	negs	r4, r7
 80073f2:	4b92      	ldr	r3, [pc, #584]	@ (800763c <_dtoa_r+0x5bc>)
 80073f4:	4d92      	ldr	r5, [pc, #584]	@ (8007640 <_dtoa_r+0x5c0>)
 80073f6:	f004 020f 	and.w	r2, r4, #15
 80073fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007406:	f7f9 f907 	bl	8000618 <__aeabi_dmul>
 800740a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800740e:	1124      	asrs	r4, r4, #4
 8007410:	2300      	movs	r3, #0
 8007412:	2602      	movs	r6, #2
 8007414:	2c00      	cmp	r4, #0
 8007416:	f040 80b2 	bne.w	800757e <_dtoa_r+0x4fe>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d1d3      	bne.n	80073c6 <_dtoa_r+0x346>
 800741e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007420:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 80b7 	beq.w	8007598 <_dtoa_r+0x518>
 800742a:	4b86      	ldr	r3, [pc, #536]	@ (8007644 <_dtoa_r+0x5c4>)
 800742c:	2200      	movs	r2, #0
 800742e:	4620      	mov	r0, r4
 8007430:	4629      	mov	r1, r5
 8007432:	f7f9 fb63 	bl	8000afc <__aeabi_dcmplt>
 8007436:	2800      	cmp	r0, #0
 8007438:	f000 80ae 	beq.w	8007598 <_dtoa_r+0x518>
 800743c:	9b07      	ldr	r3, [sp, #28]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 80aa 	beq.w	8007598 <_dtoa_r+0x518>
 8007444:	9b00      	ldr	r3, [sp, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	dd37      	ble.n	80074ba <_dtoa_r+0x43a>
 800744a:	1e7b      	subs	r3, r7, #1
 800744c:	9304      	str	r3, [sp, #16]
 800744e:	4620      	mov	r0, r4
 8007450:	4b7d      	ldr	r3, [pc, #500]	@ (8007648 <_dtoa_r+0x5c8>)
 8007452:	2200      	movs	r2, #0
 8007454:	4629      	mov	r1, r5
 8007456:	f7f9 f8df 	bl	8000618 <__aeabi_dmul>
 800745a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800745e:	9c00      	ldr	r4, [sp, #0]
 8007460:	3601      	adds	r6, #1
 8007462:	4630      	mov	r0, r6
 8007464:	f7f9 f86e 	bl	8000544 <__aeabi_i2d>
 8007468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800746c:	f7f9 f8d4 	bl	8000618 <__aeabi_dmul>
 8007470:	4b76      	ldr	r3, [pc, #472]	@ (800764c <_dtoa_r+0x5cc>)
 8007472:	2200      	movs	r2, #0
 8007474:	f7f8 ff1a 	bl	80002ac <__adddf3>
 8007478:	4605      	mov	r5, r0
 800747a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800747e:	2c00      	cmp	r4, #0
 8007480:	f040 808d 	bne.w	800759e <_dtoa_r+0x51e>
 8007484:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007488:	4b71      	ldr	r3, [pc, #452]	@ (8007650 <_dtoa_r+0x5d0>)
 800748a:	2200      	movs	r2, #0
 800748c:	f7f8 ff0c 	bl	80002a8 <__aeabi_dsub>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007498:	462a      	mov	r2, r5
 800749a:	4633      	mov	r3, r6
 800749c:	f7f9 fb4c 	bl	8000b38 <__aeabi_dcmpgt>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	f040 828b 	bne.w	80079bc <_dtoa_r+0x93c>
 80074a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074aa:	462a      	mov	r2, r5
 80074ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80074b0:	f7f9 fb24 	bl	8000afc <__aeabi_dcmplt>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	f040 8128 	bne.w	800770a <_dtoa_r+0x68a>
 80074ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80074be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80074c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f2c0 815a 	blt.w	800777e <_dtoa_r+0x6fe>
 80074ca:	2f0e      	cmp	r7, #14
 80074cc:	f300 8157 	bgt.w	800777e <_dtoa_r+0x6fe>
 80074d0:	4b5a      	ldr	r3, [pc, #360]	@ (800763c <_dtoa_r+0x5bc>)
 80074d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074d6:	ed93 7b00 	vldr	d7, [r3]
 80074da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074dc:	2b00      	cmp	r3, #0
 80074de:	ed8d 7b00 	vstr	d7, [sp]
 80074e2:	da03      	bge.n	80074ec <_dtoa_r+0x46c>
 80074e4:	9b07      	ldr	r3, [sp, #28]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f340 8101 	ble.w	80076ee <_dtoa_r+0x66e>
 80074ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80074f0:	4656      	mov	r6, sl
 80074f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074f6:	4620      	mov	r0, r4
 80074f8:	4629      	mov	r1, r5
 80074fa:	f7f9 f9b7 	bl	800086c <__aeabi_ddiv>
 80074fe:	f7f9 fb3b 	bl	8000b78 <__aeabi_d2iz>
 8007502:	4680      	mov	r8, r0
 8007504:	f7f9 f81e 	bl	8000544 <__aeabi_i2d>
 8007508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800750c:	f7f9 f884 	bl	8000618 <__aeabi_dmul>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4620      	mov	r0, r4
 8007516:	4629      	mov	r1, r5
 8007518:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800751c:	f7f8 fec4 	bl	80002a8 <__aeabi_dsub>
 8007520:	f806 4b01 	strb.w	r4, [r6], #1
 8007524:	9d07      	ldr	r5, [sp, #28]
 8007526:	eba6 040a 	sub.w	r4, r6, sl
 800752a:	42a5      	cmp	r5, r4
 800752c:	4602      	mov	r2, r0
 800752e:	460b      	mov	r3, r1
 8007530:	f040 8117 	bne.w	8007762 <_dtoa_r+0x6e2>
 8007534:	f7f8 feba 	bl	80002ac <__adddf3>
 8007538:	e9dd 2300 	ldrd	r2, r3, [sp]
 800753c:	4604      	mov	r4, r0
 800753e:	460d      	mov	r5, r1
 8007540:	f7f9 fafa 	bl	8000b38 <__aeabi_dcmpgt>
 8007544:	2800      	cmp	r0, #0
 8007546:	f040 80f9 	bne.w	800773c <_dtoa_r+0x6bc>
 800754a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800754e:	4620      	mov	r0, r4
 8007550:	4629      	mov	r1, r5
 8007552:	f7f9 fac9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007556:	b118      	cbz	r0, 8007560 <_dtoa_r+0x4e0>
 8007558:	f018 0f01 	tst.w	r8, #1
 800755c:	f040 80ee 	bne.w	800773c <_dtoa_r+0x6bc>
 8007560:	4649      	mov	r1, r9
 8007562:	4658      	mov	r0, fp
 8007564:	f000 fbda 	bl	8007d1c <_Bfree>
 8007568:	2300      	movs	r3, #0
 800756a:	7033      	strb	r3, [r6, #0]
 800756c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800756e:	3701      	adds	r7, #1
 8007570:	601f      	str	r7, [r3, #0]
 8007572:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 831d 	beq.w	8007bb4 <_dtoa_r+0xb34>
 800757a:	601e      	str	r6, [r3, #0]
 800757c:	e31a      	b.n	8007bb4 <_dtoa_r+0xb34>
 800757e:	07e2      	lsls	r2, r4, #31
 8007580:	d505      	bpl.n	800758e <_dtoa_r+0x50e>
 8007582:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007586:	f7f9 f847 	bl	8000618 <__aeabi_dmul>
 800758a:	3601      	adds	r6, #1
 800758c:	2301      	movs	r3, #1
 800758e:	1064      	asrs	r4, r4, #1
 8007590:	3508      	adds	r5, #8
 8007592:	e73f      	b.n	8007414 <_dtoa_r+0x394>
 8007594:	2602      	movs	r6, #2
 8007596:	e742      	b.n	800741e <_dtoa_r+0x39e>
 8007598:	9c07      	ldr	r4, [sp, #28]
 800759a:	9704      	str	r7, [sp, #16]
 800759c:	e761      	b.n	8007462 <_dtoa_r+0x3e2>
 800759e:	4b27      	ldr	r3, [pc, #156]	@ (800763c <_dtoa_r+0x5bc>)
 80075a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075aa:	4454      	add	r4, sl
 80075ac:	2900      	cmp	r1, #0
 80075ae:	d053      	beq.n	8007658 <_dtoa_r+0x5d8>
 80075b0:	4928      	ldr	r1, [pc, #160]	@ (8007654 <_dtoa_r+0x5d4>)
 80075b2:	2000      	movs	r0, #0
 80075b4:	f7f9 f95a 	bl	800086c <__aeabi_ddiv>
 80075b8:	4633      	mov	r3, r6
 80075ba:	462a      	mov	r2, r5
 80075bc:	f7f8 fe74 	bl	80002a8 <__aeabi_dsub>
 80075c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075c4:	4656      	mov	r6, sl
 80075c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ca:	f7f9 fad5 	bl	8000b78 <__aeabi_d2iz>
 80075ce:	4605      	mov	r5, r0
 80075d0:	f7f8 ffb8 	bl	8000544 <__aeabi_i2d>
 80075d4:	4602      	mov	r2, r0
 80075d6:	460b      	mov	r3, r1
 80075d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075dc:	f7f8 fe64 	bl	80002a8 <__aeabi_dsub>
 80075e0:	3530      	adds	r5, #48	@ 0x30
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075ea:	f806 5b01 	strb.w	r5, [r6], #1
 80075ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075f2:	f7f9 fa83 	bl	8000afc <__aeabi_dcmplt>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d171      	bne.n	80076de <_dtoa_r+0x65e>
 80075fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075fe:	4911      	ldr	r1, [pc, #68]	@ (8007644 <_dtoa_r+0x5c4>)
 8007600:	2000      	movs	r0, #0
 8007602:	f7f8 fe51 	bl	80002a8 <__aeabi_dsub>
 8007606:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800760a:	f7f9 fa77 	bl	8000afc <__aeabi_dcmplt>
 800760e:	2800      	cmp	r0, #0
 8007610:	f040 8095 	bne.w	800773e <_dtoa_r+0x6be>
 8007614:	42a6      	cmp	r6, r4
 8007616:	f43f af50 	beq.w	80074ba <_dtoa_r+0x43a>
 800761a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800761e:	4b0a      	ldr	r3, [pc, #40]	@ (8007648 <_dtoa_r+0x5c8>)
 8007620:	2200      	movs	r2, #0
 8007622:	f7f8 fff9 	bl	8000618 <__aeabi_dmul>
 8007626:	4b08      	ldr	r3, [pc, #32]	@ (8007648 <_dtoa_r+0x5c8>)
 8007628:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800762c:	2200      	movs	r2, #0
 800762e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007632:	f7f8 fff1 	bl	8000618 <__aeabi_dmul>
 8007636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800763a:	e7c4      	b.n	80075c6 <_dtoa_r+0x546>
 800763c:	08009028 	.word	0x08009028
 8007640:	08009000 	.word	0x08009000
 8007644:	3ff00000 	.word	0x3ff00000
 8007648:	40240000 	.word	0x40240000
 800764c:	401c0000 	.word	0x401c0000
 8007650:	40140000 	.word	0x40140000
 8007654:	3fe00000 	.word	0x3fe00000
 8007658:	4631      	mov	r1, r6
 800765a:	4628      	mov	r0, r5
 800765c:	f7f8 ffdc 	bl	8000618 <__aeabi_dmul>
 8007660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007664:	9415      	str	r4, [sp, #84]	@ 0x54
 8007666:	4656      	mov	r6, sl
 8007668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800766c:	f7f9 fa84 	bl	8000b78 <__aeabi_d2iz>
 8007670:	4605      	mov	r5, r0
 8007672:	f7f8 ff67 	bl	8000544 <__aeabi_i2d>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800767e:	f7f8 fe13 	bl	80002a8 <__aeabi_dsub>
 8007682:	3530      	adds	r5, #48	@ 0x30
 8007684:	f806 5b01 	strb.w	r5, [r6], #1
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	42a6      	cmp	r6, r4
 800768e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007692:	f04f 0200 	mov.w	r2, #0
 8007696:	d124      	bne.n	80076e2 <_dtoa_r+0x662>
 8007698:	4bac      	ldr	r3, [pc, #688]	@ (800794c <_dtoa_r+0x8cc>)
 800769a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800769e:	f7f8 fe05 	bl	80002ac <__adddf3>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076aa:	f7f9 fa45 	bl	8000b38 <__aeabi_dcmpgt>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	d145      	bne.n	800773e <_dtoa_r+0x6be>
 80076b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80076b6:	49a5      	ldr	r1, [pc, #660]	@ (800794c <_dtoa_r+0x8cc>)
 80076b8:	2000      	movs	r0, #0
 80076ba:	f7f8 fdf5 	bl	80002a8 <__aeabi_dsub>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076c6:	f7f9 fa19 	bl	8000afc <__aeabi_dcmplt>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	f43f aef5 	beq.w	80074ba <_dtoa_r+0x43a>
 80076d0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80076d2:	1e73      	subs	r3, r6, #1
 80076d4:	9315      	str	r3, [sp, #84]	@ 0x54
 80076d6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076da:	2b30      	cmp	r3, #48	@ 0x30
 80076dc:	d0f8      	beq.n	80076d0 <_dtoa_r+0x650>
 80076de:	9f04      	ldr	r7, [sp, #16]
 80076e0:	e73e      	b.n	8007560 <_dtoa_r+0x4e0>
 80076e2:	4b9b      	ldr	r3, [pc, #620]	@ (8007950 <_dtoa_r+0x8d0>)
 80076e4:	f7f8 ff98 	bl	8000618 <__aeabi_dmul>
 80076e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ec:	e7bc      	b.n	8007668 <_dtoa_r+0x5e8>
 80076ee:	d10c      	bne.n	800770a <_dtoa_r+0x68a>
 80076f0:	4b98      	ldr	r3, [pc, #608]	@ (8007954 <_dtoa_r+0x8d4>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80076f8:	f7f8 ff8e 	bl	8000618 <__aeabi_dmul>
 80076fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007700:	f7f9 fa10 	bl	8000b24 <__aeabi_dcmpge>
 8007704:	2800      	cmp	r0, #0
 8007706:	f000 8157 	beq.w	80079b8 <_dtoa_r+0x938>
 800770a:	2400      	movs	r4, #0
 800770c:	4625      	mov	r5, r4
 800770e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007710:	43db      	mvns	r3, r3
 8007712:	9304      	str	r3, [sp, #16]
 8007714:	4656      	mov	r6, sl
 8007716:	2700      	movs	r7, #0
 8007718:	4621      	mov	r1, r4
 800771a:	4658      	mov	r0, fp
 800771c:	f000 fafe 	bl	8007d1c <_Bfree>
 8007720:	2d00      	cmp	r5, #0
 8007722:	d0dc      	beq.n	80076de <_dtoa_r+0x65e>
 8007724:	b12f      	cbz	r7, 8007732 <_dtoa_r+0x6b2>
 8007726:	42af      	cmp	r7, r5
 8007728:	d003      	beq.n	8007732 <_dtoa_r+0x6b2>
 800772a:	4639      	mov	r1, r7
 800772c:	4658      	mov	r0, fp
 800772e:	f000 faf5 	bl	8007d1c <_Bfree>
 8007732:	4629      	mov	r1, r5
 8007734:	4658      	mov	r0, fp
 8007736:	f000 faf1 	bl	8007d1c <_Bfree>
 800773a:	e7d0      	b.n	80076de <_dtoa_r+0x65e>
 800773c:	9704      	str	r7, [sp, #16]
 800773e:	4633      	mov	r3, r6
 8007740:	461e      	mov	r6, r3
 8007742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007746:	2a39      	cmp	r2, #57	@ 0x39
 8007748:	d107      	bne.n	800775a <_dtoa_r+0x6da>
 800774a:	459a      	cmp	sl, r3
 800774c:	d1f8      	bne.n	8007740 <_dtoa_r+0x6c0>
 800774e:	9a04      	ldr	r2, [sp, #16]
 8007750:	3201      	adds	r2, #1
 8007752:	9204      	str	r2, [sp, #16]
 8007754:	2230      	movs	r2, #48	@ 0x30
 8007756:	f88a 2000 	strb.w	r2, [sl]
 800775a:	781a      	ldrb	r2, [r3, #0]
 800775c:	3201      	adds	r2, #1
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	e7bd      	b.n	80076de <_dtoa_r+0x65e>
 8007762:	4b7b      	ldr	r3, [pc, #492]	@ (8007950 <_dtoa_r+0x8d0>)
 8007764:	2200      	movs	r2, #0
 8007766:	f7f8 ff57 	bl	8000618 <__aeabi_dmul>
 800776a:	2200      	movs	r2, #0
 800776c:	2300      	movs	r3, #0
 800776e:	4604      	mov	r4, r0
 8007770:	460d      	mov	r5, r1
 8007772:	f7f9 f9b9 	bl	8000ae8 <__aeabi_dcmpeq>
 8007776:	2800      	cmp	r0, #0
 8007778:	f43f aebb 	beq.w	80074f2 <_dtoa_r+0x472>
 800777c:	e6f0      	b.n	8007560 <_dtoa_r+0x4e0>
 800777e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007780:	2a00      	cmp	r2, #0
 8007782:	f000 80db 	beq.w	800793c <_dtoa_r+0x8bc>
 8007786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007788:	2a01      	cmp	r2, #1
 800778a:	f300 80bf 	bgt.w	800790c <_dtoa_r+0x88c>
 800778e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007790:	2a00      	cmp	r2, #0
 8007792:	f000 80b7 	beq.w	8007904 <_dtoa_r+0x884>
 8007796:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800779a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800779c:	4646      	mov	r6, r8
 800779e:	9a08      	ldr	r2, [sp, #32]
 80077a0:	2101      	movs	r1, #1
 80077a2:	441a      	add	r2, r3
 80077a4:	4658      	mov	r0, fp
 80077a6:	4498      	add	r8, r3
 80077a8:	9208      	str	r2, [sp, #32]
 80077aa:	f000 fb6b 	bl	8007e84 <__i2b>
 80077ae:	4605      	mov	r5, r0
 80077b0:	b15e      	cbz	r6, 80077ca <_dtoa_r+0x74a>
 80077b2:	9b08      	ldr	r3, [sp, #32]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	dd08      	ble.n	80077ca <_dtoa_r+0x74a>
 80077b8:	42b3      	cmp	r3, r6
 80077ba:	9a08      	ldr	r2, [sp, #32]
 80077bc:	bfa8      	it	ge
 80077be:	4633      	movge	r3, r6
 80077c0:	eba8 0803 	sub.w	r8, r8, r3
 80077c4:	1af6      	subs	r6, r6, r3
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	9308      	str	r3, [sp, #32]
 80077ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077cc:	b1f3      	cbz	r3, 800780c <_dtoa_r+0x78c>
 80077ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80b7 	beq.w	8007944 <_dtoa_r+0x8c4>
 80077d6:	b18c      	cbz	r4, 80077fc <_dtoa_r+0x77c>
 80077d8:	4629      	mov	r1, r5
 80077da:	4622      	mov	r2, r4
 80077dc:	4658      	mov	r0, fp
 80077de:	f000 fc11 	bl	8008004 <__pow5mult>
 80077e2:	464a      	mov	r2, r9
 80077e4:	4601      	mov	r1, r0
 80077e6:	4605      	mov	r5, r0
 80077e8:	4658      	mov	r0, fp
 80077ea:	f000 fb61 	bl	8007eb0 <__multiply>
 80077ee:	4649      	mov	r1, r9
 80077f0:	9004      	str	r0, [sp, #16]
 80077f2:	4658      	mov	r0, fp
 80077f4:	f000 fa92 	bl	8007d1c <_Bfree>
 80077f8:	9b04      	ldr	r3, [sp, #16]
 80077fa:	4699      	mov	r9, r3
 80077fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077fe:	1b1a      	subs	r2, r3, r4
 8007800:	d004      	beq.n	800780c <_dtoa_r+0x78c>
 8007802:	4649      	mov	r1, r9
 8007804:	4658      	mov	r0, fp
 8007806:	f000 fbfd 	bl	8008004 <__pow5mult>
 800780a:	4681      	mov	r9, r0
 800780c:	2101      	movs	r1, #1
 800780e:	4658      	mov	r0, fp
 8007810:	f000 fb38 	bl	8007e84 <__i2b>
 8007814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007816:	4604      	mov	r4, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 81cf 	beq.w	8007bbc <_dtoa_r+0xb3c>
 800781e:	461a      	mov	r2, r3
 8007820:	4601      	mov	r1, r0
 8007822:	4658      	mov	r0, fp
 8007824:	f000 fbee 	bl	8008004 <__pow5mult>
 8007828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800782a:	2b01      	cmp	r3, #1
 800782c:	4604      	mov	r4, r0
 800782e:	f300 8095 	bgt.w	800795c <_dtoa_r+0x8dc>
 8007832:	9b02      	ldr	r3, [sp, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f040 8087 	bne.w	8007948 <_dtoa_r+0x8c8>
 800783a:	9b03      	ldr	r3, [sp, #12]
 800783c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007840:	2b00      	cmp	r3, #0
 8007842:	f040 8089 	bne.w	8007958 <_dtoa_r+0x8d8>
 8007846:	9b03      	ldr	r3, [sp, #12]
 8007848:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800784c:	0d1b      	lsrs	r3, r3, #20
 800784e:	051b      	lsls	r3, r3, #20
 8007850:	b12b      	cbz	r3, 800785e <_dtoa_r+0x7de>
 8007852:	9b08      	ldr	r3, [sp, #32]
 8007854:	3301      	adds	r3, #1
 8007856:	9308      	str	r3, [sp, #32]
 8007858:	f108 0801 	add.w	r8, r8, #1
 800785c:	2301      	movs	r3, #1
 800785e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 81b0 	beq.w	8007bc8 <_dtoa_r+0xb48>
 8007868:	6923      	ldr	r3, [r4, #16]
 800786a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800786e:	6918      	ldr	r0, [r3, #16]
 8007870:	f000 fabc 	bl	8007dec <__hi0bits>
 8007874:	f1c0 0020 	rsb	r0, r0, #32
 8007878:	9b08      	ldr	r3, [sp, #32]
 800787a:	4418      	add	r0, r3
 800787c:	f010 001f 	ands.w	r0, r0, #31
 8007880:	d077      	beq.n	8007972 <_dtoa_r+0x8f2>
 8007882:	f1c0 0320 	rsb	r3, r0, #32
 8007886:	2b04      	cmp	r3, #4
 8007888:	dd6b      	ble.n	8007962 <_dtoa_r+0x8e2>
 800788a:	9b08      	ldr	r3, [sp, #32]
 800788c:	f1c0 001c 	rsb	r0, r0, #28
 8007890:	4403      	add	r3, r0
 8007892:	4480      	add	r8, r0
 8007894:	4406      	add	r6, r0
 8007896:	9308      	str	r3, [sp, #32]
 8007898:	f1b8 0f00 	cmp.w	r8, #0
 800789c:	dd05      	ble.n	80078aa <_dtoa_r+0x82a>
 800789e:	4649      	mov	r1, r9
 80078a0:	4642      	mov	r2, r8
 80078a2:	4658      	mov	r0, fp
 80078a4:	f000 fc08 	bl	80080b8 <__lshift>
 80078a8:	4681      	mov	r9, r0
 80078aa:	9b08      	ldr	r3, [sp, #32]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dd05      	ble.n	80078bc <_dtoa_r+0x83c>
 80078b0:	4621      	mov	r1, r4
 80078b2:	461a      	mov	r2, r3
 80078b4:	4658      	mov	r0, fp
 80078b6:	f000 fbff 	bl	80080b8 <__lshift>
 80078ba:	4604      	mov	r4, r0
 80078bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d059      	beq.n	8007976 <_dtoa_r+0x8f6>
 80078c2:	4621      	mov	r1, r4
 80078c4:	4648      	mov	r0, r9
 80078c6:	f000 fc63 	bl	8008190 <__mcmp>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	da53      	bge.n	8007976 <_dtoa_r+0x8f6>
 80078ce:	1e7b      	subs	r3, r7, #1
 80078d0:	9304      	str	r3, [sp, #16]
 80078d2:	4649      	mov	r1, r9
 80078d4:	2300      	movs	r3, #0
 80078d6:	220a      	movs	r2, #10
 80078d8:	4658      	mov	r0, fp
 80078da:	f000 fa41 	bl	8007d60 <__multadd>
 80078de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078e0:	4681      	mov	r9, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8172 	beq.w	8007bcc <_dtoa_r+0xb4c>
 80078e8:	2300      	movs	r3, #0
 80078ea:	4629      	mov	r1, r5
 80078ec:	220a      	movs	r2, #10
 80078ee:	4658      	mov	r0, fp
 80078f0:	f000 fa36 	bl	8007d60 <__multadd>
 80078f4:	9b00      	ldr	r3, [sp, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	4605      	mov	r5, r0
 80078fa:	dc67      	bgt.n	80079cc <_dtoa_r+0x94c>
 80078fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078fe:	2b02      	cmp	r3, #2
 8007900:	dc41      	bgt.n	8007986 <_dtoa_r+0x906>
 8007902:	e063      	b.n	80079cc <_dtoa_r+0x94c>
 8007904:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007906:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800790a:	e746      	b.n	800779a <_dtoa_r+0x71a>
 800790c:	9b07      	ldr	r3, [sp, #28]
 800790e:	1e5c      	subs	r4, r3, #1
 8007910:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007912:	42a3      	cmp	r3, r4
 8007914:	bfbf      	itttt	lt
 8007916:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007918:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800791a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800791c:	1ae3      	sublt	r3, r4, r3
 800791e:	bfb4      	ite	lt
 8007920:	18d2      	addlt	r2, r2, r3
 8007922:	1b1c      	subge	r4, r3, r4
 8007924:	9b07      	ldr	r3, [sp, #28]
 8007926:	bfbc      	itt	lt
 8007928:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800792a:	2400      	movlt	r4, #0
 800792c:	2b00      	cmp	r3, #0
 800792e:	bfb5      	itete	lt
 8007930:	eba8 0603 	sublt.w	r6, r8, r3
 8007934:	9b07      	ldrge	r3, [sp, #28]
 8007936:	2300      	movlt	r3, #0
 8007938:	4646      	movge	r6, r8
 800793a:	e730      	b.n	800779e <_dtoa_r+0x71e>
 800793c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800793e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007940:	4646      	mov	r6, r8
 8007942:	e735      	b.n	80077b0 <_dtoa_r+0x730>
 8007944:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007946:	e75c      	b.n	8007802 <_dtoa_r+0x782>
 8007948:	2300      	movs	r3, #0
 800794a:	e788      	b.n	800785e <_dtoa_r+0x7de>
 800794c:	3fe00000 	.word	0x3fe00000
 8007950:	40240000 	.word	0x40240000
 8007954:	40140000 	.word	0x40140000
 8007958:	9b02      	ldr	r3, [sp, #8]
 800795a:	e780      	b.n	800785e <_dtoa_r+0x7de>
 800795c:	2300      	movs	r3, #0
 800795e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007960:	e782      	b.n	8007868 <_dtoa_r+0x7e8>
 8007962:	d099      	beq.n	8007898 <_dtoa_r+0x818>
 8007964:	9a08      	ldr	r2, [sp, #32]
 8007966:	331c      	adds	r3, #28
 8007968:	441a      	add	r2, r3
 800796a:	4498      	add	r8, r3
 800796c:	441e      	add	r6, r3
 800796e:	9208      	str	r2, [sp, #32]
 8007970:	e792      	b.n	8007898 <_dtoa_r+0x818>
 8007972:	4603      	mov	r3, r0
 8007974:	e7f6      	b.n	8007964 <_dtoa_r+0x8e4>
 8007976:	9b07      	ldr	r3, [sp, #28]
 8007978:	9704      	str	r7, [sp, #16]
 800797a:	2b00      	cmp	r3, #0
 800797c:	dc20      	bgt.n	80079c0 <_dtoa_r+0x940>
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007982:	2b02      	cmp	r3, #2
 8007984:	dd1e      	ble.n	80079c4 <_dtoa_r+0x944>
 8007986:	9b00      	ldr	r3, [sp, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	f47f aec0 	bne.w	800770e <_dtoa_r+0x68e>
 800798e:	4621      	mov	r1, r4
 8007990:	2205      	movs	r2, #5
 8007992:	4658      	mov	r0, fp
 8007994:	f000 f9e4 	bl	8007d60 <__multadd>
 8007998:	4601      	mov	r1, r0
 800799a:	4604      	mov	r4, r0
 800799c:	4648      	mov	r0, r9
 800799e:	f000 fbf7 	bl	8008190 <__mcmp>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	f77f aeb3 	ble.w	800770e <_dtoa_r+0x68e>
 80079a8:	4656      	mov	r6, sl
 80079aa:	2331      	movs	r3, #49	@ 0x31
 80079ac:	f806 3b01 	strb.w	r3, [r6], #1
 80079b0:	9b04      	ldr	r3, [sp, #16]
 80079b2:	3301      	adds	r3, #1
 80079b4:	9304      	str	r3, [sp, #16]
 80079b6:	e6ae      	b.n	8007716 <_dtoa_r+0x696>
 80079b8:	9c07      	ldr	r4, [sp, #28]
 80079ba:	9704      	str	r7, [sp, #16]
 80079bc:	4625      	mov	r5, r4
 80079be:	e7f3      	b.n	80079a8 <_dtoa_r+0x928>
 80079c0:	9b07      	ldr	r3, [sp, #28]
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 8104 	beq.w	8007bd4 <_dtoa_r+0xb54>
 80079cc:	2e00      	cmp	r6, #0
 80079ce:	dd05      	ble.n	80079dc <_dtoa_r+0x95c>
 80079d0:	4629      	mov	r1, r5
 80079d2:	4632      	mov	r2, r6
 80079d4:	4658      	mov	r0, fp
 80079d6:	f000 fb6f 	bl	80080b8 <__lshift>
 80079da:	4605      	mov	r5, r0
 80079dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d05a      	beq.n	8007a98 <_dtoa_r+0xa18>
 80079e2:	6869      	ldr	r1, [r5, #4]
 80079e4:	4658      	mov	r0, fp
 80079e6:	f000 f959 	bl	8007c9c <_Balloc>
 80079ea:	4606      	mov	r6, r0
 80079ec:	b928      	cbnz	r0, 80079fa <_dtoa_r+0x97a>
 80079ee:	4b84      	ldr	r3, [pc, #528]	@ (8007c00 <_dtoa_r+0xb80>)
 80079f0:	4602      	mov	r2, r0
 80079f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80079f6:	f7ff bb5a 	b.w	80070ae <_dtoa_r+0x2e>
 80079fa:	692a      	ldr	r2, [r5, #16]
 80079fc:	3202      	adds	r2, #2
 80079fe:	0092      	lsls	r2, r2, #2
 8007a00:	f105 010c 	add.w	r1, r5, #12
 8007a04:	300c      	adds	r0, #12
 8007a06:	f7ff faa4 	bl	8006f52 <memcpy>
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	4631      	mov	r1, r6
 8007a0e:	4658      	mov	r0, fp
 8007a10:	f000 fb52 	bl	80080b8 <__lshift>
 8007a14:	f10a 0301 	add.w	r3, sl, #1
 8007a18:	9307      	str	r3, [sp, #28]
 8007a1a:	9b00      	ldr	r3, [sp, #0]
 8007a1c:	4453      	add	r3, sl
 8007a1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a20:	9b02      	ldr	r3, [sp, #8]
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	462f      	mov	r7, r5
 8007a28:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	9b07      	ldr	r3, [sp, #28]
 8007a2e:	4621      	mov	r1, r4
 8007a30:	3b01      	subs	r3, #1
 8007a32:	4648      	mov	r0, r9
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	f7ff fa9a 	bl	8006f6e <quorem>
 8007a3a:	4639      	mov	r1, r7
 8007a3c:	9002      	str	r0, [sp, #8]
 8007a3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a42:	4648      	mov	r0, r9
 8007a44:	f000 fba4 	bl	8008190 <__mcmp>
 8007a48:	462a      	mov	r2, r5
 8007a4a:	9008      	str	r0, [sp, #32]
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	4658      	mov	r0, fp
 8007a50:	f000 fbba 	bl	80081c8 <__mdiff>
 8007a54:	68c2      	ldr	r2, [r0, #12]
 8007a56:	4606      	mov	r6, r0
 8007a58:	bb02      	cbnz	r2, 8007a9c <_dtoa_r+0xa1c>
 8007a5a:	4601      	mov	r1, r0
 8007a5c:	4648      	mov	r0, r9
 8007a5e:	f000 fb97 	bl	8008190 <__mcmp>
 8007a62:	4602      	mov	r2, r0
 8007a64:	4631      	mov	r1, r6
 8007a66:	4658      	mov	r0, fp
 8007a68:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a6a:	f000 f957 	bl	8007d1c <_Bfree>
 8007a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a72:	9e07      	ldr	r6, [sp, #28]
 8007a74:	ea43 0102 	orr.w	r1, r3, r2
 8007a78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a7a:	4319      	orrs	r1, r3
 8007a7c:	d110      	bne.n	8007aa0 <_dtoa_r+0xa20>
 8007a7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a82:	d029      	beq.n	8007ad8 <_dtoa_r+0xa58>
 8007a84:	9b08      	ldr	r3, [sp, #32]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	dd02      	ble.n	8007a90 <_dtoa_r+0xa10>
 8007a8a:	9b02      	ldr	r3, [sp, #8]
 8007a8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007a90:	9b00      	ldr	r3, [sp, #0]
 8007a92:	f883 8000 	strb.w	r8, [r3]
 8007a96:	e63f      	b.n	8007718 <_dtoa_r+0x698>
 8007a98:	4628      	mov	r0, r5
 8007a9a:	e7bb      	b.n	8007a14 <_dtoa_r+0x994>
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	e7e1      	b.n	8007a64 <_dtoa_r+0x9e4>
 8007aa0:	9b08      	ldr	r3, [sp, #32]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	db04      	blt.n	8007ab0 <_dtoa_r+0xa30>
 8007aa6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007aac:	430b      	orrs	r3, r1
 8007aae:	d120      	bne.n	8007af2 <_dtoa_r+0xa72>
 8007ab0:	2a00      	cmp	r2, #0
 8007ab2:	dded      	ble.n	8007a90 <_dtoa_r+0xa10>
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	4658      	mov	r0, fp
 8007aba:	f000 fafd 	bl	80080b8 <__lshift>
 8007abe:	4621      	mov	r1, r4
 8007ac0:	4681      	mov	r9, r0
 8007ac2:	f000 fb65 	bl	8008190 <__mcmp>
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	dc03      	bgt.n	8007ad2 <_dtoa_r+0xa52>
 8007aca:	d1e1      	bne.n	8007a90 <_dtoa_r+0xa10>
 8007acc:	f018 0f01 	tst.w	r8, #1
 8007ad0:	d0de      	beq.n	8007a90 <_dtoa_r+0xa10>
 8007ad2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ad6:	d1d8      	bne.n	8007a8a <_dtoa_r+0xa0a>
 8007ad8:	9a00      	ldr	r2, [sp, #0]
 8007ada:	2339      	movs	r3, #57	@ 0x39
 8007adc:	7013      	strb	r3, [r2, #0]
 8007ade:	4633      	mov	r3, r6
 8007ae0:	461e      	mov	r6, r3
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007ae8:	2a39      	cmp	r2, #57	@ 0x39
 8007aea:	d052      	beq.n	8007b92 <_dtoa_r+0xb12>
 8007aec:	3201      	adds	r2, #1
 8007aee:	701a      	strb	r2, [r3, #0]
 8007af0:	e612      	b.n	8007718 <_dtoa_r+0x698>
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	dd07      	ble.n	8007b06 <_dtoa_r+0xa86>
 8007af6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007afa:	d0ed      	beq.n	8007ad8 <_dtoa_r+0xa58>
 8007afc:	9a00      	ldr	r2, [sp, #0]
 8007afe:	f108 0301 	add.w	r3, r8, #1
 8007b02:	7013      	strb	r3, [r2, #0]
 8007b04:	e608      	b.n	8007718 <_dtoa_r+0x698>
 8007b06:	9b07      	ldr	r3, [sp, #28]
 8007b08:	9a07      	ldr	r2, [sp, #28]
 8007b0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007b0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d028      	beq.n	8007b66 <_dtoa_r+0xae6>
 8007b14:	4649      	mov	r1, r9
 8007b16:	2300      	movs	r3, #0
 8007b18:	220a      	movs	r2, #10
 8007b1a:	4658      	mov	r0, fp
 8007b1c:	f000 f920 	bl	8007d60 <__multadd>
 8007b20:	42af      	cmp	r7, r5
 8007b22:	4681      	mov	r9, r0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	f04f 020a 	mov.w	r2, #10
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	4658      	mov	r0, fp
 8007b30:	d107      	bne.n	8007b42 <_dtoa_r+0xac2>
 8007b32:	f000 f915 	bl	8007d60 <__multadd>
 8007b36:	4607      	mov	r7, r0
 8007b38:	4605      	mov	r5, r0
 8007b3a:	9b07      	ldr	r3, [sp, #28]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	e774      	b.n	8007a2c <_dtoa_r+0x9ac>
 8007b42:	f000 f90d 	bl	8007d60 <__multadd>
 8007b46:	4629      	mov	r1, r5
 8007b48:	4607      	mov	r7, r0
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	220a      	movs	r2, #10
 8007b4e:	4658      	mov	r0, fp
 8007b50:	f000 f906 	bl	8007d60 <__multadd>
 8007b54:	4605      	mov	r5, r0
 8007b56:	e7f0      	b.n	8007b3a <_dtoa_r+0xaba>
 8007b58:	9b00      	ldr	r3, [sp, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	bfcc      	ite	gt
 8007b5e:	461e      	movgt	r6, r3
 8007b60:	2601      	movle	r6, #1
 8007b62:	4456      	add	r6, sl
 8007b64:	2700      	movs	r7, #0
 8007b66:	4649      	mov	r1, r9
 8007b68:	2201      	movs	r2, #1
 8007b6a:	4658      	mov	r0, fp
 8007b6c:	f000 faa4 	bl	80080b8 <__lshift>
 8007b70:	4621      	mov	r1, r4
 8007b72:	4681      	mov	r9, r0
 8007b74:	f000 fb0c 	bl	8008190 <__mcmp>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	dcb0      	bgt.n	8007ade <_dtoa_r+0xa5e>
 8007b7c:	d102      	bne.n	8007b84 <_dtoa_r+0xb04>
 8007b7e:	f018 0f01 	tst.w	r8, #1
 8007b82:	d1ac      	bne.n	8007ade <_dtoa_r+0xa5e>
 8007b84:	4633      	mov	r3, r6
 8007b86:	461e      	mov	r6, r3
 8007b88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b8c:	2a30      	cmp	r2, #48	@ 0x30
 8007b8e:	d0fa      	beq.n	8007b86 <_dtoa_r+0xb06>
 8007b90:	e5c2      	b.n	8007718 <_dtoa_r+0x698>
 8007b92:	459a      	cmp	sl, r3
 8007b94:	d1a4      	bne.n	8007ae0 <_dtoa_r+0xa60>
 8007b96:	9b04      	ldr	r3, [sp, #16]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	9304      	str	r3, [sp, #16]
 8007b9c:	2331      	movs	r3, #49	@ 0x31
 8007b9e:	f88a 3000 	strb.w	r3, [sl]
 8007ba2:	e5b9      	b.n	8007718 <_dtoa_r+0x698>
 8007ba4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ba6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007c04 <_dtoa_r+0xb84>
 8007baa:	b11b      	cbz	r3, 8007bb4 <_dtoa_r+0xb34>
 8007bac:	f10a 0308 	add.w	r3, sl, #8
 8007bb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007bb2:	6013      	str	r3, [r2, #0]
 8007bb4:	4650      	mov	r0, sl
 8007bb6:	b019      	add	sp, #100	@ 0x64
 8007bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	f77f ae37 	ble.w	8007832 <_dtoa_r+0x7b2>
 8007bc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bc8:	2001      	movs	r0, #1
 8007bca:	e655      	b.n	8007878 <_dtoa_r+0x7f8>
 8007bcc:	9b00      	ldr	r3, [sp, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f77f aed6 	ble.w	8007980 <_dtoa_r+0x900>
 8007bd4:	4656      	mov	r6, sl
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4648      	mov	r0, r9
 8007bda:	f7ff f9c8 	bl	8006f6e <quorem>
 8007bde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007be2:	f806 8b01 	strb.w	r8, [r6], #1
 8007be6:	9b00      	ldr	r3, [sp, #0]
 8007be8:	eba6 020a 	sub.w	r2, r6, sl
 8007bec:	4293      	cmp	r3, r2
 8007bee:	ddb3      	ble.n	8007b58 <_dtoa_r+0xad8>
 8007bf0:	4649      	mov	r1, r9
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	220a      	movs	r2, #10
 8007bf6:	4658      	mov	r0, fp
 8007bf8:	f000 f8b2 	bl	8007d60 <__multadd>
 8007bfc:	4681      	mov	r9, r0
 8007bfe:	e7ea      	b.n	8007bd6 <_dtoa_r+0xb56>
 8007c00:	08008f85 	.word	0x08008f85
 8007c04:	08008f09 	.word	0x08008f09

08007c08 <_free_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4605      	mov	r5, r0
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	d041      	beq.n	8007c94 <_free_r+0x8c>
 8007c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c14:	1f0c      	subs	r4, r1, #4
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	bfb8      	it	lt
 8007c1a:	18e4      	addlt	r4, r4, r3
 8007c1c:	f7fe f9c8 	bl	8005fb0 <__malloc_lock>
 8007c20:	4a1d      	ldr	r2, [pc, #116]	@ (8007c98 <_free_r+0x90>)
 8007c22:	6813      	ldr	r3, [r2, #0]
 8007c24:	b933      	cbnz	r3, 8007c34 <_free_r+0x2c>
 8007c26:	6063      	str	r3, [r4, #4]
 8007c28:	6014      	str	r4, [r2, #0]
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c30:	f7fe b9c4 	b.w	8005fbc <__malloc_unlock>
 8007c34:	42a3      	cmp	r3, r4
 8007c36:	d908      	bls.n	8007c4a <_free_r+0x42>
 8007c38:	6820      	ldr	r0, [r4, #0]
 8007c3a:	1821      	adds	r1, r4, r0
 8007c3c:	428b      	cmp	r3, r1
 8007c3e:	bf01      	itttt	eq
 8007c40:	6819      	ldreq	r1, [r3, #0]
 8007c42:	685b      	ldreq	r3, [r3, #4]
 8007c44:	1809      	addeq	r1, r1, r0
 8007c46:	6021      	streq	r1, [r4, #0]
 8007c48:	e7ed      	b.n	8007c26 <_free_r+0x1e>
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	b10b      	cbz	r3, 8007c54 <_free_r+0x4c>
 8007c50:	42a3      	cmp	r3, r4
 8007c52:	d9fa      	bls.n	8007c4a <_free_r+0x42>
 8007c54:	6811      	ldr	r1, [r2, #0]
 8007c56:	1850      	adds	r0, r2, r1
 8007c58:	42a0      	cmp	r0, r4
 8007c5a:	d10b      	bne.n	8007c74 <_free_r+0x6c>
 8007c5c:	6820      	ldr	r0, [r4, #0]
 8007c5e:	4401      	add	r1, r0
 8007c60:	1850      	adds	r0, r2, r1
 8007c62:	4283      	cmp	r3, r0
 8007c64:	6011      	str	r1, [r2, #0]
 8007c66:	d1e0      	bne.n	8007c2a <_free_r+0x22>
 8007c68:	6818      	ldr	r0, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	6053      	str	r3, [r2, #4]
 8007c6e:	4408      	add	r0, r1
 8007c70:	6010      	str	r0, [r2, #0]
 8007c72:	e7da      	b.n	8007c2a <_free_r+0x22>
 8007c74:	d902      	bls.n	8007c7c <_free_r+0x74>
 8007c76:	230c      	movs	r3, #12
 8007c78:	602b      	str	r3, [r5, #0]
 8007c7a:	e7d6      	b.n	8007c2a <_free_r+0x22>
 8007c7c:	6820      	ldr	r0, [r4, #0]
 8007c7e:	1821      	adds	r1, r4, r0
 8007c80:	428b      	cmp	r3, r1
 8007c82:	bf04      	itt	eq
 8007c84:	6819      	ldreq	r1, [r3, #0]
 8007c86:	685b      	ldreq	r3, [r3, #4]
 8007c88:	6063      	str	r3, [r4, #4]
 8007c8a:	bf04      	itt	eq
 8007c8c:	1809      	addeq	r1, r1, r0
 8007c8e:	6021      	streq	r1, [r4, #0]
 8007c90:	6054      	str	r4, [r2, #4]
 8007c92:	e7ca      	b.n	8007c2a <_free_r+0x22>
 8007c94:	bd38      	pop	{r3, r4, r5, pc}
 8007c96:	bf00      	nop
 8007c98:	20000584 	.word	0x20000584

08007c9c <_Balloc>:
 8007c9c:	b570      	push	{r4, r5, r6, lr}
 8007c9e:	69c6      	ldr	r6, [r0, #28]
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	460d      	mov	r5, r1
 8007ca4:	b976      	cbnz	r6, 8007cc4 <_Balloc+0x28>
 8007ca6:	2010      	movs	r0, #16
 8007ca8:	f7fe f8d0 	bl	8005e4c <malloc>
 8007cac:	4602      	mov	r2, r0
 8007cae:	61e0      	str	r0, [r4, #28]
 8007cb0:	b920      	cbnz	r0, 8007cbc <_Balloc+0x20>
 8007cb2:	4b18      	ldr	r3, [pc, #96]	@ (8007d14 <_Balloc+0x78>)
 8007cb4:	4818      	ldr	r0, [pc, #96]	@ (8007d18 <_Balloc+0x7c>)
 8007cb6:	216b      	movs	r1, #107	@ 0x6b
 8007cb8:	f000 fe1c 	bl	80088f4 <__assert_func>
 8007cbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cc0:	6006      	str	r6, [r0, #0]
 8007cc2:	60c6      	str	r6, [r0, #12]
 8007cc4:	69e6      	ldr	r6, [r4, #28]
 8007cc6:	68f3      	ldr	r3, [r6, #12]
 8007cc8:	b183      	cbz	r3, 8007cec <_Balloc+0x50>
 8007cca:	69e3      	ldr	r3, [r4, #28]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007cd2:	b9b8      	cbnz	r0, 8007d04 <_Balloc+0x68>
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	fa01 f605 	lsl.w	r6, r1, r5
 8007cda:	1d72      	adds	r2, r6, #5
 8007cdc:	0092      	lsls	r2, r2, #2
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f000 fe26 	bl	8008930 <_calloc_r>
 8007ce4:	b160      	cbz	r0, 8007d00 <_Balloc+0x64>
 8007ce6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007cea:	e00e      	b.n	8007d0a <_Balloc+0x6e>
 8007cec:	2221      	movs	r2, #33	@ 0x21
 8007cee:	2104      	movs	r1, #4
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f000 fe1d 	bl	8008930 <_calloc_r>
 8007cf6:	69e3      	ldr	r3, [r4, #28]
 8007cf8:	60f0      	str	r0, [r6, #12]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e4      	bne.n	8007cca <_Balloc+0x2e>
 8007d00:	2000      	movs	r0, #0
 8007d02:	bd70      	pop	{r4, r5, r6, pc}
 8007d04:	6802      	ldr	r2, [r0, #0]
 8007d06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d10:	e7f7      	b.n	8007d02 <_Balloc+0x66>
 8007d12:	bf00      	nop
 8007d14:	08008f16 	.word	0x08008f16
 8007d18:	08008f96 	.word	0x08008f96

08007d1c <_Bfree>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	69c6      	ldr	r6, [r0, #28]
 8007d20:	4605      	mov	r5, r0
 8007d22:	460c      	mov	r4, r1
 8007d24:	b976      	cbnz	r6, 8007d44 <_Bfree+0x28>
 8007d26:	2010      	movs	r0, #16
 8007d28:	f7fe f890 	bl	8005e4c <malloc>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	61e8      	str	r0, [r5, #28]
 8007d30:	b920      	cbnz	r0, 8007d3c <_Bfree+0x20>
 8007d32:	4b09      	ldr	r3, [pc, #36]	@ (8007d58 <_Bfree+0x3c>)
 8007d34:	4809      	ldr	r0, [pc, #36]	@ (8007d5c <_Bfree+0x40>)
 8007d36:	218f      	movs	r1, #143	@ 0x8f
 8007d38:	f000 fddc 	bl	80088f4 <__assert_func>
 8007d3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d40:	6006      	str	r6, [r0, #0]
 8007d42:	60c6      	str	r6, [r0, #12]
 8007d44:	b13c      	cbz	r4, 8007d56 <_Bfree+0x3a>
 8007d46:	69eb      	ldr	r3, [r5, #28]
 8007d48:	6862      	ldr	r2, [r4, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d50:	6021      	str	r1, [r4, #0]
 8007d52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	08008f16 	.word	0x08008f16
 8007d5c:	08008f96 	.word	0x08008f96

08007d60 <__multadd>:
 8007d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d64:	690d      	ldr	r5, [r1, #16]
 8007d66:	4607      	mov	r7, r0
 8007d68:	460c      	mov	r4, r1
 8007d6a:	461e      	mov	r6, r3
 8007d6c:	f101 0c14 	add.w	ip, r1, #20
 8007d70:	2000      	movs	r0, #0
 8007d72:	f8dc 3000 	ldr.w	r3, [ip]
 8007d76:	b299      	uxth	r1, r3
 8007d78:	fb02 6101 	mla	r1, r2, r1, r6
 8007d7c:	0c1e      	lsrs	r6, r3, #16
 8007d7e:	0c0b      	lsrs	r3, r1, #16
 8007d80:	fb02 3306 	mla	r3, r2, r6, r3
 8007d84:	b289      	uxth	r1, r1
 8007d86:	3001      	adds	r0, #1
 8007d88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d8c:	4285      	cmp	r5, r0
 8007d8e:	f84c 1b04 	str.w	r1, [ip], #4
 8007d92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d96:	dcec      	bgt.n	8007d72 <__multadd+0x12>
 8007d98:	b30e      	cbz	r6, 8007dde <__multadd+0x7e>
 8007d9a:	68a3      	ldr	r3, [r4, #8]
 8007d9c:	42ab      	cmp	r3, r5
 8007d9e:	dc19      	bgt.n	8007dd4 <__multadd+0x74>
 8007da0:	6861      	ldr	r1, [r4, #4]
 8007da2:	4638      	mov	r0, r7
 8007da4:	3101      	adds	r1, #1
 8007da6:	f7ff ff79 	bl	8007c9c <_Balloc>
 8007daa:	4680      	mov	r8, r0
 8007dac:	b928      	cbnz	r0, 8007dba <__multadd+0x5a>
 8007dae:	4602      	mov	r2, r0
 8007db0:	4b0c      	ldr	r3, [pc, #48]	@ (8007de4 <__multadd+0x84>)
 8007db2:	480d      	ldr	r0, [pc, #52]	@ (8007de8 <__multadd+0x88>)
 8007db4:	21ba      	movs	r1, #186	@ 0xba
 8007db6:	f000 fd9d 	bl	80088f4 <__assert_func>
 8007dba:	6922      	ldr	r2, [r4, #16]
 8007dbc:	3202      	adds	r2, #2
 8007dbe:	f104 010c 	add.w	r1, r4, #12
 8007dc2:	0092      	lsls	r2, r2, #2
 8007dc4:	300c      	adds	r0, #12
 8007dc6:	f7ff f8c4 	bl	8006f52 <memcpy>
 8007dca:	4621      	mov	r1, r4
 8007dcc:	4638      	mov	r0, r7
 8007dce:	f7ff ffa5 	bl	8007d1c <_Bfree>
 8007dd2:	4644      	mov	r4, r8
 8007dd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007dd8:	3501      	adds	r5, #1
 8007dda:	615e      	str	r6, [r3, #20]
 8007ddc:	6125      	str	r5, [r4, #16]
 8007dde:	4620      	mov	r0, r4
 8007de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de4:	08008f85 	.word	0x08008f85
 8007de8:	08008f96 	.word	0x08008f96

08007dec <__hi0bits>:
 8007dec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007df0:	4603      	mov	r3, r0
 8007df2:	bf36      	itet	cc
 8007df4:	0403      	lslcc	r3, r0, #16
 8007df6:	2000      	movcs	r0, #0
 8007df8:	2010      	movcc	r0, #16
 8007dfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dfe:	bf3c      	itt	cc
 8007e00:	021b      	lslcc	r3, r3, #8
 8007e02:	3008      	addcc	r0, #8
 8007e04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e08:	bf3c      	itt	cc
 8007e0a:	011b      	lslcc	r3, r3, #4
 8007e0c:	3004      	addcc	r0, #4
 8007e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e12:	bf3c      	itt	cc
 8007e14:	009b      	lslcc	r3, r3, #2
 8007e16:	3002      	addcc	r0, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	db05      	blt.n	8007e28 <__hi0bits+0x3c>
 8007e1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e20:	f100 0001 	add.w	r0, r0, #1
 8007e24:	bf08      	it	eq
 8007e26:	2020      	moveq	r0, #32
 8007e28:	4770      	bx	lr

08007e2a <__lo0bits>:
 8007e2a:	6803      	ldr	r3, [r0, #0]
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	f013 0007 	ands.w	r0, r3, #7
 8007e32:	d00b      	beq.n	8007e4c <__lo0bits+0x22>
 8007e34:	07d9      	lsls	r1, r3, #31
 8007e36:	d421      	bmi.n	8007e7c <__lo0bits+0x52>
 8007e38:	0798      	lsls	r0, r3, #30
 8007e3a:	bf49      	itett	mi
 8007e3c:	085b      	lsrmi	r3, r3, #1
 8007e3e:	089b      	lsrpl	r3, r3, #2
 8007e40:	2001      	movmi	r0, #1
 8007e42:	6013      	strmi	r3, [r2, #0]
 8007e44:	bf5c      	itt	pl
 8007e46:	6013      	strpl	r3, [r2, #0]
 8007e48:	2002      	movpl	r0, #2
 8007e4a:	4770      	bx	lr
 8007e4c:	b299      	uxth	r1, r3
 8007e4e:	b909      	cbnz	r1, 8007e54 <__lo0bits+0x2a>
 8007e50:	0c1b      	lsrs	r3, r3, #16
 8007e52:	2010      	movs	r0, #16
 8007e54:	b2d9      	uxtb	r1, r3
 8007e56:	b909      	cbnz	r1, 8007e5c <__lo0bits+0x32>
 8007e58:	3008      	adds	r0, #8
 8007e5a:	0a1b      	lsrs	r3, r3, #8
 8007e5c:	0719      	lsls	r1, r3, #28
 8007e5e:	bf04      	itt	eq
 8007e60:	091b      	lsreq	r3, r3, #4
 8007e62:	3004      	addeq	r0, #4
 8007e64:	0799      	lsls	r1, r3, #30
 8007e66:	bf04      	itt	eq
 8007e68:	089b      	lsreq	r3, r3, #2
 8007e6a:	3002      	addeq	r0, #2
 8007e6c:	07d9      	lsls	r1, r3, #31
 8007e6e:	d403      	bmi.n	8007e78 <__lo0bits+0x4e>
 8007e70:	085b      	lsrs	r3, r3, #1
 8007e72:	f100 0001 	add.w	r0, r0, #1
 8007e76:	d003      	beq.n	8007e80 <__lo0bits+0x56>
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	4770      	bx	lr
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	4770      	bx	lr
 8007e80:	2020      	movs	r0, #32
 8007e82:	4770      	bx	lr

08007e84 <__i2b>:
 8007e84:	b510      	push	{r4, lr}
 8007e86:	460c      	mov	r4, r1
 8007e88:	2101      	movs	r1, #1
 8007e8a:	f7ff ff07 	bl	8007c9c <_Balloc>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	b928      	cbnz	r0, 8007e9e <__i2b+0x1a>
 8007e92:	4b05      	ldr	r3, [pc, #20]	@ (8007ea8 <__i2b+0x24>)
 8007e94:	4805      	ldr	r0, [pc, #20]	@ (8007eac <__i2b+0x28>)
 8007e96:	f240 1145 	movw	r1, #325	@ 0x145
 8007e9a:	f000 fd2b 	bl	80088f4 <__assert_func>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	6144      	str	r4, [r0, #20]
 8007ea2:	6103      	str	r3, [r0, #16]
 8007ea4:	bd10      	pop	{r4, pc}
 8007ea6:	bf00      	nop
 8007ea8:	08008f85 	.word	0x08008f85
 8007eac:	08008f96 	.word	0x08008f96

08007eb0 <__multiply>:
 8007eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	4614      	mov	r4, r2
 8007eb6:	690a      	ldr	r2, [r1, #16]
 8007eb8:	6923      	ldr	r3, [r4, #16]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	bfa8      	it	ge
 8007ebe:	4623      	movge	r3, r4
 8007ec0:	460f      	mov	r7, r1
 8007ec2:	bfa4      	itt	ge
 8007ec4:	460c      	movge	r4, r1
 8007ec6:	461f      	movge	r7, r3
 8007ec8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ecc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007ed0:	68a3      	ldr	r3, [r4, #8]
 8007ed2:	6861      	ldr	r1, [r4, #4]
 8007ed4:	eb0a 0609 	add.w	r6, sl, r9
 8007ed8:	42b3      	cmp	r3, r6
 8007eda:	b085      	sub	sp, #20
 8007edc:	bfb8      	it	lt
 8007ede:	3101      	addlt	r1, #1
 8007ee0:	f7ff fedc 	bl	8007c9c <_Balloc>
 8007ee4:	b930      	cbnz	r0, 8007ef4 <__multiply+0x44>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	4b44      	ldr	r3, [pc, #272]	@ (8007ffc <__multiply+0x14c>)
 8007eea:	4845      	ldr	r0, [pc, #276]	@ (8008000 <__multiply+0x150>)
 8007eec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ef0:	f000 fd00 	bl	80088f4 <__assert_func>
 8007ef4:	f100 0514 	add.w	r5, r0, #20
 8007ef8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007efc:	462b      	mov	r3, r5
 8007efe:	2200      	movs	r2, #0
 8007f00:	4543      	cmp	r3, r8
 8007f02:	d321      	bcc.n	8007f48 <__multiply+0x98>
 8007f04:	f107 0114 	add.w	r1, r7, #20
 8007f08:	f104 0214 	add.w	r2, r4, #20
 8007f0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f14:	9302      	str	r3, [sp, #8]
 8007f16:	1b13      	subs	r3, r2, r4
 8007f18:	3b15      	subs	r3, #21
 8007f1a:	f023 0303 	bic.w	r3, r3, #3
 8007f1e:	3304      	adds	r3, #4
 8007f20:	f104 0715 	add.w	r7, r4, #21
 8007f24:	42ba      	cmp	r2, r7
 8007f26:	bf38      	it	cc
 8007f28:	2304      	movcc	r3, #4
 8007f2a:	9301      	str	r3, [sp, #4]
 8007f2c:	9b02      	ldr	r3, [sp, #8]
 8007f2e:	9103      	str	r1, [sp, #12]
 8007f30:	428b      	cmp	r3, r1
 8007f32:	d80c      	bhi.n	8007f4e <__multiply+0x9e>
 8007f34:	2e00      	cmp	r6, #0
 8007f36:	dd03      	ble.n	8007f40 <__multiply+0x90>
 8007f38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d05b      	beq.n	8007ff8 <__multiply+0x148>
 8007f40:	6106      	str	r6, [r0, #16]
 8007f42:	b005      	add	sp, #20
 8007f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f48:	f843 2b04 	str.w	r2, [r3], #4
 8007f4c:	e7d8      	b.n	8007f00 <__multiply+0x50>
 8007f4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f52:	f1ba 0f00 	cmp.w	sl, #0
 8007f56:	d024      	beq.n	8007fa2 <__multiply+0xf2>
 8007f58:	f104 0e14 	add.w	lr, r4, #20
 8007f5c:	46a9      	mov	r9, r5
 8007f5e:	f04f 0c00 	mov.w	ip, #0
 8007f62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f66:	f8d9 3000 	ldr.w	r3, [r9]
 8007f6a:	fa1f fb87 	uxth.w	fp, r7
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f78:	f8d9 7000 	ldr.w	r7, [r9]
 8007f7c:	4463      	add	r3, ip
 8007f7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f82:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f90:	4572      	cmp	r2, lr
 8007f92:	f849 3b04 	str.w	r3, [r9], #4
 8007f96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f9a:	d8e2      	bhi.n	8007f62 <__multiply+0xb2>
 8007f9c:	9b01      	ldr	r3, [sp, #4]
 8007f9e:	f845 c003 	str.w	ip, [r5, r3]
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007fa8:	3104      	adds	r1, #4
 8007faa:	f1b9 0f00 	cmp.w	r9, #0
 8007fae:	d021      	beq.n	8007ff4 <__multiply+0x144>
 8007fb0:	682b      	ldr	r3, [r5, #0]
 8007fb2:	f104 0c14 	add.w	ip, r4, #20
 8007fb6:	46ae      	mov	lr, r5
 8007fb8:	f04f 0a00 	mov.w	sl, #0
 8007fbc:	f8bc b000 	ldrh.w	fp, [ip]
 8007fc0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007fc4:	fb09 770b 	mla	r7, r9, fp, r7
 8007fc8:	4457      	add	r7, sl
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fd0:	f84e 3b04 	str.w	r3, [lr], #4
 8007fd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007fd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fdc:	f8be 3000 	ldrh.w	r3, [lr]
 8007fe0:	fb09 330a 	mla	r3, r9, sl, r3
 8007fe4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007fe8:	4562      	cmp	r2, ip
 8007fea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fee:	d8e5      	bhi.n	8007fbc <__multiply+0x10c>
 8007ff0:	9f01      	ldr	r7, [sp, #4]
 8007ff2:	51eb      	str	r3, [r5, r7]
 8007ff4:	3504      	adds	r5, #4
 8007ff6:	e799      	b.n	8007f2c <__multiply+0x7c>
 8007ff8:	3e01      	subs	r6, #1
 8007ffa:	e79b      	b.n	8007f34 <__multiply+0x84>
 8007ffc:	08008f85 	.word	0x08008f85
 8008000:	08008f96 	.word	0x08008f96

08008004 <__pow5mult>:
 8008004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008008:	4615      	mov	r5, r2
 800800a:	f012 0203 	ands.w	r2, r2, #3
 800800e:	4607      	mov	r7, r0
 8008010:	460e      	mov	r6, r1
 8008012:	d007      	beq.n	8008024 <__pow5mult+0x20>
 8008014:	4c25      	ldr	r4, [pc, #148]	@ (80080ac <__pow5mult+0xa8>)
 8008016:	3a01      	subs	r2, #1
 8008018:	2300      	movs	r3, #0
 800801a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800801e:	f7ff fe9f 	bl	8007d60 <__multadd>
 8008022:	4606      	mov	r6, r0
 8008024:	10ad      	asrs	r5, r5, #2
 8008026:	d03d      	beq.n	80080a4 <__pow5mult+0xa0>
 8008028:	69fc      	ldr	r4, [r7, #28]
 800802a:	b97c      	cbnz	r4, 800804c <__pow5mult+0x48>
 800802c:	2010      	movs	r0, #16
 800802e:	f7fd ff0d 	bl	8005e4c <malloc>
 8008032:	4602      	mov	r2, r0
 8008034:	61f8      	str	r0, [r7, #28]
 8008036:	b928      	cbnz	r0, 8008044 <__pow5mult+0x40>
 8008038:	4b1d      	ldr	r3, [pc, #116]	@ (80080b0 <__pow5mult+0xac>)
 800803a:	481e      	ldr	r0, [pc, #120]	@ (80080b4 <__pow5mult+0xb0>)
 800803c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008040:	f000 fc58 	bl	80088f4 <__assert_func>
 8008044:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008048:	6004      	str	r4, [r0, #0]
 800804a:	60c4      	str	r4, [r0, #12]
 800804c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008050:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008054:	b94c      	cbnz	r4, 800806a <__pow5mult+0x66>
 8008056:	f240 2171 	movw	r1, #625	@ 0x271
 800805a:	4638      	mov	r0, r7
 800805c:	f7ff ff12 	bl	8007e84 <__i2b>
 8008060:	2300      	movs	r3, #0
 8008062:	f8c8 0008 	str.w	r0, [r8, #8]
 8008066:	4604      	mov	r4, r0
 8008068:	6003      	str	r3, [r0, #0]
 800806a:	f04f 0900 	mov.w	r9, #0
 800806e:	07eb      	lsls	r3, r5, #31
 8008070:	d50a      	bpl.n	8008088 <__pow5mult+0x84>
 8008072:	4631      	mov	r1, r6
 8008074:	4622      	mov	r2, r4
 8008076:	4638      	mov	r0, r7
 8008078:	f7ff ff1a 	bl	8007eb0 <__multiply>
 800807c:	4631      	mov	r1, r6
 800807e:	4680      	mov	r8, r0
 8008080:	4638      	mov	r0, r7
 8008082:	f7ff fe4b 	bl	8007d1c <_Bfree>
 8008086:	4646      	mov	r6, r8
 8008088:	106d      	asrs	r5, r5, #1
 800808a:	d00b      	beq.n	80080a4 <__pow5mult+0xa0>
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	b938      	cbnz	r0, 80080a0 <__pow5mult+0x9c>
 8008090:	4622      	mov	r2, r4
 8008092:	4621      	mov	r1, r4
 8008094:	4638      	mov	r0, r7
 8008096:	f7ff ff0b 	bl	8007eb0 <__multiply>
 800809a:	6020      	str	r0, [r4, #0]
 800809c:	f8c0 9000 	str.w	r9, [r0]
 80080a0:	4604      	mov	r4, r0
 80080a2:	e7e4      	b.n	800806e <__pow5mult+0x6a>
 80080a4:	4630      	mov	r0, r6
 80080a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080aa:	bf00      	nop
 80080ac:	08008ff0 	.word	0x08008ff0
 80080b0:	08008f16 	.word	0x08008f16
 80080b4:	08008f96 	.word	0x08008f96

080080b8 <__lshift>:
 80080b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080bc:	460c      	mov	r4, r1
 80080be:	6849      	ldr	r1, [r1, #4]
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80080c6:	68a3      	ldr	r3, [r4, #8]
 80080c8:	4607      	mov	r7, r0
 80080ca:	4691      	mov	r9, r2
 80080cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80080d0:	f108 0601 	add.w	r6, r8, #1
 80080d4:	42b3      	cmp	r3, r6
 80080d6:	db0b      	blt.n	80080f0 <__lshift+0x38>
 80080d8:	4638      	mov	r0, r7
 80080da:	f7ff fddf 	bl	8007c9c <_Balloc>
 80080de:	4605      	mov	r5, r0
 80080e0:	b948      	cbnz	r0, 80080f6 <__lshift+0x3e>
 80080e2:	4602      	mov	r2, r0
 80080e4:	4b28      	ldr	r3, [pc, #160]	@ (8008188 <__lshift+0xd0>)
 80080e6:	4829      	ldr	r0, [pc, #164]	@ (800818c <__lshift+0xd4>)
 80080e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080ec:	f000 fc02 	bl	80088f4 <__assert_func>
 80080f0:	3101      	adds	r1, #1
 80080f2:	005b      	lsls	r3, r3, #1
 80080f4:	e7ee      	b.n	80080d4 <__lshift+0x1c>
 80080f6:	2300      	movs	r3, #0
 80080f8:	f100 0114 	add.w	r1, r0, #20
 80080fc:	f100 0210 	add.w	r2, r0, #16
 8008100:	4618      	mov	r0, r3
 8008102:	4553      	cmp	r3, sl
 8008104:	db33      	blt.n	800816e <__lshift+0xb6>
 8008106:	6920      	ldr	r0, [r4, #16]
 8008108:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800810c:	f104 0314 	add.w	r3, r4, #20
 8008110:	f019 091f 	ands.w	r9, r9, #31
 8008114:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008118:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800811c:	d02b      	beq.n	8008176 <__lshift+0xbe>
 800811e:	f1c9 0e20 	rsb	lr, r9, #32
 8008122:	468a      	mov	sl, r1
 8008124:	2200      	movs	r2, #0
 8008126:	6818      	ldr	r0, [r3, #0]
 8008128:	fa00 f009 	lsl.w	r0, r0, r9
 800812c:	4310      	orrs	r0, r2
 800812e:	f84a 0b04 	str.w	r0, [sl], #4
 8008132:	f853 2b04 	ldr.w	r2, [r3], #4
 8008136:	459c      	cmp	ip, r3
 8008138:	fa22 f20e 	lsr.w	r2, r2, lr
 800813c:	d8f3      	bhi.n	8008126 <__lshift+0x6e>
 800813e:	ebac 0304 	sub.w	r3, ip, r4
 8008142:	3b15      	subs	r3, #21
 8008144:	f023 0303 	bic.w	r3, r3, #3
 8008148:	3304      	adds	r3, #4
 800814a:	f104 0015 	add.w	r0, r4, #21
 800814e:	4584      	cmp	ip, r0
 8008150:	bf38      	it	cc
 8008152:	2304      	movcc	r3, #4
 8008154:	50ca      	str	r2, [r1, r3]
 8008156:	b10a      	cbz	r2, 800815c <__lshift+0xa4>
 8008158:	f108 0602 	add.w	r6, r8, #2
 800815c:	3e01      	subs	r6, #1
 800815e:	4638      	mov	r0, r7
 8008160:	612e      	str	r6, [r5, #16]
 8008162:	4621      	mov	r1, r4
 8008164:	f7ff fdda 	bl	8007d1c <_Bfree>
 8008168:	4628      	mov	r0, r5
 800816a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800816e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008172:	3301      	adds	r3, #1
 8008174:	e7c5      	b.n	8008102 <__lshift+0x4a>
 8008176:	3904      	subs	r1, #4
 8008178:	f853 2b04 	ldr.w	r2, [r3], #4
 800817c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008180:	459c      	cmp	ip, r3
 8008182:	d8f9      	bhi.n	8008178 <__lshift+0xc0>
 8008184:	e7ea      	b.n	800815c <__lshift+0xa4>
 8008186:	bf00      	nop
 8008188:	08008f85 	.word	0x08008f85
 800818c:	08008f96 	.word	0x08008f96

08008190 <__mcmp>:
 8008190:	690a      	ldr	r2, [r1, #16]
 8008192:	4603      	mov	r3, r0
 8008194:	6900      	ldr	r0, [r0, #16]
 8008196:	1a80      	subs	r0, r0, r2
 8008198:	b530      	push	{r4, r5, lr}
 800819a:	d10e      	bne.n	80081ba <__mcmp+0x2a>
 800819c:	3314      	adds	r3, #20
 800819e:	3114      	adds	r1, #20
 80081a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80081a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80081a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80081ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80081b0:	4295      	cmp	r5, r2
 80081b2:	d003      	beq.n	80081bc <__mcmp+0x2c>
 80081b4:	d205      	bcs.n	80081c2 <__mcmp+0x32>
 80081b6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ba:	bd30      	pop	{r4, r5, pc}
 80081bc:	42a3      	cmp	r3, r4
 80081be:	d3f3      	bcc.n	80081a8 <__mcmp+0x18>
 80081c0:	e7fb      	b.n	80081ba <__mcmp+0x2a>
 80081c2:	2001      	movs	r0, #1
 80081c4:	e7f9      	b.n	80081ba <__mcmp+0x2a>
	...

080081c8 <__mdiff>:
 80081c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081cc:	4689      	mov	r9, r1
 80081ce:	4606      	mov	r6, r0
 80081d0:	4611      	mov	r1, r2
 80081d2:	4648      	mov	r0, r9
 80081d4:	4614      	mov	r4, r2
 80081d6:	f7ff ffdb 	bl	8008190 <__mcmp>
 80081da:	1e05      	subs	r5, r0, #0
 80081dc:	d112      	bne.n	8008204 <__mdiff+0x3c>
 80081de:	4629      	mov	r1, r5
 80081e0:	4630      	mov	r0, r6
 80081e2:	f7ff fd5b 	bl	8007c9c <_Balloc>
 80081e6:	4602      	mov	r2, r0
 80081e8:	b928      	cbnz	r0, 80081f6 <__mdiff+0x2e>
 80081ea:	4b3f      	ldr	r3, [pc, #252]	@ (80082e8 <__mdiff+0x120>)
 80081ec:	f240 2137 	movw	r1, #567	@ 0x237
 80081f0:	483e      	ldr	r0, [pc, #248]	@ (80082ec <__mdiff+0x124>)
 80081f2:	f000 fb7f 	bl	80088f4 <__assert_func>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081fc:	4610      	mov	r0, r2
 80081fe:	b003      	add	sp, #12
 8008200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008204:	bfbc      	itt	lt
 8008206:	464b      	movlt	r3, r9
 8008208:	46a1      	movlt	r9, r4
 800820a:	4630      	mov	r0, r6
 800820c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008210:	bfba      	itte	lt
 8008212:	461c      	movlt	r4, r3
 8008214:	2501      	movlt	r5, #1
 8008216:	2500      	movge	r5, #0
 8008218:	f7ff fd40 	bl	8007c9c <_Balloc>
 800821c:	4602      	mov	r2, r0
 800821e:	b918      	cbnz	r0, 8008228 <__mdiff+0x60>
 8008220:	4b31      	ldr	r3, [pc, #196]	@ (80082e8 <__mdiff+0x120>)
 8008222:	f240 2145 	movw	r1, #581	@ 0x245
 8008226:	e7e3      	b.n	80081f0 <__mdiff+0x28>
 8008228:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800822c:	6926      	ldr	r6, [r4, #16]
 800822e:	60c5      	str	r5, [r0, #12]
 8008230:	f109 0310 	add.w	r3, r9, #16
 8008234:	f109 0514 	add.w	r5, r9, #20
 8008238:	f104 0e14 	add.w	lr, r4, #20
 800823c:	f100 0b14 	add.w	fp, r0, #20
 8008240:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008244:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	46d9      	mov	r9, fp
 800824c:	f04f 0c00 	mov.w	ip, #0
 8008250:	9b01      	ldr	r3, [sp, #4]
 8008252:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008256:	f853 af04 	ldr.w	sl, [r3, #4]!
 800825a:	9301      	str	r3, [sp, #4]
 800825c:	fa1f f38a 	uxth.w	r3, sl
 8008260:	4619      	mov	r1, r3
 8008262:	b283      	uxth	r3, r0
 8008264:	1acb      	subs	r3, r1, r3
 8008266:	0c00      	lsrs	r0, r0, #16
 8008268:	4463      	add	r3, ip
 800826a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800826e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008272:	b29b      	uxth	r3, r3
 8008274:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008278:	4576      	cmp	r6, lr
 800827a:	f849 3b04 	str.w	r3, [r9], #4
 800827e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008282:	d8e5      	bhi.n	8008250 <__mdiff+0x88>
 8008284:	1b33      	subs	r3, r6, r4
 8008286:	3b15      	subs	r3, #21
 8008288:	f023 0303 	bic.w	r3, r3, #3
 800828c:	3415      	adds	r4, #21
 800828e:	3304      	adds	r3, #4
 8008290:	42a6      	cmp	r6, r4
 8008292:	bf38      	it	cc
 8008294:	2304      	movcc	r3, #4
 8008296:	441d      	add	r5, r3
 8008298:	445b      	add	r3, fp
 800829a:	461e      	mov	r6, r3
 800829c:	462c      	mov	r4, r5
 800829e:	4544      	cmp	r4, r8
 80082a0:	d30e      	bcc.n	80082c0 <__mdiff+0xf8>
 80082a2:	f108 0103 	add.w	r1, r8, #3
 80082a6:	1b49      	subs	r1, r1, r5
 80082a8:	f021 0103 	bic.w	r1, r1, #3
 80082ac:	3d03      	subs	r5, #3
 80082ae:	45a8      	cmp	r8, r5
 80082b0:	bf38      	it	cc
 80082b2:	2100      	movcc	r1, #0
 80082b4:	440b      	add	r3, r1
 80082b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082ba:	b191      	cbz	r1, 80082e2 <__mdiff+0x11a>
 80082bc:	6117      	str	r7, [r2, #16]
 80082be:	e79d      	b.n	80081fc <__mdiff+0x34>
 80082c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80082c4:	46e6      	mov	lr, ip
 80082c6:	0c08      	lsrs	r0, r1, #16
 80082c8:	fa1c fc81 	uxtah	ip, ip, r1
 80082cc:	4471      	add	r1, lr
 80082ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80082d2:	b289      	uxth	r1, r1
 80082d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80082d8:	f846 1b04 	str.w	r1, [r6], #4
 80082dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082e0:	e7dd      	b.n	800829e <__mdiff+0xd6>
 80082e2:	3f01      	subs	r7, #1
 80082e4:	e7e7      	b.n	80082b6 <__mdiff+0xee>
 80082e6:	bf00      	nop
 80082e8:	08008f85 	.word	0x08008f85
 80082ec:	08008f96 	.word	0x08008f96

080082f0 <__d2b>:
 80082f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082f4:	460f      	mov	r7, r1
 80082f6:	2101      	movs	r1, #1
 80082f8:	ec59 8b10 	vmov	r8, r9, d0
 80082fc:	4616      	mov	r6, r2
 80082fe:	f7ff fccd 	bl	8007c9c <_Balloc>
 8008302:	4604      	mov	r4, r0
 8008304:	b930      	cbnz	r0, 8008314 <__d2b+0x24>
 8008306:	4602      	mov	r2, r0
 8008308:	4b23      	ldr	r3, [pc, #140]	@ (8008398 <__d2b+0xa8>)
 800830a:	4824      	ldr	r0, [pc, #144]	@ (800839c <__d2b+0xac>)
 800830c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008310:	f000 faf0 	bl	80088f4 <__assert_func>
 8008314:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008318:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800831c:	b10d      	cbz	r5, 8008322 <__d2b+0x32>
 800831e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008322:	9301      	str	r3, [sp, #4]
 8008324:	f1b8 0300 	subs.w	r3, r8, #0
 8008328:	d023      	beq.n	8008372 <__d2b+0x82>
 800832a:	4668      	mov	r0, sp
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	f7ff fd7c 	bl	8007e2a <__lo0bits>
 8008332:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008336:	b1d0      	cbz	r0, 800836e <__d2b+0x7e>
 8008338:	f1c0 0320 	rsb	r3, r0, #32
 800833c:	fa02 f303 	lsl.w	r3, r2, r3
 8008340:	430b      	orrs	r3, r1
 8008342:	40c2      	lsrs	r2, r0
 8008344:	6163      	str	r3, [r4, #20]
 8008346:	9201      	str	r2, [sp, #4]
 8008348:	9b01      	ldr	r3, [sp, #4]
 800834a:	61a3      	str	r3, [r4, #24]
 800834c:	2b00      	cmp	r3, #0
 800834e:	bf0c      	ite	eq
 8008350:	2201      	moveq	r2, #1
 8008352:	2202      	movne	r2, #2
 8008354:	6122      	str	r2, [r4, #16]
 8008356:	b1a5      	cbz	r5, 8008382 <__d2b+0x92>
 8008358:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800835c:	4405      	add	r5, r0
 800835e:	603d      	str	r5, [r7, #0]
 8008360:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008364:	6030      	str	r0, [r6, #0]
 8008366:	4620      	mov	r0, r4
 8008368:	b003      	add	sp, #12
 800836a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800836e:	6161      	str	r1, [r4, #20]
 8008370:	e7ea      	b.n	8008348 <__d2b+0x58>
 8008372:	a801      	add	r0, sp, #4
 8008374:	f7ff fd59 	bl	8007e2a <__lo0bits>
 8008378:	9b01      	ldr	r3, [sp, #4]
 800837a:	6163      	str	r3, [r4, #20]
 800837c:	3020      	adds	r0, #32
 800837e:	2201      	movs	r2, #1
 8008380:	e7e8      	b.n	8008354 <__d2b+0x64>
 8008382:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008386:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800838a:	6038      	str	r0, [r7, #0]
 800838c:	6918      	ldr	r0, [r3, #16]
 800838e:	f7ff fd2d 	bl	8007dec <__hi0bits>
 8008392:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008396:	e7e5      	b.n	8008364 <__d2b+0x74>
 8008398:	08008f85 	.word	0x08008f85
 800839c:	08008f96 	.word	0x08008f96

080083a0 <_malloc_usable_size_r>:
 80083a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a4:	1f18      	subs	r0, r3, #4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	bfbc      	itt	lt
 80083aa:	580b      	ldrlt	r3, [r1, r0]
 80083ac:	18c0      	addlt	r0, r0, r3
 80083ae:	4770      	bx	lr

080083b0 <__ssputs_r>:
 80083b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b4:	688e      	ldr	r6, [r1, #8]
 80083b6:	461f      	mov	r7, r3
 80083b8:	42be      	cmp	r6, r7
 80083ba:	680b      	ldr	r3, [r1, #0]
 80083bc:	4682      	mov	sl, r0
 80083be:	460c      	mov	r4, r1
 80083c0:	4690      	mov	r8, r2
 80083c2:	d82d      	bhi.n	8008420 <__ssputs_r+0x70>
 80083c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80083cc:	d026      	beq.n	800841c <__ssputs_r+0x6c>
 80083ce:	6965      	ldr	r5, [r4, #20]
 80083d0:	6909      	ldr	r1, [r1, #16]
 80083d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083d6:	eba3 0901 	sub.w	r9, r3, r1
 80083da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083de:	1c7b      	adds	r3, r7, #1
 80083e0:	444b      	add	r3, r9
 80083e2:	106d      	asrs	r5, r5, #1
 80083e4:	429d      	cmp	r5, r3
 80083e6:	bf38      	it	cc
 80083e8:	461d      	movcc	r5, r3
 80083ea:	0553      	lsls	r3, r2, #21
 80083ec:	d527      	bpl.n	800843e <__ssputs_r+0x8e>
 80083ee:	4629      	mov	r1, r5
 80083f0:	f7fd fd5e 	bl	8005eb0 <_malloc_r>
 80083f4:	4606      	mov	r6, r0
 80083f6:	b360      	cbz	r0, 8008452 <__ssputs_r+0xa2>
 80083f8:	6921      	ldr	r1, [r4, #16]
 80083fa:	464a      	mov	r2, r9
 80083fc:	f7fe fda9 	bl	8006f52 <memcpy>
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800840a:	81a3      	strh	r3, [r4, #12]
 800840c:	6126      	str	r6, [r4, #16]
 800840e:	6165      	str	r5, [r4, #20]
 8008410:	444e      	add	r6, r9
 8008412:	eba5 0509 	sub.w	r5, r5, r9
 8008416:	6026      	str	r6, [r4, #0]
 8008418:	60a5      	str	r5, [r4, #8]
 800841a:	463e      	mov	r6, r7
 800841c:	42be      	cmp	r6, r7
 800841e:	d900      	bls.n	8008422 <__ssputs_r+0x72>
 8008420:	463e      	mov	r6, r7
 8008422:	6820      	ldr	r0, [r4, #0]
 8008424:	4632      	mov	r2, r6
 8008426:	4641      	mov	r1, r8
 8008428:	f000 fa28 	bl	800887c <memmove>
 800842c:	68a3      	ldr	r3, [r4, #8]
 800842e:	1b9b      	subs	r3, r3, r6
 8008430:	60a3      	str	r3, [r4, #8]
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	4433      	add	r3, r6
 8008436:	6023      	str	r3, [r4, #0]
 8008438:	2000      	movs	r0, #0
 800843a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800843e:	462a      	mov	r2, r5
 8008440:	f7fd fdc2 	bl	8005fc8 <_realloc_r>
 8008444:	4606      	mov	r6, r0
 8008446:	2800      	cmp	r0, #0
 8008448:	d1e0      	bne.n	800840c <__ssputs_r+0x5c>
 800844a:	6921      	ldr	r1, [r4, #16]
 800844c:	4650      	mov	r0, sl
 800844e:	f7ff fbdb 	bl	8007c08 <_free_r>
 8008452:	230c      	movs	r3, #12
 8008454:	f8ca 3000 	str.w	r3, [sl]
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800845e:	81a3      	strh	r3, [r4, #12]
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
 8008464:	e7e9      	b.n	800843a <__ssputs_r+0x8a>
	...

08008468 <_svfiprintf_r>:
 8008468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846c:	4698      	mov	r8, r3
 800846e:	898b      	ldrh	r3, [r1, #12]
 8008470:	061b      	lsls	r3, r3, #24
 8008472:	b09d      	sub	sp, #116	@ 0x74
 8008474:	4607      	mov	r7, r0
 8008476:	460d      	mov	r5, r1
 8008478:	4614      	mov	r4, r2
 800847a:	d510      	bpl.n	800849e <_svfiprintf_r+0x36>
 800847c:	690b      	ldr	r3, [r1, #16]
 800847e:	b973      	cbnz	r3, 800849e <_svfiprintf_r+0x36>
 8008480:	2140      	movs	r1, #64	@ 0x40
 8008482:	f7fd fd15 	bl	8005eb0 <_malloc_r>
 8008486:	6028      	str	r0, [r5, #0]
 8008488:	6128      	str	r0, [r5, #16]
 800848a:	b930      	cbnz	r0, 800849a <_svfiprintf_r+0x32>
 800848c:	230c      	movs	r3, #12
 800848e:	603b      	str	r3, [r7, #0]
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	b01d      	add	sp, #116	@ 0x74
 8008496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849a:	2340      	movs	r3, #64	@ 0x40
 800849c:	616b      	str	r3, [r5, #20]
 800849e:	2300      	movs	r3, #0
 80084a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80084a2:	2320      	movs	r3, #32
 80084a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80084ac:	2330      	movs	r3, #48	@ 0x30
 80084ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800864c <_svfiprintf_r+0x1e4>
 80084b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084b6:	f04f 0901 	mov.w	r9, #1
 80084ba:	4623      	mov	r3, r4
 80084bc:	469a      	mov	sl, r3
 80084be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084c2:	b10a      	cbz	r2, 80084c8 <_svfiprintf_r+0x60>
 80084c4:	2a25      	cmp	r2, #37	@ 0x25
 80084c6:	d1f9      	bne.n	80084bc <_svfiprintf_r+0x54>
 80084c8:	ebba 0b04 	subs.w	fp, sl, r4
 80084cc:	d00b      	beq.n	80084e6 <_svfiprintf_r+0x7e>
 80084ce:	465b      	mov	r3, fp
 80084d0:	4622      	mov	r2, r4
 80084d2:	4629      	mov	r1, r5
 80084d4:	4638      	mov	r0, r7
 80084d6:	f7ff ff6b 	bl	80083b0 <__ssputs_r>
 80084da:	3001      	adds	r0, #1
 80084dc:	f000 80a7 	beq.w	800862e <_svfiprintf_r+0x1c6>
 80084e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084e2:	445a      	add	r2, fp
 80084e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80084e6:	f89a 3000 	ldrb.w	r3, [sl]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 809f 	beq.w	800862e <_svfiprintf_r+0x1c6>
 80084f0:	2300      	movs	r3, #0
 80084f2:	f04f 32ff 	mov.w	r2, #4294967295
 80084f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084fa:	f10a 0a01 	add.w	sl, sl, #1
 80084fe:	9304      	str	r3, [sp, #16]
 8008500:	9307      	str	r3, [sp, #28]
 8008502:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008506:	931a      	str	r3, [sp, #104]	@ 0x68
 8008508:	4654      	mov	r4, sl
 800850a:	2205      	movs	r2, #5
 800850c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008510:	484e      	ldr	r0, [pc, #312]	@ (800864c <_svfiprintf_r+0x1e4>)
 8008512:	f7f7 fe6d 	bl	80001f0 <memchr>
 8008516:	9a04      	ldr	r2, [sp, #16]
 8008518:	b9d8      	cbnz	r0, 8008552 <_svfiprintf_r+0xea>
 800851a:	06d0      	lsls	r0, r2, #27
 800851c:	bf44      	itt	mi
 800851e:	2320      	movmi	r3, #32
 8008520:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008524:	0711      	lsls	r1, r2, #28
 8008526:	bf44      	itt	mi
 8008528:	232b      	movmi	r3, #43	@ 0x2b
 800852a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800852e:	f89a 3000 	ldrb.w	r3, [sl]
 8008532:	2b2a      	cmp	r3, #42	@ 0x2a
 8008534:	d015      	beq.n	8008562 <_svfiprintf_r+0xfa>
 8008536:	9a07      	ldr	r2, [sp, #28]
 8008538:	4654      	mov	r4, sl
 800853a:	2000      	movs	r0, #0
 800853c:	f04f 0c0a 	mov.w	ip, #10
 8008540:	4621      	mov	r1, r4
 8008542:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008546:	3b30      	subs	r3, #48	@ 0x30
 8008548:	2b09      	cmp	r3, #9
 800854a:	d94b      	bls.n	80085e4 <_svfiprintf_r+0x17c>
 800854c:	b1b0      	cbz	r0, 800857c <_svfiprintf_r+0x114>
 800854e:	9207      	str	r2, [sp, #28]
 8008550:	e014      	b.n	800857c <_svfiprintf_r+0x114>
 8008552:	eba0 0308 	sub.w	r3, r0, r8
 8008556:	fa09 f303 	lsl.w	r3, r9, r3
 800855a:	4313      	orrs	r3, r2
 800855c:	9304      	str	r3, [sp, #16]
 800855e:	46a2      	mov	sl, r4
 8008560:	e7d2      	b.n	8008508 <_svfiprintf_r+0xa0>
 8008562:	9b03      	ldr	r3, [sp, #12]
 8008564:	1d19      	adds	r1, r3, #4
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	9103      	str	r1, [sp, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	bfbb      	ittet	lt
 800856e:	425b      	neglt	r3, r3
 8008570:	f042 0202 	orrlt.w	r2, r2, #2
 8008574:	9307      	strge	r3, [sp, #28]
 8008576:	9307      	strlt	r3, [sp, #28]
 8008578:	bfb8      	it	lt
 800857a:	9204      	strlt	r2, [sp, #16]
 800857c:	7823      	ldrb	r3, [r4, #0]
 800857e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008580:	d10a      	bne.n	8008598 <_svfiprintf_r+0x130>
 8008582:	7863      	ldrb	r3, [r4, #1]
 8008584:	2b2a      	cmp	r3, #42	@ 0x2a
 8008586:	d132      	bne.n	80085ee <_svfiprintf_r+0x186>
 8008588:	9b03      	ldr	r3, [sp, #12]
 800858a:	1d1a      	adds	r2, r3, #4
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	9203      	str	r2, [sp, #12]
 8008590:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008594:	3402      	adds	r4, #2
 8008596:	9305      	str	r3, [sp, #20]
 8008598:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800865c <_svfiprintf_r+0x1f4>
 800859c:	7821      	ldrb	r1, [r4, #0]
 800859e:	2203      	movs	r2, #3
 80085a0:	4650      	mov	r0, sl
 80085a2:	f7f7 fe25 	bl	80001f0 <memchr>
 80085a6:	b138      	cbz	r0, 80085b8 <_svfiprintf_r+0x150>
 80085a8:	9b04      	ldr	r3, [sp, #16]
 80085aa:	eba0 000a 	sub.w	r0, r0, sl
 80085ae:	2240      	movs	r2, #64	@ 0x40
 80085b0:	4082      	lsls	r2, r0
 80085b2:	4313      	orrs	r3, r2
 80085b4:	3401      	adds	r4, #1
 80085b6:	9304      	str	r3, [sp, #16]
 80085b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085bc:	4824      	ldr	r0, [pc, #144]	@ (8008650 <_svfiprintf_r+0x1e8>)
 80085be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085c2:	2206      	movs	r2, #6
 80085c4:	f7f7 fe14 	bl	80001f0 <memchr>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d036      	beq.n	800863a <_svfiprintf_r+0x1d2>
 80085cc:	4b21      	ldr	r3, [pc, #132]	@ (8008654 <_svfiprintf_r+0x1ec>)
 80085ce:	bb1b      	cbnz	r3, 8008618 <_svfiprintf_r+0x1b0>
 80085d0:	9b03      	ldr	r3, [sp, #12]
 80085d2:	3307      	adds	r3, #7
 80085d4:	f023 0307 	bic.w	r3, r3, #7
 80085d8:	3308      	adds	r3, #8
 80085da:	9303      	str	r3, [sp, #12]
 80085dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085de:	4433      	add	r3, r6
 80085e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80085e2:	e76a      	b.n	80084ba <_svfiprintf_r+0x52>
 80085e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80085e8:	460c      	mov	r4, r1
 80085ea:	2001      	movs	r0, #1
 80085ec:	e7a8      	b.n	8008540 <_svfiprintf_r+0xd8>
 80085ee:	2300      	movs	r3, #0
 80085f0:	3401      	adds	r4, #1
 80085f2:	9305      	str	r3, [sp, #20]
 80085f4:	4619      	mov	r1, r3
 80085f6:	f04f 0c0a 	mov.w	ip, #10
 80085fa:	4620      	mov	r0, r4
 80085fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008600:	3a30      	subs	r2, #48	@ 0x30
 8008602:	2a09      	cmp	r2, #9
 8008604:	d903      	bls.n	800860e <_svfiprintf_r+0x1a6>
 8008606:	2b00      	cmp	r3, #0
 8008608:	d0c6      	beq.n	8008598 <_svfiprintf_r+0x130>
 800860a:	9105      	str	r1, [sp, #20]
 800860c:	e7c4      	b.n	8008598 <_svfiprintf_r+0x130>
 800860e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008612:	4604      	mov	r4, r0
 8008614:	2301      	movs	r3, #1
 8008616:	e7f0      	b.n	80085fa <_svfiprintf_r+0x192>
 8008618:	ab03      	add	r3, sp, #12
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	462a      	mov	r2, r5
 800861e:	4b0e      	ldr	r3, [pc, #56]	@ (8008658 <_svfiprintf_r+0x1f0>)
 8008620:	a904      	add	r1, sp, #16
 8008622:	4638      	mov	r0, r7
 8008624:	f7fd fe22 	bl	800626c <_printf_float>
 8008628:	1c42      	adds	r2, r0, #1
 800862a:	4606      	mov	r6, r0
 800862c:	d1d6      	bne.n	80085dc <_svfiprintf_r+0x174>
 800862e:	89ab      	ldrh	r3, [r5, #12]
 8008630:	065b      	lsls	r3, r3, #25
 8008632:	f53f af2d 	bmi.w	8008490 <_svfiprintf_r+0x28>
 8008636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008638:	e72c      	b.n	8008494 <_svfiprintf_r+0x2c>
 800863a:	ab03      	add	r3, sp, #12
 800863c:	9300      	str	r3, [sp, #0]
 800863e:	462a      	mov	r2, r5
 8008640:	4b05      	ldr	r3, [pc, #20]	@ (8008658 <_svfiprintf_r+0x1f0>)
 8008642:	a904      	add	r1, sp, #16
 8008644:	4638      	mov	r0, r7
 8008646:	f7fe f8a9 	bl	800679c <_printf_i>
 800864a:	e7ed      	b.n	8008628 <_svfiprintf_r+0x1c0>
 800864c:	080090f0 	.word	0x080090f0
 8008650:	080090fa 	.word	0x080090fa
 8008654:	0800626d 	.word	0x0800626d
 8008658:	080083b1 	.word	0x080083b1
 800865c:	080090f6 	.word	0x080090f6

08008660 <__sflush_r>:
 8008660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008668:	0716      	lsls	r6, r2, #28
 800866a:	4605      	mov	r5, r0
 800866c:	460c      	mov	r4, r1
 800866e:	d454      	bmi.n	800871a <__sflush_r+0xba>
 8008670:	684b      	ldr	r3, [r1, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	dc02      	bgt.n	800867c <__sflush_r+0x1c>
 8008676:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	dd48      	ble.n	800870e <__sflush_r+0xae>
 800867c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800867e:	2e00      	cmp	r6, #0
 8008680:	d045      	beq.n	800870e <__sflush_r+0xae>
 8008682:	2300      	movs	r3, #0
 8008684:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008688:	682f      	ldr	r7, [r5, #0]
 800868a:	6a21      	ldr	r1, [r4, #32]
 800868c:	602b      	str	r3, [r5, #0]
 800868e:	d030      	beq.n	80086f2 <__sflush_r+0x92>
 8008690:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	0759      	lsls	r1, r3, #29
 8008696:	d505      	bpl.n	80086a4 <__sflush_r+0x44>
 8008698:	6863      	ldr	r3, [r4, #4]
 800869a:	1ad2      	subs	r2, r2, r3
 800869c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800869e:	b10b      	cbz	r3, 80086a4 <__sflush_r+0x44>
 80086a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086a2:	1ad2      	subs	r2, r2, r3
 80086a4:	2300      	movs	r3, #0
 80086a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086a8:	6a21      	ldr	r1, [r4, #32]
 80086aa:	4628      	mov	r0, r5
 80086ac:	47b0      	blx	r6
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	89a3      	ldrh	r3, [r4, #12]
 80086b2:	d106      	bne.n	80086c2 <__sflush_r+0x62>
 80086b4:	6829      	ldr	r1, [r5, #0]
 80086b6:	291d      	cmp	r1, #29
 80086b8:	d82b      	bhi.n	8008712 <__sflush_r+0xb2>
 80086ba:	4a2a      	ldr	r2, [pc, #168]	@ (8008764 <__sflush_r+0x104>)
 80086bc:	410a      	asrs	r2, r1
 80086be:	07d6      	lsls	r6, r2, #31
 80086c0:	d427      	bmi.n	8008712 <__sflush_r+0xb2>
 80086c2:	2200      	movs	r2, #0
 80086c4:	6062      	str	r2, [r4, #4]
 80086c6:	04d9      	lsls	r1, r3, #19
 80086c8:	6922      	ldr	r2, [r4, #16]
 80086ca:	6022      	str	r2, [r4, #0]
 80086cc:	d504      	bpl.n	80086d8 <__sflush_r+0x78>
 80086ce:	1c42      	adds	r2, r0, #1
 80086d0:	d101      	bne.n	80086d6 <__sflush_r+0x76>
 80086d2:	682b      	ldr	r3, [r5, #0]
 80086d4:	b903      	cbnz	r3, 80086d8 <__sflush_r+0x78>
 80086d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80086d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086da:	602f      	str	r7, [r5, #0]
 80086dc:	b1b9      	cbz	r1, 800870e <__sflush_r+0xae>
 80086de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086e2:	4299      	cmp	r1, r3
 80086e4:	d002      	beq.n	80086ec <__sflush_r+0x8c>
 80086e6:	4628      	mov	r0, r5
 80086e8:	f7ff fa8e 	bl	8007c08 <_free_r>
 80086ec:	2300      	movs	r3, #0
 80086ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80086f0:	e00d      	b.n	800870e <__sflush_r+0xae>
 80086f2:	2301      	movs	r3, #1
 80086f4:	4628      	mov	r0, r5
 80086f6:	47b0      	blx	r6
 80086f8:	4602      	mov	r2, r0
 80086fa:	1c50      	adds	r0, r2, #1
 80086fc:	d1c9      	bne.n	8008692 <__sflush_r+0x32>
 80086fe:	682b      	ldr	r3, [r5, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0c6      	beq.n	8008692 <__sflush_r+0x32>
 8008704:	2b1d      	cmp	r3, #29
 8008706:	d001      	beq.n	800870c <__sflush_r+0xac>
 8008708:	2b16      	cmp	r3, #22
 800870a:	d11e      	bne.n	800874a <__sflush_r+0xea>
 800870c:	602f      	str	r7, [r5, #0]
 800870e:	2000      	movs	r0, #0
 8008710:	e022      	b.n	8008758 <__sflush_r+0xf8>
 8008712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008716:	b21b      	sxth	r3, r3
 8008718:	e01b      	b.n	8008752 <__sflush_r+0xf2>
 800871a:	690f      	ldr	r7, [r1, #16]
 800871c:	2f00      	cmp	r7, #0
 800871e:	d0f6      	beq.n	800870e <__sflush_r+0xae>
 8008720:	0793      	lsls	r3, r2, #30
 8008722:	680e      	ldr	r6, [r1, #0]
 8008724:	bf08      	it	eq
 8008726:	694b      	ldreq	r3, [r1, #20]
 8008728:	600f      	str	r7, [r1, #0]
 800872a:	bf18      	it	ne
 800872c:	2300      	movne	r3, #0
 800872e:	eba6 0807 	sub.w	r8, r6, r7
 8008732:	608b      	str	r3, [r1, #8]
 8008734:	f1b8 0f00 	cmp.w	r8, #0
 8008738:	dde9      	ble.n	800870e <__sflush_r+0xae>
 800873a:	6a21      	ldr	r1, [r4, #32]
 800873c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800873e:	4643      	mov	r3, r8
 8008740:	463a      	mov	r2, r7
 8008742:	4628      	mov	r0, r5
 8008744:	47b0      	blx	r6
 8008746:	2800      	cmp	r0, #0
 8008748:	dc08      	bgt.n	800875c <__sflush_r+0xfc>
 800874a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800874e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	f04f 30ff 	mov.w	r0, #4294967295
 8008758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800875c:	4407      	add	r7, r0
 800875e:	eba8 0800 	sub.w	r8, r8, r0
 8008762:	e7e7      	b.n	8008734 <__sflush_r+0xd4>
 8008764:	dfbffffe 	.word	0xdfbffffe

08008768 <_fflush_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	690b      	ldr	r3, [r1, #16]
 800876c:	4605      	mov	r5, r0
 800876e:	460c      	mov	r4, r1
 8008770:	b913      	cbnz	r3, 8008778 <_fflush_r+0x10>
 8008772:	2500      	movs	r5, #0
 8008774:	4628      	mov	r0, r5
 8008776:	bd38      	pop	{r3, r4, r5, pc}
 8008778:	b118      	cbz	r0, 8008782 <_fflush_r+0x1a>
 800877a:	6a03      	ldr	r3, [r0, #32]
 800877c:	b90b      	cbnz	r3, 8008782 <_fflush_r+0x1a>
 800877e:	f7fe f9b9 	bl	8006af4 <__sinit>
 8008782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0f3      	beq.n	8008772 <_fflush_r+0xa>
 800878a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800878c:	07d0      	lsls	r0, r2, #31
 800878e:	d404      	bmi.n	800879a <_fflush_r+0x32>
 8008790:	0599      	lsls	r1, r3, #22
 8008792:	d402      	bmi.n	800879a <_fflush_r+0x32>
 8008794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008796:	f7fe fbda 	bl	8006f4e <__retarget_lock_acquire_recursive>
 800879a:	4628      	mov	r0, r5
 800879c:	4621      	mov	r1, r4
 800879e:	f7ff ff5f 	bl	8008660 <__sflush_r>
 80087a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087a4:	07da      	lsls	r2, r3, #31
 80087a6:	4605      	mov	r5, r0
 80087a8:	d4e4      	bmi.n	8008774 <_fflush_r+0xc>
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	059b      	lsls	r3, r3, #22
 80087ae:	d4e1      	bmi.n	8008774 <_fflush_r+0xc>
 80087b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087b2:	f7fe fbcd 	bl	8006f50 <__retarget_lock_release_recursive>
 80087b6:	e7dd      	b.n	8008774 <_fflush_r+0xc>

080087b8 <__swhatbuf_r>:
 80087b8:	b570      	push	{r4, r5, r6, lr}
 80087ba:	460c      	mov	r4, r1
 80087bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c0:	2900      	cmp	r1, #0
 80087c2:	b096      	sub	sp, #88	@ 0x58
 80087c4:	4615      	mov	r5, r2
 80087c6:	461e      	mov	r6, r3
 80087c8:	da0d      	bge.n	80087e6 <__swhatbuf_r+0x2e>
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80087d0:	f04f 0100 	mov.w	r1, #0
 80087d4:	bf14      	ite	ne
 80087d6:	2340      	movne	r3, #64	@ 0x40
 80087d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80087dc:	2000      	movs	r0, #0
 80087de:	6031      	str	r1, [r6, #0]
 80087e0:	602b      	str	r3, [r5, #0]
 80087e2:	b016      	add	sp, #88	@ 0x58
 80087e4:	bd70      	pop	{r4, r5, r6, pc}
 80087e6:	466a      	mov	r2, sp
 80087e8:	f000 f862 	bl	80088b0 <_fstat_r>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	dbec      	blt.n	80087ca <__swhatbuf_r+0x12>
 80087f0:	9901      	ldr	r1, [sp, #4]
 80087f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087fa:	4259      	negs	r1, r3
 80087fc:	4159      	adcs	r1, r3
 80087fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008802:	e7eb      	b.n	80087dc <__swhatbuf_r+0x24>

08008804 <__smakebuf_r>:
 8008804:	898b      	ldrh	r3, [r1, #12]
 8008806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008808:	079d      	lsls	r5, r3, #30
 800880a:	4606      	mov	r6, r0
 800880c:	460c      	mov	r4, r1
 800880e:	d507      	bpl.n	8008820 <__smakebuf_r+0x1c>
 8008810:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	6123      	str	r3, [r4, #16]
 8008818:	2301      	movs	r3, #1
 800881a:	6163      	str	r3, [r4, #20]
 800881c:	b003      	add	sp, #12
 800881e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008820:	ab01      	add	r3, sp, #4
 8008822:	466a      	mov	r2, sp
 8008824:	f7ff ffc8 	bl	80087b8 <__swhatbuf_r>
 8008828:	9f00      	ldr	r7, [sp, #0]
 800882a:	4605      	mov	r5, r0
 800882c:	4639      	mov	r1, r7
 800882e:	4630      	mov	r0, r6
 8008830:	f7fd fb3e 	bl	8005eb0 <_malloc_r>
 8008834:	b948      	cbnz	r0, 800884a <__smakebuf_r+0x46>
 8008836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800883a:	059a      	lsls	r2, r3, #22
 800883c:	d4ee      	bmi.n	800881c <__smakebuf_r+0x18>
 800883e:	f023 0303 	bic.w	r3, r3, #3
 8008842:	f043 0302 	orr.w	r3, r3, #2
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	e7e2      	b.n	8008810 <__smakebuf_r+0xc>
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	6020      	str	r0, [r4, #0]
 800884e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008852:	81a3      	strh	r3, [r4, #12]
 8008854:	9b01      	ldr	r3, [sp, #4]
 8008856:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800885a:	b15b      	cbz	r3, 8008874 <__smakebuf_r+0x70>
 800885c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008860:	4630      	mov	r0, r6
 8008862:	f000 f837 	bl	80088d4 <_isatty_r>
 8008866:	b128      	cbz	r0, 8008874 <__smakebuf_r+0x70>
 8008868:	89a3      	ldrh	r3, [r4, #12]
 800886a:	f023 0303 	bic.w	r3, r3, #3
 800886e:	f043 0301 	orr.w	r3, r3, #1
 8008872:	81a3      	strh	r3, [r4, #12]
 8008874:	89a3      	ldrh	r3, [r4, #12]
 8008876:	431d      	orrs	r5, r3
 8008878:	81a5      	strh	r5, [r4, #12]
 800887a:	e7cf      	b.n	800881c <__smakebuf_r+0x18>

0800887c <memmove>:
 800887c:	4288      	cmp	r0, r1
 800887e:	b510      	push	{r4, lr}
 8008880:	eb01 0402 	add.w	r4, r1, r2
 8008884:	d902      	bls.n	800888c <memmove+0x10>
 8008886:	4284      	cmp	r4, r0
 8008888:	4623      	mov	r3, r4
 800888a:	d807      	bhi.n	800889c <memmove+0x20>
 800888c:	1e43      	subs	r3, r0, #1
 800888e:	42a1      	cmp	r1, r4
 8008890:	d008      	beq.n	80088a4 <memmove+0x28>
 8008892:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008896:	f803 2f01 	strb.w	r2, [r3, #1]!
 800889a:	e7f8      	b.n	800888e <memmove+0x12>
 800889c:	4402      	add	r2, r0
 800889e:	4601      	mov	r1, r0
 80088a0:	428a      	cmp	r2, r1
 80088a2:	d100      	bne.n	80088a6 <memmove+0x2a>
 80088a4:	bd10      	pop	{r4, pc}
 80088a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088ae:	e7f7      	b.n	80088a0 <memmove+0x24>

080088b0 <_fstat_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	4d07      	ldr	r5, [pc, #28]	@ (80088d0 <_fstat_r+0x20>)
 80088b4:	2300      	movs	r3, #0
 80088b6:	4604      	mov	r4, r0
 80088b8:	4608      	mov	r0, r1
 80088ba:	4611      	mov	r1, r2
 80088bc:	602b      	str	r3, [r5, #0]
 80088be:	f7f8 fe37 	bl	8001530 <_fstat>
 80088c2:	1c43      	adds	r3, r0, #1
 80088c4:	d102      	bne.n	80088cc <_fstat_r+0x1c>
 80088c6:	682b      	ldr	r3, [r5, #0]
 80088c8:	b103      	cbz	r3, 80088cc <_fstat_r+0x1c>
 80088ca:	6023      	str	r3, [r4, #0]
 80088cc:	bd38      	pop	{r3, r4, r5, pc}
 80088ce:	bf00      	nop
 80088d0:	200006c4 	.word	0x200006c4

080088d4 <_isatty_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	4d06      	ldr	r5, [pc, #24]	@ (80088f0 <_isatty_r+0x1c>)
 80088d8:	2300      	movs	r3, #0
 80088da:	4604      	mov	r4, r0
 80088dc:	4608      	mov	r0, r1
 80088de:	602b      	str	r3, [r5, #0]
 80088e0:	f7f8 fe36 	bl	8001550 <_isatty>
 80088e4:	1c43      	adds	r3, r0, #1
 80088e6:	d102      	bne.n	80088ee <_isatty_r+0x1a>
 80088e8:	682b      	ldr	r3, [r5, #0]
 80088ea:	b103      	cbz	r3, 80088ee <_isatty_r+0x1a>
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	200006c4 	.word	0x200006c4

080088f4 <__assert_func>:
 80088f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088f6:	4614      	mov	r4, r2
 80088f8:	461a      	mov	r2, r3
 80088fa:	4b09      	ldr	r3, [pc, #36]	@ (8008920 <__assert_func+0x2c>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4605      	mov	r5, r0
 8008900:	68d8      	ldr	r0, [r3, #12]
 8008902:	b954      	cbnz	r4, 800891a <__assert_func+0x26>
 8008904:	4b07      	ldr	r3, [pc, #28]	@ (8008924 <__assert_func+0x30>)
 8008906:	461c      	mov	r4, r3
 8008908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800890c:	9100      	str	r1, [sp, #0]
 800890e:	462b      	mov	r3, r5
 8008910:	4905      	ldr	r1, [pc, #20]	@ (8008928 <__assert_func+0x34>)
 8008912:	f000 f841 	bl	8008998 <fiprintf>
 8008916:	f000 f851 	bl	80089bc <abort>
 800891a:	4b04      	ldr	r3, [pc, #16]	@ (800892c <__assert_func+0x38>)
 800891c:	e7f4      	b.n	8008908 <__assert_func+0x14>
 800891e:	bf00      	nop
 8008920:	20000018 	.word	0x20000018
 8008924:	08009146 	.word	0x08009146
 8008928:	08009118 	.word	0x08009118
 800892c:	0800910b 	.word	0x0800910b

08008930 <_calloc_r>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	fba1 5402 	umull	r5, r4, r1, r2
 8008936:	b93c      	cbnz	r4, 8008948 <_calloc_r+0x18>
 8008938:	4629      	mov	r1, r5
 800893a:	f7fd fab9 	bl	8005eb0 <_malloc_r>
 800893e:	4606      	mov	r6, r0
 8008940:	b928      	cbnz	r0, 800894e <_calloc_r+0x1e>
 8008942:	2600      	movs	r6, #0
 8008944:	4630      	mov	r0, r6
 8008946:	bd70      	pop	{r4, r5, r6, pc}
 8008948:	220c      	movs	r2, #12
 800894a:	6002      	str	r2, [r0, #0]
 800894c:	e7f9      	b.n	8008942 <_calloc_r+0x12>
 800894e:	462a      	mov	r2, r5
 8008950:	4621      	mov	r1, r4
 8008952:	f7fe fa6f 	bl	8006e34 <memset>
 8008956:	e7f5      	b.n	8008944 <_calloc_r+0x14>

08008958 <__ascii_mbtowc>:
 8008958:	b082      	sub	sp, #8
 800895a:	b901      	cbnz	r1, 800895e <__ascii_mbtowc+0x6>
 800895c:	a901      	add	r1, sp, #4
 800895e:	b142      	cbz	r2, 8008972 <__ascii_mbtowc+0x1a>
 8008960:	b14b      	cbz	r3, 8008976 <__ascii_mbtowc+0x1e>
 8008962:	7813      	ldrb	r3, [r2, #0]
 8008964:	600b      	str	r3, [r1, #0]
 8008966:	7812      	ldrb	r2, [r2, #0]
 8008968:	1e10      	subs	r0, r2, #0
 800896a:	bf18      	it	ne
 800896c:	2001      	movne	r0, #1
 800896e:	b002      	add	sp, #8
 8008970:	4770      	bx	lr
 8008972:	4610      	mov	r0, r2
 8008974:	e7fb      	b.n	800896e <__ascii_mbtowc+0x16>
 8008976:	f06f 0001 	mvn.w	r0, #1
 800897a:	e7f8      	b.n	800896e <__ascii_mbtowc+0x16>

0800897c <__ascii_wctomb>:
 800897c:	4603      	mov	r3, r0
 800897e:	4608      	mov	r0, r1
 8008980:	b141      	cbz	r1, 8008994 <__ascii_wctomb+0x18>
 8008982:	2aff      	cmp	r2, #255	@ 0xff
 8008984:	d904      	bls.n	8008990 <__ascii_wctomb+0x14>
 8008986:	228a      	movs	r2, #138	@ 0x8a
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	f04f 30ff 	mov.w	r0, #4294967295
 800898e:	4770      	bx	lr
 8008990:	700a      	strb	r2, [r1, #0]
 8008992:	2001      	movs	r0, #1
 8008994:	4770      	bx	lr
	...

08008998 <fiprintf>:
 8008998:	b40e      	push	{r1, r2, r3}
 800899a:	b503      	push	{r0, r1, lr}
 800899c:	4601      	mov	r1, r0
 800899e:	ab03      	add	r3, sp, #12
 80089a0:	4805      	ldr	r0, [pc, #20]	@ (80089b8 <fiprintf+0x20>)
 80089a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a6:	6800      	ldr	r0, [r0, #0]
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	f000 f837 	bl	8008a1c <_vfiprintf_r>
 80089ae:	b002      	add	sp, #8
 80089b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089b4:	b003      	add	sp, #12
 80089b6:	4770      	bx	lr
 80089b8:	20000018 	.word	0x20000018

080089bc <abort>:
 80089bc:	b508      	push	{r3, lr}
 80089be:	2006      	movs	r0, #6
 80089c0:	f000 f96c 	bl	8008c9c <raise>
 80089c4:	2001      	movs	r0, #1
 80089c6:	f7f8 fd63 	bl	8001490 <_exit>

080089ca <__sfputc_r>:
 80089ca:	6893      	ldr	r3, [r2, #8]
 80089cc:	3b01      	subs	r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	b410      	push	{r4}
 80089d2:	6093      	str	r3, [r2, #8]
 80089d4:	da08      	bge.n	80089e8 <__sfputc_r+0x1e>
 80089d6:	6994      	ldr	r4, [r2, #24]
 80089d8:	42a3      	cmp	r3, r4
 80089da:	db01      	blt.n	80089e0 <__sfputc_r+0x16>
 80089dc:	290a      	cmp	r1, #10
 80089de:	d103      	bne.n	80089e8 <__sfputc_r+0x1e>
 80089e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089e4:	f7fe b991 	b.w	8006d0a <__swbuf_r>
 80089e8:	6813      	ldr	r3, [r2, #0]
 80089ea:	1c58      	adds	r0, r3, #1
 80089ec:	6010      	str	r0, [r2, #0]
 80089ee:	7019      	strb	r1, [r3, #0]
 80089f0:	4608      	mov	r0, r1
 80089f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <__sfputs_r>:
 80089f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fa:	4606      	mov	r6, r0
 80089fc:	460f      	mov	r7, r1
 80089fe:	4614      	mov	r4, r2
 8008a00:	18d5      	adds	r5, r2, r3
 8008a02:	42ac      	cmp	r4, r5
 8008a04:	d101      	bne.n	8008a0a <__sfputs_r+0x12>
 8008a06:	2000      	movs	r0, #0
 8008a08:	e007      	b.n	8008a1a <__sfputs_r+0x22>
 8008a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a0e:	463a      	mov	r2, r7
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7ff ffda 	bl	80089ca <__sfputc_r>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	d1f3      	bne.n	8008a02 <__sfputs_r+0xa>
 8008a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a1c <_vfiprintf_r>:
 8008a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a20:	460d      	mov	r5, r1
 8008a22:	b09d      	sub	sp, #116	@ 0x74
 8008a24:	4614      	mov	r4, r2
 8008a26:	4698      	mov	r8, r3
 8008a28:	4606      	mov	r6, r0
 8008a2a:	b118      	cbz	r0, 8008a34 <_vfiprintf_r+0x18>
 8008a2c:	6a03      	ldr	r3, [r0, #32]
 8008a2e:	b90b      	cbnz	r3, 8008a34 <_vfiprintf_r+0x18>
 8008a30:	f7fe f860 	bl	8006af4 <__sinit>
 8008a34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a36:	07d9      	lsls	r1, r3, #31
 8008a38:	d405      	bmi.n	8008a46 <_vfiprintf_r+0x2a>
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	059a      	lsls	r2, r3, #22
 8008a3e:	d402      	bmi.n	8008a46 <_vfiprintf_r+0x2a>
 8008a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a42:	f7fe fa84 	bl	8006f4e <__retarget_lock_acquire_recursive>
 8008a46:	89ab      	ldrh	r3, [r5, #12]
 8008a48:	071b      	lsls	r3, r3, #28
 8008a4a:	d501      	bpl.n	8008a50 <_vfiprintf_r+0x34>
 8008a4c:	692b      	ldr	r3, [r5, #16]
 8008a4e:	b99b      	cbnz	r3, 8008a78 <_vfiprintf_r+0x5c>
 8008a50:	4629      	mov	r1, r5
 8008a52:	4630      	mov	r0, r6
 8008a54:	f7fe f998 	bl	8006d88 <__swsetup_r>
 8008a58:	b170      	cbz	r0, 8008a78 <_vfiprintf_r+0x5c>
 8008a5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a5c:	07dc      	lsls	r4, r3, #31
 8008a5e:	d504      	bpl.n	8008a6a <_vfiprintf_r+0x4e>
 8008a60:	f04f 30ff 	mov.w	r0, #4294967295
 8008a64:	b01d      	add	sp, #116	@ 0x74
 8008a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a6a:	89ab      	ldrh	r3, [r5, #12]
 8008a6c:	0598      	lsls	r0, r3, #22
 8008a6e:	d4f7      	bmi.n	8008a60 <_vfiprintf_r+0x44>
 8008a70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a72:	f7fe fa6d 	bl	8006f50 <__retarget_lock_release_recursive>
 8008a76:	e7f3      	b.n	8008a60 <_vfiprintf_r+0x44>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a7c:	2320      	movs	r3, #32
 8008a7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a82:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a86:	2330      	movs	r3, #48	@ 0x30
 8008a88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c38 <_vfiprintf_r+0x21c>
 8008a8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a90:	f04f 0901 	mov.w	r9, #1
 8008a94:	4623      	mov	r3, r4
 8008a96:	469a      	mov	sl, r3
 8008a98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a9c:	b10a      	cbz	r2, 8008aa2 <_vfiprintf_r+0x86>
 8008a9e:	2a25      	cmp	r2, #37	@ 0x25
 8008aa0:	d1f9      	bne.n	8008a96 <_vfiprintf_r+0x7a>
 8008aa2:	ebba 0b04 	subs.w	fp, sl, r4
 8008aa6:	d00b      	beq.n	8008ac0 <_vfiprintf_r+0xa4>
 8008aa8:	465b      	mov	r3, fp
 8008aaa:	4622      	mov	r2, r4
 8008aac:	4629      	mov	r1, r5
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f7ff ffa2 	bl	80089f8 <__sfputs_r>
 8008ab4:	3001      	adds	r0, #1
 8008ab6:	f000 80a7 	beq.w	8008c08 <_vfiprintf_r+0x1ec>
 8008aba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008abc:	445a      	add	r2, fp
 8008abe:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 809f 	beq.w	8008c08 <_vfiprintf_r+0x1ec>
 8008aca:	2300      	movs	r3, #0
 8008acc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ad4:	f10a 0a01 	add.w	sl, sl, #1
 8008ad8:	9304      	str	r3, [sp, #16]
 8008ada:	9307      	str	r3, [sp, #28]
 8008adc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ae0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ae2:	4654      	mov	r4, sl
 8008ae4:	2205      	movs	r2, #5
 8008ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aea:	4853      	ldr	r0, [pc, #332]	@ (8008c38 <_vfiprintf_r+0x21c>)
 8008aec:	f7f7 fb80 	bl	80001f0 <memchr>
 8008af0:	9a04      	ldr	r2, [sp, #16]
 8008af2:	b9d8      	cbnz	r0, 8008b2c <_vfiprintf_r+0x110>
 8008af4:	06d1      	lsls	r1, r2, #27
 8008af6:	bf44      	itt	mi
 8008af8:	2320      	movmi	r3, #32
 8008afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008afe:	0713      	lsls	r3, r2, #28
 8008b00:	bf44      	itt	mi
 8008b02:	232b      	movmi	r3, #43	@ 0x2b
 8008b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b08:	f89a 3000 	ldrb.w	r3, [sl]
 8008b0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b0e:	d015      	beq.n	8008b3c <_vfiprintf_r+0x120>
 8008b10:	9a07      	ldr	r2, [sp, #28]
 8008b12:	4654      	mov	r4, sl
 8008b14:	2000      	movs	r0, #0
 8008b16:	f04f 0c0a 	mov.w	ip, #10
 8008b1a:	4621      	mov	r1, r4
 8008b1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b20:	3b30      	subs	r3, #48	@ 0x30
 8008b22:	2b09      	cmp	r3, #9
 8008b24:	d94b      	bls.n	8008bbe <_vfiprintf_r+0x1a2>
 8008b26:	b1b0      	cbz	r0, 8008b56 <_vfiprintf_r+0x13a>
 8008b28:	9207      	str	r2, [sp, #28]
 8008b2a:	e014      	b.n	8008b56 <_vfiprintf_r+0x13a>
 8008b2c:	eba0 0308 	sub.w	r3, r0, r8
 8008b30:	fa09 f303 	lsl.w	r3, r9, r3
 8008b34:	4313      	orrs	r3, r2
 8008b36:	9304      	str	r3, [sp, #16]
 8008b38:	46a2      	mov	sl, r4
 8008b3a:	e7d2      	b.n	8008ae2 <_vfiprintf_r+0xc6>
 8008b3c:	9b03      	ldr	r3, [sp, #12]
 8008b3e:	1d19      	adds	r1, r3, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	9103      	str	r1, [sp, #12]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	bfbb      	ittet	lt
 8008b48:	425b      	neglt	r3, r3
 8008b4a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b4e:	9307      	strge	r3, [sp, #28]
 8008b50:	9307      	strlt	r3, [sp, #28]
 8008b52:	bfb8      	it	lt
 8008b54:	9204      	strlt	r2, [sp, #16]
 8008b56:	7823      	ldrb	r3, [r4, #0]
 8008b58:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b5a:	d10a      	bne.n	8008b72 <_vfiprintf_r+0x156>
 8008b5c:	7863      	ldrb	r3, [r4, #1]
 8008b5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b60:	d132      	bne.n	8008bc8 <_vfiprintf_r+0x1ac>
 8008b62:	9b03      	ldr	r3, [sp, #12]
 8008b64:	1d1a      	adds	r2, r3, #4
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	9203      	str	r2, [sp, #12]
 8008b6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b6e:	3402      	adds	r4, #2
 8008b70:	9305      	str	r3, [sp, #20]
 8008b72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c48 <_vfiprintf_r+0x22c>
 8008b76:	7821      	ldrb	r1, [r4, #0]
 8008b78:	2203      	movs	r2, #3
 8008b7a:	4650      	mov	r0, sl
 8008b7c:	f7f7 fb38 	bl	80001f0 <memchr>
 8008b80:	b138      	cbz	r0, 8008b92 <_vfiprintf_r+0x176>
 8008b82:	9b04      	ldr	r3, [sp, #16]
 8008b84:	eba0 000a 	sub.w	r0, r0, sl
 8008b88:	2240      	movs	r2, #64	@ 0x40
 8008b8a:	4082      	lsls	r2, r0
 8008b8c:	4313      	orrs	r3, r2
 8008b8e:	3401      	adds	r4, #1
 8008b90:	9304      	str	r3, [sp, #16]
 8008b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b96:	4829      	ldr	r0, [pc, #164]	@ (8008c3c <_vfiprintf_r+0x220>)
 8008b98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b9c:	2206      	movs	r2, #6
 8008b9e:	f7f7 fb27 	bl	80001f0 <memchr>
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d03f      	beq.n	8008c26 <_vfiprintf_r+0x20a>
 8008ba6:	4b26      	ldr	r3, [pc, #152]	@ (8008c40 <_vfiprintf_r+0x224>)
 8008ba8:	bb1b      	cbnz	r3, 8008bf2 <_vfiprintf_r+0x1d6>
 8008baa:	9b03      	ldr	r3, [sp, #12]
 8008bac:	3307      	adds	r3, #7
 8008bae:	f023 0307 	bic.w	r3, r3, #7
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	9303      	str	r3, [sp, #12]
 8008bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bb8:	443b      	add	r3, r7
 8008bba:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bbc:	e76a      	b.n	8008a94 <_vfiprintf_r+0x78>
 8008bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	2001      	movs	r0, #1
 8008bc6:	e7a8      	b.n	8008b1a <_vfiprintf_r+0xfe>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	3401      	adds	r4, #1
 8008bcc:	9305      	str	r3, [sp, #20]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	f04f 0c0a 	mov.w	ip, #10
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bda:	3a30      	subs	r2, #48	@ 0x30
 8008bdc:	2a09      	cmp	r2, #9
 8008bde:	d903      	bls.n	8008be8 <_vfiprintf_r+0x1cc>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d0c6      	beq.n	8008b72 <_vfiprintf_r+0x156>
 8008be4:	9105      	str	r1, [sp, #20]
 8008be6:	e7c4      	b.n	8008b72 <_vfiprintf_r+0x156>
 8008be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bec:	4604      	mov	r4, r0
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e7f0      	b.n	8008bd4 <_vfiprintf_r+0x1b8>
 8008bf2:	ab03      	add	r3, sp, #12
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	462a      	mov	r2, r5
 8008bf8:	4b12      	ldr	r3, [pc, #72]	@ (8008c44 <_vfiprintf_r+0x228>)
 8008bfa:	a904      	add	r1, sp, #16
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	f7fd fb35 	bl	800626c <_printf_float>
 8008c02:	4607      	mov	r7, r0
 8008c04:	1c78      	adds	r0, r7, #1
 8008c06:	d1d6      	bne.n	8008bb6 <_vfiprintf_r+0x19a>
 8008c08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c0a:	07d9      	lsls	r1, r3, #31
 8008c0c:	d405      	bmi.n	8008c1a <_vfiprintf_r+0x1fe>
 8008c0e:	89ab      	ldrh	r3, [r5, #12]
 8008c10:	059a      	lsls	r2, r3, #22
 8008c12:	d402      	bmi.n	8008c1a <_vfiprintf_r+0x1fe>
 8008c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c16:	f7fe f99b 	bl	8006f50 <__retarget_lock_release_recursive>
 8008c1a:	89ab      	ldrh	r3, [r5, #12]
 8008c1c:	065b      	lsls	r3, r3, #25
 8008c1e:	f53f af1f 	bmi.w	8008a60 <_vfiprintf_r+0x44>
 8008c22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c24:	e71e      	b.n	8008a64 <_vfiprintf_r+0x48>
 8008c26:	ab03      	add	r3, sp, #12
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	462a      	mov	r2, r5
 8008c2c:	4b05      	ldr	r3, [pc, #20]	@ (8008c44 <_vfiprintf_r+0x228>)
 8008c2e:	a904      	add	r1, sp, #16
 8008c30:	4630      	mov	r0, r6
 8008c32:	f7fd fdb3 	bl	800679c <_printf_i>
 8008c36:	e7e4      	b.n	8008c02 <_vfiprintf_r+0x1e6>
 8008c38:	080090f0 	.word	0x080090f0
 8008c3c:	080090fa 	.word	0x080090fa
 8008c40:	0800626d 	.word	0x0800626d
 8008c44:	080089f9 	.word	0x080089f9
 8008c48:	080090f6 	.word	0x080090f6

08008c4c <_raise_r>:
 8008c4c:	291f      	cmp	r1, #31
 8008c4e:	b538      	push	{r3, r4, r5, lr}
 8008c50:	4605      	mov	r5, r0
 8008c52:	460c      	mov	r4, r1
 8008c54:	d904      	bls.n	8008c60 <_raise_r+0x14>
 8008c56:	2316      	movs	r3, #22
 8008c58:	6003      	str	r3, [r0, #0]
 8008c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5e:	bd38      	pop	{r3, r4, r5, pc}
 8008c60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c62:	b112      	cbz	r2, 8008c6a <_raise_r+0x1e>
 8008c64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c68:	b94b      	cbnz	r3, 8008c7e <_raise_r+0x32>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f000 f830 	bl	8008cd0 <_getpid_r>
 8008c70:	4622      	mov	r2, r4
 8008c72:	4601      	mov	r1, r0
 8008c74:	4628      	mov	r0, r5
 8008c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c7a:	f000 b817 	b.w	8008cac <_kill_r>
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d00a      	beq.n	8008c98 <_raise_r+0x4c>
 8008c82:	1c59      	adds	r1, r3, #1
 8008c84:	d103      	bne.n	8008c8e <_raise_r+0x42>
 8008c86:	2316      	movs	r3, #22
 8008c88:	6003      	str	r3, [r0, #0]
 8008c8a:	2001      	movs	r0, #1
 8008c8c:	e7e7      	b.n	8008c5e <_raise_r+0x12>
 8008c8e:	2100      	movs	r1, #0
 8008c90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c94:	4620      	mov	r0, r4
 8008c96:	4798      	blx	r3
 8008c98:	2000      	movs	r0, #0
 8008c9a:	e7e0      	b.n	8008c5e <_raise_r+0x12>

08008c9c <raise>:
 8008c9c:	4b02      	ldr	r3, [pc, #8]	@ (8008ca8 <raise+0xc>)
 8008c9e:	4601      	mov	r1, r0
 8008ca0:	6818      	ldr	r0, [r3, #0]
 8008ca2:	f7ff bfd3 	b.w	8008c4c <_raise_r>
 8008ca6:	bf00      	nop
 8008ca8:	20000018 	.word	0x20000018

08008cac <_kill_r>:
 8008cac:	b538      	push	{r3, r4, r5, lr}
 8008cae:	4d07      	ldr	r5, [pc, #28]	@ (8008ccc <_kill_r+0x20>)
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	4608      	mov	r0, r1
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	602b      	str	r3, [r5, #0]
 8008cba:	f7f8 fbd9 	bl	8001470 <_kill>
 8008cbe:	1c43      	adds	r3, r0, #1
 8008cc0:	d102      	bne.n	8008cc8 <_kill_r+0x1c>
 8008cc2:	682b      	ldr	r3, [r5, #0]
 8008cc4:	b103      	cbz	r3, 8008cc8 <_kill_r+0x1c>
 8008cc6:	6023      	str	r3, [r4, #0]
 8008cc8:	bd38      	pop	{r3, r4, r5, pc}
 8008cca:	bf00      	nop
 8008ccc:	200006c4 	.word	0x200006c4

08008cd0 <_getpid_r>:
 8008cd0:	f7f8 bbc6 	b.w	8001460 <_getpid>

08008cd4 <_init>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	bf00      	nop
 8008cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cda:	bc08      	pop	{r3}
 8008cdc:	469e      	mov	lr, r3
 8008cde:	4770      	bx	lr

08008ce0 <_fini>:
 8008ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce2:	bf00      	nop
 8008ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ce6:	bc08      	pop	{r3}
 8008ce8:	469e      	mov	lr, r3
 8008cea:	4770      	bx	lr
